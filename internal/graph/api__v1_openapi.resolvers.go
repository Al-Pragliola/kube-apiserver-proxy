package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"log"

	"github.com/omissis/kube-apiserver-proxy/internal/graph/generated"
	"github.com/omissis/kube-apiserver-proxy/internal/graph/model"
	"k8s.io/api/core/v1"
	"k8s.io/api/extensions/v1beta1"
	v1beta11 "k8s.io/api/policy/v1beta1"
	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CachingMode is the resolver for the cachingMode field.
func (r *azureDiskResolver) CachingMode(ctx context.Context, obj *v1beta1.FSType) (*string, error) {
	log.Printf("not implemented: CachingMode - cachingMode")

	return nil, nil
}

// DiskName is the resolver for the diskName field.
func (r *azureDiskResolver) DiskName(ctx context.Context, obj *v1beta1.FSType) (string, error) {
	log.Printf("not implemented: DiskName - diskName")

	return "", nil
}

// DiskURI is the resolver for the diskURI field.
func (r *azureDiskResolver) DiskURI(ctx context.Context, obj *v1beta1.FSType) (string, error) {
	log.Printf("not implemented: DiskURI - diskURI")

	return "", nil
}

// FsType is the resolver for the fsType field.
func (r *azureDiskResolver) FsType(ctx context.Context, obj *v1beta1.FSType) (*string, error) {
	log.Printf("not implemented: FsType - fsType")

	return nil, nil
}

// Kind is the resolver for the kind field.
func (r *azureDiskResolver) Kind(ctx context.Context, obj *v1beta1.FSType) (*string, error) {
	log.Printf("not implemented: Kind - kind")

	return nil, nil
}

// ReadOnly is the resolver for the readOnly field.
func (r *azureDiskResolver) ReadOnly(ctx context.Context, obj *v1beta1.FSType) (*bool, error) {
	log.Printf("not implemented: ReadOnly - readOnly")

	return nil, nil
}

// ReadOnly is the resolver for the readOnly field.
func (r *azureFileResolver) ReadOnly(ctx context.Context, obj *v1beta1.FSType) (*bool, error) {
	log.Printf("not implemented: ReadOnly - readOnly")

	return nil, nil
}

// SecretName is the resolver for the secretName field.
func (r *azureFileResolver) SecretName(ctx context.Context, obj *v1beta1.FSType) (string, error) {
	log.Printf("not implemented: SecretName - secretName")

	return "", nil
}

// ShareName is the resolver for the shareName field.
func (r *azureFileResolver) ShareName(ctx context.Context, obj *v1beta1.FSType) (string, error) {
	log.Printf("not implemented: ShareName - shareName")

	return "", nil
}

// Metadata is the resolver for the metadata field.
func (r *bindingResolver) Metadata(ctx context.Context, obj *v1.Binding) (*model.Metadata, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Target is the resolver for the target field.
func (r *bindingResolver) Target(ctx context.Context, obj *v1.Binding) (*model.Target, error) {
	log.Printf("not implemented: Target - target")

	return nil, nil
}

// Add is the resolver for the add field.
func (r *capabilitiesResolver) Add(ctx context.Context, obj *v1.Capabilities) ([]*string, error) {
	log.Printf("not implemented: Add - add")

	return nil, nil
}

// Drop is the resolver for the drop field.
func (r *capabilitiesResolver) Drop(ctx context.Context, obj *v1.Capabilities) ([]*string, error) {
	log.Printf("not implemented: Drop - drop")

	return nil, nil
}

// FsType is the resolver for the fsType field.
func (r *cinderResolver) FsType(ctx context.Context, obj *v1beta1.FSType) (*string, error) {
	log.Printf("not implemented: FsType - fsType")

	return nil, nil
}

// ReadOnly is the resolver for the readOnly field.
func (r *cinderResolver) ReadOnly(ctx context.Context, obj *v1beta1.FSType) (*bool, error) {
	log.Printf("not implemented: ReadOnly - readOnly")

	return nil, nil
}

// SecretRef is the resolver for the secretRef field.
func (r *cinderResolver) SecretRef(ctx context.Context, obj *v1beta1.FSType) (*model.SecretRef3, error) {
	log.Printf("not implemented: SecretRef - secretRef")

	return nil, nil
}

// VolumeID is the resolver for the volumeID field.
func (r *cinderResolver) VolumeID(ctx context.Context, obj *v1beta1.FSType) (string, error) {
	log.Printf("not implemented: VolumeID - volumeID")

	return "", nil
}

// Conditions is the resolver for the conditions field.
func (r *componentStatusResolver) Conditions(ctx context.Context, obj *v1.ComponentStatus) ([]*model.ConditionsListItem, error) {
	log.Printf("not implemented: Conditions - conditions")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *componentStatusResolver) Metadata(ctx context.Context, obj *v1.ComponentStatus) (*model.Metadata, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *componentStatusListResolver) Items(ctx context.Context, obj *v1.ComponentStatusList) ([]*model.ItemsListItem, error) {
	log.Printf("not implemented: Items - items")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *componentStatusListResolver) Metadata(ctx context.Context, obj *v1.ComponentStatusList) (*model.Metadata2, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// BinaryData is the resolver for the binaryData field.
func (r *configMapResolver) BinaryData(ctx context.Context, obj *v1.ConfigMap) (*string, error) {
	log.Printf("not implemented: BinaryData - binaryData")

	return nil, nil
}

// Data is the resolver for the data field.
func (r *configMapResolver) Data(ctx context.Context, obj *v1.ConfigMap) (*string, error) {
	log.Printf("not implemented: Data - data")

	return nil, nil
}

// Immutable is the resolver for the immutable field.
func (r *configMapResolver) Immutable(ctx context.Context, obj *v1.ConfigMap) (*bool, error) {
	log.Printf("not implemented: Immutable - immutable")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *configMapResolver) Metadata(ctx context.Context, obj *v1.ConfigMap) (*model.Metadata, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *configMapListResolver) Items(ctx context.Context, obj *v1.ConfigMapList) ([]*model.Items2ListItem, error) {
	log.Printf("not implemented: Items - items")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *configMapListResolver) Metadata(ctx context.Context, obj *v1.ConfigMapList) (*model.Metadata3, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// GracePeriodSeconds is the resolver for the gracePeriodSeconds field.
func (r *deleteOptionsResolver) GracePeriodSeconds(ctx context.Context, obj *v11.DeleteOptions) (*string, error) {
	log.Printf("not implemented: GracePeriodSeconds - gracePeriodSeconds")

	return nil, nil
}

// Preconditions is the resolver for the preconditions field.
func (r *deleteOptionsResolver) Preconditions(ctx context.Context, obj *v11.DeleteOptions) (*v1.Preconditions, error) {
	log.Printf("not implemented: Preconditions - preconditions")

	return nil, nil
}

// PropagationPolicy is the resolver for the propagationPolicy field.
func (r *deleteOptionsResolver) PropagationPolicy(ctx context.Context, obj *v11.DeleteOptions) (*string, error) {
	log.Printf("not implemented: PropagationPolicy - propagationPolicy")

	return nil, nil
}

// DefaultMode is the resolver for the defaultMode field.
func (r *downwardAPIResolver) DefaultMode(ctx context.Context, obj *v1beta1.FSType) (*int, error) {
	log.Printf("not implemented: DefaultMode - defaultMode")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *downwardAPIResolver) Items(ctx context.Context, obj *v1beta1.FSType) ([]*model.Items10ListItem, error) {
	log.Printf("not implemented: Items - items")

	return nil, nil
}

// Medium is the resolver for the medium field.
func (r *emptyDirResolver) Medium(ctx context.Context, obj *v1beta1.FSType) (*string, error) {
	log.Printf("not implemented: Medium - medium")

	return nil, nil
}

// SizeLimit is the resolver for the sizeLimit field.
func (r *emptyDirResolver) SizeLimit(ctx context.Context, obj *v1beta1.FSType) (*string, error) {
	log.Printf("not implemented: SizeLimit - sizeLimit")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *endpointsResolver) Metadata(ctx context.Context, obj *v1.Endpoints) (*model.Metadata, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Subsets is the resolver for the subsets field.
func (r *endpointsResolver) Subsets(ctx context.Context, obj *v1.Endpoints) ([]*model.SubsetsListItem, error) {
	log.Printf("not implemented: Subsets - subsets")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *endpointsListResolver) Items(ctx context.Context, obj *v1.EndpointsList) ([]*model.Items3ListItem, error) {
	log.Printf("not implemented: Items - items")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *endpointsListResolver) Metadata(ctx context.Context, obj *v1.EndpointsList) (*model.Metadata2, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// EventTime is the resolver for the eventTime field.
func (r *eventResolver) EventTime(ctx context.Context, obj *v1.Event) (*string, error) {
	log.Printf("not implemented: EventTime - eventTime")

	return nil, nil
}

// FirstTimestamp is the resolver for the firstTimestamp field.
func (r *eventResolver) FirstTimestamp(ctx context.Context, obj *v1.Event) (*string, error) {
	log.Printf("not implemented: FirstTimestamp - firstTimestamp")

	return nil, nil
}

// InvolvedObject is the resolver for the involvedObject field.
func (r *eventResolver) InvolvedObject(ctx context.Context, obj *v1.Event) (*model.InvolvedObject, error) {
	log.Printf("not implemented: InvolvedObject - involvedObject")

	return nil, nil
}

// LastTimestamp is the resolver for the lastTimestamp field.
func (r *eventResolver) LastTimestamp(ctx context.Context, obj *v1.Event) (*string, error) {
	log.Printf("not implemented: LastTimestamp - lastTimestamp")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *eventResolver) Metadata(ctx context.Context, obj *v1.Event) (*model.Metadata, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Related is the resolver for the related field.
func (r *eventResolver) Related(ctx context.Context, obj *v1.Event) (*model.Related, error) {
	log.Printf("not implemented: Related - related")

	return nil, nil
}

// ReportingComponent is the resolver for the reportingComponent field.
func (r *eventResolver) ReportingComponent(ctx context.Context, obj *v1.Event) (*string, error) {
	log.Printf("not implemented: ReportingComponent - reportingComponent")

	return nil, nil
}

// Series is the resolver for the series field.
func (r *eventResolver) Series(ctx context.Context, obj *v1.Event) (*model.Series, error) {
	log.Printf("not implemented: Series - series")

	return nil, nil
}

// Source is the resolver for the source field.
func (r *eventResolver) Source(ctx context.Context, obj *v1.Event) (*model.Source, error) {
	log.Printf("not implemented: Source - source")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *eventListResolver) Items(ctx context.Context, obj *v1.EventList) ([]*model.Items4ListItem, error) {
	log.Printf("not implemented: Items - items")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *eventListResolver) Metadata(ctx context.Context, obj *v1.EventList) (*model.Metadata2, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Driver is the resolver for the driver field.
func (r *flexVolumeResolver) Driver(ctx context.Context, obj *v1beta1.FSType) (string, error) {
	log.Printf("not implemented: Driver - driver")

	return "", nil
}

// FsType is the resolver for the fsType field.
func (r *flexVolumeResolver) FsType(ctx context.Context, obj *v1beta1.FSType) (*string, error) {
	log.Printf("not implemented: FsType - fsType")

	return nil, nil
}

// Options is the resolver for the options field.
func (r *flexVolumeResolver) Options(ctx context.Context, obj *v1beta1.FSType) (*string, error) {
	log.Printf("not implemented: Options - options")

	return nil, nil
}

// ReadOnly is the resolver for the readOnly field.
func (r *flexVolumeResolver) ReadOnly(ctx context.Context, obj *v1beta1.FSType) (*bool, error) {
	log.Printf("not implemented: ReadOnly - readOnly")

	return nil, nil
}

// SecretRef is the resolver for the secretRef field.
func (r *flexVolumeResolver) SecretRef(ctx context.Context, obj *v1beta1.FSType) (*model.SecretRef4, error) {
	log.Printf("not implemented: SecretRef - secretRef")

	return nil, nil
}

// DatasetName is the resolver for the datasetName field.
func (r *flockerResolver) DatasetName(ctx context.Context, obj *v1beta1.FSType) (*string, error) {
	log.Printf("not implemented: DatasetName - datasetName")

	return nil, nil
}

// DatasetUUID is the resolver for the datasetUUID field.
func (r *flockerResolver) DatasetUUID(ctx context.Context, obj *v1beta1.FSType) (*string, error) {
	log.Printf("not implemented: DatasetUUID - datasetUUID")

	return nil, nil
}

// Directory is the resolver for the directory field.
func (r *gitRepoResolver) Directory(ctx context.Context, obj *v1beta1.FSType) (*string, error) {
	log.Printf("not implemented: Directory - directory")

	return nil, nil
}

// Repository is the resolver for the repository field.
func (r *gitRepoResolver) Repository(ctx context.Context, obj *v1beta1.FSType) (string, error) {
	log.Printf("not implemented: Repository - repository")

	return "", nil
}

// Revision is the resolver for the revision field.
func (r *gitRepoResolver) Revision(ctx context.Context, obj *v1beta1.FSType) (*string, error) {
	log.Printf("not implemented: Revision - revision")

	return nil, nil
}

// Endpoints is the resolver for the endpoints field.
func (r *glusterfsResolver) Endpoints(ctx context.Context, obj *v1beta1.FSType) (string, error) {
	log.Printf("not implemented: Endpoints - endpoints")

	return "", nil
}

// Path is the resolver for the path field.
func (r *glusterfsResolver) Path(ctx context.Context, obj *v1beta1.FSType) (string, error) {
	log.Printf("not implemented: Path - path")

	return "", nil
}

// ReadOnly is the resolver for the readOnly field.
func (r *glusterfsResolver) ReadOnly(ctx context.Context, obj *v1beta1.FSType) (*bool, error) {
	log.Printf("not implemented: ReadOnly - readOnly")

	return nil, nil
}

// Path is the resolver for the path field.
func (r *hostPathResolver) Path(ctx context.Context, obj *v1beta1.FSType) (string, error) {
	log.Printf("not implemented: Path - path")

	return "", nil
}

// Type is the resolver for the type field.
func (r *hostPathResolver) Type(ctx context.Context, obj *v1beta1.FSType) (*string, error) {
	log.Printf("not implemented: Type - type")

	return nil, nil
}

// MatchExpressions is the resolver for the matchExpressions field.
func (r *labelSelectorResolver) MatchExpressions(ctx context.Context, obj *v11.LabelSelector) ([]*model.MatchExpressionsListItem, error) {
	log.Printf("not implemented: MatchExpressions - matchExpressions")

	return nil, nil
}

// MatchLabels is the resolver for the matchLabels field.
func (r *labelSelectorResolver) MatchLabels(ctx context.Context, obj *v11.LabelSelector) (*string, error) {
	log.Printf("not implemented: MatchLabels - matchLabels")

	return nil, nil
}

// PostStart is the resolver for the postStart field.
func (r *lifecycleResolver) PostStart(ctx context.Context, obj *v1.Lifecycle) (*model.PostStart, error) {
	log.Printf("not implemented: PostStart - postStart")

	return nil, nil
}

// PreStop is the resolver for the preStop field.
func (r *lifecycleResolver) PreStop(ctx context.Context, obj *v1.Lifecycle) (*model.PreStop, error) {
	log.Printf("not implemented: PreStop - preStop")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *limitRangeResolver) Metadata(ctx context.Context, obj *v1.LimitRange) (*model.Metadata, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Spec is the resolver for the spec field.
func (r *limitRangeResolver) Spec(ctx context.Context, obj *v1.LimitRange) (*model.Spec, error) {
	log.Printf("not implemented: Spec - spec")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *limitRangeListResolver) Items(ctx context.Context, obj *v1.LimitRangeList) ([]*model.Items5ListItem, error) {
	log.Printf("not implemented: Items - items")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *limitRangeListResolver) Metadata(ctx context.Context, obj *v1.LimitRangeList) (*model.Metadata2, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// ConnectCoreV1DeleteNamespacedPodProxy is the resolver for the connectCoreV1DeleteNamespacedPodProxy field.
func (r *mutationResolver) ConnectCoreV1DeleteNamespacedPodProxy(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1DeleteNamespacedPodProxy - connectCoreV1DeleteNamespacedPodProxy")

	return nil, nil
}

// ConnectCoreV1DeleteNamespacedPodProxyWithPath is the resolver for the connectCoreV1DeleteNamespacedPodProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1DeleteNamespacedPodProxyWithPath(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1DeleteNamespacedPodProxyWithPath - connectCoreV1DeleteNamespacedPodProxyWithPath")

	return nil, nil
}

// ConnectCoreV1DeleteNamespacedServiceProxy is the resolver for the connectCoreV1DeleteNamespacedServiceProxy field.
func (r *mutationResolver) ConnectCoreV1DeleteNamespacedServiceProxy(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1DeleteNamespacedServiceProxy - connectCoreV1DeleteNamespacedServiceProxy")

	return nil, nil
}

// ConnectCoreV1DeleteNamespacedServiceProxyWithPath is the resolver for the connectCoreV1DeleteNamespacedServiceProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1DeleteNamespacedServiceProxyWithPath(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1DeleteNamespacedServiceProxyWithPath - connectCoreV1DeleteNamespacedServiceProxyWithPath")

	return nil, nil
}

// ConnectCoreV1DeleteNodeProxy is the resolver for the connectCoreV1DeleteNodeProxy field.
func (r *mutationResolver) ConnectCoreV1DeleteNodeProxy(ctx context.Context, name string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1DeleteNodeProxy - connectCoreV1DeleteNodeProxy")

	return nil, nil
}

// ConnectCoreV1DeleteNodeProxyWithPath is the resolver for the connectCoreV1DeleteNodeProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1DeleteNodeProxyWithPath(ctx context.Context, name string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1DeleteNodeProxyWithPath - connectCoreV1DeleteNodeProxyWithPath")

	return nil, nil
}

// ConnectCoreV1HeadNamespacedPodProxy is the resolver for the connectCoreV1HeadNamespacedPodProxy field.
func (r *mutationResolver) ConnectCoreV1HeadNamespacedPodProxy(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1HeadNamespacedPodProxy - connectCoreV1HeadNamespacedPodProxy")

	return nil, nil
}

// ConnectCoreV1HeadNamespacedPodProxyWithPath is the resolver for the connectCoreV1HeadNamespacedPodProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1HeadNamespacedPodProxyWithPath(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1HeadNamespacedPodProxyWithPath - connectCoreV1HeadNamespacedPodProxyWithPath")

	return nil, nil
}

// ConnectCoreV1HeadNamespacedServiceProxy is the resolver for the connectCoreV1HeadNamespacedServiceProxy field.
func (r *mutationResolver) ConnectCoreV1HeadNamespacedServiceProxy(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1HeadNamespacedServiceProxy - connectCoreV1HeadNamespacedServiceProxy")

	return nil, nil
}

// ConnectCoreV1HeadNamespacedServiceProxyWithPath is the resolver for the connectCoreV1HeadNamespacedServiceProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1HeadNamespacedServiceProxyWithPath(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1HeadNamespacedServiceProxyWithPath - connectCoreV1HeadNamespacedServiceProxyWithPath")

	return nil, nil
}

// ConnectCoreV1HeadNodeProxy is the resolver for the connectCoreV1HeadNodeProxy field.
func (r *mutationResolver) ConnectCoreV1HeadNodeProxy(ctx context.Context, name string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1HeadNodeProxy - connectCoreV1HeadNodeProxy")

	return nil, nil
}

// ConnectCoreV1HeadNodeProxyWithPath is the resolver for the connectCoreV1HeadNodeProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1HeadNodeProxyWithPath(ctx context.Context, name string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1HeadNodeProxyWithPath - connectCoreV1HeadNodeProxyWithPath")

	return nil, nil
}

// ConnectCoreV1OptionsNamespacedPodProxy is the resolver for the connectCoreV1OptionsNamespacedPodProxy field.
func (r *mutationResolver) ConnectCoreV1OptionsNamespacedPodProxy(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1OptionsNamespacedPodProxy - connectCoreV1OptionsNamespacedPodProxy")

	return nil, nil
}

// ConnectCoreV1OptionsNamespacedPodProxyWithPath is the resolver for the connectCoreV1OptionsNamespacedPodProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1OptionsNamespacedPodProxyWithPath(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1OptionsNamespacedPodProxyWithPath - connectCoreV1OptionsNamespacedPodProxyWithPath")

	return nil, nil
}

// ConnectCoreV1OptionsNamespacedServiceProxy is the resolver for the connectCoreV1OptionsNamespacedServiceProxy field.
func (r *mutationResolver) ConnectCoreV1OptionsNamespacedServiceProxy(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1OptionsNamespacedServiceProxy - connectCoreV1OptionsNamespacedServiceProxy")

	return nil, nil
}

// ConnectCoreV1OptionsNamespacedServiceProxyWithPath is the resolver for the connectCoreV1OptionsNamespacedServiceProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1OptionsNamespacedServiceProxyWithPath(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1OptionsNamespacedServiceProxyWithPath - connectCoreV1OptionsNamespacedServiceProxyWithPath")

	return nil, nil
}

// ConnectCoreV1OptionsNodeProxy is the resolver for the connectCoreV1OptionsNodeProxy field.
func (r *mutationResolver) ConnectCoreV1OptionsNodeProxy(ctx context.Context, name string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1OptionsNodeProxy - connectCoreV1OptionsNodeProxy")

	return nil, nil
}

// ConnectCoreV1OptionsNodeProxyWithPath is the resolver for the connectCoreV1OptionsNodeProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1OptionsNodeProxyWithPath(ctx context.Context, name string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1OptionsNodeProxyWithPath - connectCoreV1OptionsNodeProxyWithPath")

	return nil, nil
}

// ConnectCoreV1PatchNamespacedPodProxy is the resolver for the connectCoreV1PatchNamespacedPodProxy field.
func (r *mutationResolver) ConnectCoreV1PatchNamespacedPodProxy(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PatchNamespacedPodProxy - connectCoreV1PatchNamespacedPodProxy")

	return nil, nil
}

// ConnectCoreV1PatchNamespacedPodProxyWithPath is the resolver for the connectCoreV1PatchNamespacedPodProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1PatchNamespacedPodProxyWithPath(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PatchNamespacedPodProxyWithPath - connectCoreV1PatchNamespacedPodProxyWithPath")

	return nil, nil
}

// ConnectCoreV1PatchNamespacedServiceProxy is the resolver for the connectCoreV1PatchNamespacedServiceProxy field.
func (r *mutationResolver) ConnectCoreV1PatchNamespacedServiceProxy(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PatchNamespacedServiceProxy - connectCoreV1PatchNamespacedServiceProxy")

	return nil, nil
}

// ConnectCoreV1PatchNamespacedServiceProxyWithPath is the resolver for the connectCoreV1PatchNamespacedServiceProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1PatchNamespacedServiceProxyWithPath(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PatchNamespacedServiceProxyWithPath - connectCoreV1PatchNamespacedServiceProxyWithPath")

	return nil, nil
}

// ConnectCoreV1PatchNodeProxy is the resolver for the connectCoreV1PatchNodeProxy field.
func (r *mutationResolver) ConnectCoreV1PatchNodeProxy(ctx context.Context, name string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PatchNodeProxy - connectCoreV1PatchNodeProxy")

	return nil, nil
}

// ConnectCoreV1PatchNodeProxyWithPath is the resolver for the connectCoreV1PatchNodeProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1PatchNodeProxyWithPath(ctx context.Context, name string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PatchNodeProxyWithPath - connectCoreV1PatchNodeProxyWithPath")

	return nil, nil
}

// ConnectCoreV1PostNamespacedPodAttach is the resolver for the connectCoreV1PostNamespacedPodAttach field.
func (r *mutationResolver) ConnectCoreV1PostNamespacedPodAttach(ctx context.Context, container *string, name string, namespace string, stderr *bool, stdin *bool, stdout *bool, tty *bool) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PostNamespacedPodAttach - connectCoreV1PostNamespacedPodAttach")

	return nil, nil
}

// ConnectCoreV1PostNamespacedPodExec is the resolver for the connectCoreV1PostNamespacedPodExec field.
func (r *mutationResolver) ConnectCoreV1PostNamespacedPodExec(ctx context.Context, command *string, container *string, name string, namespace string, stderr *bool, stdin *bool, stdout *bool, tty *bool) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PostNamespacedPodExec - connectCoreV1PostNamespacedPodExec")

	return nil, nil
}

// ConnectCoreV1PostNamespacedPodPortforward is the resolver for the connectCoreV1PostNamespacedPodPortforward field.
func (r *mutationResolver) ConnectCoreV1PostNamespacedPodPortforward(ctx context.Context, name string, namespace string, ports *int) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PostNamespacedPodPortforward - connectCoreV1PostNamespacedPodPortforward")

	return nil, nil
}

// ConnectCoreV1PostNamespacedPodProxy is the resolver for the connectCoreV1PostNamespacedPodProxy field.
func (r *mutationResolver) ConnectCoreV1PostNamespacedPodProxy(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PostNamespacedPodProxy - connectCoreV1PostNamespacedPodProxy")

	return nil, nil
}

// ConnectCoreV1PostNamespacedPodProxyWithPath is the resolver for the connectCoreV1PostNamespacedPodProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1PostNamespacedPodProxyWithPath(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PostNamespacedPodProxyWithPath - connectCoreV1PostNamespacedPodProxyWithPath")

	return nil, nil
}

// ConnectCoreV1PostNamespacedServiceProxy is the resolver for the connectCoreV1PostNamespacedServiceProxy field.
func (r *mutationResolver) ConnectCoreV1PostNamespacedServiceProxy(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PostNamespacedServiceProxy - connectCoreV1PostNamespacedServiceProxy")

	return nil, nil
}

// ConnectCoreV1PostNamespacedServiceProxyWithPath is the resolver for the connectCoreV1PostNamespacedServiceProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1PostNamespacedServiceProxyWithPath(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PostNamespacedServiceProxyWithPath - connectCoreV1PostNamespacedServiceProxyWithPath")

	return nil, nil
}

// ConnectCoreV1PostNodeProxy is the resolver for the connectCoreV1PostNodeProxy field.
func (r *mutationResolver) ConnectCoreV1PostNodeProxy(ctx context.Context, name string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PostNodeProxy - connectCoreV1PostNodeProxy")

	return nil, nil
}

// ConnectCoreV1PostNodeProxyWithPath is the resolver for the connectCoreV1PostNodeProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1PostNodeProxyWithPath(ctx context.Context, name string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PostNodeProxyWithPath - connectCoreV1PostNodeProxyWithPath")

	return nil, nil
}

// ConnectCoreV1PutNamespacedPodProxy is the resolver for the connectCoreV1PutNamespacedPodProxy field.
func (r *mutationResolver) ConnectCoreV1PutNamespacedPodProxy(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PutNamespacedPodProxy - connectCoreV1PutNamespacedPodProxy")

	return nil, nil
}

// ConnectCoreV1PutNamespacedPodProxyWithPath is the resolver for the connectCoreV1PutNamespacedPodProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1PutNamespacedPodProxyWithPath(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PutNamespacedPodProxyWithPath - connectCoreV1PutNamespacedPodProxyWithPath")

	return nil, nil
}

// ConnectCoreV1PutNamespacedServiceProxy is the resolver for the connectCoreV1PutNamespacedServiceProxy field.
func (r *mutationResolver) ConnectCoreV1PutNamespacedServiceProxy(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PutNamespacedServiceProxy - connectCoreV1PutNamespacedServiceProxy")

	return nil, nil
}

// ConnectCoreV1PutNamespacedServiceProxyWithPath is the resolver for the connectCoreV1PutNamespacedServiceProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1PutNamespacedServiceProxyWithPath(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PutNamespacedServiceProxyWithPath - connectCoreV1PutNamespacedServiceProxyWithPath")

	return nil, nil
}

// ConnectCoreV1PutNodeProxy is the resolver for the connectCoreV1PutNodeProxy field.
func (r *mutationResolver) ConnectCoreV1PutNodeProxy(ctx context.Context, name string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PutNodeProxy - connectCoreV1PutNodeProxy")

	return nil, nil
}

// ConnectCoreV1PutNodeProxyWithPath is the resolver for the connectCoreV1PutNodeProxyWithPath field.
func (r *mutationResolver) ConnectCoreV1PutNodeProxyWithPath(ctx context.Context, name string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1PutNodeProxyWithPath - connectCoreV1PutNodeProxyWithPath")

	return nil, nil
}

// CreateCoreV1Namespace is the resolver for the createCoreV1Namespace field.
func (r *mutationResolver) CreateCoreV1Namespace(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, namespaceInput *model.NamespaceInput, pretty *string) (*v1.Namespace, error) {
	log.Printf("not implemented: CreateCoreV1Namespace - createCoreV1Namespace")

	return nil, nil
}

// CreateCoreV1NamespacedBinding is the resolver for the createCoreV1NamespacedBinding field.
func (r *mutationResolver) CreateCoreV1NamespacedBinding(ctx context.Context, bindingInput *model.BindingInput, dryRun *string, fieldManager *string, fieldValidation *string, namespace string, pretty *string) (*v1.Binding, error) {
	log.Printf("not implemented: CreateCoreV1NamespacedBinding - createCoreV1NamespacedBinding")

	return nil, nil
}

// CreateCoreV1NamespacedConfigMap is the resolver for the createCoreV1NamespacedConfigMap field.
func (r *mutationResolver) CreateCoreV1NamespacedConfigMap(ctx context.Context, configMapInput *model.ConfigMapInput, dryRun *string, fieldManager *string, fieldValidation *string, namespace string, pretty *string) (*v1.ConfigMap, error) {
	log.Printf("not implemented: CreateCoreV1NamespacedConfigMap - createCoreV1NamespacedConfigMap")

	return nil, nil
}

// CreateCoreV1NamespacedEndpoints is the resolver for the createCoreV1NamespacedEndpoints field.
func (r *mutationResolver) CreateCoreV1NamespacedEndpoints(ctx context.Context, dryRun *string, endpointsInput *model.EndpointsInput, fieldManager *string, fieldValidation *string, namespace string, pretty *string) (*v1.Endpoints, error) {
	log.Printf("not implemented: CreateCoreV1NamespacedEndpoints - createCoreV1NamespacedEndpoints")

	return nil, nil
}

// CreateCoreV1NamespacedEvent is the resolver for the createCoreV1NamespacedEvent field.
func (r *mutationResolver) CreateCoreV1NamespacedEvent(ctx context.Context, dryRun *string, eventInput *model.EventInput, fieldManager *string, fieldValidation *string, namespace string, pretty *string) (*v1.Event, error) {
	log.Printf("not implemented: CreateCoreV1NamespacedEvent - createCoreV1NamespacedEvent")

	return nil, nil
}

// CreateCoreV1NamespacedLimitRange is the resolver for the createCoreV1NamespacedLimitRange field.
func (r *mutationResolver) CreateCoreV1NamespacedLimitRange(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, limitRangeInput *model.LimitRangeInput, namespace string, pretty *string) (*v1.LimitRange, error) {
	log.Printf("not implemented: CreateCoreV1NamespacedLimitRange - createCoreV1NamespacedLimitRange")

	return nil, nil
}

// CreateCoreV1NamespacedPersistentVolumeClaim is the resolver for the createCoreV1NamespacedPersistentVolumeClaim field.
func (r *mutationResolver) CreateCoreV1NamespacedPersistentVolumeClaim(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, namespace string, persistentVolumeClaimInput *model.PersistentVolumeClaimInput, pretty *string) (*v1.PersistentVolumeClaim, error) {
	log.Printf("not implemented: CreateCoreV1NamespacedPersistentVolumeClaim - createCoreV1NamespacedPersistentVolumeClaim")

	return nil, nil
}

// CreateCoreV1NamespacedPod is the resolver for the createCoreV1NamespacedPod field.
func (r *mutationResolver) CreateCoreV1NamespacedPod(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, namespace string, podInput *model.PodInput, pretty *string) (*v1.Pod, error) {
	log.Printf("not implemented: CreateCoreV1NamespacedPod - createCoreV1NamespacedPod")

	return nil, nil
}

// CreateCoreV1NamespacedPodBinding is the resolver for the createCoreV1NamespacedPodBinding field.
func (r *mutationResolver) CreateCoreV1NamespacedPodBinding(ctx context.Context, bindingInput *model.BindingInput, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespace string, pretty *string) (*v1.Binding, error) {
	log.Printf("not implemented: CreateCoreV1NamespacedPodBinding - createCoreV1NamespacedPodBinding")

	return nil, nil
}

// CreateCoreV1NamespacedPodEviction is the resolver for the createCoreV1NamespacedPodEviction field.
func (r *mutationResolver) CreateCoreV1NamespacedPodEviction(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, ioK8sAPIPolicyV1EvictionInput *model.IoK8sAPIPolicyV1EvictionInput, name string, namespace string, pretty *string) (*model.IoK8sAPIPolicyV1Eviction, error) {
	log.Printf("not implemented: CreateCoreV1NamespacedPodEviction - createCoreV1NamespacedPodEviction")

	return nil, nil
}

// CreateCoreV1NamespacedPodTemplate is the resolver for the createCoreV1NamespacedPodTemplate field.
func (r *mutationResolver) CreateCoreV1NamespacedPodTemplate(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, namespace string, podTemplateInput *model.PodTemplateInput, pretty *string) (*v1.PodTemplate, error) {
	log.Printf("not implemented: CreateCoreV1NamespacedPodTemplate - createCoreV1NamespacedPodTemplate")

	return nil, nil
}

// CreateCoreV1NamespacedReplicationController is the resolver for the createCoreV1NamespacedReplicationController field.
func (r *mutationResolver) CreateCoreV1NamespacedReplicationController(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, namespace string, pretty *string, replicationControllerInput *model.ReplicationControllerInput) (*v1.ReplicationController, error) {
	log.Printf("not implemented: CreateCoreV1NamespacedReplicationController - createCoreV1NamespacedReplicationController")

	return nil, nil
}

// CreateCoreV1NamespacedResourceQuota is the resolver for the createCoreV1NamespacedResourceQuota field.
func (r *mutationResolver) CreateCoreV1NamespacedResourceQuota(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, namespace string, pretty *string, resourceQuotaInput *model.ResourceQuotaInput) (*v1.ResourceQuota, error) {
	log.Printf("not implemented: CreateCoreV1NamespacedResourceQuota - createCoreV1NamespacedResourceQuota")

	return nil, nil
}

// CreateCoreV1NamespacedSecret is the resolver for the createCoreV1NamespacedSecret field.
func (r *mutationResolver) CreateCoreV1NamespacedSecret(ctx context.Context, apiV1NamespaceSecretsInput *model.APIV1NamespaceSecretsInput, dryRun *string, fieldManager *string, fieldValidation *string, namespace string, pretty *string) (*model.APIV1NamespaceSecrets, error) {
	log.Printf("not implemented: CreateCoreV1NamespacedSecret - createCoreV1NamespacedSecret")

	return nil, nil
}

// CreateCoreV1NamespacedService is the resolver for the createCoreV1NamespacedService field.
func (r *mutationResolver) CreateCoreV1NamespacedService(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, namespace string, pretty *string, serviceInput *model.ServiceInput) (*v1.Service, error) {
	log.Printf("not implemented: CreateCoreV1NamespacedService - createCoreV1NamespacedService")

	return nil, nil
}

// CreateCoreV1NamespacedServiceAccount is the resolver for the createCoreV1NamespacedServiceAccount field.
func (r *mutationResolver) CreateCoreV1NamespacedServiceAccount(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, namespace string, pretty *string, serviceAccountInput *model.ServiceAccountInput) (*v1.ServiceAccount, error) {
	log.Printf("not implemented: CreateCoreV1NamespacedServiceAccount - createCoreV1NamespacedServiceAccount")

	return nil, nil
}

// CreateCoreV1NamespacedServiceAccountToken is the resolver for the createCoreV1NamespacedServiceAccountToken field.
func (r *mutationResolver) CreateCoreV1NamespacedServiceAccountToken(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, ioK8sAPIAuthenticationV1TokenRequestInput *model.IoK8sAPIAuthenticationV1TokenRequestInput, name string, namespace string, pretty *string) (*model.IoK8sAPIAuthenticationV1TokenRequest, error) {
	log.Printf("not implemented: CreateCoreV1NamespacedServiceAccountToken - createCoreV1NamespacedServiceAccountToken")

	return nil, nil
}

// CreateCoreV1Node is the resolver for the createCoreV1Node field.
func (r *mutationResolver) CreateCoreV1Node(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, nodeInput *model.NodeInput, pretty *string) (*v1.Node, error) {
	log.Printf("not implemented: CreateCoreV1Node - createCoreV1Node")

	return nil, nil
}

// CreateCoreV1PersistentVolume is the resolver for the createCoreV1PersistentVolume field.
func (r *mutationResolver) CreateCoreV1PersistentVolume(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, persistentVolumeInput *model.PersistentVolumeInput, pretty *string) (*v1.PersistentVolume, error) {
	log.Printf("not implemented: CreateCoreV1PersistentVolume - createCoreV1PersistentVolume")

	return nil, nil
}

// DeleteCoreV1CollectionNamespacedConfigMap is the resolver for the deleteCoreV1CollectionNamespacedConfigMap field.
func (r *mutationResolver) DeleteCoreV1CollectionNamespacedConfigMap(ctx context.Context, continueArg *string, dryRun *string, fieldSelector *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, labelSelector *string, limit *int, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1CollectionNamespacedConfigMap - deleteCoreV1CollectionNamespacedConfigMap")

	return nil, nil
}

// DeleteCoreV1CollectionNamespacedEndpoints is the resolver for the deleteCoreV1CollectionNamespacedEndpoints field.
func (r *mutationResolver) DeleteCoreV1CollectionNamespacedEndpoints(ctx context.Context, continueArg *string, dryRun *string, fieldSelector *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, labelSelector *string, limit *int, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1CollectionNamespacedEndpoints - deleteCoreV1CollectionNamespacedEndpoints")

	return nil, nil
}

// DeleteCoreV1CollectionNamespacedEvent is the resolver for the deleteCoreV1CollectionNamespacedEvent field.
func (r *mutationResolver) DeleteCoreV1CollectionNamespacedEvent(ctx context.Context, continueArg *string, dryRun *string, fieldSelector *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, labelSelector *string, limit *int, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1CollectionNamespacedEvent - deleteCoreV1CollectionNamespacedEvent")

	return nil, nil
}

// DeleteCoreV1CollectionNamespacedLimitRange is the resolver for the deleteCoreV1CollectionNamespacedLimitRange field.
func (r *mutationResolver) DeleteCoreV1CollectionNamespacedLimitRange(ctx context.Context, continueArg *string, dryRun *string, fieldSelector *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, labelSelector *string, limit *int, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1CollectionNamespacedLimitRange - deleteCoreV1CollectionNamespacedLimitRange")

	return nil, nil
}

// DeleteCoreV1CollectionNamespacedPersistentVolumeClaim is the resolver for the deleteCoreV1CollectionNamespacedPersistentVolumeClaim field.
func (r *mutationResolver) DeleteCoreV1CollectionNamespacedPersistentVolumeClaim(ctx context.Context, continueArg *string, dryRun *string, fieldSelector *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, labelSelector *string, limit *int, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1CollectionNamespacedPersistentVolumeClaim - deleteCoreV1CollectionNamespacedPersistentVolumeClaim")

	return nil, nil
}

// DeleteCoreV1CollectionNamespacedPod is the resolver for the deleteCoreV1CollectionNamespacedPod field.
func (r *mutationResolver) DeleteCoreV1CollectionNamespacedPod(ctx context.Context, continueArg *string, dryRun *string, fieldSelector *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, labelSelector *string, limit *int, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1CollectionNamespacedPod - deleteCoreV1CollectionNamespacedPod")

	return nil, nil
}

// DeleteCoreV1CollectionNamespacedPodTemplate is the resolver for the deleteCoreV1CollectionNamespacedPodTemplate field.
func (r *mutationResolver) DeleteCoreV1CollectionNamespacedPodTemplate(ctx context.Context, continueArg *string, dryRun *string, fieldSelector *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, labelSelector *string, limit *int, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1CollectionNamespacedPodTemplate - deleteCoreV1CollectionNamespacedPodTemplate")

	return nil, nil
}

// DeleteCoreV1CollectionNamespacedReplicationController is the resolver for the deleteCoreV1CollectionNamespacedReplicationController field.
func (r *mutationResolver) DeleteCoreV1CollectionNamespacedReplicationController(ctx context.Context, continueArg *string, dryRun *string, fieldSelector *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, labelSelector *string, limit *int, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1CollectionNamespacedReplicationController - deleteCoreV1CollectionNamespacedReplicationController")

	return nil, nil
}

// DeleteCoreV1CollectionNamespacedResourceQuota is the resolver for the deleteCoreV1CollectionNamespacedResourceQuota field.
func (r *mutationResolver) DeleteCoreV1CollectionNamespacedResourceQuota(ctx context.Context, continueArg *string, dryRun *string, fieldSelector *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, labelSelector *string, limit *int, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1CollectionNamespacedResourceQuota - deleteCoreV1CollectionNamespacedResourceQuota")

	return nil, nil
}

// DeleteCoreV1CollectionNamespacedSecret is the resolver for the deleteCoreV1CollectionNamespacedSecret field.
func (r *mutationResolver) DeleteCoreV1CollectionNamespacedSecret(ctx context.Context, continueArg *string, dryRun *string, fieldSelector *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, labelSelector *string, limit *int, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1CollectionNamespacedSecret - deleteCoreV1CollectionNamespacedSecret")

	return nil, nil
}

// DeleteCoreV1CollectionNamespacedService is the resolver for the deleteCoreV1CollectionNamespacedService field.
func (r *mutationResolver) DeleteCoreV1CollectionNamespacedService(ctx context.Context, continueArg *string, dryRun *string, fieldSelector *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, labelSelector *string, limit *int, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1CollectionNamespacedService - deleteCoreV1CollectionNamespacedService")

	return nil, nil
}

// DeleteCoreV1CollectionNamespacedServiceAccount is the resolver for the deleteCoreV1CollectionNamespacedServiceAccount field.
func (r *mutationResolver) DeleteCoreV1CollectionNamespacedServiceAccount(ctx context.Context, continueArg *string, dryRun *string, fieldSelector *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, labelSelector *string, limit *int, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1CollectionNamespacedServiceAccount - deleteCoreV1CollectionNamespacedServiceAccount")

	return nil, nil
}

// DeleteCoreV1CollectionNode is the resolver for the deleteCoreV1CollectionNode field.
func (r *mutationResolver) DeleteCoreV1CollectionNode(ctx context.Context, continueArg *string, dryRun *string, fieldSelector *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, labelSelector *string, limit *int, orphanDependents *bool, pretty *string, propagationPolicy *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1CollectionNode - deleteCoreV1CollectionNode")

	return nil, nil
}

// DeleteCoreV1CollectionPersistentVolume is the resolver for the deleteCoreV1CollectionPersistentVolume field.
func (r *mutationResolver) DeleteCoreV1CollectionPersistentVolume(ctx context.Context, continueArg *string, dryRun *string, fieldSelector *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, labelSelector *string, limit *int, orphanDependents *bool, pretty *string, propagationPolicy *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1CollectionPersistentVolume - deleteCoreV1CollectionPersistentVolume")

	return nil, nil
}

// DeleteCoreV1Namespace is the resolver for the deleteCoreV1Namespace field.
func (r *mutationResolver) DeleteCoreV1Namespace(ctx context.Context, dryRun *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, name string, orphanDependents *bool, pretty *string, propagationPolicy *string) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1Namespace - deleteCoreV1Namespace")

	return nil, nil
}

// DeleteCoreV1NamespacedConfigMap is the resolver for the deleteCoreV1NamespacedConfigMap field.
func (r *mutationResolver) DeleteCoreV1NamespacedConfigMap(ctx context.Context, dryRun *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, name string, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1NamespacedConfigMap - deleteCoreV1NamespacedConfigMap")

	return nil, nil
}

// DeleteCoreV1NamespacedEndpoints is the resolver for the deleteCoreV1NamespacedEndpoints field.
func (r *mutationResolver) DeleteCoreV1NamespacedEndpoints(ctx context.Context, dryRun *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, name string, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1NamespacedEndpoints - deleteCoreV1NamespacedEndpoints")

	return nil, nil
}

// DeleteCoreV1NamespacedEvent is the resolver for the deleteCoreV1NamespacedEvent field.
func (r *mutationResolver) DeleteCoreV1NamespacedEvent(ctx context.Context, dryRun *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, name string, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1NamespacedEvent - deleteCoreV1NamespacedEvent")

	return nil, nil
}

// DeleteCoreV1NamespacedLimitRange is the resolver for the deleteCoreV1NamespacedLimitRange field.
func (r *mutationResolver) DeleteCoreV1NamespacedLimitRange(ctx context.Context, dryRun *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, name string, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1NamespacedLimitRange - deleteCoreV1NamespacedLimitRange")

	return nil, nil
}

// DeleteCoreV1NamespacedPersistentVolumeClaim is the resolver for the deleteCoreV1NamespacedPersistentVolumeClaim field.
func (r *mutationResolver) DeleteCoreV1NamespacedPersistentVolumeClaim(ctx context.Context, dryRun *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, name string, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string) (*v1.PersistentVolumeClaim, error) {
	log.Printf("not implemented: DeleteCoreV1NamespacedPersistentVolumeClaim - deleteCoreV1NamespacedPersistentVolumeClaim")

	return nil, nil
}

// DeleteCoreV1NamespacedPod is the resolver for the deleteCoreV1NamespacedPod field.
func (r *mutationResolver) DeleteCoreV1NamespacedPod(ctx context.Context, dryRun *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, name string, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string) (*v1.Pod, error) {
	log.Printf("not implemented: DeleteCoreV1NamespacedPod - deleteCoreV1NamespacedPod")

	return nil, nil
}

// DeleteCoreV1NamespacedPodTemplate is the resolver for the deleteCoreV1NamespacedPodTemplate field.
func (r *mutationResolver) DeleteCoreV1NamespacedPodTemplate(ctx context.Context, dryRun *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, name string, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string) (*v1.PodTemplate, error) {
	log.Printf("not implemented: DeleteCoreV1NamespacedPodTemplate - deleteCoreV1NamespacedPodTemplate")

	return nil, nil
}

// DeleteCoreV1NamespacedReplicationController is the resolver for the deleteCoreV1NamespacedReplicationController field.
func (r *mutationResolver) DeleteCoreV1NamespacedReplicationController(ctx context.Context, dryRun *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, name string, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1NamespacedReplicationController - deleteCoreV1NamespacedReplicationController")

	return nil, nil
}

// DeleteCoreV1NamespacedResourceQuota is the resolver for the deleteCoreV1NamespacedResourceQuota field.
func (r *mutationResolver) DeleteCoreV1NamespacedResourceQuota(ctx context.Context, dryRun *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, name string, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string) (*v1.ResourceQuota, error) {
	log.Printf("not implemented: DeleteCoreV1NamespacedResourceQuota - deleteCoreV1NamespacedResourceQuota")

	return nil, nil
}

// DeleteCoreV1NamespacedSecret is the resolver for the deleteCoreV1NamespacedSecret field.
func (r *mutationResolver) DeleteCoreV1NamespacedSecret(ctx context.Context, dryRun *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, name string, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1NamespacedSecret - deleteCoreV1NamespacedSecret")

	return nil, nil
}

// DeleteCoreV1NamespacedService is the resolver for the deleteCoreV1NamespacedService field.
func (r *mutationResolver) DeleteCoreV1NamespacedService(ctx context.Context, dryRun *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, name string, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string) (*v1.Service, error) {
	log.Printf("not implemented: DeleteCoreV1NamespacedService - deleteCoreV1NamespacedService")

	return nil, nil
}

// DeleteCoreV1NamespacedServiceAccount is the resolver for the deleteCoreV1NamespacedServiceAccount field.
func (r *mutationResolver) DeleteCoreV1NamespacedServiceAccount(ctx context.Context, dryRun *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, name string, namespace string, orphanDependents *bool, pretty *string, propagationPolicy *string) (*v1.ServiceAccount, error) {
	log.Printf("not implemented: DeleteCoreV1NamespacedServiceAccount - deleteCoreV1NamespacedServiceAccount")

	return nil, nil
}

// DeleteCoreV1Node is the resolver for the deleteCoreV1Node field.
func (r *mutationResolver) DeleteCoreV1Node(ctx context.Context, dryRun *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, name string, orphanDependents *bool, pretty *string, propagationPolicy *string) (*model.IoK8sApimachineryPkgApisMetaV1Status, error) {
	log.Printf("not implemented: DeleteCoreV1Node - deleteCoreV1Node")

	return nil, nil
}

// DeleteCoreV1PersistentVolume is the resolver for the deleteCoreV1PersistentVolume field.
func (r *mutationResolver) DeleteCoreV1PersistentVolume(ctx context.Context, dryRun *string, gracePeriodSeconds *int, ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput *model.IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput, name string, orphanDependents *bool, pretty *string, propagationPolicy *string) (*v1.PersistentVolume, error) {
	log.Printf("not implemented: DeleteCoreV1PersistentVolume - deleteCoreV1PersistentVolume")

	return nil, nil
}

// PatchCoreV1Namespace is the resolver for the patchCoreV1Namespace field.
func (r *mutationResolver) PatchCoreV1Namespace(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, pretty *string) (*v1.Namespace, error) {
	log.Printf("not implemented: PatchCoreV1Namespace - patchCoreV1Namespace")

	return nil, nil
}

// PatchCoreV1NamespaceStatus is the resolver for the patchCoreV1NamespaceStatus field.
func (r *mutationResolver) PatchCoreV1NamespaceStatus(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, pretty *string) (*v1.Namespace, error) {
	log.Printf("not implemented: PatchCoreV1NamespaceStatus - patchCoreV1NamespaceStatus")

	return nil, nil
}

// PatchCoreV1NamespacedConfigMap is the resolver for the patchCoreV1NamespacedConfigMap field.
func (r *mutationResolver) PatchCoreV1NamespacedConfigMap(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*v1.ConfigMap, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedConfigMap - patchCoreV1NamespacedConfigMap")

	return nil, nil
}

// PatchCoreV1NamespacedEndpoints is the resolver for the patchCoreV1NamespacedEndpoints field.
func (r *mutationResolver) PatchCoreV1NamespacedEndpoints(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*v1.Endpoints, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedEndpoints - patchCoreV1NamespacedEndpoints")

	return nil, nil
}

// PatchCoreV1NamespacedEvent is the resolver for the patchCoreV1NamespacedEvent field.
func (r *mutationResolver) PatchCoreV1NamespacedEvent(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*v1.Event, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedEvent - patchCoreV1NamespacedEvent")

	return nil, nil
}

// PatchCoreV1NamespacedLimitRange is the resolver for the patchCoreV1NamespacedLimitRange field.
func (r *mutationResolver) PatchCoreV1NamespacedLimitRange(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*v1.LimitRange, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedLimitRange - patchCoreV1NamespacedLimitRange")

	return nil, nil
}

// PatchCoreV1NamespacedPersistentVolumeClaim is the resolver for the patchCoreV1NamespacedPersistentVolumeClaim field.
func (r *mutationResolver) PatchCoreV1NamespacedPersistentVolumeClaim(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*v1.PersistentVolumeClaim, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedPersistentVolumeClaim - patchCoreV1NamespacedPersistentVolumeClaim")

	return nil, nil
}

// PatchCoreV1NamespacedPersistentVolumeClaimStatus is the resolver for the patchCoreV1NamespacedPersistentVolumeClaimStatus field.
func (r *mutationResolver) PatchCoreV1NamespacedPersistentVolumeClaimStatus(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*v1.PersistentVolumeClaim, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedPersistentVolumeClaimStatus - patchCoreV1NamespacedPersistentVolumeClaimStatus")

	return nil, nil
}

// PatchCoreV1NamespacedPod is the resolver for the patchCoreV1NamespacedPod field.
func (r *mutationResolver) PatchCoreV1NamespacedPod(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*v1.Pod, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedPod - patchCoreV1NamespacedPod")

	return nil, nil
}

// PatchCoreV1NamespacedPodEphemeralcontainers is the resolver for the patchCoreV1NamespacedPodEphemeralcontainers field.
func (r *mutationResolver) PatchCoreV1NamespacedPodEphemeralcontainers(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*v1.Pod, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedPodEphemeralcontainers - patchCoreV1NamespacedPodEphemeralcontainers")

	return nil, nil
}

// PatchCoreV1NamespacedPodStatus is the resolver for the patchCoreV1NamespacedPodStatus field.
func (r *mutationResolver) PatchCoreV1NamespacedPodStatus(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*v1.Pod, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedPodStatus - patchCoreV1NamespacedPodStatus")

	return nil, nil
}

// PatchCoreV1NamespacedPodTemplate is the resolver for the patchCoreV1NamespacedPodTemplate field.
func (r *mutationResolver) PatchCoreV1NamespacedPodTemplate(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*v1.PodTemplate, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedPodTemplate - patchCoreV1NamespacedPodTemplate")

	return nil, nil
}

// PatchCoreV1NamespacedReplicationController is the resolver for the patchCoreV1NamespacedReplicationController field.
func (r *mutationResolver) PatchCoreV1NamespacedReplicationController(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*v1.ReplicationController, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedReplicationController - patchCoreV1NamespacedReplicationController")

	return nil, nil
}

// PatchCoreV1NamespacedReplicationControllerScale is the resolver for the patchCoreV1NamespacedReplicationControllerScale field.
func (r *mutationResolver) PatchCoreV1NamespacedReplicationControllerScale(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*model.IoK8sAPIAutoscalingV1Scale, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedReplicationControllerScale - patchCoreV1NamespacedReplicationControllerScale")

	return nil, nil
}

// PatchCoreV1NamespacedReplicationControllerStatus is the resolver for the patchCoreV1NamespacedReplicationControllerStatus field.
func (r *mutationResolver) PatchCoreV1NamespacedReplicationControllerStatus(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*v1.ReplicationController, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedReplicationControllerStatus - patchCoreV1NamespacedReplicationControllerStatus")

	return nil, nil
}

// PatchCoreV1NamespacedResourceQuota is the resolver for the patchCoreV1NamespacedResourceQuota field.
func (r *mutationResolver) PatchCoreV1NamespacedResourceQuota(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*v1.ResourceQuota, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedResourceQuota - patchCoreV1NamespacedResourceQuota")

	return nil, nil
}

// PatchCoreV1NamespacedResourceQuotaStatus is the resolver for the patchCoreV1NamespacedResourceQuotaStatus field.
func (r *mutationResolver) PatchCoreV1NamespacedResourceQuotaStatus(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*v1.ResourceQuota, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedResourceQuotaStatus - patchCoreV1NamespacedResourceQuotaStatus")

	return nil, nil
}

// PatchCoreV1NamespacedSecret is the resolver for the patchCoreV1NamespacedSecret field.
func (r *mutationResolver) PatchCoreV1NamespacedSecret(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*model.APIV1NamespaceSecrets, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedSecret - patchCoreV1NamespacedSecret")

	return nil, nil
}

// PatchCoreV1NamespacedService is the resolver for the patchCoreV1NamespacedService field.
func (r *mutationResolver) PatchCoreV1NamespacedService(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*v1.Service, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedService - patchCoreV1NamespacedService")

	return nil, nil
}

// PatchCoreV1NamespacedServiceAccount is the resolver for the patchCoreV1NamespacedServiceAccount field.
func (r *mutationResolver) PatchCoreV1NamespacedServiceAccount(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*v1.ServiceAccount, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedServiceAccount - patchCoreV1NamespacedServiceAccount")

	return nil, nil
}

// PatchCoreV1NamespacedServiceStatus is the resolver for the patchCoreV1NamespacedServiceStatus field.
func (r *mutationResolver) PatchCoreV1NamespacedServiceStatus(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, namespace string, pretty *string) (*v1.Service, error) {
	log.Printf("not implemented: PatchCoreV1NamespacedServiceStatus - patchCoreV1NamespacedServiceStatus")

	return nil, nil
}

// PatchCoreV1Node is the resolver for the patchCoreV1Node field.
func (r *mutationResolver) PatchCoreV1Node(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, pretty *string) (*v1.Node, error) {
	log.Printf("not implemented: PatchCoreV1Node - patchCoreV1Node")

	return nil, nil
}

// PatchCoreV1NodeStatus is the resolver for the patchCoreV1NodeStatus field.
func (r *mutationResolver) PatchCoreV1NodeStatus(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, pretty *string) (*v1.Node, error) {
	log.Printf("not implemented: PatchCoreV1NodeStatus - patchCoreV1NodeStatus")

	return nil, nil
}

// PatchCoreV1PersistentVolume is the resolver for the patchCoreV1PersistentVolume field.
func (r *mutationResolver) PatchCoreV1PersistentVolume(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, pretty *string) (*v1.PersistentVolume, error) {
	log.Printf("not implemented: PatchCoreV1PersistentVolume - patchCoreV1PersistentVolume")

	return nil, nil
}

// PatchCoreV1PersistentVolumeStatus is the resolver for the patchCoreV1PersistentVolumeStatus field.
func (r *mutationResolver) PatchCoreV1PersistentVolumeStatus(ctx context.Context, applicationApplyPatchYamlInput *string, dryRun *string, fieldManager *string, fieldValidation *string, force *bool, name string, pretty *string) (*v1.PersistentVolume, error) {
	log.Printf("not implemented: PatchCoreV1PersistentVolumeStatus - patchCoreV1PersistentVolumeStatus")

	return nil, nil
}

// ReplaceCoreV1Namespace is the resolver for the replaceCoreV1Namespace field.
func (r *mutationResolver) ReplaceCoreV1Namespace(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespaceInput *model.NamespaceInput, pretty *string) (*v1.Namespace, error) {
	log.Printf("not implemented: ReplaceCoreV1Namespace - replaceCoreV1Namespace")

	return nil, nil
}

// ReplaceCoreV1NamespaceFinalize is the resolver for the replaceCoreV1NamespaceFinalize field.
func (r *mutationResolver) ReplaceCoreV1NamespaceFinalize(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespaceInput *model.NamespaceInput, pretty *string) (*v1.Namespace, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespaceFinalize - replaceCoreV1NamespaceFinalize")

	return nil, nil
}

// ReplaceCoreV1NamespaceStatus is the resolver for the replaceCoreV1NamespaceStatus field.
func (r *mutationResolver) ReplaceCoreV1NamespaceStatus(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespaceInput *model.NamespaceInput, pretty *string) (*v1.Namespace, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespaceStatus - replaceCoreV1NamespaceStatus")

	return nil, nil
}

// ReplaceCoreV1NamespacedConfigMap is the resolver for the replaceCoreV1NamespacedConfigMap field.
func (r *mutationResolver) ReplaceCoreV1NamespacedConfigMap(ctx context.Context, configMapInput *model.ConfigMapInput, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespace string, pretty *string) (*v1.ConfigMap, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedConfigMap - replaceCoreV1NamespacedConfigMap")

	return nil, nil
}

// ReplaceCoreV1NamespacedEndpoints is the resolver for the replaceCoreV1NamespacedEndpoints field.
func (r *mutationResolver) ReplaceCoreV1NamespacedEndpoints(ctx context.Context, dryRun *string, endpointsInput *model.EndpointsInput, fieldManager *string, fieldValidation *string, name string, namespace string, pretty *string) (*v1.Endpoints, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedEndpoints - replaceCoreV1NamespacedEndpoints")

	return nil, nil
}

// ReplaceCoreV1NamespacedEvent is the resolver for the replaceCoreV1NamespacedEvent field.
func (r *mutationResolver) ReplaceCoreV1NamespacedEvent(ctx context.Context, dryRun *string, eventInput *model.EventInput, fieldManager *string, fieldValidation *string, name string, namespace string, pretty *string) (*v1.Event, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedEvent - replaceCoreV1NamespacedEvent")

	return nil, nil
}

// ReplaceCoreV1NamespacedLimitRange is the resolver for the replaceCoreV1NamespacedLimitRange field.
func (r *mutationResolver) ReplaceCoreV1NamespacedLimitRange(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, limitRangeInput *model.LimitRangeInput, name string, namespace string, pretty *string) (*v1.LimitRange, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedLimitRange - replaceCoreV1NamespacedLimitRange")

	return nil, nil
}

// ReplaceCoreV1NamespacedPersistentVolumeClaim is the resolver for the replaceCoreV1NamespacedPersistentVolumeClaim field.
func (r *mutationResolver) ReplaceCoreV1NamespacedPersistentVolumeClaim(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespace string, persistentVolumeClaimInput *model.PersistentVolumeClaimInput, pretty *string) (*v1.PersistentVolumeClaim, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedPersistentVolumeClaim - replaceCoreV1NamespacedPersistentVolumeClaim")

	return nil, nil
}

// ReplaceCoreV1NamespacedPersistentVolumeClaimStatus is the resolver for the replaceCoreV1NamespacedPersistentVolumeClaimStatus field.
func (r *mutationResolver) ReplaceCoreV1NamespacedPersistentVolumeClaimStatus(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespace string, persistentVolumeClaimInput *model.PersistentVolumeClaimInput, pretty *string) (*v1.PersistentVolumeClaim, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedPersistentVolumeClaimStatus - replaceCoreV1NamespacedPersistentVolumeClaimStatus")

	return nil, nil
}

// ReplaceCoreV1NamespacedPod is the resolver for the replaceCoreV1NamespacedPod field.
func (r *mutationResolver) ReplaceCoreV1NamespacedPod(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespace string, podInput *model.PodInput, pretty *string) (*v1.Pod, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedPod - replaceCoreV1NamespacedPod")

	return nil, nil
}

// ReplaceCoreV1NamespacedPodEphemeralcontainers is the resolver for the replaceCoreV1NamespacedPodEphemeralcontainers field.
func (r *mutationResolver) ReplaceCoreV1NamespacedPodEphemeralcontainers(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespace string, podInput *model.PodInput, pretty *string) (*v1.Pod, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedPodEphemeralcontainers - replaceCoreV1NamespacedPodEphemeralcontainers")

	return nil, nil
}

// ReplaceCoreV1NamespacedPodStatus is the resolver for the replaceCoreV1NamespacedPodStatus field.
func (r *mutationResolver) ReplaceCoreV1NamespacedPodStatus(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespace string, podInput *model.PodInput, pretty *string) (*v1.Pod, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedPodStatus - replaceCoreV1NamespacedPodStatus")

	return nil, nil
}

// ReplaceCoreV1NamespacedPodTemplate is the resolver for the replaceCoreV1NamespacedPodTemplate field.
func (r *mutationResolver) ReplaceCoreV1NamespacedPodTemplate(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespace string, podTemplateInput *model.PodTemplateInput, pretty *string) (*v1.PodTemplate, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedPodTemplate - replaceCoreV1NamespacedPodTemplate")

	return nil, nil
}

// ReplaceCoreV1NamespacedReplicationController is the resolver for the replaceCoreV1NamespacedReplicationController field.
func (r *mutationResolver) ReplaceCoreV1NamespacedReplicationController(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespace string, pretty *string, replicationControllerInput *model.ReplicationControllerInput) (*v1.ReplicationController, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedReplicationController - replaceCoreV1NamespacedReplicationController")

	return nil, nil
}

// ReplaceCoreV1NamespacedReplicationControllerScale is the resolver for the replaceCoreV1NamespacedReplicationControllerScale field.
func (r *mutationResolver) ReplaceCoreV1NamespacedReplicationControllerScale(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, ioK8sAPIAutoscalingV1ScaleInput *model.IoK8sAPIAutoscalingV1ScaleInput, name string, namespace string, pretty *string) (*model.IoK8sAPIAutoscalingV1Scale, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedReplicationControllerScale - replaceCoreV1NamespacedReplicationControllerScale")

	return nil, nil
}

// ReplaceCoreV1NamespacedReplicationControllerStatus is the resolver for the replaceCoreV1NamespacedReplicationControllerStatus field.
func (r *mutationResolver) ReplaceCoreV1NamespacedReplicationControllerStatus(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespace string, pretty *string, replicationControllerInput *model.ReplicationControllerInput) (*v1.ReplicationController, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedReplicationControllerStatus - replaceCoreV1NamespacedReplicationControllerStatus")

	return nil, nil
}

// ReplaceCoreV1NamespacedResourceQuota is the resolver for the replaceCoreV1NamespacedResourceQuota field.
func (r *mutationResolver) ReplaceCoreV1NamespacedResourceQuota(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespace string, pretty *string, resourceQuotaInput *model.ResourceQuotaInput) (*v1.ResourceQuota, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedResourceQuota - replaceCoreV1NamespacedResourceQuota")

	return nil, nil
}

// ReplaceCoreV1NamespacedResourceQuotaStatus is the resolver for the replaceCoreV1NamespacedResourceQuotaStatus field.
func (r *mutationResolver) ReplaceCoreV1NamespacedResourceQuotaStatus(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespace string, pretty *string, resourceQuotaInput *model.ResourceQuotaInput) (*v1.ResourceQuota, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedResourceQuotaStatus - replaceCoreV1NamespacedResourceQuotaStatus")

	return nil, nil
}

// ReplaceCoreV1NamespacedSecret is the resolver for the replaceCoreV1NamespacedSecret field.
func (r *mutationResolver) ReplaceCoreV1NamespacedSecret(ctx context.Context, apiV1NamespaceSecretsInput *model.APIV1NamespaceSecretsInput, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespace string, pretty *string) (*model.APIV1NamespaceSecrets, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedSecret - replaceCoreV1NamespacedSecret")

	return nil, nil
}

// ReplaceCoreV1NamespacedService is the resolver for the replaceCoreV1NamespacedService field.
func (r *mutationResolver) ReplaceCoreV1NamespacedService(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespace string, pretty *string, serviceInput *model.ServiceInput) (*v1.Service, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedService - replaceCoreV1NamespacedService")

	return nil, nil
}

// ReplaceCoreV1NamespacedServiceAccount is the resolver for the replaceCoreV1NamespacedServiceAccount field.
func (r *mutationResolver) ReplaceCoreV1NamespacedServiceAccount(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespace string, pretty *string, serviceAccountInput *model.ServiceAccountInput) (*v1.ServiceAccount, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedServiceAccount - replaceCoreV1NamespacedServiceAccount")

	return nil, nil
}

// ReplaceCoreV1NamespacedServiceStatus is the resolver for the replaceCoreV1NamespacedServiceStatus field.
func (r *mutationResolver) ReplaceCoreV1NamespacedServiceStatus(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, namespace string, pretty *string, serviceInput *model.ServiceInput) (*v1.Service, error) {
	log.Printf("not implemented: ReplaceCoreV1NamespacedServiceStatus - replaceCoreV1NamespacedServiceStatus")

	return nil, nil
}

// ReplaceCoreV1Node is the resolver for the replaceCoreV1Node field.
func (r *mutationResolver) ReplaceCoreV1Node(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, nodeInput *model.NodeInput, pretty *string) (*v1.Node, error) {
	log.Printf("not implemented: ReplaceCoreV1Node - replaceCoreV1Node")

	return nil, nil
}

// ReplaceCoreV1NodeStatus is the resolver for the replaceCoreV1NodeStatus field.
func (r *mutationResolver) ReplaceCoreV1NodeStatus(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, nodeInput *model.NodeInput, pretty *string) (*v1.Node, error) {
	log.Printf("not implemented: ReplaceCoreV1NodeStatus - replaceCoreV1NodeStatus")

	return nil, nil
}

// ReplaceCoreV1PersistentVolume is the resolver for the replaceCoreV1PersistentVolume field.
func (r *mutationResolver) ReplaceCoreV1PersistentVolume(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, persistentVolumeInput *model.PersistentVolumeInput, pretty *string) (*v1.PersistentVolume, error) {
	log.Printf("not implemented: ReplaceCoreV1PersistentVolume - replaceCoreV1PersistentVolume")

	return nil, nil
}

// ReplaceCoreV1PersistentVolumeStatus is the resolver for the replaceCoreV1PersistentVolumeStatus field.
func (r *mutationResolver) ReplaceCoreV1PersistentVolumeStatus(ctx context.Context, dryRun *string, fieldManager *string, fieldValidation *string, name string, persistentVolumeInput *model.PersistentVolumeInput, pretty *string) (*v1.PersistentVolume, error) {
	log.Printf("not implemented: ReplaceCoreV1PersistentVolumeStatus - replaceCoreV1PersistentVolumeStatus")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *namespaceResolver) Metadata(ctx context.Context, obj *v1.Namespace) (*model.Metadata, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Spec is the resolver for the spec field.
func (r *namespaceResolver) Spec(ctx context.Context, obj *v1.Namespace) (*model.Spec2, error) {
	log.Printf("not implemented: Spec - spec")

	return nil, nil
}

// Status is the resolver for the status field.
func (r *namespaceResolver) Status(ctx context.Context, obj *v1.Namespace) (*v11.Status, error) {
	log.Printf("not implemented: Status - status")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *namespaceListResolver) Items(ctx context.Context, obj *v1.NamespaceList) ([]*model.Items6ListItem, error) {
	log.Printf("not implemented: Items - items")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *namespaceListResolver) Metadata(ctx context.Context, obj *v1.NamespaceList) (*model.Metadata2, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *nodeResolver) Metadata(ctx context.Context, obj *v1.Node) (*model.Metadata, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Spec is the resolver for the spec field.
func (r *nodeResolver) Spec(ctx context.Context, obj *v1.Node) (*model.Spec11, error) {
	log.Printf("not implemented: Spec - spec")

	return nil, nil
}

// Status is the resolver for the status field.
func (r *nodeResolver) Status(ctx context.Context, obj *v1.Node) (*model.Status9, error) {
	log.Printf("not implemented: Status - status")

	return nil, nil
}

// PreferredDuringSchedulingIgnoredDuringExecution is the resolver for the preferredDuringSchedulingIgnoredDuringExecution field.
func (r *nodeAffinityResolver) PreferredDuringSchedulingIgnoredDuringExecution(ctx context.Context, obj *v1.NodeAffinity) ([]*model.PreferredDuringSchedulingIgnoredDuringExecutionListItem, error) {
	log.Printf("not implemented: PreferredDuringSchedulingIgnoredDuringExecution - preferredDuringSchedulingIgnoredDuringExecution")

	return nil, nil
}

// RequiredDuringSchedulingIgnoredDuringExecution is the resolver for the requiredDuringSchedulingIgnoredDuringExecution field.
func (r *nodeAffinityResolver) RequiredDuringSchedulingIgnoredDuringExecution(ctx context.Context, obj *v1.NodeAffinity) (*model.RequiredDuringSchedulingIgnoredDuringExecution, error) {
	log.Printf("not implemented: RequiredDuringSchedulingIgnoredDuringExecution - requiredDuringSchedulingIgnoredDuringExecution")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *nodeListResolver) Items(ctx context.Context, obj *v1.NodeList) ([]*model.Items20ListItem, error) {
	log.Printf("not implemented: Items - items")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *nodeListResolver) Metadata(ctx context.Context, obj *v1.NodeList) (*model.Metadata2, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *persistentVolumeResolver) Metadata(ctx context.Context, obj *v1.PersistentVolume) (*model.Metadata, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Spec is the resolver for the spec field.
func (r *persistentVolumeResolver) Spec(ctx context.Context, obj *v1.PersistentVolume) (*model.Spec12, error) {
	log.Printf("not implemented: Spec - spec")

	return nil, nil
}

// Status is the resolver for the status field.
func (r *persistentVolumeResolver) Status(ctx context.Context, obj *v1.PersistentVolume) (*model.Status10, error) {
	log.Printf("not implemented: Status - status")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *persistentVolumeClaimResolver) Metadata(ctx context.Context, obj *v1.PersistentVolumeClaim) (*model.Metadata, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Spec is the resolver for the spec field.
func (r *persistentVolumeClaimResolver) Spec(ctx context.Context, obj *v1.PersistentVolumeClaim) (*model.Spec3, error) {
	log.Printf("not implemented: Spec - spec")

	return nil, nil
}

// Status is the resolver for the status field.
func (r *persistentVolumeClaimResolver) Status(ctx context.Context, obj *v1.PersistentVolumeClaim) (*model.Status2, error) {
	log.Printf("not implemented: Status - status")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *persistentVolumeClaimListResolver) Items(ctx context.Context, obj *v1.PersistentVolumeClaimList) ([]*model.Items7ListItem, error) {
	log.Printf("not implemented: Items - items")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *persistentVolumeClaimListResolver) Metadata(ctx context.Context, obj *v1.PersistentVolumeClaimList) (*model.Metadata2, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *persistentVolumeListResolver) Items(ctx context.Context, obj *v1.PersistentVolumeList) ([]*model.Items21ListItem, error) {
	log.Printf("not implemented: Items - items")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *persistentVolumeListResolver) Metadata(ctx context.Context, obj *v1.PersistentVolumeList) (*model.Metadata2, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// FsType is the resolver for the fsType field.
func (r *photonPersistentDiskResolver) FsType(ctx context.Context, obj *v1beta11.FSType) (*string, error) {
	log.Printf("not implemented: FsType - fsType")

	return nil, nil
}

// PdID is the resolver for the pdID field.
func (r *photonPersistentDiskResolver) PdID(ctx context.Context, obj *v1beta11.FSType) (string, error) {
	log.Printf("not implemented: PdID - pdID")

	return "", nil
}

// Metadata is the resolver for the metadata field.
func (r *podResolver) Metadata(ctx context.Context, obj *v1.Pod) (*model.Metadata, error) {
	uid := string(obj.ObjectMeta.UID)

	return &model.Metadata{
		Name:      &obj.ObjectMeta.Name,
		Namespace: &obj.ObjectMeta.Namespace,
		SelfLink:  &obj.ObjectMeta.SelfLink,
		UID:       &uid,
	}, nil
}

// Spec is the resolver for the spec field.
func (r *podResolver) Spec(ctx context.Context, obj *v1.Pod) (*model.Spec4, error) {
	log.Printf("not implemented: Spec - spec")

	return nil, nil
}

// Status is the resolver for the status field.
func (r *podResolver) Status(ctx context.Context, obj *v1.Pod) (*model.Status3, error) {
	return &model.Status3{
		Message: &obj.Status.Message,
		HostIP:  &obj.Status.HostIP,
		PodIP:   &obj.Status.PodIP,
		Reason:  &obj.Status.Reason,
	}, nil
}

// PreferredDuringSchedulingIgnoredDuringExecution is the resolver for the preferredDuringSchedulingIgnoredDuringExecution field.
func (r *podAffinityResolver) PreferredDuringSchedulingIgnoredDuringExecution(ctx context.Context, obj *v1.PodAffinity) ([]*model.PreferredDuringSchedulingIgnoredDuringExecution2ListItem, error) {
	log.Printf("not implemented: PreferredDuringSchedulingIgnoredDuringExecution - preferredDuringSchedulingIgnoredDuringExecution")

	return nil, nil
}

// RequiredDuringSchedulingIgnoredDuringExecution is the resolver for the requiredDuringSchedulingIgnoredDuringExecution field.
func (r *podAffinityResolver) RequiredDuringSchedulingIgnoredDuringExecution(ctx context.Context, obj *v1.PodAffinity) ([]*model.RequiredDuringSchedulingIgnoredDuringExecution2ListItem, error) {
	log.Printf("not implemented: RequiredDuringSchedulingIgnoredDuringExecution - requiredDuringSchedulingIgnoredDuringExecution")

	return nil, nil
}

// NamespaceSelector is the resolver for the namespaceSelector field.
func (r *podAffinityTermResolver) NamespaceSelector(ctx context.Context, obj *v1.PodAffinityTerm) (*model.NamespaceSelector, error) {
	log.Printf("not implemented: NamespaceSelector - namespaceSelector")

	return nil, nil
}

// PreferredDuringSchedulingIgnoredDuringExecution is the resolver for the preferredDuringSchedulingIgnoredDuringExecution field.
func (r *podAntiAffinityResolver) PreferredDuringSchedulingIgnoredDuringExecution(ctx context.Context, obj *v1.PodAntiAffinity) ([]*model.PreferredDuringSchedulingIgnoredDuringExecution3ListItem, error) {
	log.Printf("not implemented: PreferredDuringSchedulingIgnoredDuringExecution - preferredDuringSchedulingIgnoredDuringExecution")

	return nil, nil
}

// RequiredDuringSchedulingIgnoredDuringExecution is the resolver for the requiredDuringSchedulingIgnoredDuringExecution field.
func (r *podAntiAffinityResolver) RequiredDuringSchedulingIgnoredDuringExecution(ctx context.Context, obj *v1.PodAntiAffinity) ([]*model.RequiredDuringSchedulingIgnoredDuringExecution3ListItem, error) {
	log.Printf("not implemented: RequiredDuringSchedulingIgnoredDuringExecution - requiredDuringSchedulingIgnoredDuringExecution")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *podListResolver) Items(ctx context.Context, obj *v1.PodList) ([]*model.Items8ListItem, error) {
	podList := make([]*model.Items8ListItem, 0)
	for _, item := range obj.Items {
		podList = append(podList, &model.Items8ListItem{
			APIVersion: &item.APIVersion,
			Kind:       &item.Kind,
			Metadata: &model.Metadata{
				Annotations:                nil,
				CreationTimestamp:          nil,
				DeletionGracePeriodSeconds: nil,
				DeletionTimestamp:          nil,
				Finalizers:                 []*string{},
				GenerateName:               nil,
				Generation:                 nil,
				Labels:                     nil,
				ManagedFields:              []*model.ManagedFieldsListItem{},
				Name:                       &item.Name,
				Namespace:                  &item.Namespace,
				OwnerReferences:            []*model.OwnerReferencesListItem{},
				ResourceVersion:            &item.ResourceVersion,
				SelfLink:                   &item.SelfLink,
				UID:                        (*string)(&item.UID),
			},
			Status: &model.Status3{
				Conditions:                 []*model.Conditions4ListItem{},
				ContainerStatuses:          []*model.ContainerStatusesListItem{},
				EphemeralContainerStatuses: []*model.EphemeralContainerStatusesListItem{},
				HostIP:                     &item.Status.HostIP,
				InitContainerStatuses:      []*model.InitContainerStatusesListItem{},
				Message:                    &item.Status.Message,
				NominatedNodeName:          &item.Status.NominatedNodeName,
				Phase:                      nil,
				PodIP:                      &item.Status.PodIP,
				PodIPs:                     []*model.PodIPsListItem{},
				QosClass:                   nil,
				Reason:                     &item.Status.Reason,
				Resize:                     nil,
				StartTime:                  nil,
			},
		})
	}

	return podList, nil
}

// Metadata is the resolver for the metadata field.
func (r *podListResolver) Metadata(ctx context.Context, obj *v1.PodList) (*model.Metadata2, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *podTemplateResolver) Metadata(ctx context.Context, obj *v1.PodTemplate) (*model.Metadata, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Template is the resolver for the template field.
func (r *podTemplateResolver) Template(ctx context.Context, obj *v1.PodTemplate) (*model.Template, error) {
	log.Printf("not implemented: Template - template")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *podTemplateListResolver) Items(ctx context.Context, obj *v1.PodTemplateList) ([]*model.Items14ListItem, error) {
	log.Printf("not implemented: Items - items")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *podTemplateListResolver) Metadata(ctx context.Context, obj *v1.PodTemplateList) (*model.Metadata2, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// FsType is the resolver for the fsType field.
func (r *portworxVolumeResolver) FsType(ctx context.Context, obj *v1beta11.FSType) (*string, error) {
	log.Printf("not implemented: FsType - fsType")

	return nil, nil
}

// ReadOnly is the resolver for the readOnly field.
func (r *portworxVolumeResolver) ReadOnly(ctx context.Context, obj *v1beta11.FSType) (*bool, error) {
	log.Printf("not implemented: ReadOnly - readOnly")

	return nil, nil
}

// VolumeID is the resolver for the volumeID field.
func (r *portworxVolumeResolver) VolumeID(ctx context.Context, obj *v1beta11.FSType) (string, error) {
	log.Printf("not implemented: VolumeID - volumeID")

	return "", nil
}

// ResourceVersion is the resolver for the resourceVersion field.
func (r *preconditionsResolver) ResourceVersion(ctx context.Context, obj *v1.Preconditions) (*string, error) {
	log.Printf("not implemented: ResourceVersion - resourceVersion")

	return nil, nil
}

// UID is the resolver for the uid field.
func (r *preconditionsResolver) UID(ctx context.Context, obj *v1.Preconditions) (*string, error) {
	log.Printf("not implemented: UID - uid")

	return nil, nil
}

// DefaultMode is the resolver for the defaultMode field.
func (r *projectedResolver) DefaultMode(ctx context.Context, obj *v1beta11.FSType) (*int, error) {
	log.Printf("not implemented: DefaultMode - defaultMode")

	return nil, nil
}

// Sources is the resolver for the sources field.
func (r *projectedResolver) Sources(ctx context.Context, obj *v1beta11.FSType) ([]*model.SourcesListItem, error) {
	log.Printf("not implemented: Sources - sources")

	return nil, nil
}

// APIV1NamespacePodAttach is the resolver for the apiV1NamespacePodAttach field.
func (r *queryResolver) APIV1NamespacePodAttach(ctx context.Context, container *string, name string, namespace string, stderr *bool, stdin *bool, stdout *bool, tty *bool) (*string, error) {
	log.Printf("not implemented: APIV1NamespacePodAttach - apiV1NamespacePodAttach")

	return nil, nil
}

// APIV1NamespacePodExec is the resolver for the apiV1NamespacePodExec field.
func (r *queryResolver) APIV1NamespacePodExec(ctx context.Context, command *string, container *string, name string, namespace string, stderr *bool, stdin *bool, stdout *bool, tty *bool) (*string, error) {
	log.Printf("not implemented: APIV1NamespacePodExec - apiV1NamespacePodExec")

	return nil, nil
}

// APIV1NamespacePodLog is the resolver for the apiV1NamespacePodLog field.
func (r *queryResolver) APIV1NamespacePodLog(ctx context.Context, container *string, follow *bool, insecureSkipTLSVerifyBackend *bool, limitBytes *int, name string, namespace string, pretty *string, previous *bool, sinceSeconds *int, tailLines *int, timestamps *bool) (*string, error) {
	log.Printf("not implemented: APIV1NamespacePodLog - apiV1NamespacePodLog")

	return nil, nil
}

// APIV1NamespacePodPortforward is the resolver for the apiV1NamespacePodPortforward field.
func (r *queryResolver) APIV1NamespacePodPortforward(ctx context.Context, name string, namespace string, ports *int) (*string, error) {
	log.Printf("not implemented: APIV1NamespacePodPortforward - apiV1NamespacePodPortforward")

	return nil, nil
}

// APIV1NamespacePodProxy is the resolver for the apiV1NamespacePodProxy field.
func (r *queryResolver) APIV1NamespacePodProxy(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: APIV1NamespacePodProxy - apiV1NamespacePodProxy")

	return nil, nil
}

// APIV1NamespaceSecrets is the resolver for the apiV1NamespaceSecrets field.
func (r *queryResolver) APIV1NamespaceSecrets(ctx context.Context, name string, namespace string, pretty *string) (*model.APIV1NamespaceSecrets, error) {
	log.Printf("not implemented: APIV1NamespaceSecrets - apiV1NamespaceSecrets")

	return nil, nil
}

// APIV1NamespaceServiceProxy is the resolver for the apiV1NamespaceServiceProxy field.
func (r *queryResolver) APIV1NamespaceServiceProxy(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: APIV1NamespaceServiceProxy - apiV1NamespaceServiceProxy")

	return nil, nil
}

// APIV1NodeProxy is the resolver for the apiV1NodeProxy field.
func (r *queryResolver) APIV1NodeProxy(ctx context.Context, name string, path *string) (*string, error) {
	log.Printf("not implemented: APIV1NodeProxy - apiV1NodeProxy")

	return nil, nil
}

// ComponentStatus is the resolver for the componentStatus field.
func (r *queryResolver) ComponentStatus(ctx context.Context, name string, pretty *string) (*v1.ComponentStatus, error) {
	log.Printf("not implemented: ComponentStatus - componentStatus")

	return nil, nil
}

// ComponentStatusList is the resolver for the componentStatusList field.
func (r *queryResolver) ComponentStatusList(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.ComponentStatusList, error) {
	log.Printf("not implemented: ComponentStatusList - componentStatusList")

	return nil, nil
}

// ConfigMap is the resolver for the configMap field.
func (r *queryResolver) ConfigMap(ctx context.Context, name string, namespace string, pretty *string) (*v1.ConfigMap, error) {
	log.Printf("not implemented: ConfigMap - configMap")

	return nil, nil
}

// ConfigMapList is the resolver for the configMapList field.
func (r *queryResolver) ConfigMapList(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.ConfigMapList, error) {
	log.Printf("not implemented: ConfigMapList - configMapList")

	return nil, nil
}

// ConnectCoreV1GetNamespacedPodProxyWithPath is the resolver for the connectCoreV1GetNamespacedPodProxyWithPath field.
func (r *queryResolver) ConnectCoreV1GetNamespacedPodProxyWithPath(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1GetNamespacedPodProxyWithPath - connectCoreV1GetNamespacedPodProxyWithPath")

	return nil, nil
}

// ConnectCoreV1GetNamespacedServiceProxyWithPath is the resolver for the connectCoreV1GetNamespacedServiceProxyWithPath field.
func (r *queryResolver) ConnectCoreV1GetNamespacedServiceProxyWithPath(ctx context.Context, name string, namespace string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1GetNamespacedServiceProxyWithPath - connectCoreV1GetNamespacedServiceProxyWithPath")

	return nil, nil
}

// ConnectCoreV1GetNodeProxyWithPath is the resolver for the connectCoreV1GetNodeProxyWithPath field.
func (r *queryResolver) ConnectCoreV1GetNodeProxyWithPath(ctx context.Context, name string, path *string) (*string, error) {
	log.Printf("not implemented: ConnectCoreV1GetNodeProxyWithPath - connectCoreV1GetNodeProxyWithPath")

	return nil, nil
}

// Endpoints is the resolver for the endpoints field.
func (r *queryResolver) Endpoints(ctx context.Context, name string, namespace string, pretty *string) (*v1.Endpoints, error) {
	log.Printf("not implemented: Endpoints - endpoints")

	return nil, nil
}

// EndpointsList is the resolver for the endpointsList field.
func (r *queryResolver) EndpointsList(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.EndpointsList, error) {
	log.Printf("not implemented: EndpointsList - endpointsList")

	return nil, nil
}

// Event is the resolver for the event field.
func (r *queryResolver) Event(ctx context.Context, name string, namespace string, pretty *string) (*v1.Event, error) {
	log.Printf("not implemented: Event - event")

	return nil, nil
}

// EventList is the resolver for the eventList field.
func (r *queryResolver) EventList(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.EventList, error) {
	log.Printf("not implemented: EventList - eventList")

	return nil, nil
}

// IoK8sAPIAutoscalingV1Scale is the resolver for the ioK8sApiAutoscalingV1Scale field.
func (r *queryResolver) IoK8sAPIAutoscalingV1Scale(ctx context.Context, name string, namespace string, pretty *string) (*model.IoK8sAPIAutoscalingV1Scale, error) {
	log.Printf("not implemented: IoK8sAPIAutoscalingV1Scale - ioK8sApiAutoscalingV1Scale")

	return nil, nil
}

// IoK8sApimachineryPkgApisMetaV1APIResourceList is the resolver for the ioK8sApimachineryPkgApisMetaV1APIResourceList field.
func (r *queryResolver) IoK8sApimachineryPkgApisMetaV1APIResourceList(ctx context.Context) (*model.IoK8sApimachineryPkgApisMetaV1APIResourceList, error) {
	log.Printf("not implemented: IoK8sApimachineryPkgApisMetaV1APIResourceList - ioK8sApimachineryPkgApisMetaV1APIResourceList")

	return nil, nil
}

// LimitRange is the resolver for the limitRange field.
func (r *queryResolver) LimitRange(ctx context.Context, name string, namespace string, pretty *string) (*v1.LimitRange, error) {
	log.Printf("not implemented: LimitRange - limitRange")

	return nil, nil
}

// LimitRangeList is the resolver for the limitRangeList field.
func (r *queryResolver) LimitRangeList(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.LimitRangeList, error) {
	log.Printf("not implemented: LimitRangeList - limitRangeList")

	return nil, nil
}

// ListCoreV1NamespacedConfigMap is the resolver for the listCoreV1NamespacedConfigMap field.
func (r *queryResolver) ListCoreV1NamespacedConfigMap(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, namespace string, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.ConfigMapList, error) {
	log.Printf("not implemented: ListCoreV1NamespacedConfigMap - listCoreV1NamespacedConfigMap")

	return nil, nil
}

// ListCoreV1NamespacedEndpoints is the resolver for the listCoreV1NamespacedEndpoints field.
func (r *queryResolver) ListCoreV1NamespacedEndpoints(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, namespace string, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.EndpointsList, error) {
	log.Printf("not implemented: ListCoreV1NamespacedEndpoints - listCoreV1NamespacedEndpoints")

	return nil, nil
}

// ListCoreV1NamespacedEvent is the resolver for the listCoreV1NamespacedEvent field.
func (r *queryResolver) ListCoreV1NamespacedEvent(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, namespace string, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.EventList, error) {
	log.Printf("not implemented: ListCoreV1NamespacedEvent - listCoreV1NamespacedEvent")

	return nil, nil
}

// ListCoreV1NamespacedLimitRange is the resolver for the listCoreV1NamespacedLimitRange field.
func (r *queryResolver) ListCoreV1NamespacedLimitRange(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, namespace string, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.LimitRangeList, error) {
	log.Printf("not implemented: ListCoreV1NamespacedLimitRange - listCoreV1NamespacedLimitRange")

	return nil, nil
}

// ListCoreV1PersistentVolumeClaimForAllNamespaces is the resolver for the listCoreV1PersistentVolumeClaimForAllNamespaces field.
func (r *queryResolver) ListCoreV1PersistentVolumeClaimForAllNamespaces(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.PersistentVolumeClaimList, error) {
	log.Printf("not implemented: ListCoreV1PersistentVolumeClaimForAllNamespaces - listCoreV1PersistentVolumeClaimForAllNamespaces")

	return nil, nil
}

// ListCoreV1PodForAllNamespaces is the resolver for the listCoreV1PodForAllNamespaces field.
func (r *queryResolver) ListCoreV1PodForAllNamespaces(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.PodList, error) {
	log.Printf("not implemented: ListCoreV1PodForAllNamespaces - listCoreV1PodForAllNamespaces")

	return nil, nil
}

// ListCoreV1PodTemplateForAllNamespaces is the resolver for the listCoreV1PodTemplateForAllNamespaces field.
func (r *queryResolver) ListCoreV1PodTemplateForAllNamespaces(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.PodTemplateList, error) {
	log.Printf("not implemented: ListCoreV1PodTemplateForAllNamespaces - listCoreV1PodTemplateForAllNamespaces")

	return nil, nil
}

// ListCoreV1ReplicationControllerForAllNamespaces is the resolver for the listCoreV1ReplicationControllerForAllNamespaces field.
func (r *queryResolver) ListCoreV1ReplicationControllerForAllNamespaces(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.ReplicationControllerList, error) {
	log.Printf("not implemented: ListCoreV1ReplicationControllerForAllNamespaces - listCoreV1ReplicationControllerForAllNamespaces")

	return nil, nil
}

// ListCoreV1ResourceQuotaForAllNamespaces is the resolver for the listCoreV1ResourceQuotaForAllNamespaces field.
func (r *queryResolver) ListCoreV1ResourceQuotaForAllNamespaces(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.ResourceQuotaList, error) {
	log.Printf("not implemented: ListCoreV1ResourceQuotaForAllNamespaces - listCoreV1ResourceQuotaForAllNamespaces")

	return nil, nil
}

// ListCoreV1SecretForAllNamespaces is the resolver for the listCoreV1SecretForAllNamespaces field.
func (r *queryResolver) ListCoreV1SecretForAllNamespaces(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.SecretList, error) {
	log.Printf("not implemented: ListCoreV1SecretForAllNamespaces - listCoreV1SecretForAllNamespaces")

	return nil, nil
}

// ListCoreV1ServiceAccountForAllNamespaces is the resolver for the listCoreV1ServiceAccountForAllNamespaces field.
func (r *queryResolver) ListCoreV1ServiceAccountForAllNamespaces(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.ServiceAccountList, error) {
	log.Printf("not implemented: ListCoreV1ServiceAccountForAllNamespaces - listCoreV1ServiceAccountForAllNamespaces")

	return nil, nil
}

// ListCoreV1ServiceForAllNamespaces is the resolver for the listCoreV1ServiceForAllNamespaces field.
func (r *queryResolver) ListCoreV1ServiceForAllNamespaces(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.ServiceList, error) {
	log.Printf("not implemented: ListCoreV1ServiceForAllNamespaces - listCoreV1ServiceForAllNamespaces")

	return nil, nil
}

// Namespace is the resolver for the namespace field.
func (r *queryResolver) Namespace(ctx context.Context, name string, pretty *string) (*v1.Namespace, error) {
	log.Printf("not implemented: Namespace - namespace")

	return nil, nil
}

// NamespaceList is the resolver for the namespaceList field.
func (r *queryResolver) NamespaceList(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.NamespaceList, error) {
	log.Printf("not implemented: NamespaceList - namespaceList")

	return nil, nil
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, name string, pretty *string) (*v1.Node, error) {
	log.Printf("not implemented: Node - node")

	return nil, nil
}

// NodeList is the resolver for the nodeList field.
func (r *queryResolver) NodeList(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.NodeList, error) {
	log.Printf("not implemented: NodeList - nodeList")

	return nil, nil
}

// PersistentVolume is the resolver for the persistentVolume field.
func (r *queryResolver) PersistentVolume(ctx context.Context, name string, pretty *string) (*v1.PersistentVolume, error) {
	log.Printf("not implemented: PersistentVolume - persistentVolume")

	return nil, nil
}

// PersistentVolumeClaim is the resolver for the persistentVolumeClaim field.
func (r *queryResolver) PersistentVolumeClaim(ctx context.Context, name string, namespace string, pretty *string) (*v1.PersistentVolumeClaim, error) {
	log.Printf("not implemented: PersistentVolumeClaim - persistentVolumeClaim")

	return nil, nil
}

// PersistentVolumeClaimList is the resolver for the persistentVolumeClaimList field.
func (r *queryResolver) PersistentVolumeClaimList(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, namespace string, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.PersistentVolumeClaimList, error) {
	log.Printf("not implemented: PersistentVolumeClaimList - persistentVolumeClaimList")

	return nil, nil
}

// PersistentVolumeList is the resolver for the persistentVolumeList field.
func (r *queryResolver) PersistentVolumeList(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.PersistentVolumeList, error) {
	log.Printf("not implemented: PersistentVolumeList - persistentVolumeList")

	return nil, nil
}

// Pod is the resolver for the pod field.
func (r *queryResolver) Pod(ctx context.Context, name string, namespace string, pretty *string) (*v1.Pod, error) {
	return r.Clientset.CoreV1().Pods(namespace).Get(name, v11.GetOptions{})
}

// PodList is the resolver for the podList field.
func (r *queryResolver) PodList(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, namespace string, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.PodList, error) {
	return r.Clientset.CoreV1().Pods(namespace).List(v11.ListOptions{})
}

// PodTemplate is the resolver for the podTemplate field.
func (r *queryResolver) PodTemplate(ctx context.Context, name string, namespace string, pretty *string) (*v1.PodTemplate, error) {
	log.Printf("not implemented: PodTemplate - podTemplate")

	return nil, nil
}

// PodTemplateList is the resolver for the podTemplateList field.
func (r *queryResolver) PodTemplateList(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, namespace string, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.PodTemplateList, error) {
	log.Printf("not implemented: PodTemplateList - podTemplateList")

	return nil, nil
}

// ReadCoreV1NamespaceStatus is the resolver for the readCoreV1NamespaceStatus field.
func (r *queryResolver) ReadCoreV1NamespaceStatus(ctx context.Context, name string, pretty *string) (*v1.Namespace, error) {
	log.Printf("not implemented: ReadCoreV1NamespaceStatus - readCoreV1NamespaceStatus")

	return nil, nil
}

// ReadCoreV1NamespacedPersistentVolumeClaimStatus is the resolver for the readCoreV1NamespacedPersistentVolumeClaimStatus field.
func (r *queryResolver) ReadCoreV1NamespacedPersistentVolumeClaimStatus(ctx context.Context, name string, namespace string, pretty *string) (*v1.PersistentVolumeClaim, error) {
	log.Printf("not implemented: ReadCoreV1NamespacedPersistentVolumeClaimStatus - readCoreV1NamespacedPersistentVolumeClaimStatus")

	return nil, nil
}

// ReadCoreV1NamespacedPodEphemeralcontainers is the resolver for the readCoreV1NamespacedPodEphemeralcontainers field.
func (r *queryResolver) ReadCoreV1NamespacedPodEphemeralcontainers(ctx context.Context, name string, namespace string, pretty *string) (*v1.Pod, error) {
	log.Printf("not implemented: ReadCoreV1NamespacedPodEphemeralcontainers - readCoreV1NamespacedPodEphemeralcontainers")

	return nil, nil
}

// ReadCoreV1NamespacedPodStatus is the resolver for the readCoreV1NamespacedPodStatus field.
func (r *queryResolver) ReadCoreV1NamespacedPodStatus(ctx context.Context, name string, namespace string, pretty *string) (*v1.Pod, error) {
	log.Printf("not implemented: ReadCoreV1NamespacedPodStatus - readCoreV1NamespacedPodStatus")

	return nil, nil
}

// ReadCoreV1NamespacedReplicationControllerStatus is the resolver for the readCoreV1NamespacedReplicationControllerStatus field.
func (r *queryResolver) ReadCoreV1NamespacedReplicationControllerStatus(ctx context.Context, name string, namespace string, pretty *string) (*v1.ReplicationController, error) {
	log.Printf("not implemented: ReadCoreV1NamespacedReplicationControllerStatus - readCoreV1NamespacedReplicationControllerStatus")

	return nil, nil
}

// ReadCoreV1NamespacedResourceQuotaStatus is the resolver for the readCoreV1NamespacedResourceQuotaStatus field.
func (r *queryResolver) ReadCoreV1NamespacedResourceQuotaStatus(ctx context.Context, name string, namespace string, pretty *string) (*v1.ResourceQuota, error) {
	log.Printf("not implemented: ReadCoreV1NamespacedResourceQuotaStatus - readCoreV1NamespacedResourceQuotaStatus")

	return nil, nil
}

// ReadCoreV1NamespacedServiceStatus is the resolver for the readCoreV1NamespacedServiceStatus field.
func (r *queryResolver) ReadCoreV1NamespacedServiceStatus(ctx context.Context, name string, namespace string, pretty *string) (*v1.Service, error) {
	log.Printf("not implemented: ReadCoreV1NamespacedServiceStatus - readCoreV1NamespacedServiceStatus")

	return nil, nil
}

// ReadCoreV1NodeStatus is the resolver for the readCoreV1NodeStatus field.
func (r *queryResolver) ReadCoreV1NodeStatus(ctx context.Context, name string, pretty *string) (*v1.Node, error) {
	log.Printf("not implemented: ReadCoreV1NodeStatus - readCoreV1NodeStatus")

	return nil, nil
}

// ReadCoreV1PersistentVolumeStatus is the resolver for the readCoreV1PersistentVolumeStatus field.
func (r *queryResolver) ReadCoreV1PersistentVolumeStatus(ctx context.Context, name string, pretty *string) (*v1.PersistentVolume, error) {
	log.Printf("not implemented: ReadCoreV1PersistentVolumeStatus - readCoreV1PersistentVolumeStatus")

	return nil, nil
}

// ReplicationController is the resolver for the replicationController field.
func (r *queryResolver) ReplicationController(ctx context.Context, name string, namespace string, pretty *string) (*v1.ReplicationController, error) {
	log.Printf("not implemented: ReplicationController - replicationController")

	return nil, nil
}

// ReplicationControllerList is the resolver for the replicationControllerList field.
func (r *queryResolver) ReplicationControllerList(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, namespace string, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.ReplicationControllerList, error) {
	log.Printf("not implemented: ReplicationControllerList - replicationControllerList")

	return nil, nil
}

// ResourceQuota is the resolver for the resourceQuota field.
func (r *queryResolver) ResourceQuota(ctx context.Context, name string, namespace string, pretty *string) (*v1.ResourceQuota, error) {
	log.Printf("not implemented: ResourceQuota - resourceQuota")

	return nil, nil
}

// ResourceQuotaList is the resolver for the resourceQuotaList field.
func (r *queryResolver) ResourceQuotaList(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, namespace string, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.ResourceQuotaList, error) {
	log.Printf("not implemented: ResourceQuotaList - resourceQuotaList")

	return nil, nil
}

// SecretList is the resolver for the secretList field.
func (r *queryResolver) SecretList(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, namespace string, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.SecretList, error) {
	log.Printf("not implemented: SecretList - secretList")

	return nil, nil
}

// Service is the resolver for the service field.
func (r *queryResolver) Service(ctx context.Context, name string, namespace string, pretty *string) (*v1.Service, error) {
	log.Printf("not implemented: Service - service")

	return nil, nil
}

// ServiceAccount is the resolver for the serviceAccount field.
func (r *queryResolver) ServiceAccount(ctx context.Context, name string, namespace string, pretty *string) (*v1.ServiceAccount, error) {
	log.Printf("not implemented: ServiceAccount - serviceAccount")

	return nil, nil
}

// ServiceAccountList is the resolver for the serviceAccountList field.
func (r *queryResolver) ServiceAccountList(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, namespace string, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.ServiceAccountList, error) {
	log.Printf("not implemented: ServiceAccountList - serviceAccountList")

	return nil, nil
}

// ServiceList is the resolver for the serviceList field.
func (r *queryResolver) ServiceList(ctx context.Context, allowWatchBookmarks *bool, continueArg *string, fieldSelector *string, labelSelector *string, limit *int, namespace string, pretty *string, resourceVersion *string, resourceVersionMatch *string, sendInitialEvents *bool, timeoutSeconds *int, watch *bool) (*v1.ServiceList, error) {
	log.Printf("not implemented: ServiceList - serviceList")

	return nil, nil
}

// Group is the resolver for the group field.
func (r *quobyteResolver) Group(ctx context.Context, obj *v1beta1.FSType) (*string, error) {
	log.Printf("not implemented: Group - group")

	return nil, nil
}

// ReadOnly is the resolver for the readOnly field.
func (r *quobyteResolver) ReadOnly(ctx context.Context, obj *v1beta1.FSType) (*bool, error) {
	log.Printf("not implemented: ReadOnly - readOnly")

	return nil, nil
}

// Registry is the resolver for the registry field.
func (r *quobyteResolver) Registry(ctx context.Context, obj *v1beta1.FSType) (string, error) {
	log.Printf("not implemented: Registry - registry")

	return "", nil
}

// Tenant is the resolver for the tenant field.
func (r *quobyteResolver) Tenant(ctx context.Context, obj *v1beta1.FSType) (*string, error) {
	log.Printf("not implemented: Tenant - tenant")

	return nil, nil
}

// User is the resolver for the user field.
func (r *quobyteResolver) User(ctx context.Context, obj *v1beta1.FSType) (*string, error) {
	log.Printf("not implemented: User - user")

	return nil, nil
}

// Volume is the resolver for the volume field.
func (r *quobyteResolver) Volume(ctx context.Context, obj *v1beta1.FSType) (string, error) {
	log.Printf("not implemented: Volume - volume")

	return "", nil
}

// Metadata is the resolver for the metadata field.
func (r *replicationControllerResolver) Metadata(ctx context.Context, obj *v1.ReplicationController) (*model.Metadata6, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Spec is the resolver for the spec field.
func (r *replicationControllerResolver) Spec(ctx context.Context, obj *v1.ReplicationController) (*model.Spec6, error) {
	log.Printf("not implemented: Spec - spec")

	return nil, nil
}

// Status is the resolver for the status field.
func (r *replicationControllerResolver) Status(ctx context.Context, obj *v1.ReplicationController) (*model.Status4, error) {
	log.Printf("not implemented: Status - status")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *replicationControllerListResolver) Items(ctx context.Context, obj *v1.ReplicationControllerList) ([]*model.Items15ListItem, error) {
	log.Printf("not implemented: Items - items")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *replicationControllerListResolver) Metadata(ctx context.Context, obj *v1.ReplicationControllerList) (*model.Metadata2, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *resourceQuotaResolver) Metadata(ctx context.Context, obj *v1.ResourceQuota) (*model.Metadata, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Spec is the resolver for the spec field.
func (r *resourceQuotaResolver) Spec(ctx context.Context, obj *v1.ResourceQuota) (*model.Spec8, error) {
	log.Printf("not implemented: Spec - spec")

	return nil, nil
}

// Status is the resolver for the status field.
func (r *resourceQuotaResolver) Status(ctx context.Context, obj *v1.ResourceQuota) (*model.Status6, error) {
	log.Printf("not implemented: Status - status")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *resourceQuotaListResolver) Items(ctx context.Context, obj *v1.ResourceQuotaList) ([]*model.Items16ListItem, error) {
	log.Printf("not implemented: Items - items")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *resourceQuotaListResolver) Metadata(ctx context.Context, obj *v1.ResourceQuotaList) (*model.Metadata2, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// FsType is the resolver for the fsType field.
func (r *scaleIOResolver) FsType(ctx context.Context, obj *v1beta11.FSType) (*string, error) {
	log.Printf("not implemented: FsType - fsType")

	return nil, nil
}

// Gateway is the resolver for the gateway field.
func (r *scaleIOResolver) Gateway(ctx context.Context, obj *v1beta11.FSType) (string, error) {
	log.Printf("not implemented: Gateway - gateway")

	return "", nil
}

// ProtectionDomain is the resolver for the protectionDomain field.
func (r *scaleIOResolver) ProtectionDomain(ctx context.Context, obj *v1beta11.FSType) (*string, error) {
	log.Printf("not implemented: ProtectionDomain - protectionDomain")

	return nil, nil
}

// ReadOnly is the resolver for the readOnly field.
func (r *scaleIOResolver) ReadOnly(ctx context.Context, obj *v1beta11.FSType) (*bool, error) {
	log.Printf("not implemented: ReadOnly - readOnly")

	return nil, nil
}

// SecretRef is the resolver for the secretRef field.
func (r *scaleIOResolver) SecretRef(ctx context.Context, obj *v1beta11.FSType) (*model.SecretRef7, error) {
	log.Printf("not implemented: SecretRef - secretRef")

	return nil, nil
}

// SslEnabled is the resolver for the sslEnabled field.
func (r *scaleIOResolver) SslEnabled(ctx context.Context, obj *v1beta11.FSType) (*bool, error) {
	log.Printf("not implemented: SslEnabled - sslEnabled")

	return nil, nil
}

// StorageMode is the resolver for the storageMode field.
func (r *scaleIOResolver) StorageMode(ctx context.Context, obj *v1beta11.FSType) (*string, error) {
	log.Printf("not implemented: StorageMode - storageMode")

	return nil, nil
}

// StoragePool is the resolver for the storagePool field.
func (r *scaleIOResolver) StoragePool(ctx context.Context, obj *v1beta11.FSType) (*string, error) {
	log.Printf("not implemented: StoragePool - storagePool")

	return nil, nil
}

// System is the resolver for the system field.
func (r *scaleIOResolver) System(ctx context.Context, obj *v1beta11.FSType) (string, error) {
	log.Printf("not implemented: System - system")

	return "", nil
}

// VolumeName is the resolver for the volumeName field.
func (r *scaleIOResolver) VolumeName(ctx context.Context, obj *v1beta11.FSType) (*string, error) {
	log.Printf("not implemented: VolumeName - volumeName")

	return nil, nil
}

// MatchExpressions is the resolver for the matchExpressions field.
func (r *scopeSelectorResolver) MatchExpressions(ctx context.Context, obj *v1.ScopeSelector) ([]*model.MatchExpressions3ListItem, error) {
	log.Printf("not implemented: MatchExpressions - matchExpressions")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *secretResolver) Items(ctx context.Context, obj *v1.Secret) ([]*model.Items12ListItem, error) {
	log.Printf("not implemented: Items - items")

	return nil, nil
}

// Optional is the resolver for the optional field.
func (r *secretResolver) Optional(ctx context.Context, obj *v1.Secret) (*bool, error) {
	log.Printf("not implemented: Optional - optional")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *secretListResolver) Items(ctx context.Context, obj *v1.SecretList) ([]*model.Items17ListItem, error) {
	log.Printf("not implemented: Items - items")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *secretListResolver) Metadata(ctx context.Context, obj *v1.SecretList) (*model.Metadata2, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// ProcMount is the resolver for the procMount field.
func (r *securityContextResolver) ProcMount(ctx context.Context, obj *v1.SecurityContext) (*string, error) {
	log.Printf("not implemented: ProcMount - procMount")

	return nil, nil
}

// RunAsGroup is the resolver for the runAsGroup field.
func (r *securityContextResolver) RunAsGroup(ctx context.Context, obj *v1.SecurityContext) (*string, error) {
	log.Printf("not implemented: RunAsGroup - runAsGroup")

	return nil, nil
}

// RunAsUser is the resolver for the runAsUser field.
func (r *securityContextResolver) RunAsUser(ctx context.Context, obj *v1.SecurityContext) (*string, error) {
	log.Printf("not implemented: RunAsUser - runAsUser")

	return nil, nil
}

// SeLinuxOptions is the resolver for the seLinuxOptions field.
func (r *securityContextResolver) SeLinuxOptions(ctx context.Context, obj *v1.SecurityContext) (*model.SeLinuxOptions, error) {
	log.Printf("not implemented: SeLinuxOptions - seLinuxOptions")

	return nil, nil
}

// SeccompProfile is the resolver for the seccompProfile field.
func (r *securityContextResolver) SeccompProfile(ctx context.Context, obj *v1.SecurityContext) (*model.SeccompProfile, error) {
	log.Printf("not implemented: SeccompProfile - seccompProfile")

	return nil, nil
}

// WindowsOptions is the resolver for the windowsOptions field.
func (r *securityContextResolver) WindowsOptions(ctx context.Context, obj *v1.SecurityContext) (*model.WindowsOptions, error) {
	log.Printf("not implemented: WindowsOptions - windowsOptions")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *serviceResolver) Metadata(ctx context.Context, obj *v1.Service) (*model.Metadata, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Spec is the resolver for the spec field.
func (r *serviceResolver) Spec(ctx context.Context, obj *v1.Service) (*model.Spec10, error) {
	log.Printf("not implemented: Spec - spec")

	return nil, nil
}

// Status is the resolver for the status field.
func (r *serviceResolver) Status(ctx context.Context, obj *v1.Service) (*model.Status8, error) {
	log.Printf("not implemented: Status - status")

	return nil, nil
}

// ImagePullSecrets is the resolver for the imagePullSecrets field.
func (r *serviceAccountResolver) ImagePullSecrets(ctx context.Context, obj *v1.ServiceAccount) ([]*model.ImagePullSecrets2ListItem, error) {
	log.Printf("not implemented: ImagePullSecrets - imagePullSecrets")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *serviceAccountResolver) Metadata(ctx context.Context, obj *v1.ServiceAccount) (*model.Metadata, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Secrets is the resolver for the secrets field.
func (r *serviceAccountResolver) Secrets(ctx context.Context, obj *v1.ServiceAccount) ([]*model.SecretsListItem, error) {
	log.Printf("not implemented: Secrets - secrets")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *serviceAccountListResolver) Items(ctx context.Context, obj *v1.ServiceAccountList) ([]*model.Items18ListItem, error) {
	log.Printf("not implemented: Items - items")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *serviceAccountListResolver) Metadata(ctx context.Context, obj *v1.ServiceAccountList) (*model.Metadata2, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// Items is the resolver for the items field.
func (r *serviceListResolver) Items(ctx context.Context, obj *v1.ServiceList) ([]*model.Items19ListItem, error) {
	log.Printf("not implemented: Items - items")

	return nil, nil
}

// Metadata is the resolver for the metadata field.
func (r *serviceListResolver) Metadata(ctx context.Context, obj *v1.ServiceList) (*model.Metadata2, error) {
	log.Printf("not implemented: Metadata - metadata")

	return nil, nil
}

// ClientIP is the resolver for the clientIP field.
func (r *sessionAffinityConfigResolver) ClientIP(ctx context.Context, obj *v1.SessionAffinityConfig) (*model.ClientIP, error) {
	log.Printf("not implemented: ClientIP - clientIP")

	return nil, nil
}

// Conditions is the resolver for the conditions field.
func (r *statusResolver) Conditions(ctx context.Context, obj *v11.Status) ([]*model.Conditions2ListItem, error) {
	log.Printf("not implemented: Conditions - conditions")

	return nil, nil
}

// Phase is the resolver for the phase field.
func (r *statusResolver) Phase(ctx context.Context, obj *v11.Status) (*string, error) {
	log.Printf("not implemented: Phase - phase")

	return nil, nil
}

// FsType is the resolver for the fsType field.
func (r *vsphereVolumeResolver) FsType(ctx context.Context, obj *v1beta11.FSType) (*string, error) {
	log.Printf("not implemented: FsType - fsType")

	return nil, nil
}

// StoragePolicyID is the resolver for the storagePolicyID field.
func (r *vsphereVolumeResolver) StoragePolicyID(ctx context.Context, obj *v1beta11.FSType) (*string, error) {
	log.Printf("not implemented: StoragePolicyID - storagePolicyID")

	return nil, nil
}

// StoragePolicyName is the resolver for the storagePolicyName field.
func (r *vsphereVolumeResolver) StoragePolicyName(ctx context.Context, obj *v1beta11.FSType) (*string, error) {
	log.Printf("not implemented: StoragePolicyName - storagePolicyName")

	return nil, nil
}

// VolumePath is the resolver for the volumePath field.
func (r *vsphereVolumeResolver) VolumePath(ctx context.Context, obj *v1beta11.FSType) (string, error) {
	log.Printf("not implemented: VolumePath - volumePath")

	return "", nil
}

// AzureDisk returns generated.AzureDiskResolver implementation.
func (r *Resolver) AzureDisk() generated.AzureDiskResolver { return &azureDiskResolver{r} }

// AzureFile returns generated.AzureFileResolver implementation.
func (r *Resolver) AzureFile() generated.AzureFileResolver { return &azureFileResolver{r} }

// Binding returns generated.BindingResolver implementation.
func (r *Resolver) Binding() generated.BindingResolver { return &bindingResolver{r} }

// Capabilities returns generated.CapabilitiesResolver implementation.
func (r *Resolver) Capabilities() generated.CapabilitiesResolver { return &capabilitiesResolver{r} }

// Cinder returns generated.CinderResolver implementation.
func (r *Resolver) Cinder() generated.CinderResolver { return &cinderResolver{r} }

// ComponentStatus returns generated.ComponentStatusResolver implementation.
func (r *Resolver) ComponentStatus() generated.ComponentStatusResolver {
	return &componentStatusResolver{r}
}

// ComponentStatusList returns generated.ComponentStatusListResolver implementation.
func (r *Resolver) ComponentStatusList() generated.ComponentStatusListResolver {
	return &componentStatusListResolver{r}
}

// ConfigMap returns generated.ConfigMapResolver implementation.
func (r *Resolver) ConfigMap() generated.ConfigMapResolver { return &configMapResolver{r} }

// ConfigMapList returns generated.ConfigMapListResolver implementation.
func (r *Resolver) ConfigMapList() generated.ConfigMapListResolver { return &configMapListResolver{r} }

// DeleteOptions returns generated.DeleteOptionsResolver implementation.
func (r *Resolver) DeleteOptions() generated.DeleteOptionsResolver { return &deleteOptionsResolver{r} }

// DownwardAPI returns generated.DownwardAPIResolver implementation.
func (r *Resolver) DownwardAPI() generated.DownwardAPIResolver { return &downwardAPIResolver{r} }

// EmptyDir returns generated.EmptyDirResolver implementation.
func (r *Resolver) EmptyDir() generated.EmptyDirResolver { return &emptyDirResolver{r} }

// Endpoints returns generated.EndpointsResolver implementation.
func (r *Resolver) Endpoints() generated.EndpointsResolver { return &endpointsResolver{r} }

// EndpointsList returns generated.EndpointsListResolver implementation.
func (r *Resolver) EndpointsList() generated.EndpointsListResolver { return &endpointsListResolver{r} }

// Event returns generated.EventResolver implementation.
func (r *Resolver) Event() generated.EventResolver { return &eventResolver{r} }

// EventList returns generated.EventListResolver implementation.
func (r *Resolver) EventList() generated.EventListResolver { return &eventListResolver{r} }

// FlexVolume returns generated.FlexVolumeResolver implementation.
func (r *Resolver) FlexVolume() generated.FlexVolumeResolver { return &flexVolumeResolver{r} }

// Flocker returns generated.FlockerResolver implementation.
func (r *Resolver) Flocker() generated.FlockerResolver { return &flockerResolver{r} }

// GitRepo returns generated.GitRepoResolver implementation.
func (r *Resolver) GitRepo() generated.GitRepoResolver { return &gitRepoResolver{r} }

// Glusterfs returns generated.GlusterfsResolver implementation.
func (r *Resolver) Glusterfs() generated.GlusterfsResolver { return &glusterfsResolver{r} }

// HostPath returns generated.HostPathResolver implementation.
func (r *Resolver) HostPath() generated.HostPathResolver { return &hostPathResolver{r} }

// LabelSelector returns generated.LabelSelectorResolver implementation.
func (r *Resolver) LabelSelector() generated.LabelSelectorResolver { return &labelSelectorResolver{r} }

// Lifecycle returns generated.LifecycleResolver implementation.
func (r *Resolver) Lifecycle() generated.LifecycleResolver { return &lifecycleResolver{r} }

// LimitRange returns generated.LimitRangeResolver implementation.
func (r *Resolver) LimitRange() generated.LimitRangeResolver { return &limitRangeResolver{r} }

// LimitRangeList returns generated.LimitRangeListResolver implementation.
func (r *Resolver) LimitRangeList() generated.LimitRangeListResolver {
	return &limitRangeListResolver{r}
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Namespace returns generated.NamespaceResolver implementation.
func (r *Resolver) Namespace() generated.NamespaceResolver { return &namespaceResolver{r} }

// NamespaceList returns generated.NamespaceListResolver implementation.
func (r *Resolver) NamespaceList() generated.NamespaceListResolver { return &namespaceListResolver{r} }

// Node returns generated.NodeResolver implementation.
func (r *Resolver) Node() generated.NodeResolver { return &nodeResolver{r} }

// NodeAffinity returns generated.NodeAffinityResolver implementation.
func (r *Resolver) NodeAffinity() generated.NodeAffinityResolver { return &nodeAffinityResolver{r} }

// NodeList returns generated.NodeListResolver implementation.
func (r *Resolver) NodeList() generated.NodeListResolver { return &nodeListResolver{r} }

// PersistentVolume returns generated.PersistentVolumeResolver implementation.
func (r *Resolver) PersistentVolume() generated.PersistentVolumeResolver {
	return &persistentVolumeResolver{r}
}

// PersistentVolumeClaim returns generated.PersistentVolumeClaimResolver implementation.
func (r *Resolver) PersistentVolumeClaim() generated.PersistentVolumeClaimResolver {
	return &persistentVolumeClaimResolver{r}
}

// PersistentVolumeClaimList returns generated.PersistentVolumeClaimListResolver implementation.
func (r *Resolver) PersistentVolumeClaimList() generated.PersistentVolumeClaimListResolver {
	return &persistentVolumeClaimListResolver{r}
}

// PersistentVolumeList returns generated.PersistentVolumeListResolver implementation.
func (r *Resolver) PersistentVolumeList() generated.PersistentVolumeListResolver {
	return &persistentVolumeListResolver{r}
}

// PhotonPersistentDisk returns generated.PhotonPersistentDiskResolver implementation.
func (r *Resolver) PhotonPersistentDisk() generated.PhotonPersistentDiskResolver {
	return &photonPersistentDiskResolver{r}
}

// Pod returns generated.PodResolver implementation.
func (r *Resolver) Pod() generated.PodResolver { return &podResolver{r} }

// PodAffinity returns generated.PodAffinityResolver implementation.
func (r *Resolver) PodAffinity() generated.PodAffinityResolver { return &podAffinityResolver{r} }

// PodAffinityTerm returns generated.PodAffinityTermResolver implementation.
func (r *Resolver) PodAffinityTerm() generated.PodAffinityTermResolver {
	return &podAffinityTermResolver{r}
}

// PodAntiAffinity returns generated.PodAntiAffinityResolver implementation.
func (r *Resolver) PodAntiAffinity() generated.PodAntiAffinityResolver {
	return &podAntiAffinityResolver{r}
}

// PodList returns generated.PodListResolver implementation.
func (r *Resolver) PodList() generated.PodListResolver { return &podListResolver{r} }

// PodTemplate returns generated.PodTemplateResolver implementation.
func (r *Resolver) PodTemplate() generated.PodTemplateResolver { return &podTemplateResolver{r} }

// PodTemplateList returns generated.PodTemplateListResolver implementation.
func (r *Resolver) PodTemplateList() generated.PodTemplateListResolver {
	return &podTemplateListResolver{r}
}

// PortworxVolume returns generated.PortworxVolumeResolver implementation.
func (r *Resolver) PortworxVolume() generated.PortworxVolumeResolver {
	return &portworxVolumeResolver{r}
}

// Preconditions returns generated.PreconditionsResolver implementation.
func (r *Resolver) Preconditions() generated.PreconditionsResolver { return &preconditionsResolver{r} }

// Projected returns generated.ProjectedResolver implementation.
func (r *Resolver) Projected() generated.ProjectedResolver { return &projectedResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Quobyte returns generated.QuobyteResolver implementation.
func (r *Resolver) Quobyte() generated.QuobyteResolver { return &quobyteResolver{r} }

// ReplicationController returns generated.ReplicationControllerResolver implementation.
func (r *Resolver) ReplicationController() generated.ReplicationControllerResolver {
	return &replicationControllerResolver{r}
}

// ReplicationControllerList returns generated.ReplicationControllerListResolver implementation.
func (r *Resolver) ReplicationControllerList() generated.ReplicationControllerListResolver {
	return &replicationControllerListResolver{r}
}

// ResourceQuota returns generated.ResourceQuotaResolver implementation.
func (r *Resolver) ResourceQuota() generated.ResourceQuotaResolver { return &resourceQuotaResolver{r} }

// ResourceQuotaList returns generated.ResourceQuotaListResolver implementation.
func (r *Resolver) ResourceQuotaList() generated.ResourceQuotaListResolver {
	return &resourceQuotaListResolver{r}
}

// ScaleIO returns generated.ScaleIOResolver implementation.
func (r *Resolver) ScaleIO() generated.ScaleIOResolver { return &scaleIOResolver{r} }

// ScopeSelector returns generated.ScopeSelectorResolver implementation.
func (r *Resolver) ScopeSelector() generated.ScopeSelectorResolver { return &scopeSelectorResolver{r} }

// Secret returns generated.SecretResolver implementation.
func (r *Resolver) Secret() generated.SecretResolver { return &secretResolver{r} }

// SecretList returns generated.SecretListResolver implementation.
func (r *Resolver) SecretList() generated.SecretListResolver { return &secretListResolver{r} }

// SecurityContext returns generated.SecurityContextResolver implementation.
func (r *Resolver) SecurityContext() generated.SecurityContextResolver {
	return &securityContextResolver{r}
}

// Service returns generated.ServiceResolver implementation.
func (r *Resolver) Service() generated.ServiceResolver { return &serviceResolver{r} }

// ServiceAccount returns generated.ServiceAccountResolver implementation.
func (r *Resolver) ServiceAccount() generated.ServiceAccountResolver {
	return &serviceAccountResolver{r}
}

// ServiceAccountList returns generated.ServiceAccountListResolver implementation.
func (r *Resolver) ServiceAccountList() generated.ServiceAccountListResolver {
	return &serviceAccountListResolver{r}
}

// ServiceList returns generated.ServiceListResolver implementation.
func (r *Resolver) ServiceList() generated.ServiceListResolver { return &serviceListResolver{r} }

// SessionAffinityConfig returns generated.SessionAffinityConfigResolver implementation.
func (r *Resolver) SessionAffinityConfig() generated.SessionAffinityConfigResolver {
	return &sessionAffinityConfigResolver{r}
}

// Status returns generated.StatusResolver implementation.
func (r *Resolver) Status() generated.StatusResolver { return &statusResolver{r} }

// VsphereVolume returns generated.VsphereVolumeResolver implementation.
func (r *Resolver) VsphereVolume() generated.VsphereVolumeResolver { return &vsphereVolumeResolver{r} }

type azureDiskResolver struct{ *Resolver }
type azureFileResolver struct{ *Resolver }
type bindingResolver struct{ *Resolver }
type capabilitiesResolver struct{ *Resolver }
type cinderResolver struct{ *Resolver }
type componentStatusResolver struct{ *Resolver }
type componentStatusListResolver struct{ *Resolver }
type configMapResolver struct{ *Resolver }
type configMapListResolver struct{ *Resolver }
type deleteOptionsResolver struct{ *Resolver }
type downwardAPIResolver struct{ *Resolver }
type emptyDirResolver struct{ *Resolver }
type endpointsResolver struct{ *Resolver }
type endpointsListResolver struct{ *Resolver }
type eventResolver struct{ *Resolver }
type eventListResolver struct{ *Resolver }
type flexVolumeResolver struct{ *Resolver }
type flockerResolver struct{ *Resolver }
type gitRepoResolver struct{ *Resolver }
type glusterfsResolver struct{ *Resolver }
type hostPathResolver struct{ *Resolver }
type labelSelectorResolver struct{ *Resolver }
type lifecycleResolver struct{ *Resolver }
type limitRangeResolver struct{ *Resolver }
type limitRangeListResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type namespaceResolver struct{ *Resolver }
type namespaceListResolver struct{ *Resolver }
type nodeResolver struct{ *Resolver }
type nodeAffinityResolver struct{ *Resolver }
type nodeListResolver struct{ *Resolver }
type persistentVolumeResolver struct{ *Resolver }
type persistentVolumeClaimResolver struct{ *Resolver }
type persistentVolumeClaimListResolver struct{ *Resolver }
type persistentVolumeListResolver struct{ *Resolver }
type photonPersistentDiskResolver struct{ *Resolver }
type podResolver struct{ *Resolver }
type podAffinityResolver struct{ *Resolver }
type podAffinityTermResolver struct{ *Resolver }
type podAntiAffinityResolver struct{ *Resolver }
type podListResolver struct{ *Resolver }
type podTemplateResolver struct{ *Resolver }
type podTemplateListResolver struct{ *Resolver }
type portworxVolumeResolver struct{ *Resolver }
type preconditionsResolver struct{ *Resolver }
type projectedResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type quobyteResolver struct{ *Resolver }
type replicationControllerResolver struct{ *Resolver }
type replicationControllerListResolver struct{ *Resolver }
type resourceQuotaResolver struct{ *Resolver }
type resourceQuotaListResolver struct{ *Resolver }
type scaleIOResolver struct{ *Resolver }
type scopeSelectorResolver struct{ *Resolver }
type secretResolver struct{ *Resolver }
type secretListResolver struct{ *Resolver }
type securityContextResolver struct{ *Resolver }
type serviceResolver struct{ *Resolver }
type serviceAccountResolver struct{ *Resolver }
type serviceAccountListResolver struct{ *Resolver }
type serviceListResolver struct{ *Resolver }
type sessionAffinityConfigResolver struct{ *Resolver }
type statusResolver struct{ *Resolver }
type vsphereVolumeResolver struct{ *Resolver }
