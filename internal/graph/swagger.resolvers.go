package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"fmt"

	"github.com/omissis/kube-apiserver-proxy/internal/graph/model"
)

// MutationViewerAPIKey is the resolver for the mutationViewerApiKey field.
func (r *mutationResolver) MutationViewerAPIKey(ctx context.Context, apiKey string) (*model.MutationViewerAPIKey, error) {
	panic(fmt.Errorf("not implemented: MutationViewerAPIKey - mutationViewerApiKey"))
}

// MutationViewerAnyAuth is the resolver for the mutationViewerAnyAuth field.
func (r *mutationResolver) MutationViewerAnyAuth(ctx context.Context, bearerToken *model.BearerTokenInput) (*model.MutationViewerAnyAuth, error) {
	panic(fmt.Errorf("not implemented: MutationViewerAnyAuth - mutationViewerAnyAuth"))
}

// ViewerAPIKey is the resolver for the viewerApiKey field.
func (r *queryResolver) ViewerAPIKey(ctx context.Context, apiKey string) (*model.ViewerAPIKey, error) {
	panic(fmt.Errorf("not implemented: ViewerAPIKey - viewerApiKey"))
}

// ViewerAnyAuth is the resolver for the viewerAnyAuth field.
func (r *queryResolver) ViewerAnyAuth(ctx context.Context, bearerToken *model.BearerTokenInput) (*model.ViewerAnyAuth, error) {
	panic(fmt.Errorf("not implemented: ViewerAnyAuth - viewerAnyAuth"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
