// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

// API key credentials for the security protocol 'BearerToken'
type BearerTokenInput struct {
	APIKey *string `json:"apiKey,omitempty"`
}

// MatchCondition represents a condition which must by fulfilled for a request to be sent to a webhook.
type IoK8sAPIAdmissionregistrationV1MatchCondition struct {
	// Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:
	//
	// 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
	//   See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
	// 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
	//   request resource.
	// Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/
	//
	// Required.
	Expression string `json:"expression"`
	// Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')
	//
	// Required.
	Name string `json:"name"`
}

// MatchCondition represents a condition which must by fulfilled for a request to be sent to a webhook.
type IoK8sAPIAdmissionregistrationV1MatchConditionInput struct {
	// Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:
	//
	// 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
	//   See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
	// 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
	//   request resource.
	// Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/
	//
	// Required.
	Expression string `json:"expression"`
	// Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')
	//
	// Required.
	Name string `json:"name"`
}

// MutatingWebhook describes an admission webhook and the resources and operations it applies to.
type IoK8sAPIAdmissionregistrationV1MutatingWebhook struct {
	// AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
	AdmissionReviewVersions []*string `json:"admissionReviewVersions"`
	// WebhookClientConfig contains the information to make a TLS connection with the webhook
	ClientConfig *IoK8sAPIAdmissionregistrationV1WebhookClientConfig `json:"clientConfig"`
	// FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
	FailurePolicy *string `json:"failurePolicy,omitempty"`
	// MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.
	//
	// The exact matching logic is (in order):
	//   1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.
	//   2. If ALL matchConditions evaluate to TRUE, the webhook is called.
	//   3. If any matchCondition evaluates to an error (but none are FALSE):
	//      - If failurePolicy=Fail, reject the request
	//      - If failurePolicy=Ignore, the error is ignored and the webhook is skipped
	//
	// This is an alpha feature and managed by the AdmissionWebhookMatchConditions feature gate.
	MatchConditions []*IoK8sAPIAdmissionregistrationV1MatchCondition `json:"matchConditions,omitempty"`
	// matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
	//
	// - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
	//
	// - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
	//
	// Defaults to "Equivalent"
	MatchPolicy *string `json:"matchPolicy,omitempty"`
	// The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
	Name string `json:"name"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"namespaceSelector,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	ObjectSelector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"objectSelector,omitempty"`
	// reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are "Never" and "IfNeeded".
	//
	// Never: the webhook will not be called more than once in a single admission evaluation.
	//
	// IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.
	//
	// Defaults to "Never".
	ReinvocationPolicy *string `json:"reinvocationPolicy,omitempty"`
	// Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
	Rules []*IoK8sAPIAdmissionregistrationV1RuleWithOperations `json:"rules,omitempty"`
	// SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
	SideEffects string `json:"sideEffects"`
	// TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty"`
}

// MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.
type IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// Webhooks is a list of webhooks and the affected resources and operations.
	Webhooks []*IoK8sAPIAdmissionregistrationV1MutatingWebhook `json:"webhooks,omitempty"`
}

// MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.
type IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// Webhooks is a list of webhooks and the affected resources and operations.
	Webhooks []*IoK8sAPIAdmissionregistrationV1MutatingWebhookInput `json:"webhooks,omitempty"`
}

// MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.
type IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// List of MutatingWebhookConfiguration.
	Items []*IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// MutatingWebhook describes an admission webhook and the resources and operations it applies to.
type IoK8sAPIAdmissionregistrationV1MutatingWebhookInput struct {
	// AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
	AdmissionReviewVersions []*string `json:"admissionReviewVersions"`
	// WebhookClientConfig contains the information to make a TLS connection with the webhook
	ClientConfig *IoK8sAPIAdmissionregistrationV1WebhookClientConfigInput `json:"clientConfig"`
	// FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
	FailurePolicy *string `json:"failurePolicy,omitempty"`
	// MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.
	//
	// The exact matching logic is (in order):
	//   1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.
	//   2. If ALL matchConditions evaluate to TRUE, the webhook is called.
	//   3. If any matchCondition evaluates to an error (but none are FALSE):
	//      - If failurePolicy=Fail, reject the request
	//      - If failurePolicy=Ignore, the error is ignored and the webhook is skipped
	//
	// This is an alpha feature and managed by the AdmissionWebhookMatchConditions feature gate.
	MatchConditions []*IoK8sAPIAdmissionregistrationV1MatchConditionInput `json:"matchConditions,omitempty"`
	// matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
	//
	// - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
	//
	// - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
	//
	// Defaults to "Equivalent"
	MatchPolicy *string `json:"matchPolicy,omitempty"`
	// The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
	Name string `json:"name"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"namespaceSelector,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	ObjectSelector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"objectSelector,omitempty"`
	// reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are "Never" and "IfNeeded".
	//
	// Never: the webhook will not be called more than once in a single admission evaluation.
	//
	// IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.
	//
	// Defaults to "Never".
	ReinvocationPolicy *string `json:"reinvocationPolicy,omitempty"`
	// Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
	Rules []*IoK8sAPIAdmissionregistrationV1RuleWithOperationsInput `json:"rules,omitempty"`
	// SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
	SideEffects string `json:"sideEffects"`
	// TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty"`
}

// RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.
type IoK8sAPIAdmissionregistrationV1RuleWithOperations struct {
	// APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
	APIGroups []*string `json:"apiGroups,omitempty"`
	// APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
	APIVersions []*string `json:"apiVersions,omitempty"`
	// Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
	Operations []*string `json:"operations,omitempty"`
	// Resources is a list of resources this rule applies to.
	//
	// For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.
	//
	// If wildcard is present, the validation rule will ensure resources do not overlap with each other.
	//
	// Depending on the enclosing object, subresources might not be allowed. Required.
	Resources []*string `json:"resources,omitempty"`
	// scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
	Scope *string `json:"scope,omitempty"`
}

// RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.
type IoK8sAPIAdmissionregistrationV1RuleWithOperationsInput struct {
	// APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
	APIGroups []*string `json:"apiGroups,omitempty"`
	// APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
	APIVersions []*string `json:"apiVersions,omitempty"`
	// Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
	Operations []*string `json:"operations,omitempty"`
	// Resources is a list of resources this rule applies to.
	//
	// For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.
	//
	// If wildcard is present, the validation rule will ensure resources do not overlap with each other.
	//
	// Depending on the enclosing object, subresources might not be allowed. Required.
	Resources []*string `json:"resources,omitempty"`
	// scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
	Scope *string `json:"scope,omitempty"`
}

// ServiceReference holds a reference to Service.legacy.k8s.io
type IoK8sAPIAdmissionregistrationV1ServiceReference struct {
	// `name` is the name of the service. Required
	Name string `json:"name"`
	// `namespace` is the namespace of the service. Required
	Namespace string `json:"namespace"`
	// `path` is an optional URL path which will be sent in any request to this service.
	Path *string `json:"path,omitempty"`
	// If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
	Port *int `json:"port,omitempty"`
}

// ServiceReference holds a reference to Service.legacy.k8s.io
type IoK8sAPIAdmissionregistrationV1ServiceReferenceInput struct {
	// `name` is the name of the service. Required
	Name string `json:"name"`
	// `namespace` is the namespace of the service. Required
	Namespace string `json:"namespace"`
	// `path` is an optional URL path which will be sent in any request to this service.
	Path *string `json:"path,omitempty"`
	// If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
	Port *int `json:"port,omitempty"`
}

// ValidatingWebhook describes an admission webhook and the resources and operations it applies to.
type IoK8sAPIAdmissionregistrationV1ValidatingWebhook struct {
	// AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
	AdmissionReviewVersions []*string `json:"admissionReviewVersions"`
	// WebhookClientConfig contains the information to make a TLS connection with the webhook
	ClientConfig *IoK8sAPIAdmissionregistrationV1WebhookClientConfig `json:"clientConfig"`
	// FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
	FailurePolicy *string `json:"failurePolicy,omitempty"`
	// MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.
	//
	// The exact matching logic is (in order):
	//   1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.
	//   2. If ALL matchConditions evaluate to TRUE, the webhook is called.
	//   3. If any matchCondition evaluates to an error (but none are FALSE):
	//      - If failurePolicy=Fail, reject the request
	//      - If failurePolicy=Ignore, the error is ignored and the webhook is skipped
	//
	// This is an alpha feature and managed by the AdmissionWebhookMatchConditions feature gate.
	MatchConditions []*IoK8sAPIAdmissionregistrationV1MatchCondition `json:"matchConditions,omitempty"`
	// matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
	//
	// - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
	//
	// - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
	//
	// Defaults to "Equivalent"
	MatchPolicy *string `json:"matchPolicy,omitempty"`
	// The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
	Name string `json:"name"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"namespaceSelector,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	ObjectSelector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"objectSelector,omitempty"`
	// Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
	Rules []*IoK8sAPIAdmissionregistrationV1RuleWithOperations `json:"rules,omitempty"`
	// SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
	SideEffects string `json:"sideEffects"`
	// TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty"`
}

// ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.
type IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// Webhooks is a list of webhooks and the affected resources and operations.
	Webhooks []*IoK8sAPIAdmissionregistrationV1ValidatingWebhook `json:"webhooks,omitempty"`
}

// ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.
type IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// Webhooks is a list of webhooks and the affected resources and operations.
	Webhooks []*IoK8sAPIAdmissionregistrationV1ValidatingWebhookInput `json:"webhooks,omitempty"`
}

// ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.
type IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// List of ValidatingWebhookConfiguration.
	Items []*IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// ValidatingWebhook describes an admission webhook and the resources and operations it applies to.
type IoK8sAPIAdmissionregistrationV1ValidatingWebhookInput struct {
	// AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
	AdmissionReviewVersions []*string `json:"admissionReviewVersions"`
	// WebhookClientConfig contains the information to make a TLS connection with the webhook
	ClientConfig *IoK8sAPIAdmissionregistrationV1WebhookClientConfigInput `json:"clientConfig"`
	// FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
	FailurePolicy *string `json:"failurePolicy,omitempty"`
	// MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.
	//
	// The exact matching logic is (in order):
	//   1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.
	//   2. If ALL matchConditions evaluate to TRUE, the webhook is called.
	//   3. If any matchCondition evaluates to an error (but none are FALSE):
	//      - If failurePolicy=Fail, reject the request
	//      - If failurePolicy=Ignore, the error is ignored and the webhook is skipped
	//
	// This is an alpha feature and managed by the AdmissionWebhookMatchConditions feature gate.
	MatchConditions []*IoK8sAPIAdmissionregistrationV1MatchConditionInput `json:"matchConditions,omitempty"`
	// matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
	//
	// - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
	//
	// - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
	//
	// Defaults to "Equivalent"
	MatchPolicy *string `json:"matchPolicy,omitempty"`
	// The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
	Name string `json:"name"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"namespaceSelector,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	ObjectSelector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"objectSelector,omitempty"`
	// Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
	Rules []*IoK8sAPIAdmissionregistrationV1RuleWithOperationsInput `json:"rules,omitempty"`
	// SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
	SideEffects string `json:"sideEffects"`
	// TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty"`
}

// WebhookClientConfig contains the information to make a TLS connection with the webhook
type IoK8sAPIAdmissionregistrationV1WebhookClientConfig struct {
	// `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
	CaBundle *string `json:"caBundle,omitempty"`
	// ServiceReference holds a reference to Service.legacy.k8s.io
	Service *IoK8sAPIAdmissionregistrationV1ServiceReference `json:"service,omitempty"`
	// `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
	//
	// The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
	//
	// Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
	//
	// The scheme must be "https"; the URL must begin with "https://".
	//
	// A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
	//
	// Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
	URL *string `json:"url,omitempty"`
}

// WebhookClientConfig contains the information to make a TLS connection with the webhook
type IoK8sAPIAdmissionregistrationV1WebhookClientConfigInput struct {
	// `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
	CaBundle *string `json:"caBundle,omitempty"`
	// ServiceReference holds a reference to Service.legacy.k8s.io
	Service *IoK8sAPIAdmissionregistrationV1ServiceReferenceInput `json:"service,omitempty"`
	// `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
	//
	// The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
	//
	// Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
	//
	// The scheme must be "https"; the URL must begin with "https://".
	//
	// A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
	//
	// Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
	URL *string `json:"url,omitempty"`
}

// AuditAnnotation describes how to produce an audit annotation for an API request.
type IoK8sAPIAdmissionregistrationV1alpha1AuditAnnotation struct {
	// key specifies the audit annotation key. The audit annotation keys of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.
	//
	// The key is combined with the resource name of the ValidatingAdmissionPolicy to construct an audit annotation key: "{ValidatingAdmissionPolicy name}/{key}".
	//
	// If an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and the same audit annotation key, the annotation key will be identical. In this case, the first annotation written with the key will be included in the audit event and all subsequent annotations with the same key will be discarded.
	//
	// Required.
	Key string `json:"key"`
	// valueExpression represents the expression which is evaluated by CEL to produce an audit annotation value. The expression must evaluate to either a string or null value. If the expression evaluates to a string, the audit annotation is included with the string value. If the expression evaluates to null or empty string the audit annotation will be omitted. The valueExpression may be no longer than 5kb in length. If the result of the valueExpression is more than 10kb in length, it will be truncated to 10kb.
	//
	// If multiple ValidatingAdmissionPolicyBinding resources match an API request, then the valueExpression will be evaluated for each binding. All unique values produced by the valueExpressions will be joined together in a comma-separated list.
	//
	// Required.
	ValueExpression string `json:"valueExpression"`
}

// AuditAnnotation describes how to produce an audit annotation for an API request.
type IoK8sAPIAdmissionregistrationV1alpha1AuditAnnotationInput struct {
	// key specifies the audit annotation key. The audit annotation keys of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.
	//
	// The key is combined with the resource name of the ValidatingAdmissionPolicy to construct an audit annotation key: "{ValidatingAdmissionPolicy name}/{key}".
	//
	// If an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and the same audit annotation key, the annotation key will be identical. In this case, the first annotation written with the key will be included in the audit event and all subsequent annotations with the same key will be discarded.
	//
	// Required.
	Key string `json:"key"`
	// valueExpression represents the expression which is evaluated by CEL to produce an audit annotation value. The expression must evaluate to either a string or null value. If the expression evaluates to a string, the audit annotation is included with the string value. If the expression evaluates to null or empty string the audit annotation will be omitted. The valueExpression may be no longer than 5kb in length. If the result of the valueExpression is more than 10kb in length, it will be truncated to 10kb.
	//
	// If multiple ValidatingAdmissionPolicyBinding resources match an API request, then the valueExpression will be evaluated for each binding. All unique values produced by the valueExpressions will be joined together in a comma-separated list.
	//
	// Required.
	ValueExpression string `json:"valueExpression"`
}

// ExpressionWarning is a warning information that targets a specific expression.
type IoK8sAPIAdmissionregistrationV1alpha1ExpressionWarning struct {
	// The path to the field that refers the expression. For example, the reference to the expression of the first item of validations is "spec.validations[0].expression"
	FieldRef string `json:"fieldRef"`
	// The content of type checking information in a human-readable form. Each line of the warning contains the type that the expression is checked against, followed by the type check error from the compiler.
	Warning string `json:"warning"`
}

// ExpressionWarning is a warning information that targets a specific expression.
type IoK8sAPIAdmissionregistrationV1alpha1ExpressionWarningInput struct {
	// The path to the field that refers the expression. For example, the reference to the expression of the first item of validations is "spec.validations[0].expression"
	FieldRef string `json:"fieldRef"`
	// The content of type checking information in a human-readable form. Each line of the warning contains the type that the expression is checked against, followed by the type check error from the compiler.
	Warning string `json:"warning"`
}

type IoK8sAPIAdmissionregistrationV1alpha1MatchCondition struct {
	// Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:
	//
	// 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
	//   See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
	// 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
	//   request resource.
	// Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/
	//
	// Required.
	Expression string `json:"expression"`
	// Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')
	//
	// Required.
	Name string `json:"name"`
}

type IoK8sAPIAdmissionregistrationV1alpha1MatchConditionInput struct {
	// Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:
	//
	// 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
	//   See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
	// 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
	//   request resource.
	// Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/
	//
	// Required.
	Expression string `json:"expression"`
	// Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')
	//
	// Required.
	Name string `json:"name"`
}

// MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
type IoK8sAPIAdmissionregistrationV1alpha1MatchResources struct {
	// ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
	ExcludeResourceRules []*IoK8sAPIAdmissionregistrationV1alpha1NamedRuleWithOperations `json:"excludeResourceRules,omitempty"`
	// matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
	//
	// - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
	//
	// - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.
	//
	// Defaults to "Equivalent"
	MatchPolicy *string `json:"matchPolicy,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"namespaceSelector,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	ObjectSelector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"objectSelector,omitempty"`
	// ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.
	ResourceRules []*IoK8sAPIAdmissionregistrationV1alpha1NamedRuleWithOperations `json:"resourceRules,omitempty"`
}

// MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
type IoK8sAPIAdmissionregistrationV1alpha1MatchResourcesInput struct {
	// ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
	ExcludeResourceRules []*IoK8sAPIAdmissionregistrationV1alpha1NamedRuleWithOperationsInput `json:"excludeResourceRules,omitempty"`
	// matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
	//
	// - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
	//
	// - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.
	//
	// Defaults to "Equivalent"
	MatchPolicy *string `json:"matchPolicy,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"namespaceSelector,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	ObjectSelector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"objectSelector,omitempty"`
	// ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.
	ResourceRules []*IoK8sAPIAdmissionregistrationV1alpha1NamedRuleWithOperationsInput `json:"resourceRules,omitempty"`
}

// NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.
type IoK8sAPIAdmissionregistrationV1alpha1NamedRuleWithOperations struct {
	// APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
	APIGroups []*string `json:"apiGroups,omitempty"`
	// APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
	APIVersions []*string `json:"apiVersions,omitempty"`
	// Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
	Operations []*string `json:"operations,omitempty"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
	ResourceNames []*string `json:"resourceNames,omitempty"`
	// Resources is a list of resources this rule applies to.
	//
	// For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.
	//
	// If wildcard is present, the validation rule will ensure resources do not overlap with each other.
	//
	// Depending on the enclosing object, subresources might not be allowed. Required.
	Resources []*string `json:"resources,omitempty"`
	// scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
	Scope *string `json:"scope,omitempty"`
}

// NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.
type IoK8sAPIAdmissionregistrationV1alpha1NamedRuleWithOperationsInput struct {
	// APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
	APIGroups []*string `json:"apiGroups,omitempty"`
	// APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
	APIVersions []*string `json:"apiVersions,omitempty"`
	// Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
	Operations []*string `json:"operations,omitempty"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
	ResourceNames []*string `json:"resourceNames,omitempty"`
	// Resources is a list of resources this rule applies to.
	//
	// For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.
	//
	// If wildcard is present, the validation rule will ensure resources do not overlap with each other.
	//
	// Depending on the enclosing object, subresources might not be allowed. Required.
	Resources []*string `json:"resources,omitempty"`
	// scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
	Scope *string `json:"scope,omitempty"`
}

// ParamKind is a tuple of Group Kind and Version.
type IoK8sAPIAdmissionregistrationV1alpha1ParamKind struct {
	// APIVersion is the API group version the resources belong to. In format of "group/version". Required.
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is the API kind the resources belong to. Required.
	Kind *string `json:"kind,omitempty"`
}

// ParamKind is a tuple of Group Kind and Version.
type IoK8sAPIAdmissionregistrationV1alpha1ParamKindInput struct {
	// APIVersion is the API group version the resources belong to. In format of "group/version". Required.
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is the API kind the resources belong to. Required.
	Kind *string `json:"kind,omitempty"`
}

// ParamRef references a parameter resource
type IoK8sAPIAdmissionregistrationV1alpha1ParamRef struct {
	// Name of the resource being referenced.
	Name *string `json:"name,omitempty"`
	// Namespace of the referenced resource. Should be empty for the cluster-scoped resources
	Namespace *string `json:"namespace,omitempty"`
}

// ParamRef references a parameter resource
type IoK8sAPIAdmissionregistrationV1alpha1ParamRefInput struct {
	// Name of the resource being referenced.
	Name *string `json:"name,omitempty"`
	// Namespace of the referenced resource. Should be empty for the cluster-scoped resources
	Namespace *string `json:"namespace,omitempty"`
}

// TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy
type IoK8sAPIAdmissionregistrationV1alpha1TypeChecking struct {
	// The type checking warnings for each expression.
	ExpressionWarnings []*IoK8sAPIAdmissionregistrationV1alpha1ExpressionWarning `json:"expressionWarnings,omitempty"`
}

// TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy
type IoK8sAPIAdmissionregistrationV1alpha1TypeCheckingInput struct {
	// The type checking warnings for each expression.
	ExpressionWarnings []*IoK8sAPIAdmissionregistrationV1alpha1ExpressionWarningInput `json:"expressionWarnings,omitempty"`
}

// ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.
type IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
	Spec *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicySpec `json:"spec,omitempty"`
	// ValidatingAdmissionPolicyStatus represents the status of a ValidatingAdmissionPolicy.
	Status *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus `json:"status,omitempty"`
}

// ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.
type IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
	Spec *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingSpec `json:"spec,omitempty"`
}

// ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.
type IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
	Spec *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingSpecInput `json:"spec,omitempty"`
}

// ValidatingAdmissionPolicyBindingList is a list of ValidatingAdmissionPolicyBinding.
type IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// List of PolicyBinding.
	Items []*IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding `json:"items,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
type IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingSpec struct {
	// MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
	MatchResources *IoK8sAPIAdmissionregistrationV1alpha1MatchResources `json:"matchResources,omitempty"`
	// ParamRef references a parameter resource
	ParamRef *IoK8sAPIAdmissionregistrationV1alpha1ParamRef `json:"paramRef,omitempty"`
	// PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
	PolicyName *string `json:"policyName,omitempty"`
	// validationActions declares how Validations of the referenced ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is always enforced according to these actions.
	//
	// Failures defined by the ValidatingAdmissionPolicy's FailurePolicy are enforced according to these actions only if the FailurePolicy is set to Fail, otherwise the failures are ignored. This includes compilation errors, runtime errors and misconfigurations of the policy.
	//
	// validationActions is declared as a set of action values. Order does not matter. validationActions may not contain duplicates of the same action.
	//
	// The supported actions values are:
	//
	// "Deny" specifies that a validation failure results in a denied request.
	//
	// "Warn" specifies that a validation failure is reported to the request client in HTTP Warning headers, with a warning code of 299. Warnings can be sent both for allowed or denied admission responses.
	//
	// "Audit" specifies that a validation failure is included in the published audit event for the request. The audit event will contain a `validation.policy.admission.k8s.io/validation_failure` audit annotation with a value containing the details of the validation failures, formatted as a JSON list of objects, each with the following fields: - message: The validation failure message string - policy: The resource name of the ValidatingAdmissionPolicy - binding: The resource name of the ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed validations in the ValidatingAdmissionPolicy - validationActions: The enforcement actions enacted for the validation failure Example audit annotation: `"validation.policy.admission.k8s.io/validation_failure": "[{"message": "Invalid value", {"policy": "policy.example.com", {"binding": "policybinding.example.com", {"expressionIndex": "1", {"validationActions": ["Audit"]}]"`
	//
	// Clients should expect to handle additional values by ignoring any values not recognized.
	//
	// "Deny" and "Warn" may not be used together since this combination needlessly duplicates the validation failure both in the API response body and the HTTP warning headers.
	//
	// Required.
	ValidationActions []*string `json:"validationActions,omitempty"`
}

// ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
type IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingSpecInput struct {
	// MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
	MatchResources *IoK8sAPIAdmissionregistrationV1alpha1MatchResourcesInput `json:"matchResources,omitempty"`
	// ParamRef references a parameter resource
	ParamRef *IoK8sAPIAdmissionregistrationV1alpha1ParamRefInput `json:"paramRef,omitempty"`
	// PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
	PolicyName *string `json:"policyName,omitempty"`
	// validationActions declares how Validations of the referenced ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is always enforced according to these actions.
	//
	// Failures defined by the ValidatingAdmissionPolicy's FailurePolicy are enforced according to these actions only if the FailurePolicy is set to Fail, otherwise the failures are ignored. This includes compilation errors, runtime errors and misconfigurations of the policy.
	//
	// validationActions is declared as a set of action values. Order does not matter. validationActions may not contain duplicates of the same action.
	//
	// The supported actions values are:
	//
	// "Deny" specifies that a validation failure results in a denied request.
	//
	// "Warn" specifies that a validation failure is reported to the request client in HTTP Warning headers, with a warning code of 299. Warnings can be sent both for allowed or denied admission responses.
	//
	// "Audit" specifies that a validation failure is included in the published audit event for the request. The audit event will contain a `validation.policy.admission.k8s.io/validation_failure` audit annotation with a value containing the details of the validation failures, formatted as a JSON list of objects, each with the following fields: - message: The validation failure message string - policy: The resource name of the ValidatingAdmissionPolicy - binding: The resource name of the ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed validations in the ValidatingAdmissionPolicy - validationActions: The enforcement actions enacted for the validation failure Example audit annotation: `"validation.policy.admission.k8s.io/validation_failure": "[{"message": "Invalid value", {"policy": "policy.example.com", {"binding": "policybinding.example.com", {"expressionIndex": "1", {"validationActions": ["Audit"]}]"`
	//
	// Clients should expect to handle additional values by ignoring any values not recognized.
	//
	// "Deny" and "Warn" may not be used together since this combination needlessly duplicates the validation failure both in the API response body and the HTTP warning headers.
	//
	// Required.
	ValidationActions []*string `json:"validationActions,omitempty"`
}

// ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.
type IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
	Spec *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicySpecInput `json:"spec,omitempty"`
	// ValidatingAdmissionPolicyStatus represents the status of a ValidatingAdmissionPolicy.
	Status *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatusInput `json:"status,omitempty"`
}

// ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.
type IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// List of ValidatingAdmissionPolicy.
	Items []*IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy `json:"items,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
type IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicySpec struct {
	// auditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request. validations and auditAnnotations may not both be empty; a least one of validations or auditAnnotations is required.
	AuditAnnotations []*IoK8sAPIAdmissionregistrationV1alpha1AuditAnnotation `json:"auditAnnotations,omitempty"`
	// failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.
	//
	// A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource.
	//
	// failurePolicy does not define how validations that evaluate to false are handled.
	//
	// When failurePolicy is set to Fail, ValidatingAdmissionPolicyBinding validationActions define how failures are enforced.
	//
	// Allowed values are Ignore or Fail. Defaults to Fail.
	FailurePolicy *string `json:"failurePolicy,omitempty"`
	// MatchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.
	//
	// If a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.
	//
	// The exact matching logic is (in order):
	//   1. If ANY matchCondition evaluates to FALSE, the policy is skipped.
	//   2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.
	//   3. If any matchCondition evaluates to an error (but none are FALSE):
	//      - If failurePolicy=Fail, reject the request
	//      - If failurePolicy=Ignore, the policy is skipped
	MatchConditions []*IoK8sAPIAdmissionregistrationV1alpha1MatchCondition `json:"matchConditions,omitempty"`
	// MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
	MatchConstraints *IoK8sAPIAdmissionregistrationV1alpha1MatchResources `json:"matchConstraints,omitempty"`
	// ParamKind is a tuple of Group Kind and Version.
	ParamKind *IoK8sAPIAdmissionregistrationV1alpha1ParamKind `json:"paramKind,omitempty"`
	// Validations contain CEL expressions which is used to apply the validation. Validations and AuditAnnotations may not both be empty; a minimum of one Validations or AuditAnnotations is required.
	Validations []*IoK8sAPIAdmissionregistrationV1alpha1Validation `json:"validations,omitempty"`
}

// ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
type IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicySpecInput struct {
	// auditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request. validations and auditAnnotations may not both be empty; a least one of validations or auditAnnotations is required.
	AuditAnnotations []*IoK8sAPIAdmissionregistrationV1alpha1AuditAnnotationInput `json:"auditAnnotations,omitempty"`
	// failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.
	//
	// A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource.
	//
	// failurePolicy does not define how validations that evaluate to false are handled.
	//
	// When failurePolicy is set to Fail, ValidatingAdmissionPolicyBinding validationActions define how failures are enforced.
	//
	// Allowed values are Ignore or Fail. Defaults to Fail.
	FailurePolicy *string `json:"failurePolicy,omitempty"`
	// MatchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.
	//
	// If a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.
	//
	// The exact matching logic is (in order):
	//   1. If ANY matchCondition evaluates to FALSE, the policy is skipped.
	//   2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.
	//   3. If any matchCondition evaluates to an error (but none are FALSE):
	//      - If failurePolicy=Fail, reject the request
	//      - If failurePolicy=Ignore, the policy is skipped
	MatchConditions []*IoK8sAPIAdmissionregistrationV1alpha1MatchConditionInput `json:"matchConditions,omitempty"`
	// MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
	MatchConstraints *IoK8sAPIAdmissionregistrationV1alpha1MatchResourcesInput `json:"matchConstraints,omitempty"`
	// ParamKind is a tuple of Group Kind and Version.
	ParamKind *IoK8sAPIAdmissionregistrationV1alpha1ParamKindInput `json:"paramKind,omitempty"`
	// Validations contain CEL expressions which is used to apply the validation. Validations and AuditAnnotations may not both be empty; a minimum of one Validations or AuditAnnotations is required.
	Validations []*IoK8sAPIAdmissionregistrationV1alpha1ValidationInput `json:"validations,omitempty"`
}

// ValidatingAdmissionPolicyStatus represents the status of a ValidatingAdmissionPolicy.
type IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus struct {
	// The conditions represent the latest available observations of a policy's current state.
	Conditions []*IoK8sApimachineryPkgApisMetaV1Condition `json:"conditions,omitempty"`
	// The generation observed by the controller.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
	// TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy
	TypeChecking *IoK8sAPIAdmissionregistrationV1alpha1TypeChecking `json:"typeChecking,omitempty"`
}

// ValidatingAdmissionPolicyStatus represents the status of a ValidatingAdmissionPolicy.
type IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatusInput struct {
	// The conditions represent the latest available observations of a policy's current state.
	Conditions []*IoK8sApimachineryPkgApisMetaV1ConditionInput `json:"conditions,omitempty"`
	// The generation observed by the controller.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
	// TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy
	TypeChecking *IoK8sAPIAdmissionregistrationV1alpha1TypeCheckingInput `json:"typeChecking,omitempty"`
}

// Validation specifies the CEL expression which is used to apply the validation.
type IoK8sAPIAdmissionregistrationV1alpha1Validation struct {
	// Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables:
	//
	// - 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
	//   See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
	// - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
	//   request resource.
	//
	// The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.
	//
	// Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
	// 	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
	// 	  "import", "let", "loop", "package", "namespace", "return".
	// Examples:
	//   - Expression accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
	//   - Expression accessing a property named "x-prop": {"Expression": "object.x__dash__prop > 0"}
	//   - Expression accessing a property named "redact__d": {"Expression": "object.redact__underscores__d > 0"}
	//
	// Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
	//   - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
	//     non-intersecting elements in `Y` are appended, retaining their partial order.
	//   - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
	//     are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
	//     non-intersecting keys are appended, retaining their partial order.
	// Required.
	Expression string `json:"expression"`
	// Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is "failed Expression: {Expression}".
	Message *string `json:"message,omitempty"`
	// messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the `expression` except for 'authorizer' and 'authorizer.requestResource'. Example: "object.x must be less than max ("+string(params.max)+")"
	MessageExpression *string `json:"messageExpression,omitempty"`
	// Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge". If not set, StatusReasonInvalid is used in the response to the client.
	Reason *string `json:"reason,omitempty"`
}

// Validation specifies the CEL expression which is used to apply the validation.
type IoK8sAPIAdmissionregistrationV1alpha1ValidationInput struct {
	// Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables:
	//
	// - 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
	//   See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
	// - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
	//   request resource.
	//
	// The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.
	//
	// Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
	// 	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
	// 	  "import", "let", "loop", "package", "namespace", "return".
	// Examples:
	//   - Expression accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
	//   - Expression accessing a property named "x-prop": {"Expression": "object.x__dash__prop > 0"}
	//   - Expression accessing a property named "redact__d": {"Expression": "object.redact__underscores__d > 0"}
	//
	// Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
	//   - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
	//     non-intersecting elements in `Y` are appended, retaining their partial order.
	//   - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
	//     are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
	//     non-intersecting keys are appended, retaining their partial order.
	// Required.
	Expression string `json:"expression"`
	// Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is "failed Expression: {Expression}".
	Message *string `json:"message,omitempty"`
	// messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the `expression` except for 'authorizer' and 'authorizer.requestResource'. Example: "object.x must be less than max ("+string(params.max)+")"
	MessageExpression *string `json:"messageExpression,omitempty"`
	// Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge". If not set, StatusReasonInvalid is used in the response to the client.
	Reason *string `json:"reason,omitempty"`
}

// An API server instance reports the version it can decode and the version it encodes objects to when persisting objects in the backend.
type IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion struct {
	// The ID of the reporting API server.
	APIServerID *string `json:"apiServerID,omitempty"`
	// The API server can decode objects encoded in these versions. The encodingVersion must be included in the decodableVersions.
	DecodableVersions []*string `json:"decodableVersions,omitempty"`
	// The API server encodes the object to this version when persisting it in the backend (e.g., etcd).
	EncodingVersion *string `json:"encodingVersion,omitempty"`
}

// An API server instance reports the version it can decode and the version it encodes objects to when persisting objects in the backend.
type IoK8sAPIApiserverinternalV1alpha1ServerStorageVersionInput struct {
	// The ID of the reporting API server.
	APIServerID *string `json:"apiServerID,omitempty"`
	// The API server can decode objects encoded in these versions. The encodingVersion must be included in the decodableVersions.
	DecodableVersions []*string `json:"decodableVersions,omitempty"`
	// The API server encodes the object to this version when persisting it in the backend (e.g., etcd).
	EncodingVersion *string `json:"encodingVersion,omitempty"`
}

// Storage version of a specific resource.
type IoK8sAPIApiserverinternalV1alpha1StorageVersion struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// StorageVersionSpec is an empty spec.
	Spec string `json:"spec"`
	// API server instances report the versions they can decode and the version they encode objects to when persisting objects in the backend.
	Status *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus `json:"status"`
}

// Describes the state of the storageVersion at a certain point.
type IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// A human readable message indicating details about the transition.
	Message *string `json:"message,omitempty"`
	// If set, this represents the .metadata.generation that the condition was set based upon.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
	// The reason for the condition's last transition.
	Reason string `json:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of the condition.
	Type string `json:"type"`
}

// Describes the state of the storageVersion at a certain point.
type IoK8sAPIApiserverinternalV1alpha1StorageVersionConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// A human readable message indicating details about the transition.
	Message *string `json:"message,omitempty"`
	// If set, this represents the .metadata.generation that the condition was set based upon.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
	// The reason for the condition's last transition.
	Reason string `json:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of the condition.
	Type string `json:"type"`
}

// Storage version of a specific resource.
type IoK8sAPIApiserverinternalV1alpha1StorageVersionInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// StorageVersionSpec is an empty spec.
	Spec string `json:"spec"`
	// API server instances report the versions they can decode and the version they encode objects to when persisting objects in the backend.
	Status *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatusInput `json:"status"`
}

// A list of StorageVersions.
type IoK8sAPIApiserverinternalV1alpha1StorageVersionList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items holds a list of StorageVersion
	Items []*IoK8sAPIApiserverinternalV1alpha1StorageVersion `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// API server instances report the versions they can decode and the version they encode objects to when persisting objects in the backend.
type IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus struct {
	// If all API server instances agree on the same encoding storage version, then this field is set to that version. Otherwise this field is left empty. API servers should finish updating its storageVersionStatus entry before serving write operations, so that this field will be in sync with the reality.
	CommonEncodingVersion *string `json:"commonEncodingVersion,omitempty"`
	// The latest available observations of the storageVersion's state.
	Conditions []*IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition `json:"conditions,omitempty"`
	// The reported versions per API server instance.
	StorageVersions []*IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion `json:"storageVersions,omitempty"`
}

// API server instances report the versions they can decode and the version they encode objects to when persisting objects in the backend.
type IoK8sAPIApiserverinternalV1alpha1StorageVersionStatusInput struct {
	// If all API server instances agree on the same encoding storage version, then this field is set to that version. Otherwise this field is left empty. API servers should finish updating its storageVersionStatus entry before serving write operations, so that this field will be in sync with the reality.
	CommonEncodingVersion *string `json:"commonEncodingVersion,omitempty"`
	// The latest available observations of the storageVersion's state.
	Conditions []*IoK8sAPIApiserverinternalV1alpha1StorageVersionConditionInput `json:"conditions,omitempty"`
	// The reported versions per API server instance.
	StorageVersions []*IoK8sAPIApiserverinternalV1alpha1ServerStorageVersionInput `json:"storageVersions,omitempty"`
}

// ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
type IoK8sAPIAppsV1ControllerRevision struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// RawExtension is used to hold extensions in external versions.
	//
	// To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.
	//
	// // Internal package:
	//
	// 	type MyAPIObject struct {
	// 		runtime.TypeMeta `json:",inline"`
	// 		MyPlugin runtime.Object `json:"myPlugin"`
	// 	}
	//
	// 	type PluginA struct {
	// 		AOption string `json:"aOption"`
	// 	}
	//
	// // External package:
	//
	// 	type MyAPIObject struct {
	// 		runtime.TypeMeta `json:",inline"`
	// 		MyPlugin runtime.RawExtension `json:"myPlugin"`
	// 	}
	//
	// 	type PluginA struct {
	// 		AOption string `json:"aOption"`
	// 	}
	//
	// // On the wire, the JSON will look something like this:
	//
	// 	{
	// 		"kind":"MyAPIObject",
	// 		"apiVersion":"v1",
	// 		"myPlugin": {
	// 			"kind":"PluginA",
	// 			"aOption":"foo",
	// 		},
	// 	}
	//
	// So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
	Data *string `json:"data,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// Revision indicates the revision of the state represented by Data.
	Revision string `json:"revision"`
}

// ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
type IoK8sAPIAppsV1ControllerRevisionInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// RawExtension is used to hold extensions in external versions.
	//
	// To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.
	//
	// // Internal package:
	//
	// 	type MyAPIObject struct {
	// 		runtime.TypeMeta `json:",inline"`
	// 		MyPlugin runtime.Object `json:"myPlugin"`
	// 	}
	//
	// 	type PluginA struct {
	// 		AOption string `json:"aOption"`
	// 	}
	//
	// // External package:
	//
	// 	type MyAPIObject struct {
	// 		runtime.TypeMeta `json:",inline"`
	// 		MyPlugin runtime.RawExtension `json:"myPlugin"`
	// 	}
	//
	// 	type PluginA struct {
	// 		AOption string `json:"aOption"`
	// 	}
	//
	// // On the wire, the JSON will look something like this:
	//
	// 	{
	// 		"kind":"MyAPIObject",
	// 		"apiVersion":"v1",
	// 		"myPlugin": {
	// 			"kind":"PluginA",
	// 			"aOption":"foo",
	// 		},
	// 	}
	//
	// So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
	Data *string `json:"data,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// Revision indicates the revision of the state represented by Data.
	Revision string `json:"revision"`
}

// ControllerRevisionList is a resource containing a list of ControllerRevision objects.
type IoK8sAPIAppsV1ControllerRevisionList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is the list of ControllerRevisions
	Items []*IoK8sAPIAppsV1ControllerRevision `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// DaemonSet represents the configuration of a daemon set.
type IoK8sAPIAppsV1DaemonSet struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// DaemonSetSpec is the specification of a daemon set.
	Spec *IoK8sAPIAppsV1DaemonSetSpec `json:"spec,omitempty"`
	// DaemonSetStatus represents the current status of a daemon set.
	Status *IoK8sAPIAppsV1DaemonSetStatus `json:"status,omitempty"`
}

// DaemonSetCondition describes the state of a DaemonSet at a certain point.
type IoK8sAPIAppsV1DaemonSetCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// A human readable message indicating details about the transition.
	Message *string `json:"message,omitempty"`
	// The reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of DaemonSet condition.
	Type string `json:"type"`
}

// DaemonSetCondition describes the state of a DaemonSet at a certain point.
type IoK8sAPIAppsV1DaemonSetConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// A human readable message indicating details about the transition.
	Message *string `json:"message,omitempty"`
	// The reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of DaemonSet condition.
	Type string `json:"type"`
}

// DaemonSet represents the configuration of a daemon set.
type IoK8sAPIAppsV1DaemonSetInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// DaemonSetSpec is the specification of a daemon set.
	Spec *IoK8sAPIAppsV1DaemonSetSpecInput `json:"spec,omitempty"`
	// DaemonSetStatus represents the current status of a daemon set.
	Status *IoK8sAPIAppsV1DaemonSetStatusInput `json:"status,omitempty"`
}

// DaemonSetList is a collection of daemon sets.
type IoK8sAPIAppsV1DaemonSetList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// A list of daemon sets.
	Items []*IoK8sAPIAppsV1DaemonSet `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// DaemonSetSpec is the specification of a daemon set.
type IoK8sAPIAppsV1DaemonSetSpec struct {
	// The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
	MinReadySeconds *int `json:"minReadySeconds,omitempty"`
	// The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
	RevisionHistoryLimit *int `json:"revisionHistoryLimit,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector"`
	// PodTemplateSpec describes the data a pod should have when created from a template
	Template *IoK8sAPICoreV1PodTemplateSpec `json:"template"`
	// DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
	UpdateStrategy *IoK8sAPIAppsV1DaemonSetUpdateStrategy `json:"updateStrategy,omitempty"`
}

// DaemonSetSpec is the specification of a daemon set.
type IoK8sAPIAppsV1DaemonSetSpecInput struct {
	// The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
	MinReadySeconds *int `json:"minReadySeconds,omitempty"`
	// The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
	RevisionHistoryLimit *int `json:"revisionHistoryLimit,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"selector"`
	// PodTemplateSpec describes the data a pod should have when created from a template
	Template *IoK8sAPICoreV1PodTemplateSpecInput `json:"template"`
	// DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
	UpdateStrategy *IoK8sAPIAppsV1DaemonSetUpdateStrategyInput `json:"updateStrategy,omitempty"`
}

// DaemonSetStatus represents the current status of a daemon set.
type IoK8sAPIAppsV1DaemonSetStatus struct {
	// Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
	CollisionCount *int `json:"collisionCount,omitempty"`
	// Represents the latest available observations of a DaemonSet's current state.
	Conditions []*IoK8sAPIAppsV1DaemonSetCondition `json:"conditions,omitempty"`
	// The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	CurrentNumberScheduled int `json:"currentNumberScheduled"`
	// The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	DesiredNumberScheduled int `json:"desiredNumberScheduled"`
	// The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
	NumberAvailable *int `json:"numberAvailable,omitempty"`
	// The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	NumberMisscheduled int `json:"numberMisscheduled"`
	// numberReady is the number of nodes that should be running the daemon pod and have one or more of the daemon pod running with a Ready Condition.
	NumberReady int `json:"numberReady"`
	// The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
	NumberUnavailable *int `json:"numberUnavailable,omitempty"`
	// The most recent generation observed by the daemon set controller.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
	// The total number of nodes that are running updated daemon pod
	UpdatedNumberScheduled *int `json:"updatedNumberScheduled,omitempty"`
}

// DaemonSetStatus represents the current status of a daemon set.
type IoK8sAPIAppsV1DaemonSetStatusInput struct {
	// Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
	CollisionCount *int `json:"collisionCount,omitempty"`
	// Represents the latest available observations of a DaemonSet's current state.
	Conditions []*IoK8sAPIAppsV1DaemonSetConditionInput `json:"conditions,omitempty"`
	// The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	CurrentNumberScheduled int `json:"currentNumberScheduled"`
	// The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	DesiredNumberScheduled int `json:"desiredNumberScheduled"`
	// The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
	NumberAvailable *int `json:"numberAvailable,omitempty"`
	// The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	NumberMisscheduled int `json:"numberMisscheduled"`
	// numberReady is the number of nodes that should be running the daemon pod and have one or more of the daemon pod running with a Ready Condition.
	NumberReady int `json:"numberReady"`
	// The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
	NumberUnavailable *int `json:"numberUnavailable,omitempty"`
	// The most recent generation observed by the daemon set controller.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
	// The total number of nodes that are running updated daemon pod
	UpdatedNumberScheduled *int `json:"updatedNumberScheduled,omitempty"`
}

// DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
type IoK8sAPIAppsV1DaemonSetUpdateStrategy struct {
	// Spec to control the desired behavior of daemon set rolling update.
	RollingUpdate *IoK8sAPIAppsV1RollingUpdateDaemonSet `json:"rollingUpdate,omitempty"`
	// Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
	Type *string `json:"type,omitempty"`
}

// DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
type IoK8sAPIAppsV1DaemonSetUpdateStrategyInput struct {
	// Spec to control the desired behavior of daemon set rolling update.
	RollingUpdate *IoK8sAPIAppsV1RollingUpdateDaemonSetInput `json:"rollingUpdate,omitempty"`
	// Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
	Type *string `json:"type,omitempty"`
}

// Deployment enables declarative updates for Pods and ReplicaSets.
type IoK8sAPIAppsV1Deployment struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// DeploymentSpec is the specification of the desired behavior of the Deployment.
	Spec *IoK8sAPIAppsV1DeploymentSpec `json:"spec,omitempty"`
	// DeploymentStatus is the most recently observed status of the Deployment.
	Status *IoK8sAPIAppsV1DeploymentStatus `json:"status,omitempty"`
}

// DeploymentCondition describes the state of a deployment at a certain point.
type IoK8sAPIAppsV1DeploymentCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastUpdateTime *string `json:"lastUpdateTime,omitempty"`
	// A human readable message indicating details about the transition.
	Message *string `json:"message,omitempty"`
	// The reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of deployment condition.
	Type string `json:"type"`
}

// DeploymentCondition describes the state of a deployment at a certain point.
type IoK8sAPIAppsV1DeploymentConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastUpdateTime *string `json:"lastUpdateTime,omitempty"`
	// A human readable message indicating details about the transition.
	Message *string `json:"message,omitempty"`
	// The reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of deployment condition.
	Type string `json:"type"`
}

// Deployment enables declarative updates for Pods and ReplicaSets.
type IoK8sAPIAppsV1DeploymentInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// DeploymentSpec is the specification of the desired behavior of the Deployment.
	Spec *IoK8sAPIAppsV1DeploymentSpecInput `json:"spec,omitempty"`
	// DeploymentStatus is the most recently observed status of the Deployment.
	Status *IoK8sAPIAppsV1DeploymentStatusInput `json:"status,omitempty"`
}

// DeploymentList is a list of Deployments.
type IoK8sAPIAppsV1DeploymentList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is the list of Deployments.
	Items []*IoK8sAPIAppsV1Deployment `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// DeploymentSpec is the specification of the desired behavior of the Deployment.
type IoK8sAPIAppsV1DeploymentSpec struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int `json:"minReadySeconds,omitempty"`
	// Indicates that the deployment is paused.
	Paused *bool `json:"paused,omitempty"`
	// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
	ProgressDeadlineSeconds *int `json:"progressDeadlineSeconds,omitempty"`
	// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
	Replicas *int `json:"replicas,omitempty"`
	// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
	RevisionHistoryLimit *int `json:"revisionHistoryLimit,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector"`
	// DeploymentStrategy describes how to replace existing pods with new ones.
	Strategy *IoK8sAPIAppsV1DeploymentStrategy `json:"strategy,omitempty"`
	// PodTemplateSpec describes the data a pod should have when created from a template
	Template *IoK8sAPICoreV1PodTemplateSpec `json:"template"`
}

// DeploymentSpec is the specification of the desired behavior of the Deployment.
type IoK8sAPIAppsV1DeploymentSpecInput struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int `json:"minReadySeconds,omitempty"`
	// Indicates that the deployment is paused.
	Paused *bool `json:"paused,omitempty"`
	// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
	ProgressDeadlineSeconds *int `json:"progressDeadlineSeconds,omitempty"`
	// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
	Replicas *int `json:"replicas,omitempty"`
	// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
	RevisionHistoryLimit *int `json:"revisionHistoryLimit,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"selector"`
	// DeploymentStrategy describes how to replace existing pods with new ones.
	Strategy *IoK8sAPIAppsV1DeploymentStrategyInput `json:"strategy,omitempty"`
	// PodTemplateSpec describes the data a pod should have when created from a template
	Template *IoK8sAPICoreV1PodTemplateSpecInput `json:"template"`
}

// DeploymentStatus is the most recently observed status of the Deployment.
type IoK8sAPIAppsV1DeploymentStatus struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
	AvailableReplicas *int `json:"availableReplicas,omitempty"`
	// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
	CollisionCount *int `json:"collisionCount,omitempty"`
	// Represents the latest available observations of a deployment's current state.
	Conditions []*IoK8sAPIAppsV1DeploymentCondition `json:"conditions,omitempty"`
	// The generation observed by the deployment controller.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
	// readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.
	ReadyReplicas *int `json:"readyReplicas,omitempty"`
	// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
	Replicas *int `json:"replicas,omitempty"`
	// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
	UnavailableReplicas *int `json:"unavailableReplicas,omitempty"`
	// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
	UpdatedReplicas *int `json:"updatedReplicas,omitempty"`
}

// DeploymentStatus is the most recently observed status of the Deployment.
type IoK8sAPIAppsV1DeploymentStatusInput struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
	AvailableReplicas *int `json:"availableReplicas,omitempty"`
	// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
	CollisionCount *int `json:"collisionCount,omitempty"`
	// Represents the latest available observations of a deployment's current state.
	Conditions []*IoK8sAPIAppsV1DeploymentConditionInput `json:"conditions,omitempty"`
	// The generation observed by the deployment controller.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
	// readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.
	ReadyReplicas *int `json:"readyReplicas,omitempty"`
	// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
	Replicas *int `json:"replicas,omitempty"`
	// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
	UnavailableReplicas *int `json:"unavailableReplicas,omitempty"`
	// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
	UpdatedReplicas *int `json:"updatedReplicas,omitempty"`
}

// DeploymentStrategy describes how to replace existing pods with new ones.
type IoK8sAPIAppsV1DeploymentStrategy struct {
	// Spec to control the desired behavior of rolling update.
	RollingUpdate *IoK8sAPIAppsV1RollingUpdateDeployment `json:"rollingUpdate,omitempty"`
	// Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
	Type *string `json:"type,omitempty"`
}

// DeploymentStrategy describes how to replace existing pods with new ones.
type IoK8sAPIAppsV1DeploymentStrategyInput struct {
	// Spec to control the desired behavior of rolling update.
	RollingUpdate *IoK8sAPIAppsV1RollingUpdateDeploymentInput `json:"rollingUpdate,omitempty"`
	// Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
	Type *string `json:"type,omitempty"`
}

// ReplicaSet ensures that a specified number of pod replicas are running at any given time.
type IoK8sAPIAppsV1ReplicaSet struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// ReplicaSetSpec is the specification of a ReplicaSet.
	Spec *IoK8sAPIAppsV1ReplicaSetSpec `json:"spec,omitempty"`
	// ReplicaSetStatus represents the current status of a ReplicaSet.
	Status *IoK8sAPIAppsV1ReplicaSetStatus `json:"status,omitempty"`
}

// ReplicaSetCondition describes the state of a replica set at a certain point.
type IoK8sAPIAppsV1ReplicaSetCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// A human readable message indicating details about the transition.
	Message *string `json:"message,omitempty"`
	// The reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of replica set condition.
	Type string `json:"type"`
}

// ReplicaSetCondition describes the state of a replica set at a certain point.
type IoK8sAPIAppsV1ReplicaSetConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// A human readable message indicating details about the transition.
	Message *string `json:"message,omitempty"`
	// The reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of replica set condition.
	Type string `json:"type"`
}

// ReplicaSet ensures that a specified number of pod replicas are running at any given time.
type IoK8sAPIAppsV1ReplicaSetInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// ReplicaSetSpec is the specification of a ReplicaSet.
	Spec *IoK8sAPIAppsV1ReplicaSetSpecInput `json:"spec,omitempty"`
	// ReplicaSetStatus represents the current status of a ReplicaSet.
	Status *IoK8sAPIAppsV1ReplicaSetStatusInput `json:"status,omitempty"`
}

// ReplicaSetList is a collection of ReplicaSets.
type IoK8sAPIAppsV1ReplicaSetList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
	Items []*IoK8sAPIAppsV1ReplicaSet `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// ReplicaSetSpec is the specification of a ReplicaSet.
type IoK8sAPIAppsV1ReplicaSetSpec struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int `json:"minReadySeconds,omitempty"`
	// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
	Replicas *int `json:"replicas,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector"`
	// PodTemplateSpec describes the data a pod should have when created from a template
	Template *IoK8sAPICoreV1PodTemplateSpec `json:"template,omitempty"`
}

// ReplicaSetSpec is the specification of a ReplicaSet.
type IoK8sAPIAppsV1ReplicaSetSpecInput struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int `json:"minReadySeconds,omitempty"`
	// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
	Replicas *int `json:"replicas,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"selector"`
	// PodTemplateSpec describes the data a pod should have when created from a template
	Template *IoK8sAPICoreV1PodTemplateSpecInput `json:"template,omitempty"`
}

// ReplicaSetStatus represents the current status of a ReplicaSet.
type IoK8sAPIAppsV1ReplicaSetStatus struct {
	// The number of available replicas (ready for at least minReadySeconds) for this replica set.
	AvailableReplicas *int `json:"availableReplicas,omitempty"`
	// Represents the latest available observations of a replica set's current state.
	Conditions []*IoK8sAPIAppsV1ReplicaSetCondition `json:"conditions,omitempty"`
	// The number of pods that have labels matching the labels of the pod template of the replicaset.
	FullyLabeledReplicas *int `json:"fullyLabeledReplicas,omitempty"`
	// ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
	// readyReplicas is the number of pods targeted by this ReplicaSet with a Ready Condition.
	ReadyReplicas *int `json:"readyReplicas,omitempty"`
	// Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
	Replicas int `json:"replicas"`
}

// ReplicaSetStatus represents the current status of a ReplicaSet.
type IoK8sAPIAppsV1ReplicaSetStatusInput struct {
	// The number of available replicas (ready for at least minReadySeconds) for this replica set.
	AvailableReplicas *int `json:"availableReplicas,omitempty"`
	// Represents the latest available observations of a replica set's current state.
	Conditions []*IoK8sAPIAppsV1ReplicaSetConditionInput `json:"conditions,omitempty"`
	// The number of pods that have labels matching the labels of the pod template of the replicaset.
	FullyLabeledReplicas *int `json:"fullyLabeledReplicas,omitempty"`
	// ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
	// readyReplicas is the number of pods targeted by this ReplicaSet with a Ready Condition.
	ReadyReplicas *int `json:"readyReplicas,omitempty"`
	// Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
	Replicas int `json:"replicas"`
}

// Spec to control the desired behavior of daemon set rolling update.
type IoK8sAPIAppsV1RollingUpdateDaemonSet struct {
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	MaxSurge *string `json:"maxSurge,omitempty"`
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	MaxUnavailable *string `json:"maxUnavailable,omitempty"`
}

// Spec to control the desired behavior of daemon set rolling update.
type IoK8sAPIAppsV1RollingUpdateDaemonSetInput struct {
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	MaxSurge *string `json:"maxSurge,omitempty"`
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	MaxUnavailable *string `json:"maxUnavailable,omitempty"`
}

// Spec to control the desired behavior of rolling update.
type IoK8sAPIAppsV1RollingUpdateDeployment struct {
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	MaxSurge *string `json:"maxSurge,omitempty"`
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	MaxUnavailable *string `json:"maxUnavailable,omitempty"`
}

// Spec to control the desired behavior of rolling update.
type IoK8sAPIAppsV1RollingUpdateDeploymentInput struct {
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	MaxSurge *string `json:"maxSurge,omitempty"`
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	MaxUnavailable *string `json:"maxUnavailable,omitempty"`
}

// RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
type IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy struct {
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	MaxUnavailable *string `json:"maxUnavailable,omitempty"`
	// Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.
	Partition *int `json:"partition,omitempty"`
}

// RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
type IoK8sAPIAppsV1RollingUpdateStatefulSetStrategyInput struct {
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	MaxUnavailable *string `json:"maxUnavailable,omitempty"`
	// Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.
	Partition *int `json:"partition,omitempty"`
}

// StatefulSet represents a set of pods with consistent identities. Identities are defined as:
//   - Network: A single stable DNS and hostname.
//   - Storage: As many VolumeClaims as requested.
//
// The StatefulSet guarantees that a given network identity will always map to the same storage identity.
type IoK8sAPIAppsV1StatefulSet struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// A StatefulSetSpec is the specification of a StatefulSet.
	Spec *IoK8sAPIAppsV1StatefulSetSpec `json:"spec,omitempty"`
	// StatefulSetStatus represents the current state of a StatefulSet.
	Status *IoK8sAPIAppsV1StatefulSetStatus `json:"status,omitempty"`
}

// StatefulSetCondition describes the state of a statefulset at a certain point.
type IoK8sAPIAppsV1StatefulSetCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// A human readable message indicating details about the transition.
	Message *string `json:"message,omitempty"`
	// The reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of statefulset condition.
	Type string `json:"type"`
}

// StatefulSetCondition describes the state of a statefulset at a certain point.
type IoK8sAPIAppsV1StatefulSetConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// A human readable message indicating details about the transition.
	Message *string `json:"message,omitempty"`
	// The reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of statefulset condition.
	Type string `json:"type"`
}

// StatefulSet represents a set of pods with consistent identities. Identities are defined as:
//   - Network: A single stable DNS and hostname.
//   - Storage: As many VolumeClaims as requested.
//
// The StatefulSet guarantees that a given network identity will always map to the same storage identity.
type IoK8sAPIAppsV1StatefulSetInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// A StatefulSetSpec is the specification of a StatefulSet.
	Spec *IoK8sAPIAppsV1StatefulSetSpecInput `json:"spec,omitempty"`
	// StatefulSetStatus represents the current state of a StatefulSet.
	Status *IoK8sAPIAppsV1StatefulSetStatusInput `json:"status,omitempty"`
}

// StatefulSetList is a collection of StatefulSets.
type IoK8sAPIAppsV1StatefulSetList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is the list of stateful sets.
	Items []*IoK8sAPIAppsV1StatefulSet `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.
type IoK8sAPIAppsV1StatefulSetOrdinals struct {
	// start is the number representing the first replica's index. It may be used to number replicas from an alternate index (eg: 1-indexed) over the default 0-indexed names, or to orchestrate progressive movement of replicas from one StatefulSet to another. If set, replica indices will be in the range:
	//   [.spec.ordinals.start, .spec.ordinals.start + .spec.replicas).
	// If unset, defaults to 0. Replica indices will be in the range:
	//   [0, .spec.replicas).
	Start *int `json:"start,omitempty"`
}

// StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.
type IoK8sAPIAppsV1StatefulSetOrdinalsInput struct {
	// start is the number representing the first replica's index. It may be used to number replicas from an alternate index (eg: 1-indexed) over the default 0-indexed names, or to orchestrate progressive movement of replicas from one StatefulSet to another. If set, replica indices will be in the range:
	//   [.spec.ordinals.start, .spec.ordinals.start + .spec.replicas).
	// If unset, defaults to 0. Replica indices will be in the range:
	//   [0, .spec.replicas).
	Start *int `json:"start,omitempty"`
}

// StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates.
type IoK8sAPIAppsV1StatefulSetPersistentVolumeClaimRetentionPolicy struct {
	// WhenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted. The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete` policy causes those PVCs to be deleted.
	WhenDeleted *string `json:"whenDeleted,omitempty"`
	// WhenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted.
	WhenScaled *string `json:"whenScaled,omitempty"`
}

// StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates.
type IoK8sAPIAppsV1StatefulSetPersistentVolumeClaimRetentionPolicyInput struct {
	// WhenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted. The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete` policy causes those PVCs to be deleted.
	WhenDeleted *string `json:"whenDeleted,omitempty"`
	// WhenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted.
	WhenScaled *string `json:"whenScaled,omitempty"`
}

// A StatefulSetSpec is the specification of a StatefulSet.
type IoK8sAPIAppsV1StatefulSetSpec struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int `json:"minReadySeconds,omitempty"`
	// StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.
	Ordinals *IoK8sAPIAppsV1StatefulSetOrdinals `json:"ordinals,omitempty"`
	// StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates.
	PersistentVolumeClaimRetentionPolicy *IoK8sAPIAppsV1StatefulSetPersistentVolumeClaimRetentionPolicy `json:"persistentVolumeClaimRetentionPolicy,omitempty"`
	// podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
	PodManagementPolicy *string `json:"podManagementPolicy,omitempty"`
	// replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
	Replicas *int `json:"replicas,omitempty"`
	// revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
	RevisionHistoryLimit *int `json:"revisionHistoryLimit,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector"`
	// serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
	ServiceName string `json:"serviceName"`
	// PodTemplateSpec describes the data a pod should have when created from a template
	Template *IoK8sAPICoreV1PodTemplateSpec `json:"template"`
	// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
	UpdateStrategy *IoK8sAPIAppsV1StatefulSetUpdateStrategy `json:"updateStrategy,omitempty"`
	// volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
	VolumeClaimTemplates []*IoK8sAPICoreV1PersistentVolumeClaim `json:"volumeClaimTemplates,omitempty"`
}

// A StatefulSetSpec is the specification of a StatefulSet.
type IoK8sAPIAppsV1StatefulSetSpecInput struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int `json:"minReadySeconds,omitempty"`
	// StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.
	Ordinals *IoK8sAPIAppsV1StatefulSetOrdinalsInput `json:"ordinals,omitempty"`
	// StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates.
	PersistentVolumeClaimRetentionPolicy *IoK8sAPIAppsV1StatefulSetPersistentVolumeClaimRetentionPolicyInput `json:"persistentVolumeClaimRetentionPolicy,omitempty"`
	// podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
	PodManagementPolicy *string `json:"podManagementPolicy,omitempty"`
	// replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
	Replicas *int `json:"replicas,omitempty"`
	// revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
	RevisionHistoryLimit *int `json:"revisionHistoryLimit,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"selector"`
	// serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
	ServiceName string `json:"serviceName"`
	// PodTemplateSpec describes the data a pod should have when created from a template
	Template *IoK8sAPICoreV1PodTemplateSpecInput `json:"template"`
	// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
	UpdateStrategy *IoK8sAPIAppsV1StatefulSetUpdateStrategyInput `json:"updateStrategy,omitempty"`
	// volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
	VolumeClaimTemplates []*IoK8sAPICoreV1PersistentVolumeClaimInput `json:"volumeClaimTemplates,omitempty"`
}

// StatefulSetStatus represents the current state of a StatefulSet.
type IoK8sAPIAppsV1StatefulSetStatus struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset.
	AvailableReplicas *int `json:"availableReplicas,omitempty"`
	// collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
	CollisionCount *int `json:"collisionCount,omitempty"`
	// Represents the latest available observations of a statefulset's current state.
	Conditions []*IoK8sAPIAppsV1StatefulSetCondition `json:"conditions,omitempty"`
	// currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
	CurrentReplicas *int `json:"currentReplicas,omitempty"`
	// currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
	CurrentRevision *string `json:"currentRevision,omitempty"`
	// observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
	// readyReplicas is the number of pods created for this StatefulSet with a Ready Condition.
	ReadyReplicas *int `json:"readyReplicas,omitempty"`
	// replicas is the number of Pods created by the StatefulSet controller.
	Replicas int `json:"replicas"`
	// updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
	UpdateRevision *string `json:"updateRevision,omitempty"`
	// updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
	UpdatedReplicas *int `json:"updatedReplicas,omitempty"`
}

// StatefulSetStatus represents the current state of a StatefulSet.
type IoK8sAPIAppsV1StatefulSetStatusInput struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset.
	AvailableReplicas *int `json:"availableReplicas,omitempty"`
	// collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
	CollisionCount *int `json:"collisionCount,omitempty"`
	// Represents the latest available observations of a statefulset's current state.
	Conditions []*IoK8sAPIAppsV1StatefulSetConditionInput `json:"conditions,omitempty"`
	// currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
	CurrentReplicas *int `json:"currentReplicas,omitempty"`
	// currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
	CurrentRevision *string `json:"currentRevision,omitempty"`
	// observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
	// readyReplicas is the number of pods created for this StatefulSet with a Ready Condition.
	ReadyReplicas *int `json:"readyReplicas,omitempty"`
	// replicas is the number of Pods created by the StatefulSet controller.
	Replicas int `json:"replicas"`
	// updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
	UpdateRevision *string `json:"updateRevision,omitempty"`
	// updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
	UpdatedReplicas *int `json:"updatedReplicas,omitempty"`
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
type IoK8sAPIAppsV1StatefulSetUpdateStrategy struct {
	// RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
	RollingUpdate *IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy `json:"rollingUpdate,omitempty"`
	// Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.
	Type *string `json:"type,omitempty"`
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
type IoK8sAPIAppsV1StatefulSetUpdateStrategyInput struct {
	// RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
	RollingUpdate *IoK8sAPIAppsV1RollingUpdateStatefulSetStrategyInput `json:"rollingUpdate,omitempty"`
	// Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.
	Type *string `json:"type,omitempty"`
}

// BoundObjectReference is a reference to an object that a token is bound to.
type IoK8sAPIAuthenticationV1BoundObjectReference struct {
	// API version of the referent.
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
	Kind *string `json:"kind,omitempty"`
	// Name of the referent.
	Name *string `json:"name,omitempty"`
	// UID of the referent.
	UID *string `json:"uid,omitempty"`
}

// BoundObjectReference is a reference to an object that a token is bound to.
type IoK8sAPIAuthenticationV1BoundObjectReferenceInput struct {
	// API version of the referent.
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
	Kind *string `json:"kind,omitempty"`
	// Name of the referent.
	Name *string `json:"name,omitempty"`
	// UID of the referent.
	UID *string `json:"uid,omitempty"`
}

// TokenRequest requests a token for a given service account.
type IoK8sAPIAuthenticationV1TokenRequest struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// TokenRequestSpec contains client provided parameters of a token request.
	Spec *IoK8sAPIAuthenticationV1TokenRequestSpec `json:"spec"`
	// TokenRequestStatus is the result of a token request.
	Status *IoK8sAPIAuthenticationV1TokenRequestStatus `json:"status,omitempty"`
}

// TokenRequest requests a token for a given service account.
type IoK8sAPIAuthenticationV1TokenRequestInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// TokenRequestSpec contains client provided parameters of a token request.
	Spec *IoK8sAPIAuthenticationV1TokenRequestSpecInput `json:"spec"`
	// TokenRequestStatus is the result of a token request.
	Status *IoK8sAPIAuthenticationV1TokenRequestStatusInput `json:"status,omitempty"`
}

// TokenRequestSpec contains client provided parameters of a token request.
type IoK8sAPIAuthenticationV1TokenRequestSpec struct {
	// Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
	Audiences []*string `json:"audiences"`
	// BoundObjectReference is a reference to an object that a token is bound to.
	BoundObjectRef *IoK8sAPIAuthenticationV1BoundObjectReference `json:"boundObjectRef,omitempty"`
	// ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
	ExpirationSeconds *string `json:"expirationSeconds,omitempty"`
}

// TokenRequestSpec contains client provided parameters of a token request.
type IoK8sAPIAuthenticationV1TokenRequestSpecInput struct {
	// Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
	Audiences []*string `json:"audiences"`
	// BoundObjectReference is a reference to an object that a token is bound to.
	BoundObjectRef *IoK8sAPIAuthenticationV1BoundObjectReferenceInput `json:"boundObjectRef,omitempty"`
	// ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
	ExpirationSeconds *string `json:"expirationSeconds,omitempty"`
}

// TokenRequestStatus is the result of a token request.
type IoK8sAPIAuthenticationV1TokenRequestStatus struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	ExpirationTimestamp string `json:"expirationTimestamp"`
	// Token is the opaque bearer token.
	Token string `json:"token"`
}

// TokenRequestStatus is the result of a token request.
type IoK8sAPIAuthenticationV1TokenRequestStatusInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	ExpirationTimestamp string `json:"expirationTimestamp"`
	// Token is the opaque bearer token.
	Token string `json:"token"`
}

// TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
type IoK8sAPIAuthenticationV1TokenReview struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// TokenReviewSpec is a description of the token authentication request.
	Spec *IoK8sAPIAuthenticationV1TokenReviewSpec `json:"spec"`
	// TokenReviewStatus is the result of the token authentication request.
	Status *IoK8sAPIAuthenticationV1TokenReviewStatus `json:"status,omitempty"`
}

// TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
type IoK8sAPIAuthenticationV1TokenReviewInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// TokenReviewSpec is a description of the token authentication request.
	Spec *IoK8sAPIAuthenticationV1TokenReviewSpecInput `json:"spec"`
	// TokenReviewStatus is the result of the token authentication request.
	Status *IoK8sAPIAuthenticationV1TokenReviewStatusInput `json:"status,omitempty"`
}

// TokenReviewSpec is a description of the token authentication request.
type IoK8sAPIAuthenticationV1TokenReviewSpec struct {
	// Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
	Audiences []*string `json:"audiences,omitempty"`
	// Token is the opaque bearer token.
	Token *string `json:"token,omitempty"`
}

// TokenReviewSpec is a description of the token authentication request.
type IoK8sAPIAuthenticationV1TokenReviewSpecInput struct {
	// Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
	Audiences []*string `json:"audiences,omitempty"`
	// Token is the opaque bearer token.
	Token *string `json:"token,omitempty"`
}

// TokenReviewStatus is the result of the token authentication request.
type IoK8sAPIAuthenticationV1TokenReviewStatus struct {
	// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
	Audiences []*string `json:"audiences,omitempty"`
	// Authenticated indicates that the token was associated with a known user.
	Authenticated *bool `json:"authenticated,omitempty"`
	// Error indicates that the token couldn't be checked
	Error *string `json:"error,omitempty"`
	// UserInfo holds the information about the user needed to implement the user.Info interface.
	User *IoK8sAPIAuthenticationV1UserInfo `json:"user,omitempty"`
}

// TokenReviewStatus is the result of the token authentication request.
type IoK8sAPIAuthenticationV1TokenReviewStatusInput struct {
	// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
	Audiences []*string `json:"audiences,omitempty"`
	// Authenticated indicates that the token was associated with a known user.
	Authenticated *bool `json:"authenticated,omitempty"`
	// Error indicates that the token couldn't be checked
	Error *string `json:"error,omitempty"`
	// UserInfo holds the information about the user needed to implement the user.Info interface.
	User *IoK8sAPIAuthenticationV1UserInfoInput `json:"user,omitempty"`
}

// UserInfo holds the information about the user needed to implement the user.Info interface.
type IoK8sAPIAuthenticationV1UserInfo struct {
	// Any additional information provided by the authenticator.
	Extra *string `json:"extra,omitempty"`
	// The names of groups this user is a part of.
	Groups []*string `json:"groups,omitempty"`
	// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
	UID *string `json:"uid,omitempty"`
	// The name that uniquely identifies this user among all active users.
	Username *string `json:"username,omitempty"`
}

// UserInfo holds the information about the user needed to implement the user.Info interface.
type IoK8sAPIAuthenticationV1UserInfoInput struct {
	// Any additional information provided by the authenticator.
	Extra *string `json:"extra,omitempty"`
	// The names of groups this user is a part of.
	Groups []*string `json:"groups,omitempty"`
	// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
	UID *string `json:"uid,omitempty"`
	// The name that uniquely identifies this user among all active users.
	Username *string `json:"username,omitempty"`
}

// SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
type IoK8sAPIAuthenticationV1alpha1SelfSubjectReview struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
	Status *IoK8sAPIAuthenticationV1alpha1SelfSubjectReviewStatus `json:"status,omitempty"`
}

// SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
type IoK8sAPIAuthenticationV1alpha1SelfSubjectReviewInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
	Status *IoK8sAPIAuthenticationV1alpha1SelfSubjectReviewStatusInput `json:"status,omitempty"`
}

// SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
type IoK8sAPIAuthenticationV1alpha1SelfSubjectReviewStatus struct {
	// UserInfo holds the information about the user needed to implement the user.Info interface.
	UserInfo *IoK8sAPIAuthenticationV1UserInfo `json:"userInfo,omitempty"`
}

// SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
type IoK8sAPIAuthenticationV1alpha1SelfSubjectReviewStatusInput struct {
	// UserInfo holds the information about the user needed to implement the user.Info interface.
	UserInfo *IoK8sAPIAuthenticationV1UserInfoInput `json:"userInfo,omitempty"`
}

// SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
type IoK8sAPIAuthenticationV1beta1SelfSubjectReview struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
	Status *IoK8sAPIAuthenticationV1beta1SelfSubjectReviewStatus `json:"status,omitempty"`
}

// SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
type IoK8sAPIAuthenticationV1beta1SelfSubjectReviewInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
	Status *IoK8sAPIAuthenticationV1beta1SelfSubjectReviewStatusInput `json:"status,omitempty"`
}

// SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
type IoK8sAPIAuthenticationV1beta1SelfSubjectReviewStatus struct {
	// UserInfo holds the information about the user needed to implement the user.Info interface.
	UserInfo *IoK8sAPIAuthenticationV1UserInfo `json:"userInfo,omitempty"`
}

// SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
type IoK8sAPIAuthenticationV1beta1SelfSubjectReviewStatusInput struct {
	// UserInfo holds the information about the user needed to implement the user.Info interface.
	UserInfo *IoK8sAPIAuthenticationV1UserInfoInput `json:"userInfo,omitempty"`
}

// LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
type IoK8sAPIAuthorizationV1LocalSubjectAccessReview struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
	Spec *IoK8sAPIAuthorizationV1SubjectAccessReviewSpec `json:"spec"`
	// SubjectAccessReviewStatus
	Status *IoK8sAPIAuthorizationV1SubjectAccessReviewStatus `json:"status,omitempty"`
}

// LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
type IoK8sAPIAuthorizationV1LocalSubjectAccessReviewInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
	Spec *IoK8sAPIAuthorizationV1SubjectAccessReviewSpecInput `json:"spec"`
	// SubjectAccessReviewStatus
	Status *IoK8sAPIAuthorizationV1SubjectAccessReviewStatusInput `json:"status,omitempty"`
}

// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
type IoK8sAPIAuthorizationV1NonResourceAttributes struct {
	// Path is the URL path of the request
	Path *string `json:"path,omitempty"`
	// Verb is the standard HTTP verb
	Verb *string `json:"verb,omitempty"`
}

// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
type IoK8sAPIAuthorizationV1NonResourceAttributesInput struct {
	// Path is the URL path of the request
	Path *string `json:"path,omitempty"`
	// Verb is the standard HTTP verb
	Verb *string `json:"verb,omitempty"`
}

// NonResourceRule holds information that describes a rule for the non-resource
type IoK8sAPIAuthorizationV1NonResourceRule struct {
	// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
	NonResourceURLs []*string `json:"nonResourceURLs,omitempty"`
	// Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
	Verbs []*string `json:"verbs"`
}

// NonResourceRule holds information that describes a rule for the non-resource
type IoK8sAPIAuthorizationV1NonResourceRuleInput struct {
	// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
	NonResourceURLs []*string `json:"nonResourceURLs,omitempty"`
	// Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
	Verbs []*string `json:"verbs"`
}

// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
type IoK8sAPIAuthorizationV1ResourceAttributes struct {
	// Group is the API Group of the Resource.  "*" means all.
	Group *string `json:"group,omitempty"`
	// Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
	Name *string `json:"name,omitempty"`
	// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
	Namespace *string `json:"namespace,omitempty"`
	// Resource is one of the existing resource types.  "*" means all.
	Resource *string `json:"resource,omitempty"`
	// Subresource is one of the existing resource types.  "" means none.
	Subresource *string `json:"subresource,omitempty"`
	// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
	Verb *string `json:"verb,omitempty"`
	// Version is the API Version of the Resource.  "*" means all.
	Version *string `json:"version,omitempty"`
}

// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
type IoK8sAPIAuthorizationV1ResourceAttributesInput struct {
	// Group is the API Group of the Resource.  "*" means all.
	Group *string `json:"group,omitempty"`
	// Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
	Name *string `json:"name,omitempty"`
	// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
	Namespace *string `json:"namespace,omitempty"`
	// Resource is one of the existing resource types.  "*" means all.
	Resource *string `json:"resource,omitempty"`
	// Subresource is one of the existing resource types.  "" means none.
	Subresource *string `json:"subresource,omitempty"`
	// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
	Verb *string `json:"verb,omitempty"`
	// Version is the API Version of the Resource.  "*" means all.
	Version *string `json:"version,omitempty"`
}

// ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
type IoK8sAPIAuthorizationV1ResourceRule struct {
	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
	APIGroups []*string `json:"apiGroups,omitempty"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
	ResourceNames []*string `json:"resourceNames,omitempty"`
	// Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
	//  "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
	Resources []*string `json:"resources,omitempty"`
	// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
	Verbs []*string `json:"verbs"`
}

// ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
type IoK8sAPIAuthorizationV1ResourceRuleInput struct {
	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
	APIGroups []*string `json:"apiGroups,omitempty"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
	ResourceNames []*string `json:"resourceNames,omitempty"`
	// Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
	//  "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
	Resources []*string `json:"resources,omitempty"`
	// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
	Verbs []*string `json:"verbs"`
}

// SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
type IoK8sAPIAuthorizationV1SelfSubjectAccessReview struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
	Spec *IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec `json:"spec"`
	// SubjectAccessReviewStatus
	Status *IoK8sAPIAuthorizationV1SubjectAccessReviewStatus `json:"status,omitempty"`
}

// SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
type IoK8sAPIAuthorizationV1SelfSubjectAccessReviewInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
	Spec *IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpecInput `json:"spec"`
	// SubjectAccessReviewStatus
	Status *IoK8sAPIAuthorizationV1SubjectAccessReviewStatusInput `json:"status,omitempty"`
}

// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec struct {
	// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
	NonResourceAttributes *IoK8sAPIAuthorizationV1NonResourceAttributes `json:"nonResourceAttributes,omitempty"`
	// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
	ResourceAttributes *IoK8sAPIAuthorizationV1ResourceAttributes `json:"resourceAttributes,omitempty"`
}

// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpecInput struct {
	// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
	NonResourceAttributes *IoK8sAPIAuthorizationV1NonResourceAttributesInput `json:"nonResourceAttributes,omitempty"`
	// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
	ResourceAttributes *IoK8sAPIAuthorizationV1ResourceAttributesInput `json:"resourceAttributes,omitempty"`
}

// SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
type IoK8sAPIAuthorizationV1SelfSubjectRulesReview struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// SelfSubjectRulesReviewSpec defines the specification for SelfSubjectRulesReview.
	Spec *IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec `json:"spec"`
	// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
	Status *IoK8sAPIAuthorizationV1SubjectRulesReviewStatus `json:"status,omitempty"`
}

// SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
type IoK8sAPIAuthorizationV1SelfSubjectRulesReviewInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// SelfSubjectRulesReviewSpec defines the specification for SelfSubjectRulesReview.
	Spec *IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpecInput `json:"spec"`
	// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
	Status *IoK8sAPIAuthorizationV1SubjectRulesReviewStatusInput `json:"status,omitempty"`
}

// SelfSubjectRulesReviewSpec defines the specification for SelfSubjectRulesReview.
type IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec struct {
	// Namespace to evaluate rules for. Required.
	Namespace *string `json:"namespace,omitempty"`
}

// SelfSubjectRulesReviewSpec defines the specification for SelfSubjectRulesReview.
type IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpecInput struct {
	// Namespace to evaluate rules for. Required.
	Namespace *string `json:"namespace,omitempty"`
}

// SubjectAccessReview checks whether or not a user or group can perform an action.
type IoK8sAPIAuthorizationV1SubjectAccessReview struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
	Spec *IoK8sAPIAuthorizationV1SubjectAccessReviewSpec `json:"spec"`
	// SubjectAccessReviewStatus
	Status *IoK8sAPIAuthorizationV1SubjectAccessReviewStatus `json:"status,omitempty"`
}

// SubjectAccessReview checks whether or not a user or group can perform an action.
type IoK8sAPIAuthorizationV1SubjectAccessReviewInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
	Spec *IoK8sAPIAuthorizationV1SubjectAccessReviewSpecInput `json:"spec"`
	// SubjectAccessReviewStatus
	Status *IoK8sAPIAuthorizationV1SubjectAccessReviewStatusInput `json:"status,omitempty"`
}

// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type IoK8sAPIAuthorizationV1SubjectAccessReviewSpec struct {
	// Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
	Extra *string `json:"extra,omitempty"`
	// Groups is the groups you're testing for.
	Groups []*string `json:"groups,omitempty"`
	// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
	NonResourceAttributes *IoK8sAPIAuthorizationV1NonResourceAttributes `json:"nonResourceAttributes,omitempty"`
	// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
	ResourceAttributes *IoK8sAPIAuthorizationV1ResourceAttributes `json:"resourceAttributes,omitempty"`
	// UID information about the requesting user.
	UID *string `json:"uid,omitempty"`
	// User is the user you're testing for. If you specify "User" but not "Groups", then is it interpreted as "What if User were not a member of any groups
	User *string `json:"user,omitempty"`
}

// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
type IoK8sAPIAuthorizationV1SubjectAccessReviewSpecInput struct {
	// Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
	Extra *string `json:"extra,omitempty"`
	// Groups is the groups you're testing for.
	Groups []*string `json:"groups,omitempty"`
	// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
	NonResourceAttributes *IoK8sAPIAuthorizationV1NonResourceAttributesInput `json:"nonResourceAttributes,omitempty"`
	// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
	ResourceAttributes *IoK8sAPIAuthorizationV1ResourceAttributesInput `json:"resourceAttributes,omitempty"`
	// UID information about the requesting user.
	UID *string `json:"uid,omitempty"`
	// User is the user you're testing for. If you specify "User" but not "Groups", then is it interpreted as "What if User were not a member of any groups
	User *string `json:"user,omitempty"`
}

// SubjectAccessReviewStatus
type IoK8sAPIAuthorizationV1SubjectAccessReviewStatus struct {
	// Allowed is required. True if the action would be allowed, false otherwise.
	Allowed bool `json:"allowed"`
	// Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
	Denied *bool `json:"denied,omitempty"`
	// EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
	EvaluationError *string `json:"evaluationError,omitempty"`
	// Reason is optional.  It indicates why a request was allowed or denied.
	Reason *string `json:"reason,omitempty"`
}

// SubjectAccessReviewStatus
type IoK8sAPIAuthorizationV1SubjectAccessReviewStatusInput struct {
	// Allowed is required. True if the action would be allowed, false otherwise.
	Allowed bool `json:"allowed"`
	// Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
	Denied *bool `json:"denied,omitempty"`
	// EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
	EvaluationError *string `json:"evaluationError,omitempty"`
	// Reason is optional.  It indicates why a request was allowed or denied.
	Reason *string `json:"reason,omitempty"`
}

// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
type IoK8sAPIAuthorizationV1SubjectRulesReviewStatus struct {
	// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
	EvaluationError *string `json:"evaluationError,omitempty"`
	// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
	Incomplete bool `json:"incomplete"`
	// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	NonResourceRules []*IoK8sAPIAuthorizationV1NonResourceRule `json:"nonResourceRules"`
	// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	ResourceRules []*IoK8sAPIAuthorizationV1ResourceRule `json:"resourceRules"`
}

// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
type IoK8sAPIAuthorizationV1SubjectRulesReviewStatusInput struct {
	// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
	EvaluationError *string `json:"evaluationError,omitempty"`
	// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
	Incomplete bool `json:"incomplete"`
	// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	NonResourceRules []*IoK8sAPIAuthorizationV1NonResourceRuleInput `json:"nonResourceRules"`
	// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	ResourceRules []*IoK8sAPIAuthorizationV1ResourceRuleInput `json:"resourceRules"`
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
type IoK8sAPIAutoscalingV1CrossVersionObjectReference struct {
	// apiVersion is the API version of the referent
	APIVersion *string `json:"apiVersion,omitempty"`
	// kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`
	// name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `json:"name"`
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
type IoK8sAPIAutoscalingV1CrossVersionObjectReferenceInput struct {
	// apiVersion is the API version of the referent
	APIVersion *string `json:"apiVersion,omitempty"`
	// kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`
	// name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `json:"name"`
}

// configuration of a horizontal pod autoscaler.
type IoK8sAPIAutoscalingV1HorizontalPodAutoscaler struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// specification of a horizontal pod autoscaler.
	Spec *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec `json:"spec,omitempty"`
	// current status of a horizontal pod autoscaler
	Status *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus `json:"status,omitempty"`
}

// configuration of a horizontal pod autoscaler.
type IoK8sAPIAutoscalingV1HorizontalPodAutoscalerInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// specification of a horizontal pod autoscaler.
	Spec *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpecInput `json:"spec,omitempty"`
	// current status of a horizontal pod autoscaler
	Status *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatusInput `json:"status,omitempty"`
}

// list of horizontal pod autoscaler objects.
type IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is the list of horizontal pod autoscaler objects.
	Items []*IoK8sAPIAutoscalingV1HorizontalPodAutoscaler `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// specification of a horizontal pod autoscaler.
type IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec struct {
	// maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
	MaxReplicas int `json:"maxReplicas"`
	// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
	MinReplicas *int `json:"minReplicas,omitempty"`
	// CrossVersionObjectReference contains enough information to let you identify the referred resource.
	ScaleTargetRef *IoK8sAPIAutoscalingV1CrossVersionObjectReference `json:"scaleTargetRef"`
	// targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
	TargetCPUUtilizationPercentage *int `json:"targetCPUUtilizationPercentage,omitempty"`
}

// specification of a horizontal pod autoscaler.
type IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpecInput struct {
	// maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
	MaxReplicas int `json:"maxReplicas"`
	// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
	MinReplicas *int `json:"minReplicas,omitempty"`
	// CrossVersionObjectReference contains enough information to let you identify the referred resource.
	ScaleTargetRef *IoK8sAPIAutoscalingV1CrossVersionObjectReferenceInput `json:"scaleTargetRef"`
	// targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
	TargetCPUUtilizationPercentage *int `json:"targetCPUUtilizationPercentage,omitempty"`
}

// current status of a horizontal pod autoscaler
type IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus struct {
	// currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
	CurrentCPUUtilizationPercentage *int `json:"currentCPUUtilizationPercentage,omitempty"`
	// currentReplicas is the current number of replicas of pods managed by this autoscaler.
	CurrentReplicas int `json:"currentReplicas"`
	// desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.
	DesiredReplicas int `json:"desiredReplicas"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastScaleTime *string `json:"lastScaleTime,omitempty"`
	// observedGeneration is the most recent generation observed by this autoscaler.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
}

// current status of a horizontal pod autoscaler
type IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatusInput struct {
	// currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
	CurrentCPUUtilizationPercentage *int `json:"currentCPUUtilizationPercentage,omitempty"`
	// currentReplicas is the current number of replicas of pods managed by this autoscaler.
	CurrentReplicas int `json:"currentReplicas"`
	// desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.
	DesiredReplicas int `json:"desiredReplicas"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastScaleTime *string `json:"lastScaleTime,omitempty"`
	// observedGeneration is the most recent generation observed by this autoscaler.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
}

// Scale represents a scaling request for a resource.
type IoK8sAPIAutoscalingV1Scale struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// ScaleSpec describes the attributes of a scale subresource.
	Spec *IoK8sAPIAutoscalingV1ScaleSpec `json:"spec,omitempty"`
	// ScaleStatus represents the current status of a scale subresource.
	Status *IoK8sAPIAutoscalingV1ScaleStatus `json:"status,omitempty"`
}

// Scale represents a scaling request for a resource.
type IoK8sAPIAutoscalingV1ScaleInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// ScaleSpec describes the attributes of a scale subresource.
	Spec *IoK8sAPIAutoscalingV1ScaleSpecInput `json:"spec,omitempty"`
	// ScaleStatus represents the current status of a scale subresource.
	Status *IoK8sAPIAutoscalingV1ScaleStatusInput `json:"status,omitempty"`
}

// ScaleSpec describes the attributes of a scale subresource.
type IoK8sAPIAutoscalingV1ScaleSpec struct {
	// replicas is the desired number of instances for the scaled object.
	Replicas *int `json:"replicas,omitempty"`
}

// ScaleSpec describes the attributes of a scale subresource.
type IoK8sAPIAutoscalingV1ScaleSpecInput struct {
	// replicas is the desired number of instances for the scaled object.
	Replicas *int `json:"replicas,omitempty"`
}

// ScaleStatus represents the current status of a scale subresource.
type IoK8sAPIAutoscalingV1ScaleStatus struct {
	// replicas is the actual number of observed instances of the scaled object.
	Replicas int `json:"replicas"`
	// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Selector *string `json:"selector,omitempty"`
}

// ScaleStatus represents the current status of a scale subresource.
type IoK8sAPIAutoscalingV1ScaleStatusInput struct {
	// replicas is the actual number of observed instances of the scaled object.
	Replicas int `json:"replicas"`
	// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Selector *string `json:"selector,omitempty"`
}

// ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
type IoK8sAPIAutoscalingV2ContainerResourceMetricSource struct {
	// container is the name of the container in the pods of the scaling target
	Container string `json:"container"`
	// name is the name of the resource in question.
	Name string `json:"name"`
	// MetricTarget defines the target value, average value, or average utilization of a specific metric
	Target *IoK8sAPIAutoscalingV2MetricTarget `json:"target"`
}

// ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
type IoK8sAPIAutoscalingV2ContainerResourceMetricSourceInput struct {
	// container is the name of the container in the pods of the scaling target
	Container string `json:"container"`
	// name is the name of the resource in question.
	Name string `json:"name"`
	// MetricTarget defines the target value, average value, or average utilization of a specific metric
	Target *IoK8sAPIAutoscalingV2MetricTargetInput `json:"target"`
}

// ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
type IoK8sAPIAutoscalingV2ContainerResourceMetricStatus struct {
	// container is the name of the container in the pods of the scaling target
	Container string `json:"container"`
	// MetricValueStatus holds the current value for a metric
	Current *IoK8sAPIAutoscalingV2MetricValueStatus `json:"current"`
	// name is the name of the resource in question.
	Name string `json:"name"`
}

// ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
type IoK8sAPIAutoscalingV2ContainerResourceMetricStatusInput struct {
	// container is the name of the container in the pods of the scaling target
	Container string `json:"container"`
	// MetricValueStatus holds the current value for a metric
	Current *IoK8sAPIAutoscalingV2MetricValueStatusInput `json:"current"`
	// name is the name of the resource in question.
	Name string `json:"name"`
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
type IoK8sAPIAutoscalingV2CrossVersionObjectReference struct {
	// apiVersion is the API version of the referent
	APIVersion *string `json:"apiVersion,omitempty"`
	// kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`
	// name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `json:"name"`
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
type IoK8sAPIAutoscalingV2CrossVersionObjectReferenceInput struct {
	// apiVersion is the API version of the referent
	APIVersion *string `json:"apiVersion,omitempty"`
	// kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`
	// name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `json:"name"`
}

// ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
type IoK8sAPIAutoscalingV2ExternalMetricSource struct {
	// MetricIdentifier defines the name and optionally selector for a metric
	Metric *IoK8sAPIAutoscalingV2MetricIdentifier `json:"metric"`
	// MetricTarget defines the target value, average value, or average utilization of a specific metric
	Target *IoK8sAPIAutoscalingV2MetricTarget `json:"target"`
}

// ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
type IoK8sAPIAutoscalingV2ExternalMetricSourceInput struct {
	// MetricIdentifier defines the name and optionally selector for a metric
	Metric *IoK8sAPIAutoscalingV2MetricIdentifierInput `json:"metric"`
	// MetricTarget defines the target value, average value, or average utilization of a specific metric
	Target *IoK8sAPIAutoscalingV2MetricTargetInput `json:"target"`
}

// ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
type IoK8sAPIAutoscalingV2ExternalMetricStatus struct {
	// MetricValueStatus holds the current value for a metric
	Current *IoK8sAPIAutoscalingV2MetricValueStatus `json:"current"`
	// MetricIdentifier defines the name and optionally selector for a metric
	Metric *IoK8sAPIAutoscalingV2MetricIdentifier `json:"metric"`
}

// ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
type IoK8sAPIAutoscalingV2ExternalMetricStatusInput struct {
	// MetricValueStatus holds the current value for a metric
	Current *IoK8sAPIAutoscalingV2MetricValueStatusInput `json:"current"`
	// MetricIdentifier defines the name and optionally selector for a metric
	Metric *IoK8sAPIAutoscalingV2MetricIdentifierInput `json:"metric"`
}

// HPAScalingPolicy is a single policy which must hold true for a specified past interval.
type IoK8sAPIAutoscalingV2HPAScalingPolicy struct {
	// periodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
	PeriodSeconds int `json:"periodSeconds"`
	// type is used to specify the scaling policy.
	Type string `json:"type"`
	// value contains the amount of change which is permitted by the policy. It must be greater than zero
	Value int `json:"value"`
}

// HPAScalingPolicy is a single policy which must hold true for a specified past interval.
type IoK8sAPIAutoscalingV2HPAScalingPolicyInput struct {
	// periodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
	PeriodSeconds int `json:"periodSeconds"`
	// type is used to specify the scaling policy.
	Type string `json:"type"`
	// value contains the amount of change which is permitted by the policy. It must be greater than zero
	Value int `json:"value"`
}

// HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
type IoK8sAPIAutoscalingV2HPAScalingRules struct {
	// policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid
	Policies []*IoK8sAPIAutoscalingV2HPAScalingPolicy `json:"policies,omitempty"`
	// selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.
	SelectPolicy *string `json:"selectPolicy,omitempty"`
	// stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
	StabilizationWindowSeconds *int `json:"stabilizationWindowSeconds,omitempty"`
}

// HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
type IoK8sAPIAutoscalingV2HPAScalingRulesInput struct {
	// policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid
	Policies []*IoK8sAPIAutoscalingV2HPAScalingPolicyInput `json:"policies,omitempty"`
	// selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.
	SelectPolicy *string `json:"selectPolicy,omitempty"`
	// stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
	StabilizationWindowSeconds *int `json:"stabilizationWindowSeconds,omitempty"`
}

// HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.
type IoK8sAPIAutoscalingV2HorizontalPodAutoscaler struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
	Spec *IoK8sAPIAutoscalingV2HorizontalPodAutoscalerSpec `json:"spec,omitempty"`
	// HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
	Status *IoK8sAPIAutoscalingV2HorizontalPodAutoscalerStatus `json:"status,omitempty"`
}

// HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).
type IoK8sAPIAutoscalingV2HorizontalPodAutoscalerBehavior struct {
	// HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
	ScaleDown *IoK8sAPIAutoscalingV2HPAScalingRules `json:"scaleDown,omitempty"`
	// HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
	ScaleUp *IoK8sAPIAutoscalingV2HPAScalingRules `json:"scaleUp,omitempty"`
}

// HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).
type IoK8sAPIAutoscalingV2HorizontalPodAutoscalerBehaviorInput struct {
	// HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
	ScaleDown *IoK8sAPIAutoscalingV2HPAScalingRulesInput `json:"scaleDown,omitempty"`
	// HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
	ScaleUp *IoK8sAPIAutoscalingV2HPAScalingRulesInput `json:"scaleUp,omitempty"`
}

// HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.
type IoK8sAPIAutoscalingV2HorizontalPodAutoscalerCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// message is a human-readable explanation containing details about the transition
	Message *string `json:"message,omitempty"`
	// reason is the reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// status is the status of the condition (True, False, Unknown)
	Status string `json:"status"`
	// type describes the current condition
	Type string `json:"type"`
}

// HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.
type IoK8sAPIAutoscalingV2HorizontalPodAutoscalerConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// message is a human-readable explanation containing details about the transition
	Message *string `json:"message,omitempty"`
	// reason is the reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// status is the status of the condition (True, False, Unknown)
	Status string `json:"status"`
	// type describes the current condition
	Type string `json:"type"`
}

// HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.
type IoK8sAPIAutoscalingV2HorizontalPodAutoscalerInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
	Spec *IoK8sAPIAutoscalingV2HorizontalPodAutoscalerSpecInput `json:"spec,omitempty"`
	// HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
	Status *IoK8sAPIAutoscalingV2HorizontalPodAutoscalerStatusInput `json:"status,omitempty"`
}

// HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.
type IoK8sAPIAutoscalingV2HorizontalPodAutoscalerList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is the list of horizontal pod autoscaler objects.
	Items []*IoK8sAPIAutoscalingV2HorizontalPodAutoscaler `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
type IoK8sAPIAutoscalingV2HorizontalPodAutoscalerSpec struct {
	// HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).
	Behavior *IoK8sAPIAutoscalingV2HorizontalPodAutoscalerBehavior `json:"behavior,omitempty"`
	// maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
	MaxReplicas int `json:"maxReplicas"`
	// metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.
	Metrics []*IoK8sAPIAutoscalingV2MetricSpec `json:"metrics,omitempty"`
	// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
	MinReplicas *int `json:"minReplicas,omitempty"`
	// CrossVersionObjectReference contains enough information to let you identify the referred resource.
	ScaleTargetRef *IoK8sAPIAutoscalingV2CrossVersionObjectReference `json:"scaleTargetRef"`
}

// HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
type IoK8sAPIAutoscalingV2HorizontalPodAutoscalerSpecInput struct {
	// HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).
	Behavior *IoK8sAPIAutoscalingV2HorizontalPodAutoscalerBehaviorInput `json:"behavior,omitempty"`
	// maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
	MaxReplicas int `json:"maxReplicas"`
	// metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.
	Metrics []*IoK8sAPIAutoscalingV2MetricSpecInput `json:"metrics,omitempty"`
	// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
	MinReplicas *int `json:"minReplicas,omitempty"`
	// CrossVersionObjectReference contains enough information to let you identify the referred resource.
	ScaleTargetRef *IoK8sAPIAutoscalingV2CrossVersionObjectReferenceInput `json:"scaleTargetRef"`
}

// HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
type IoK8sAPIAutoscalingV2HorizontalPodAutoscalerStatus struct {
	// conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.
	Conditions []*IoK8sAPIAutoscalingV2HorizontalPodAutoscalerCondition `json:"conditions,omitempty"`
	// currentMetrics is the last read state of the metrics used by this autoscaler.
	CurrentMetrics []*IoK8sAPIAutoscalingV2MetricStatus `json:"currentMetrics,omitempty"`
	// currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.
	CurrentReplicas *int `json:"currentReplicas,omitempty"`
	// desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.
	DesiredReplicas int `json:"desiredReplicas"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastScaleTime *string `json:"lastScaleTime,omitempty"`
	// observedGeneration is the most recent generation observed by this autoscaler.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
}

// HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
type IoK8sAPIAutoscalingV2HorizontalPodAutoscalerStatusInput struct {
	// conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.
	Conditions []*IoK8sAPIAutoscalingV2HorizontalPodAutoscalerConditionInput `json:"conditions,omitempty"`
	// currentMetrics is the last read state of the metrics used by this autoscaler.
	CurrentMetrics []*IoK8sAPIAutoscalingV2MetricStatusInput `json:"currentMetrics,omitempty"`
	// currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.
	CurrentReplicas *int `json:"currentReplicas,omitempty"`
	// desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.
	DesiredReplicas int `json:"desiredReplicas"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastScaleTime *string `json:"lastScaleTime,omitempty"`
	// observedGeneration is the most recent generation observed by this autoscaler.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
}

// MetricIdentifier defines the name and optionally selector for a metric
type IoK8sAPIAutoscalingV2MetricIdentifier struct {
	// name is the name of the given metric
	Name string `json:"name"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector,omitempty"`
}

// MetricIdentifier defines the name and optionally selector for a metric
type IoK8sAPIAutoscalingV2MetricIdentifierInput struct {
	// name is the name of the given metric
	Name string `json:"name"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"selector,omitempty"`
}

// MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).
type IoK8sAPIAutoscalingV2MetricSpec struct {
	// ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
	ContainerResource *IoK8sAPIAutoscalingV2ContainerResourceMetricSource `json:"containerResource,omitempty"`
	// ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
	External *IoK8sAPIAutoscalingV2ExternalMetricSource `json:"external,omitempty"`
	// ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
	Object *IoK8sAPIAutoscalingV2ObjectMetricSource `json:"object,omitempty"`
	// PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
	Pods *IoK8sAPIAutoscalingV2PodsMetricSource `json:"pods,omitempty"`
	// ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
	Resource *IoK8sAPIAutoscalingV2ResourceMetricSource `json:"resource,omitempty"`
	// type is the type of metric source.  It should be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
	Type string `json:"type"`
}

// MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).
type IoK8sAPIAutoscalingV2MetricSpecInput struct {
	// ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
	ContainerResource *IoK8sAPIAutoscalingV2ContainerResourceMetricSourceInput `json:"containerResource,omitempty"`
	// ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
	External *IoK8sAPIAutoscalingV2ExternalMetricSourceInput `json:"external,omitempty"`
	// ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
	Object *IoK8sAPIAutoscalingV2ObjectMetricSourceInput `json:"object,omitempty"`
	// PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
	Pods *IoK8sAPIAutoscalingV2PodsMetricSourceInput `json:"pods,omitempty"`
	// ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
	Resource *IoK8sAPIAutoscalingV2ResourceMetricSourceInput `json:"resource,omitempty"`
	// type is the type of metric source.  It should be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
	Type string `json:"type"`
}

// MetricStatus describes the last-read state of a single metric.
type IoK8sAPIAutoscalingV2MetricStatus struct {
	// ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
	ContainerResource *IoK8sAPIAutoscalingV2ContainerResourceMetricStatus `json:"containerResource,omitempty"`
	// ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
	External *IoK8sAPIAutoscalingV2ExternalMetricStatus `json:"external,omitempty"`
	// ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
	Object *IoK8sAPIAutoscalingV2ObjectMetricStatus `json:"object,omitempty"`
	// PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
	Pods *IoK8sAPIAutoscalingV2PodsMetricStatus `json:"pods,omitempty"`
	// ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
	Resource *IoK8sAPIAutoscalingV2ResourceMetricStatus `json:"resource,omitempty"`
	// type is the type of metric source.  It will be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each corresponds to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
	Type string `json:"type"`
}

// MetricStatus describes the last-read state of a single metric.
type IoK8sAPIAutoscalingV2MetricStatusInput struct {
	// ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
	ContainerResource *IoK8sAPIAutoscalingV2ContainerResourceMetricStatusInput `json:"containerResource,omitempty"`
	// ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
	External *IoK8sAPIAutoscalingV2ExternalMetricStatusInput `json:"external,omitempty"`
	// ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
	Object *IoK8sAPIAutoscalingV2ObjectMetricStatusInput `json:"object,omitempty"`
	// PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
	Pods *IoK8sAPIAutoscalingV2PodsMetricStatusInput `json:"pods,omitempty"`
	// ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
	Resource *IoK8sAPIAutoscalingV2ResourceMetricStatusInput `json:"resource,omitempty"`
	// type is the type of metric source.  It will be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each corresponds to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
	Type string `json:"type"`
}

// MetricTarget defines the target value, average value, or average utilization of a specific metric
type IoK8sAPIAutoscalingV2MetricTarget struct {
	// averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
	AverageUtilization *int `json:"averageUtilization,omitempty"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// ``` <quantity>        ::= <signedNumber><suffix>
	//
	// 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	//
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//
	// 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	//
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//
	// 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	//
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//
	// - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
	//
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//
	// - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	AverageValue *string `json:"averageValue,omitempty"`
	// type represents whether the metric type is Utilization, Value, or AverageValue
	Type string `json:"type"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// ``` <quantity>        ::= <signedNumber><suffix>
	//
	// 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	//
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//
	// 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	//
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//
	// 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	//
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//
	// - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
	//
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//
	// - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	Value *string `json:"value,omitempty"`
}

// MetricTarget defines the target value, average value, or average utilization of a specific metric
type IoK8sAPIAutoscalingV2MetricTargetInput struct {
	// averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
	AverageUtilization *int `json:"averageUtilization,omitempty"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// ``` <quantity>        ::= <signedNumber><suffix>
	//
	// 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	//
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//
	// 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	//
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//
	// 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	//
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//
	// - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
	//
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//
	// - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	AverageValue *string `json:"averageValue,omitempty"`
	// type represents whether the metric type is Utilization, Value, or AverageValue
	Type string `json:"type"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// ``` <quantity>        ::= <signedNumber><suffix>
	//
	// 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	//
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//
	// 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	//
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//
	// 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	//
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//
	// - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
	//
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//
	// - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	Value *string `json:"value,omitempty"`
}

// MetricValueStatus holds the current value for a metric
type IoK8sAPIAutoscalingV2MetricValueStatus struct {
	// currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
	AverageUtilization *int `json:"averageUtilization,omitempty"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// ``` <quantity>        ::= <signedNumber><suffix>
	//
	// 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	//
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//
	// 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	//
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//
	// 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	//
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//
	// - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
	//
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//
	// - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	AverageValue *string `json:"averageValue,omitempty"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// ``` <quantity>        ::= <signedNumber><suffix>
	//
	// 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	//
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//
	// 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	//
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//
	// 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	//
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//
	// - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
	//
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//
	// - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	Value *string `json:"value,omitempty"`
}

// MetricValueStatus holds the current value for a metric
type IoK8sAPIAutoscalingV2MetricValueStatusInput struct {
	// currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
	AverageUtilization *int `json:"averageUtilization,omitempty"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// ``` <quantity>        ::= <signedNumber><suffix>
	//
	// 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	//
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//
	// 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	//
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//
	// 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	//
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//
	// - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
	//
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//
	// - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	AverageValue *string `json:"averageValue,omitempty"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// ``` <quantity>        ::= <signedNumber><suffix>
	//
	// 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	//
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//
	// 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	//
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//
	// 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	//
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//
	// - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
	//
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//
	// - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	Value *string `json:"value,omitempty"`
}

// ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
type IoK8sAPIAutoscalingV2ObjectMetricSource struct {
	// CrossVersionObjectReference contains enough information to let you identify the referred resource.
	DescribedObject *IoK8sAPIAutoscalingV2CrossVersionObjectReference `json:"describedObject"`
	// MetricIdentifier defines the name and optionally selector for a metric
	Metric *IoK8sAPIAutoscalingV2MetricIdentifier `json:"metric"`
	// MetricTarget defines the target value, average value, or average utilization of a specific metric
	Target *IoK8sAPIAutoscalingV2MetricTarget `json:"target"`
}

// ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
type IoK8sAPIAutoscalingV2ObjectMetricSourceInput struct {
	// CrossVersionObjectReference contains enough information to let you identify the referred resource.
	DescribedObject *IoK8sAPIAutoscalingV2CrossVersionObjectReferenceInput `json:"describedObject"`
	// MetricIdentifier defines the name and optionally selector for a metric
	Metric *IoK8sAPIAutoscalingV2MetricIdentifierInput `json:"metric"`
	// MetricTarget defines the target value, average value, or average utilization of a specific metric
	Target *IoK8sAPIAutoscalingV2MetricTargetInput `json:"target"`
}

// ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
type IoK8sAPIAutoscalingV2ObjectMetricStatus struct {
	// MetricValueStatus holds the current value for a metric
	Current *IoK8sAPIAutoscalingV2MetricValueStatus `json:"current"`
	// CrossVersionObjectReference contains enough information to let you identify the referred resource.
	DescribedObject *IoK8sAPIAutoscalingV2CrossVersionObjectReference `json:"describedObject"`
	// MetricIdentifier defines the name and optionally selector for a metric
	Metric *IoK8sAPIAutoscalingV2MetricIdentifier `json:"metric"`
}

// ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
type IoK8sAPIAutoscalingV2ObjectMetricStatusInput struct {
	// MetricValueStatus holds the current value for a metric
	Current *IoK8sAPIAutoscalingV2MetricValueStatusInput `json:"current"`
	// CrossVersionObjectReference contains enough information to let you identify the referred resource.
	DescribedObject *IoK8sAPIAutoscalingV2CrossVersionObjectReferenceInput `json:"describedObject"`
	// MetricIdentifier defines the name and optionally selector for a metric
	Metric *IoK8sAPIAutoscalingV2MetricIdentifierInput `json:"metric"`
}

// PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
type IoK8sAPIAutoscalingV2PodsMetricSource struct {
	// MetricIdentifier defines the name and optionally selector for a metric
	Metric *IoK8sAPIAutoscalingV2MetricIdentifier `json:"metric"`
	// MetricTarget defines the target value, average value, or average utilization of a specific metric
	Target *IoK8sAPIAutoscalingV2MetricTarget `json:"target"`
}

// PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
type IoK8sAPIAutoscalingV2PodsMetricSourceInput struct {
	// MetricIdentifier defines the name and optionally selector for a metric
	Metric *IoK8sAPIAutoscalingV2MetricIdentifierInput `json:"metric"`
	// MetricTarget defines the target value, average value, or average utilization of a specific metric
	Target *IoK8sAPIAutoscalingV2MetricTargetInput `json:"target"`
}

// PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
type IoK8sAPIAutoscalingV2PodsMetricStatus struct {
	// MetricValueStatus holds the current value for a metric
	Current *IoK8sAPIAutoscalingV2MetricValueStatus `json:"current"`
	// MetricIdentifier defines the name and optionally selector for a metric
	Metric *IoK8sAPIAutoscalingV2MetricIdentifier `json:"metric"`
}

// PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
type IoK8sAPIAutoscalingV2PodsMetricStatusInput struct {
	// MetricValueStatus holds the current value for a metric
	Current *IoK8sAPIAutoscalingV2MetricValueStatusInput `json:"current"`
	// MetricIdentifier defines the name and optionally selector for a metric
	Metric *IoK8sAPIAutoscalingV2MetricIdentifierInput `json:"metric"`
}

// ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
type IoK8sAPIAutoscalingV2ResourceMetricSource struct {
	// name is the name of the resource in question.
	Name string `json:"name"`
	// MetricTarget defines the target value, average value, or average utilization of a specific metric
	Target *IoK8sAPIAutoscalingV2MetricTarget `json:"target"`
}

// ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
type IoK8sAPIAutoscalingV2ResourceMetricSourceInput struct {
	// name is the name of the resource in question.
	Name string `json:"name"`
	// MetricTarget defines the target value, average value, or average utilization of a specific metric
	Target *IoK8sAPIAutoscalingV2MetricTargetInput `json:"target"`
}

// ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
type IoK8sAPIAutoscalingV2ResourceMetricStatus struct {
	// MetricValueStatus holds the current value for a metric
	Current *IoK8sAPIAutoscalingV2MetricValueStatus `json:"current"`
	// name is the name of the resource in question.
	Name string `json:"name"`
}

// ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
type IoK8sAPIAutoscalingV2ResourceMetricStatusInput struct {
	// MetricValueStatus holds the current value for a metric
	Current *IoK8sAPIAutoscalingV2MetricValueStatusInput `json:"current"`
	// name is the name of the resource in question.
	Name string `json:"name"`
}

// CronJob represents the configuration of a single cron job.
type IoK8sAPIBatchV1CronJob struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// CronJobSpec describes how the job execution will look like and when it will actually run.
	Spec *IoK8sAPIBatchV1CronJobSpec `json:"spec,omitempty"`
	// CronJobStatus represents the current state of a cron job.
	Status *IoK8sAPIBatchV1CronJobStatus `json:"status,omitempty"`
}

// CronJob represents the configuration of a single cron job.
type IoK8sAPIBatchV1CronJobInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// CronJobSpec describes how the job execution will look like and when it will actually run.
	Spec *IoK8sAPIBatchV1CronJobSpecInput `json:"spec,omitempty"`
	// CronJobStatus represents the current state of a cron job.
	Status *IoK8sAPIBatchV1CronJobStatusInput `json:"status,omitempty"`
}

// CronJobList is a collection of cron jobs.
type IoK8sAPIBatchV1CronJobList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is the list of CronJobs.
	Items []*IoK8sAPIBatchV1CronJob `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// CronJobSpec describes how the job execution will look like and when it will actually run.
type IoK8sAPIBatchV1CronJobSpec struct {
	// Specifies how to treat concurrent executions of a Job. Valid values are:
	//
	// - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
	ConcurrencyPolicy *string `json:"concurrencyPolicy,omitempty"`
	// The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
	FailedJobsHistoryLimit *int `json:"failedJobsHistoryLimit,omitempty"`
	// JobTemplateSpec describes the data a Job should have when created from a template
	JobTemplate *IoK8sAPIBatchV1JobTemplateSpec `json:"jobTemplate"`
	// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
	Schedule string `json:"schedule"`
	// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
	StartingDeadlineSeconds *string `json:"startingDeadlineSeconds,omitempty"`
	// The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
	SuccessfulJobsHistoryLimit *int `json:"successfulJobsHistoryLimit,omitempty"`
	// This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
	Suspend *bool `json:"suspend,omitempty"`
	// The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
	TimeZone *string `json:"timeZone,omitempty"`
}

// CronJobSpec describes how the job execution will look like and when it will actually run.
type IoK8sAPIBatchV1CronJobSpecInput struct {
	// Specifies how to treat concurrent executions of a Job. Valid values are:
	//
	// - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
	ConcurrencyPolicy *string `json:"concurrencyPolicy,omitempty"`
	// The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
	FailedJobsHistoryLimit *int `json:"failedJobsHistoryLimit,omitempty"`
	// JobTemplateSpec describes the data a Job should have when created from a template
	JobTemplate *IoK8sAPIBatchV1JobTemplateSpecInput `json:"jobTemplate"`
	// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
	Schedule string `json:"schedule"`
	// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
	StartingDeadlineSeconds *string `json:"startingDeadlineSeconds,omitempty"`
	// The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
	SuccessfulJobsHistoryLimit *int `json:"successfulJobsHistoryLimit,omitempty"`
	// This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
	Suspend *bool `json:"suspend,omitempty"`
	// The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
	TimeZone *string `json:"timeZone,omitempty"`
}

// CronJobStatus represents the current state of a cron job.
type IoK8sAPIBatchV1CronJobStatus struct {
	// A list of pointers to currently running jobs.
	Active []*IoK8sAPICoreV1ObjectReference `json:"active,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastScheduleTime *string `json:"lastScheduleTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastSuccessfulTime *string `json:"lastSuccessfulTime,omitempty"`
}

// CronJobStatus represents the current state of a cron job.
type IoK8sAPIBatchV1CronJobStatusInput struct {
	// A list of pointers to currently running jobs.
	Active []*IoK8sAPICoreV1ObjectReferenceInput `json:"active,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastScheduleTime *string `json:"lastScheduleTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastSuccessfulTime *string `json:"lastSuccessfulTime,omitempty"`
}

// Job represents the configuration of a single job.
type IoK8sAPIBatchV1Job struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// JobSpec describes how the job execution will look like.
	Spec *IoK8sAPIBatchV1JobSpec `json:"spec,omitempty"`
	// JobStatus represents the current state of a Job.
	Status *IoK8sAPIBatchV1JobStatus `json:"status,omitempty"`
}

// JobCondition describes current state of a job.
type IoK8sAPIBatchV1JobCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastProbeTime *string `json:"lastProbeTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// Human readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// (brief) reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of job condition, Complete or Failed.
	Type string `json:"type"`
}

// JobCondition describes current state of a job.
type IoK8sAPIBatchV1JobConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastProbeTime *string `json:"lastProbeTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// Human readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// (brief) reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of job condition, Complete or Failed.
	Type string `json:"type"`
}

// Job represents the configuration of a single job.
type IoK8sAPIBatchV1JobInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// JobSpec describes how the job execution will look like.
	Spec *IoK8sAPIBatchV1JobSpecInput `json:"spec,omitempty"`
	// JobStatus represents the current state of a Job.
	Status *IoK8sAPIBatchV1JobStatusInput `json:"status,omitempty"`
}

// JobList is a collection of jobs.
type IoK8sAPIBatchV1JobList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is the list of Jobs.
	Items []*IoK8sAPIBatchV1Job `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// JobSpec describes how the job execution will look like.
type IoK8sAPIBatchV1JobSpec struct {
	// Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.
	ActiveDeadlineSeconds *string `json:"activeDeadlineSeconds,omitempty"`
	// Specifies the number of retries before marking this job failed. Defaults to 6
	BackoffLimit *int `json:"backoffLimit,omitempty"`
	// completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.
	//
	// `NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.
	//
	// `Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.
	//
	// More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.
	CompletionMode *string `json:"completionMode,omitempty"`
	// Specifies the desired number of successfully finished pods the job should be run with.  Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Completions *int `json:"completions,omitempty"`
	// manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
	ManualSelector *bool `json:"manualSelector,omitempty"`
	// Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Parallelism *int `json:"parallelism,omitempty"`
	// PodFailurePolicy describes how failed pods influence the backoffLimit.
	PodFailurePolicy *IoK8sAPIBatchV1PodFailurePolicy `json:"podFailurePolicy,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector,omitempty"`
	// suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.
	Suspend *bool `json:"suspend,omitempty"`
	// PodTemplateSpec describes the data a pod should have when created from a template
	Template *IoK8sAPICoreV1PodTemplateSpec `json:"template"`
	// ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
	TTLSecondsAfterFinished *int `json:"ttlSecondsAfterFinished,omitempty"`
}

// JobSpec describes how the job execution will look like.
type IoK8sAPIBatchV1JobSpecInput struct {
	// Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.
	ActiveDeadlineSeconds *string `json:"activeDeadlineSeconds,omitempty"`
	// Specifies the number of retries before marking this job failed. Defaults to 6
	BackoffLimit *int `json:"backoffLimit,omitempty"`
	// completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.
	//
	// `NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.
	//
	// `Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.
	//
	// More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.
	CompletionMode *string `json:"completionMode,omitempty"`
	// Specifies the desired number of successfully finished pods the job should be run with.  Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Completions *int `json:"completions,omitempty"`
	// manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
	ManualSelector *bool `json:"manualSelector,omitempty"`
	// Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Parallelism *int `json:"parallelism,omitempty"`
	// PodFailurePolicy describes how failed pods influence the backoffLimit.
	PodFailurePolicy *IoK8sAPIBatchV1PodFailurePolicyInput `json:"podFailurePolicy,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"selector,omitempty"`
	// suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.
	Suspend *bool `json:"suspend,omitempty"`
	// PodTemplateSpec describes the data a pod should have when created from a template
	Template *IoK8sAPICoreV1PodTemplateSpecInput `json:"template"`
	// ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
	TTLSecondsAfterFinished *int `json:"ttlSecondsAfterFinished,omitempty"`
}

// JobStatus represents the current state of a Job.
type IoK8sAPIBatchV1JobStatus struct {
	// The number of pending and running pods.
	Active *int `json:"active,omitempty"`
	// completedIndexes holds the completed indexes when .spec.completionMode = "Indexed" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
	CompletedIndexes *string `json:"completedIndexes,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	CompletionTime *string `json:"completionTime,omitempty"`
	// The latest available observations of an object's current state. When a Job fails, one of the conditions will have type "Failed" and status true. When a Job is suspended, one of the conditions will have type "Suspended" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type "Complete" and status true. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Conditions []*IoK8sAPIBatchV1JobCondition `json:"conditions,omitempty"`
	// The number of pods which reached phase Failed.
	Failed *int `json:"failed,omitempty"`
	// The number of pods which have a Ready condition.
	//
	// This field is beta-level. The job controller populates the field when the feature gate JobReadyPods is enabled (enabled by default).
	Ready *int `json:"ready,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	StartTime *string `json:"startTime,omitempty"`
	// The number of pods which reached phase Succeeded.
	Succeeded *int `json:"succeeded,omitempty"`
	// UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.
	UncountedTerminatedPods *IoK8sAPIBatchV1UncountedTerminatedPods `json:"uncountedTerminatedPods,omitempty"`
}

// JobStatus represents the current state of a Job.
type IoK8sAPIBatchV1JobStatusInput struct {
	// The number of pending and running pods.
	Active *int `json:"active,omitempty"`
	// completedIndexes holds the completed indexes when .spec.completionMode = "Indexed" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
	CompletedIndexes *string `json:"completedIndexes,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	CompletionTime *string `json:"completionTime,omitempty"`
	// The latest available observations of an object's current state. When a Job fails, one of the conditions will have type "Failed" and status true. When a Job is suspended, one of the conditions will have type "Suspended" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type "Complete" and status true. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Conditions []*IoK8sAPIBatchV1JobConditionInput `json:"conditions,omitempty"`
	// The number of pods which reached phase Failed.
	Failed *int `json:"failed,omitempty"`
	// The number of pods which have a Ready condition.
	//
	// This field is beta-level. The job controller populates the field when the feature gate JobReadyPods is enabled (enabled by default).
	Ready *int `json:"ready,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	StartTime *string `json:"startTime,omitempty"`
	// The number of pods which reached phase Succeeded.
	Succeeded *int `json:"succeeded,omitempty"`
	// UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.
	UncountedTerminatedPods *IoK8sAPIBatchV1UncountedTerminatedPodsInput `json:"uncountedTerminatedPods,omitempty"`
}

// JobTemplateSpec describes the data a Job should have when created from a template
type IoK8sAPIBatchV1JobTemplateSpec struct {
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// JobSpec describes how the job execution will look like.
	Spec *IoK8sAPIBatchV1JobSpec `json:"spec,omitempty"`
}

// JobTemplateSpec describes the data a Job should have when created from a template
type IoK8sAPIBatchV1JobTemplateSpecInput struct {
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// JobSpec describes how the job execution will look like.
	Spec *IoK8sAPIBatchV1JobSpecInput `json:"spec,omitempty"`
}

// PodFailurePolicy describes how failed pods influence the backoffLimit.
type IoK8sAPIBatchV1PodFailurePolicy struct {
	// A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
	Rules []*IoK8sAPIBatchV1PodFailurePolicyRule `json:"rules"`
}

// PodFailurePolicy describes how failed pods influence the backoffLimit.
type IoK8sAPIBatchV1PodFailurePolicyInput struct {
	// A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
	Rules []*IoK8sAPIBatchV1PodFailurePolicyRuleInput `json:"rules"`
}

// PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.
type IoK8sAPIBatchV1PodFailurePolicyOnExitCodesRequirement struct {
	// Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.
	ContainerName *string `json:"containerName,omitempty"`
	// Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:
	//
	// - In: the requirement is satisfied if at least one container exit code
	//   (might be multiple if there are multiple containers not restricted
	//   by the 'containerName' field) is in the set of specified values.
	// - NotIn: the requirement is satisfied if at least one container exit code
	//   (might be multiple if there are multiple containers not restricted
	//   by the 'containerName' field) is not in the set of specified values.
	// Additional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.
	Operator string `json:"operator"`
	// Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.
	Values []*int `json:"values"`
}

// PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.
type IoK8sAPIBatchV1PodFailurePolicyOnExitCodesRequirementInput struct {
	// Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.
	ContainerName *string `json:"containerName,omitempty"`
	// Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:
	//
	// - In: the requirement is satisfied if at least one container exit code
	//   (might be multiple if there are multiple containers not restricted
	//   by the 'containerName' field) is in the set of specified values.
	// - NotIn: the requirement is satisfied if at least one container exit code
	//   (might be multiple if there are multiple containers not restricted
	//   by the 'containerName' field) is not in the set of specified values.
	// Additional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.
	Operator string `json:"operator"`
	// Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.
	Values []*int `json:"values"`
}

// PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.
type IoK8sAPIBatchV1PodFailurePolicyOnPodConditionsPattern struct {
	// Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.
	Status string `json:"status"`
	// Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.
	Type string `json:"type"`
}

// PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.
type IoK8sAPIBatchV1PodFailurePolicyOnPodConditionsPatternInput struct {
	// Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.
	Status string `json:"status"`
	// Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.
	Type string `json:"type"`
}

// PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.
type IoK8sAPIBatchV1PodFailurePolicyRule struct {
	// Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:
	//
	// - FailJob: indicates that the pod's job is marked as Failed and all
	//   running pods are terminated.
	// - Ignore: indicates that the counter towards the .backoffLimit is not
	//   incremented and a replacement pod is created.
	// - Count: indicates that the pod is handled in the default way - the
	//   counter towards the .backoffLimit is incremented.
	// Additional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.
	Action string `json:"action"`
	// PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.
	OnExitCodes *IoK8sAPIBatchV1PodFailurePolicyOnExitCodesRequirement `json:"onExitCodes,omitempty"`
	// Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.
	OnPodConditions []*IoK8sAPIBatchV1PodFailurePolicyOnPodConditionsPattern `json:"onPodConditions"`
}

// PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.
type IoK8sAPIBatchV1PodFailurePolicyRuleInput struct {
	// Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:
	//
	// - FailJob: indicates that the pod's job is marked as Failed and all
	//   running pods are terminated.
	// - Ignore: indicates that the counter towards the .backoffLimit is not
	//   incremented and a replacement pod is created.
	// - Count: indicates that the pod is handled in the default way - the
	//   counter towards the .backoffLimit is incremented.
	// Additional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.
	Action string `json:"action"`
	// PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.
	OnExitCodes *IoK8sAPIBatchV1PodFailurePolicyOnExitCodesRequirementInput `json:"onExitCodes,omitempty"`
	// Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.
	OnPodConditions []*IoK8sAPIBatchV1PodFailurePolicyOnPodConditionsPatternInput `json:"onPodConditions"`
}

// UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.
type IoK8sAPIBatchV1UncountedTerminatedPods struct {
	// failed holds UIDs of failed Pods.
	Failed []*string `json:"failed,omitempty"`
	// succeeded holds UIDs of succeeded Pods.
	Succeeded []*string `json:"succeeded,omitempty"`
}

// UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.
type IoK8sAPIBatchV1UncountedTerminatedPodsInput struct {
	// failed holds UIDs of failed Pods.
	Failed []*string `json:"failed,omitempty"`
	// succeeded holds UIDs of succeeded Pods.
	Succeeded []*string `json:"succeeded,omitempty"`
}

// CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.
//
// Kubelets use this API to obtain:
//  1. client certificates to authenticate to kube-apiserver (with the "kubernetes.io/kube-apiserver-client-kubelet" signerName).
//  2. serving certificates for TLS endpoints kube-apiserver can connect to securely (with the "kubernetes.io/kubelet-serving" signerName).
//
// This API can be used to request client certificates to authenticate to kube-apiserver (with the "kubernetes.io/kube-apiserver-client" signerName), or to obtain certificates from custom non-Kubernetes signers.
type IoK8sAPICertificatesV1CertificateSigningRequest struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// CertificateSigningRequestSpec contains the certificate request.
	Spec *IoK8sAPICertificatesV1CertificateSigningRequestSpec `json:"spec"`
	// CertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status of the request, and the issued certificate.
	Status *IoK8sAPICertificatesV1CertificateSigningRequestStatus `json:"status,omitempty"`
}

// CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object
type IoK8sAPICertificatesV1CertificateSigningRequestCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastUpdateTime *string `json:"lastUpdateTime,omitempty"`
	// message contains a human readable message with details about the request state
	Message *string `json:"message,omitempty"`
	// reason indicates a brief reason for the request state
	Reason *string `json:"reason,omitempty"`
	// status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be "False" or "Unknown".
	Status string `json:"status"`
	// type of the condition. Known conditions are "Approved", "Denied", and "Failed".
	//
	// An "Approved" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.
	//
	// A "Denied" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.
	//
	// A "Failed" condition is added via the /status subresource, indicating the signer failed to issue the certificate.
	//
	// Approved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.
	//
	// Only one condition of a given type is allowed.
	Type string `json:"type"`
}

// CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object
type IoK8sAPICertificatesV1CertificateSigningRequestConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastUpdateTime *string `json:"lastUpdateTime,omitempty"`
	// message contains a human readable message with details about the request state
	Message *string `json:"message,omitempty"`
	// reason indicates a brief reason for the request state
	Reason *string `json:"reason,omitempty"`
	// status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be "False" or "Unknown".
	Status string `json:"status"`
	// type of the condition. Known conditions are "Approved", "Denied", and "Failed".
	//
	// An "Approved" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.
	//
	// A "Denied" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.
	//
	// A "Failed" condition is added via the /status subresource, indicating the signer failed to issue the certificate.
	//
	// Approved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.
	//
	// Only one condition of a given type is allowed.
	Type string `json:"type"`
}

// CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.
//
// Kubelets use this API to obtain:
//  1. client certificates to authenticate to kube-apiserver (with the "kubernetes.io/kube-apiserver-client-kubelet" signerName).
//  2. serving certificates for TLS endpoints kube-apiserver can connect to securely (with the "kubernetes.io/kubelet-serving" signerName).
//
// This API can be used to request client certificates to authenticate to kube-apiserver (with the "kubernetes.io/kube-apiserver-client" signerName), or to obtain certificates from custom non-Kubernetes signers.
type IoK8sAPICertificatesV1CertificateSigningRequestInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// CertificateSigningRequestSpec contains the certificate request.
	Spec *IoK8sAPICertificatesV1CertificateSigningRequestSpecInput `json:"spec"`
	// CertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status of the request, and the issued certificate.
	Status *IoK8sAPICertificatesV1CertificateSigningRequestStatusInput `json:"status,omitempty"`
}

// CertificateSigningRequestList is a collection of CertificateSigningRequest objects
type IoK8sAPICertificatesV1CertificateSigningRequestList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is a collection of CertificateSigningRequest objects
	Items []*IoK8sAPICertificatesV1CertificateSigningRequest `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// CertificateSigningRequestSpec contains the certificate request.
type IoK8sAPICertificatesV1CertificateSigningRequestSpec struct {
	// expirationSeconds is the requested duration of validity of the issued certificate. The certificate signer may issue a certificate with a different validity duration so a client must check the delta between the notBefore and and notAfter fields in the issued certificate to determine the actual duration.
	//
	// The v1.22+ in-tree implementations of the well-known Kubernetes signers will honor this field as long as the requested duration is not greater than the maximum duration they will honor per the --cluster-signing-duration CLI flag to the Kubernetes controller manager.
	//
	// Certificate signers may not honor this field for various reasons:
	//
	//   1. Old signer that is unaware of the field (such as the in-tree
	//      implementations prior to v1.22)
	//   2. Signer whose configured maximum is shorter than the requested duration
	//   3. Signer whose configured minimum is longer than the requested duration
	//
	// The minimum valid value for expirationSeconds is 600, i.e. 10 minutes.
	ExpirationSeconds *int `json:"expirationSeconds,omitempty"`
	// extra contains extra attributes of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
	Extra *string `json:"extra,omitempty"`
	// groups contains group membership of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
	Groups []*string `json:"groups,omitempty"`
	// request contains an x509 certificate signing request encoded in a "CERTIFICATE REQUEST" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.
	Request string `json:"request"`
	// signerName indicates the requested signer, and is a qualified name.
	//
	// List/watch requests for CertificateSigningRequests can filter on this field using a "spec.signerName=NAME" fieldSelector.
	//
	// Well-known Kubernetes signers are:
	//  1. "kubernetes.io/kube-apiserver-client": issues client certificates that can be used to authenticate to kube-apiserver.
	//   Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the "csrsigning" controller in kube-controller-manager.
	//  2. "kubernetes.io/kube-apiserver-client-kubelet": issues client certificates that kubelets use to authenticate to kube-apiserver.
	//   Requests for this signer can be auto-approved by the "csrapproving" controller in kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.
	//  3. "kubernetes.io/kubelet-serving" issues serving certificates that kubelets use to serve TLS endpoints, which kube-apiserver can connect to securely.
	//   Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.
	//
	// More details are available at https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers
	//
	// Custom signerNames can also be specified. The signer defines:
	//  1. Trust distribution: how trust (CA bundles) are distributed.
	//  2. Permitted subjects: and behavior when a disallowed subject is requested.
	//  3. Required, permitted, or forbidden x509 extensions in the request (including whether subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.
	//  4. Required, permitted, or forbidden key usages / extended key usages.
	//  5. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.
	//  6. Whether or not requests for CA certificates are allowed.
	SignerName string `json:"signerName"`
	// uid contains the uid of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
	UID *string `json:"uid,omitempty"`
	// usages specifies a set of key usages requested in the issued certificate.
	//
	// Requests for TLS client certificates typically request: "digital signature", "key encipherment", "client auth".
	//
	// Requests for TLS serving certificates typically request: "key encipherment", "digital signature", "server auth".
	//
	// Valid values are:
	//  "signing", "digital signature", "content commitment",
	//  "key encipherment", "key agreement", "data encipherment",
	//  "cert sign", "crl sign", "encipher only", "decipher only", "any",
	//  "server auth", "client auth",
	//  "code signing", "email protection", "s/mime",
	//  "ipsec end system", "ipsec tunnel", "ipsec user",
	//  "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"
	Usages []*string `json:"usages,omitempty"`
	// username contains the name of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
	Username *string `json:"username,omitempty"`
}

// CertificateSigningRequestSpec contains the certificate request.
type IoK8sAPICertificatesV1CertificateSigningRequestSpecInput struct {
	// expirationSeconds is the requested duration of validity of the issued certificate. The certificate signer may issue a certificate with a different validity duration so a client must check the delta between the notBefore and and notAfter fields in the issued certificate to determine the actual duration.
	//
	// The v1.22+ in-tree implementations of the well-known Kubernetes signers will honor this field as long as the requested duration is not greater than the maximum duration they will honor per the --cluster-signing-duration CLI flag to the Kubernetes controller manager.
	//
	// Certificate signers may not honor this field for various reasons:
	//
	//   1. Old signer that is unaware of the field (such as the in-tree
	//      implementations prior to v1.22)
	//   2. Signer whose configured maximum is shorter than the requested duration
	//   3. Signer whose configured minimum is longer than the requested duration
	//
	// The minimum valid value for expirationSeconds is 600, i.e. 10 minutes.
	ExpirationSeconds *int `json:"expirationSeconds,omitempty"`
	// extra contains extra attributes of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
	Extra *string `json:"extra,omitempty"`
	// groups contains group membership of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
	Groups []*string `json:"groups,omitempty"`
	// request contains an x509 certificate signing request encoded in a "CERTIFICATE REQUEST" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.
	Request string `json:"request"`
	// signerName indicates the requested signer, and is a qualified name.
	//
	// List/watch requests for CertificateSigningRequests can filter on this field using a "spec.signerName=NAME" fieldSelector.
	//
	// Well-known Kubernetes signers are:
	//  1. "kubernetes.io/kube-apiserver-client": issues client certificates that can be used to authenticate to kube-apiserver.
	//   Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the "csrsigning" controller in kube-controller-manager.
	//  2. "kubernetes.io/kube-apiserver-client-kubelet": issues client certificates that kubelets use to authenticate to kube-apiserver.
	//   Requests for this signer can be auto-approved by the "csrapproving" controller in kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.
	//  3. "kubernetes.io/kubelet-serving" issues serving certificates that kubelets use to serve TLS endpoints, which kube-apiserver can connect to securely.
	//   Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.
	//
	// More details are available at https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers
	//
	// Custom signerNames can also be specified. The signer defines:
	//  1. Trust distribution: how trust (CA bundles) are distributed.
	//  2. Permitted subjects: and behavior when a disallowed subject is requested.
	//  3. Required, permitted, or forbidden x509 extensions in the request (including whether subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.
	//  4. Required, permitted, or forbidden key usages / extended key usages.
	//  5. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.
	//  6. Whether or not requests for CA certificates are allowed.
	SignerName string `json:"signerName"`
	// uid contains the uid of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
	UID *string `json:"uid,omitempty"`
	// usages specifies a set of key usages requested in the issued certificate.
	//
	// Requests for TLS client certificates typically request: "digital signature", "key encipherment", "client auth".
	//
	// Requests for TLS serving certificates typically request: "key encipherment", "digital signature", "server auth".
	//
	// Valid values are:
	//  "signing", "digital signature", "content commitment",
	//  "key encipherment", "key agreement", "data encipherment",
	//  "cert sign", "crl sign", "encipher only", "decipher only", "any",
	//  "server auth", "client auth",
	//  "code signing", "email protection", "s/mime",
	//  "ipsec end system", "ipsec tunnel", "ipsec user",
	//  "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"
	Usages []*string `json:"usages,omitempty"`
	// username contains the name of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
	Username *string `json:"username,omitempty"`
}

// CertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status of the request, and the issued certificate.
type IoK8sAPICertificatesV1CertificateSigningRequestStatus struct {
	// certificate is populated with an issued certificate by the signer after an Approved condition is present. This field is set via the /status subresource. Once populated, this field is immutable.
	//
	// If the certificate signing request is denied, a condition of type "Denied" is added and this field remains empty. If the signer cannot issue the certificate, a condition of type "Failed" is added and this field remains empty.
	//
	// Validation requirements:
	//  1. certificate must contain one or more PEM blocks.
	//  2. All PEM blocks must have the "CERTIFICATE" label, contain no headers, and the encoded data
	//   must be a BER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280.
	//  3. Non-PEM content may appear before or after the "CERTIFICATE" PEM blocks and is unvalidated,
	//   to allow for explanatory text as described in section 5.2 of RFC7468.
	//
	// If more than one PEM block is present, and the definition of the requested spec.signerName does not indicate otherwise, the first block is the issued certificate, and subsequent blocks should be treated as intermediate certificates and presented in TLS handshakes.
	//
	// The certificate is encoded in PEM format.
	//
	// When serialized as JSON or YAML, the data is additionally base64-encoded, so it consists of:
	//
	//     base64(
	//     -----BEGIN CERTIFICATE-----
	//     ...
	//     -----END CERTIFICATE-----
	//     )
	Certificate *string `json:"certificate,omitempty"`
	// conditions applied to the request. Known conditions are "Approved", "Denied", and "Failed".
	Conditions []*IoK8sAPICertificatesV1CertificateSigningRequestCondition `json:"conditions,omitempty"`
}

// CertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status of the request, and the issued certificate.
type IoK8sAPICertificatesV1CertificateSigningRequestStatusInput struct {
	// certificate is populated with an issued certificate by the signer after an Approved condition is present. This field is set via the /status subresource. Once populated, this field is immutable.
	//
	// If the certificate signing request is denied, a condition of type "Denied" is added and this field remains empty. If the signer cannot issue the certificate, a condition of type "Failed" is added and this field remains empty.
	//
	// Validation requirements:
	//  1. certificate must contain one or more PEM blocks.
	//  2. All PEM blocks must have the "CERTIFICATE" label, contain no headers, and the encoded data
	//   must be a BER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280.
	//  3. Non-PEM content may appear before or after the "CERTIFICATE" PEM blocks and is unvalidated,
	//   to allow for explanatory text as described in section 5.2 of RFC7468.
	//
	// If more than one PEM block is present, and the definition of the requested spec.signerName does not indicate otherwise, the first block is the issued certificate, and subsequent blocks should be treated as intermediate certificates and presented in TLS handshakes.
	//
	// The certificate is encoded in PEM format.
	//
	// When serialized as JSON or YAML, the data is additionally base64-encoded, so it consists of:
	//
	//     base64(
	//     -----BEGIN CERTIFICATE-----
	//     ...
	//     -----END CERTIFICATE-----
	//     )
	Certificate *string `json:"certificate,omitempty"`
	// conditions applied to the request. Known conditions are "Approved", "Denied", and "Failed".
	Conditions []*IoK8sAPICertificatesV1CertificateSigningRequestConditionInput `json:"conditions,omitempty"`
}

// ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).
//
// ClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the `clusterTrustBundle` projection.  All service accounts have read access to ClusterTrustBundles by default.  Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.
//
// It can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.
type IoK8sAPICertificatesV1alpha1ClusterTrustBundle struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// ClusterTrustBundleSpec contains the signer and trust anchors.
	Spec *IoK8sAPICertificatesV1alpha1ClusterTrustBundleSpec `json:"spec"`
}

// ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).
//
// ClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the `clusterTrustBundle` projection.  All service accounts have read access to ClusterTrustBundles by default.  Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.
//
// It can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.
type IoK8sAPICertificatesV1alpha1ClusterTrustBundleInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// ClusterTrustBundleSpec contains the signer and trust anchors.
	Spec *IoK8sAPICertificatesV1alpha1ClusterTrustBundleSpecInput `json:"spec"`
}

// ClusterTrustBundleList is a collection of ClusterTrustBundle objects
type IoK8sAPICertificatesV1alpha1ClusterTrustBundleList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is a collection of ClusterTrustBundle objects
	Items []*IoK8sAPICertificatesV1alpha1ClusterTrustBundle `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// ClusterTrustBundleSpec contains the signer and trust anchors.
type IoK8sAPICertificatesV1alpha1ClusterTrustBundleSpec struct {
	// signerName indicates the associated signer, if any.
	//
	// In order to create or update a ClusterTrustBundle that sets signerName, you must have the following cluster-scoped permission: group=certificates.k8s.io resource=signers resourceName=<the signer name> verb=attest.
	//
	// If signerName is not empty, then the ClusterTrustBundle object must be named with the signer name as a prefix (translating slashes to colons). For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names include `example.com:foo:abc` and `example.com:foo:v1`.
	//
	// If signerName is empty, then the ClusterTrustBundle object's name must not have such a prefix.
	//
	// List/watch requests for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME` field selector.
	SignerName *string `json:"signerName,omitempty"`
	// trustBundle contains the individual X.509 trust anchors for this bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.
	//
	// The data must consist only of PEM certificate blocks that parse as valid X.509 certificates.  Each certificate must include a basic constraints extension with the CA bit set.  The API server will reject objects that contain duplicate certificates, or that use PEM block headers.
	//
	// Users of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate certificate blocks in this file according to their own logic, as well as to drop PEM block headers and inter-block data.
	TrustBundle string `json:"trustBundle"`
}

// ClusterTrustBundleSpec contains the signer and trust anchors.
type IoK8sAPICertificatesV1alpha1ClusterTrustBundleSpecInput struct {
	// signerName indicates the associated signer, if any.
	//
	// In order to create or update a ClusterTrustBundle that sets signerName, you must have the following cluster-scoped permission: group=certificates.k8s.io resource=signers resourceName=<the signer name> verb=attest.
	//
	// If signerName is not empty, then the ClusterTrustBundle object must be named with the signer name as a prefix (translating slashes to colons). For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names include `example.com:foo:abc` and `example.com:foo:v1`.
	//
	// If signerName is empty, then the ClusterTrustBundle object's name must not have such a prefix.
	//
	// List/watch requests for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME` field selector.
	SignerName *string `json:"signerName,omitempty"`
	// trustBundle contains the individual X.509 trust anchors for this bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.
	//
	// The data must consist only of PEM certificate blocks that parse as valid X.509 certificates.  Each certificate must include a basic constraints extension with the CA bit set.  The API server will reject objects that contain duplicate certificates, or that use PEM block headers.
	//
	// Users of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate certificate blocks in this file according to their own logic, as well as to drop PEM block headers and inter-block data.
	TrustBundle string `json:"trustBundle"`
}

// Lease defines a lease concept.
type IoK8sAPICoordinationV1Lease struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// LeaseSpec is a specification of a Lease.
	Spec *IoK8sAPICoordinationV1LeaseSpec `json:"spec,omitempty"`
}

// Lease defines a lease concept.
type IoK8sAPICoordinationV1LeaseInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// LeaseSpec is a specification of a Lease.
	Spec *IoK8sAPICoordinationV1LeaseSpecInput `json:"spec,omitempty"`
}

// LeaseList is a list of Lease objects.
type IoK8sAPICoordinationV1LeaseList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is a list of schema objects.
	Items []*IoK8sAPICoordinationV1Lease `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// LeaseSpec is a specification of a Lease.
type IoK8sAPICoordinationV1LeaseSpec struct {
	// MicroTime is version of Time with microsecond level precision.
	AcquireTime *string `json:"acquireTime,omitempty"`
	// holderIdentity contains the identity of the holder of a current lease.
	HolderIdentity *string `json:"holderIdentity,omitempty"`
	// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed renewTime.
	LeaseDurationSeconds *int `json:"leaseDurationSeconds,omitempty"`
	// leaseTransitions is the number of transitions of a lease between holders.
	LeaseTransitions *int `json:"leaseTransitions,omitempty"`
	// MicroTime is version of Time with microsecond level precision.
	RenewTime *string `json:"renewTime,omitempty"`
}

// LeaseSpec is a specification of a Lease.
type IoK8sAPICoordinationV1LeaseSpecInput struct {
	// MicroTime is version of Time with microsecond level precision.
	AcquireTime *string `json:"acquireTime,omitempty"`
	// holderIdentity contains the identity of the holder of a current lease.
	HolderIdentity *string `json:"holderIdentity,omitempty"`
	// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed renewTime.
	LeaseDurationSeconds *int `json:"leaseDurationSeconds,omitempty"`
	// leaseTransitions is the number of transitions of a lease between holders.
	LeaseTransitions *int `json:"leaseTransitions,omitempty"`
	// MicroTime is version of Time with microsecond level precision.
	RenewTime *string `json:"renewTime,omitempty"`
}

// Represents a Persistent Disk resource in AWS.
//
// An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	FsType *string `json:"fsType,omitempty"`
	// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	Partition *int `json:"partition,omitempty"`
	// readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	ReadOnly *bool `json:"readOnly,omitempty"`
	// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	VolumeID string `json:"volumeID"`
}

// Represents a Persistent Disk resource in AWS.
//
// An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1AWSElasticBlockStoreVolumeSourceInput struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	FsType *string `json:"fsType,omitempty"`
	// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	Partition *int `json:"partition,omitempty"`
	// readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	ReadOnly *bool `json:"readOnly,omitempty"`
	// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	VolumeID string `json:"volumeID"`
}

// Affinity is a group of affinity scheduling rules.
type IoK8sAPICoreV1Affinity struct {
	// Node affinity is a group of node affinity scheduling rules.
	NodeAffinity *IoK8sAPICoreV1NodeAffinity `json:"nodeAffinity,omitempty"`
	// Pod affinity is a group of inter pod affinity scheduling rules.
	PodAffinity *IoK8sAPICoreV1PodAffinity `json:"podAffinity,omitempty"`
	// Pod anti affinity is a group of inter pod anti affinity scheduling rules.
	PodAntiAffinity *IoK8sAPICoreV1PodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

// Affinity is a group of affinity scheduling rules.
type IoK8sAPICoreV1AffinityInput struct {
	// Node affinity is a group of node affinity scheduling rules.
	NodeAffinity *IoK8sAPICoreV1NodeAffinityInput `json:"nodeAffinity,omitempty"`
	// Pod affinity is a group of inter pod affinity scheduling rules.
	PodAffinity *IoK8sAPICoreV1PodAffinityInput `json:"podAffinity,omitempty"`
	// Pod anti affinity is a group of inter pod anti affinity scheduling rules.
	PodAntiAffinity *IoK8sAPICoreV1PodAntiAffinityInput `json:"podAntiAffinity,omitempty"`
}

// AttachedVolume describes a volume attached to a node
type IoK8sAPICoreV1AttachedVolume struct {
	// DevicePath represents the device path where the volume should be available
	DevicePath string `json:"devicePath"`
	// Name of the attached volume
	Name string `json:"name"`
}

// AttachedVolume describes a volume attached to a node
type IoK8sAPICoreV1AttachedVolumeInput struct {
	// DevicePath represents the device path where the volume should be available
	DevicePath string `json:"devicePath"`
	// Name of the attached volume
	Name string `json:"name"`
}

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
type IoK8sAPICoreV1AzureDiskVolumeSource struct {
	// cachingMode is the Host Caching mode: None, Read Only, Read Write.
	CachingMode *string `json:"cachingMode,omitempty"`
	// diskName is the Name of the data disk in the blob storage
	DiskName string `json:"diskName"`
	// diskURI is the URI of data disk in the blob storage
	DiskURI string `json:"diskURI"`
	// fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
	Kind *string `json:"kind,omitempty"`
	// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
}

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
type IoK8sAPICoreV1AzureDiskVolumeSourceInput struct {
	// cachingMode is the Host Caching mode: None, Read Only, Read Write.
	CachingMode *string `json:"cachingMode,omitempty"`
	// diskName is the Name of the data disk in the blob storage
	DiskName string `json:"diskName"`
	// diskURI is the URI of data disk in the blob storage
	DiskURI string `json:"diskURI"`
	// fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
	Kind *string `json:"kind,omitempty"`
	// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type IoK8sAPICoreV1AzureFilePersistentVolumeSource struct {
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// secretName is the name of secret that contains Azure Storage Account Name and Key
	SecretName string `json:"secretName"`
	// secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
	SecretNamespace *string `json:"secretNamespace,omitempty"`
	// shareName is the azure Share Name
	ShareName string `json:"shareName"`
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type IoK8sAPICoreV1AzureFilePersistentVolumeSourceInput struct {
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// secretName is the name of secret that contains Azure Storage Account Name and Key
	SecretName string `json:"secretName"`
	// secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
	SecretNamespace *string `json:"secretNamespace,omitempty"`
	// shareName is the azure Share Name
	ShareName string `json:"shareName"`
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type IoK8sAPICoreV1AzureFileVolumeSource struct {
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// secretName is the  name of secret that contains Azure Storage Account Name and Key
	SecretName string `json:"secretName"`
	// shareName is the azure share Name
	ShareName string `json:"shareName"`
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type IoK8sAPICoreV1AzureFileVolumeSourceInput struct {
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// secretName is the  name of secret that contains Azure Storage Account Name and Key
	SecretName string `json:"secretName"`
	// shareName is the azure share Name
	ShareName string `json:"shareName"`
}

// Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
type IoK8sAPICoreV1Binding struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	Target *IoK8sAPICoreV1ObjectReference `json:"target"`
}

// Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
type IoK8sAPICoreV1BindingInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	Target *IoK8sAPICoreV1ObjectReferenceInput `json:"target"`
}

// Represents storage that is managed by an external CSI volume driver (Beta feature)
type IoK8sAPICoreV1CSIPersistentVolumeSource struct {
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	ControllerExpandSecretRef *IoK8sAPICoreV1SecretReference `json:"controllerExpandSecretRef,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	ControllerPublishSecretRef *IoK8sAPICoreV1SecretReference `json:"controllerPublishSecretRef,omitempty"`
	// driver is the name of the driver to use for this volume. Required.
	Driver string `json:"driver"`
	// fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
	FsType *string `json:"fsType,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	NodeExpandSecretRef *IoK8sAPICoreV1SecretReference `json:"nodeExpandSecretRef,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	NodePublishSecretRef *IoK8sAPICoreV1SecretReference `json:"nodePublishSecretRef,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	NodeStageSecretRef *IoK8sAPICoreV1SecretReference `json:"nodeStageSecretRef,omitempty"`
	// readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
	ReadOnly *bool `json:"readOnly,omitempty"`
	// volumeAttributes of the volume to publish.
	VolumeAttributes *string `json:"volumeAttributes,omitempty"`
	// volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
	VolumeHandle string `json:"volumeHandle"`
}

// Represents storage that is managed by an external CSI volume driver (Beta feature)
type IoK8sAPICoreV1CSIPersistentVolumeSourceInput struct {
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	ControllerExpandSecretRef *IoK8sAPICoreV1SecretReferenceInput `json:"controllerExpandSecretRef,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	ControllerPublishSecretRef *IoK8sAPICoreV1SecretReferenceInput `json:"controllerPublishSecretRef,omitempty"`
	// driver is the name of the driver to use for this volume. Required.
	Driver string `json:"driver"`
	// fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
	FsType *string `json:"fsType,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	NodeExpandSecretRef *IoK8sAPICoreV1SecretReferenceInput `json:"nodeExpandSecretRef,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	NodePublishSecretRef *IoK8sAPICoreV1SecretReferenceInput `json:"nodePublishSecretRef,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	NodeStageSecretRef *IoK8sAPICoreV1SecretReferenceInput `json:"nodeStageSecretRef,omitempty"`
	// readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
	ReadOnly *bool `json:"readOnly,omitempty"`
	// volumeAttributes of the volume to publish.
	VolumeAttributes *string `json:"volumeAttributes,omitempty"`
	// volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
	VolumeHandle string `json:"volumeHandle"`
}

// Represents a source location of a volume to mount, managed by an external CSI driver
type IoK8sAPICoreV1CSIVolumeSource struct {
	// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
	Driver string `json:"driver"`
	// fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
	FsType *string `json:"fsType,omitempty"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	NodePublishSecretRef *IoK8sAPICoreV1LocalObjectReference `json:"nodePublishSecretRef,omitempty"`
	// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
	ReadOnly *bool `json:"readOnly,omitempty"`
	// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
	VolumeAttributes *string `json:"volumeAttributes,omitempty"`
}

// Represents a source location of a volume to mount, managed by an external CSI driver
type IoK8sAPICoreV1CSIVolumeSourceInput struct {
	// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
	Driver string `json:"driver"`
	// fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
	FsType *string `json:"fsType,omitempty"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	NodePublishSecretRef *IoK8sAPICoreV1LocalObjectReferenceInput `json:"nodePublishSecretRef,omitempty"`
	// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
	ReadOnly *bool `json:"readOnly,omitempty"`
	// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
	VolumeAttributes *string `json:"volumeAttributes,omitempty"`
}

// Adds and removes POSIX capabilities from running containers.
type IoK8sAPICoreV1Capabilities struct {
	// Added capabilities
	Add []*string `json:"add,omitempty"`
	// Removed capabilities
	Drop []*string `json:"drop,omitempty"`
}

// Adds and removes POSIX capabilities from running containers.
type IoK8sAPICoreV1CapabilitiesInput struct {
	// Added capabilities
	Add []*string `json:"add,omitempty"`
	// Removed capabilities
	Drop []*string `json:"drop,omitempty"`
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type IoK8sAPICoreV1CephFSPersistentVolumeSource struct {
	// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors []*string `json:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path *string `json:"path,omitempty"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly *bool `json:"readOnly,omitempty"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile *string `json:"secretFile,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	SecretRef *IoK8sAPICoreV1SecretReference `json:"secretRef,omitempty"`
	// user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User *string `json:"user,omitempty"`
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type IoK8sAPICoreV1CephFSPersistentVolumeSourceInput struct {
	// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors []*string `json:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path *string `json:"path,omitempty"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly *bool `json:"readOnly,omitempty"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile *string `json:"secretFile,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	SecretRef *IoK8sAPICoreV1SecretReferenceInput `json:"secretRef,omitempty"`
	// user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User *string `json:"user,omitempty"`
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type IoK8sAPICoreV1CephFSVolumeSource struct {
	// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors []*string `json:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path *string `json:"path,omitempty"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly *bool `json:"readOnly,omitempty"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile *string `json:"secretFile,omitempty"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	SecretRef *IoK8sAPICoreV1LocalObjectReference `json:"secretRef,omitempty"`
	// user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User *string `json:"user,omitempty"`
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type IoK8sAPICoreV1CephFSVolumeSourceInput struct {
	// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors []*string `json:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path *string `json:"path,omitempty"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly *bool `json:"readOnly,omitempty"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile *string `json:"secretFile,omitempty"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	SecretRef *IoK8sAPICoreV1LocalObjectReferenceInput `json:"secretRef,omitempty"`
	// user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User *string `json:"user,omitempty"`
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1CinderPersistentVolumeSource struct {
	// fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType *string `json:"fsType,omitempty"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly *bool `json:"readOnly,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	SecretRef *IoK8sAPICoreV1SecretReference `json:"secretRef,omitempty"`
	// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID string `json:"volumeID"`
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1CinderPersistentVolumeSourceInput struct {
	// fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType *string `json:"fsType,omitempty"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly *bool `json:"readOnly,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	SecretRef *IoK8sAPICoreV1SecretReferenceInput `json:"secretRef,omitempty"`
	// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID string `json:"volumeID"`
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1CinderVolumeSource struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType *string `json:"fsType,omitempty"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly *bool `json:"readOnly,omitempty"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	SecretRef *IoK8sAPICoreV1LocalObjectReference `json:"secretRef,omitempty"`
	// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID string `json:"volumeID"`
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1CinderVolumeSourceInput struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType *string `json:"fsType,omitempty"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly *bool `json:"readOnly,omitempty"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	SecretRef *IoK8sAPICoreV1LocalObjectReferenceInput `json:"secretRef,omitempty"`
	// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID string `json:"volumeID"`
}

// ClaimSource describes a reference to a ResourceClaim.
//
// Exactly one of these fields should be set.  Consumers of this type must treat an empty object as if it has an unknown value.
type IoK8sAPICoreV1ClaimSource struct {
	// ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
	ResourceClaimName *string `json:"resourceClaimName,omitempty"`
	// ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
	//
	// The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
	//
	// An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
	//
	// This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
	ResourceClaimTemplateName *string `json:"resourceClaimTemplateName,omitempty"`
}

// ClaimSource describes a reference to a ResourceClaim.
//
// Exactly one of these fields should be set.  Consumers of this type must treat an empty object as if it has an unknown value.
type IoK8sAPICoreV1ClaimSourceInput struct {
	// ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
	ResourceClaimName *string `json:"resourceClaimName,omitempty"`
	// ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
	//
	// The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
	//
	// An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
	//
	// This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
	ResourceClaimTemplateName *string `json:"resourceClaimTemplateName,omitempty"`
}

// ClientIPConfig represents the configurations of Client IP based session affinity.
type IoK8sAPICoreV1ClientIPConfig struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty"`
}

// ClientIPConfig represents the configurations of Client IP based session affinity.
type IoK8sAPICoreV1ClientIPConfigInput struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty"`
}

// Information about the condition of a component.
type IoK8sAPICoreV1ComponentCondition struct {
	// Condition error code for a component. For example, a health check error code.
	Error *string `json:"error,omitempty"`
	// Message about the condition for a component. For example, information about a health check.
	Message *string `json:"message,omitempty"`
	// Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
	Status string `json:"status"`
	// Type of condition for a component. Valid value: "Healthy"
	Type string `json:"type"`
}

// ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+
type IoK8sAPICoreV1ComponentStatus struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// List of component conditions observed
	Conditions []*IoK8sAPICoreV1ComponentCondition `json:"conditions,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
}

// Status of all the conditions for the component as a list of ComponentStatus objects. Deprecated: This API is deprecated in v1.19+
type IoK8sAPICoreV1ComponentStatusList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// List of ComponentStatus objects.
	Items []*IoK8sAPICoreV1ComponentStatus `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// ConfigMap holds configuration data for pods to consume.
type IoK8sAPICoreV1ConfigMap struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
	BinaryData *string `json:"binaryData,omitempty"`
	// Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
	Data *string `json:"data,omitempty"`
	// Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
	Immutable *bool `json:"immutable,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
}

// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
//
// The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type IoK8sAPICoreV1ConfigMapEnvSource struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// Specify whether the ConfigMap must be defined
	Optional *bool `json:"optional,omitempty"`
}

// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
//
// The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type IoK8sAPICoreV1ConfigMapEnvSourceInput struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// Specify whether the ConfigMap must be defined
	Optional *bool `json:"optional,omitempty"`
}

// ConfigMap holds configuration data for pods to consume.
type IoK8sAPICoreV1ConfigMapInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
	BinaryData *string `json:"binaryData,omitempty"`
	// Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
	Data *string `json:"data,omitempty"`
	// Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
	Immutable *bool `json:"immutable,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
}

// Selects a key from a ConfigMap.
type IoK8sAPICoreV1ConfigMapKeySelector struct {
	// The key to select.
	Key string `json:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `json:"optional,omitempty"`
}

// Selects a key from a ConfigMap.
type IoK8sAPICoreV1ConfigMapKeySelectorInput struct {
	// The key to select.
	Key string `json:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `json:"optional,omitempty"`
}

// ConfigMapList is a resource containing a list of ConfigMap objects.
type IoK8sAPICoreV1ConfigMapList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is the list of ConfigMaps.
	Items []*IoK8sAPICoreV1ConfigMap `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
type IoK8sAPICoreV1ConfigMapNodeConfigSource struct {
	// KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
	KubeletConfigKey string `json:"kubeletConfigKey"`
	// Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
	Name string `json:"name"`
	// Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
	Namespace string `json:"namespace"`
	// ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	ResourceVersion *string `json:"resourceVersion,omitempty"`
	// UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	UID *string `json:"uid,omitempty"`
}

// ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
type IoK8sAPICoreV1ConfigMapNodeConfigSourceInput struct {
	// KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
	KubeletConfigKey string `json:"kubeletConfigKey"`
	// Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
	Name string `json:"name"`
	// Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
	Namespace string `json:"namespace"`
	// ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	ResourceVersion *string `json:"resourceVersion,omitempty"`
	// UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	UID *string `json:"uid,omitempty"`
}

// Adapts a ConfigMap into a projected volume.
//
// The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
type IoK8sAPICoreV1ConfigMapProjection struct {
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []*IoK8sAPICoreV1KeyToPath `json:"items,omitempty"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional *bool `json:"optional,omitempty"`
}

// Adapts a ConfigMap into a projected volume.
//
// The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
type IoK8sAPICoreV1ConfigMapProjectionInput struct {
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []*IoK8sAPICoreV1KeyToPathInput `json:"items,omitempty"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional *bool `json:"optional,omitempty"`
}

// Adapts a ConfigMap into a volume.
//
// The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1ConfigMapVolumeSource struct {
	// defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `json:"defaultMode,omitempty"`
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []*IoK8sAPICoreV1KeyToPath `json:"items,omitempty"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional *bool `json:"optional,omitempty"`
}

// Adapts a ConfigMap into a volume.
//
// The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1ConfigMapVolumeSourceInput struct {
	// defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `json:"defaultMode,omitempty"`
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []*IoK8sAPICoreV1KeyToPathInput `json:"items,omitempty"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional *bool `json:"optional,omitempty"`
}

// A single application container that you want to run within a pod.
type IoK8sAPICoreV1Container struct {
	// Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []*string `json:"args,omitempty"`
	// Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command []*string `json:"command,omitempty"`
	// List of environment variables to set in the container. Cannot be updated.
	Env []*IoK8sAPICoreV1EnvVar `json:"env,omitempty"`
	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom []*IoK8sAPICoreV1EnvFromSource `json:"envFrom,omitempty"`
	// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
	Image *string `json:"image,omitempty"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy *string `json:"imagePullPolicy,omitempty"`
	// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
	Lifecycle *IoK8sAPICoreV1Lifecycle `json:"lifecycle,omitempty"`
	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	LivenessProbe *IoK8sAPICoreV1Probe `json:"livenessProbe,omitempty"`
	// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
	Name string `json:"name"`
	// List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
	Ports []*IoK8sAPICoreV1ContainerPort `json:"ports,omitempty"`
	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	ReadinessProbe *IoK8sAPICoreV1Probe `json:"readinessProbe,omitempty"`
	// Resources resize policy for the container.
	ResizePolicy []*IoK8sAPICoreV1ContainerResizePolicy `json:"resizePolicy,omitempty"`
	// ResourceRequirements describes the compute resource requirements.
	Resources *IoK8sAPICoreV1ResourceRequirements `json:"resources,omitempty"`
	// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
	SecurityContext *IoK8sAPICoreV1SecurityContext `json:"securityContext,omitempty"`
	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	StartupProbe *IoK8sAPICoreV1Probe `json:"startupProbe,omitempty"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin *bool `json:"stdin,omitempty"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce *bool `json:"stdinOnce,omitempty"`
	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath *string `json:"terminationMessagePath,omitempty"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy *string `json:"terminationMessagePolicy,omitempty"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty *bool `json:"tty,omitempty"`
	// volumeDevices is the list of block devices to be used by the container.
	VolumeDevices []*IoK8sAPICoreV1VolumeDevice `json:"volumeDevices,omitempty"`
	// Pod volumes to mount into the container's filesystem. Cannot be updated.
	VolumeMounts []*IoK8sAPICoreV1VolumeMount `json:"volumeMounts,omitempty"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir *string `json:"workingDir,omitempty"`
}

// Describe a container image
type IoK8sAPICoreV1ContainerImage struct {
	// Names by which this image is known. e.g. ["kubernetes.example/hyperkube:v1.0.7", "cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7"]
	Names []*string `json:"names,omitempty"`
	// The size of the image in bytes.
	SizeBytes *string `json:"sizeBytes,omitempty"`
}

// Describe a container image
type IoK8sAPICoreV1ContainerImageInput struct {
	// Names by which this image is known. e.g. ["kubernetes.example/hyperkube:v1.0.7", "cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7"]
	Names []*string `json:"names,omitempty"`
	// The size of the image in bytes.
	SizeBytes *string `json:"sizeBytes,omitempty"`
}

// A single application container that you want to run within a pod.
type IoK8sAPICoreV1ContainerInput struct {
	// Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []*string `json:"args,omitempty"`
	// Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command []*string `json:"command,omitempty"`
	// List of environment variables to set in the container. Cannot be updated.
	Env []*IoK8sAPICoreV1EnvVarInput `json:"env,omitempty"`
	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom []*IoK8sAPICoreV1EnvFromSourceInput `json:"envFrom,omitempty"`
	// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
	Image *string `json:"image,omitempty"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy *string `json:"imagePullPolicy,omitempty"`
	// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
	Lifecycle *IoK8sAPICoreV1LifecycleInput `json:"lifecycle,omitempty"`
	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	LivenessProbe *IoK8sAPICoreV1ProbeInput `json:"livenessProbe,omitempty"`
	// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
	Name string `json:"name"`
	// List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
	Ports []*IoK8sAPICoreV1ContainerPortInput `json:"ports,omitempty"`
	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	ReadinessProbe *IoK8sAPICoreV1ProbeInput `json:"readinessProbe,omitempty"`
	// Resources resize policy for the container.
	ResizePolicy []*IoK8sAPICoreV1ContainerResizePolicyInput `json:"resizePolicy,omitempty"`
	// ResourceRequirements describes the compute resource requirements.
	Resources *IoK8sAPICoreV1ResourceRequirementsInput `json:"resources,omitempty"`
	// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
	SecurityContext *IoK8sAPICoreV1SecurityContextInput `json:"securityContext,omitempty"`
	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	StartupProbe *IoK8sAPICoreV1ProbeInput `json:"startupProbe,omitempty"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin *bool `json:"stdin,omitempty"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce *bool `json:"stdinOnce,omitempty"`
	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath *string `json:"terminationMessagePath,omitempty"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy *string `json:"terminationMessagePolicy,omitempty"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty *bool `json:"tty,omitempty"`
	// volumeDevices is the list of block devices to be used by the container.
	VolumeDevices []*IoK8sAPICoreV1VolumeDeviceInput `json:"volumeDevices,omitempty"`
	// Pod volumes to mount into the container's filesystem. Cannot be updated.
	VolumeMounts []*IoK8sAPICoreV1VolumeMountInput `json:"volumeMounts,omitempty"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir *string `json:"workingDir,omitempty"`
}

// ContainerPort represents a network port in a single container.
type IoK8sAPICoreV1ContainerPort struct {
	// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
	ContainerPort int `json:"containerPort"`
	// What host IP to bind the external port to.
	HostIP *string `json:"hostIP,omitempty"`
	// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
	HostPort *int `json:"hostPort,omitempty"`
	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
	Name *string `json:"name,omitempty"`
	// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
	Protocol *string `json:"protocol,omitempty"`
}

// ContainerPort represents a network port in a single container.
type IoK8sAPICoreV1ContainerPortInput struct {
	// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
	ContainerPort int `json:"containerPort"`
	// What host IP to bind the external port to.
	HostIP *string `json:"hostIP,omitempty"`
	// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
	HostPort *int `json:"hostPort,omitempty"`
	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
	Name *string `json:"name,omitempty"`
	// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
	Protocol *string `json:"protocol,omitempty"`
}

// ContainerResizePolicy represents resource resize policy for the container.
type IoK8sAPICoreV1ContainerResizePolicy struct {
	// Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
	ResourceName string `json:"resourceName"`
	// Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
	RestartPolicy string `json:"restartPolicy"`
}

// ContainerResizePolicy represents resource resize policy for the container.
type IoK8sAPICoreV1ContainerResizePolicyInput struct {
	// Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
	ResourceName string `json:"resourceName"`
	// Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
	RestartPolicy string `json:"restartPolicy"`
}

// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
type IoK8sAPICoreV1ContainerState struct {
	// ContainerStateRunning is a running state of a container.
	Running *IoK8sAPICoreV1ContainerStateRunning `json:"running,omitempty"`
	// ContainerStateTerminated is a terminated state of a container.
	Terminated *IoK8sAPICoreV1ContainerStateTerminated `json:"terminated,omitempty"`
	// ContainerStateWaiting is a waiting state of a container.
	Waiting *IoK8sAPICoreV1ContainerStateWaiting `json:"waiting,omitempty"`
}

// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
type IoK8sAPICoreV1ContainerStateInput struct {
	// ContainerStateRunning is a running state of a container.
	Running *IoK8sAPICoreV1ContainerStateRunningInput `json:"running,omitempty"`
	// ContainerStateTerminated is a terminated state of a container.
	Terminated *IoK8sAPICoreV1ContainerStateTerminatedInput `json:"terminated,omitempty"`
	// ContainerStateWaiting is a waiting state of a container.
	Waiting *IoK8sAPICoreV1ContainerStateWaitingInput `json:"waiting,omitempty"`
}

// ContainerStateRunning is a running state of a container.
type IoK8sAPICoreV1ContainerStateRunning struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	StartedAt *string `json:"startedAt,omitempty"`
}

// ContainerStateRunning is a running state of a container.
type IoK8sAPICoreV1ContainerStateRunningInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	StartedAt *string `json:"startedAt,omitempty"`
}

// ContainerStateTerminated is a terminated state of a container.
type IoK8sAPICoreV1ContainerStateTerminated struct {
	// Container's ID in the format '<type>://<container_id>'
	ContainerID *string `json:"containerID,omitempty"`
	// Exit status from the last termination of the container
	ExitCode int `json:"exitCode"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	FinishedAt *string `json:"finishedAt,omitempty"`
	// Message regarding the last termination of the container
	Message *string `json:"message,omitempty"`
	// (brief) reason from the last termination of the container
	Reason *string `json:"reason,omitempty"`
	// Signal from the last termination of the container
	Signal *int `json:"signal,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	StartedAt *string `json:"startedAt,omitempty"`
}

// ContainerStateTerminated is a terminated state of a container.
type IoK8sAPICoreV1ContainerStateTerminatedInput struct {
	// Container's ID in the format '<type>://<container_id>'
	ContainerID *string `json:"containerID,omitempty"`
	// Exit status from the last termination of the container
	ExitCode int `json:"exitCode"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	FinishedAt *string `json:"finishedAt,omitempty"`
	// Message regarding the last termination of the container
	Message *string `json:"message,omitempty"`
	// (brief) reason from the last termination of the container
	Reason *string `json:"reason,omitempty"`
	// Signal from the last termination of the container
	Signal *int `json:"signal,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	StartedAt *string `json:"startedAt,omitempty"`
}

// ContainerStateWaiting is a waiting state of a container.
type IoK8sAPICoreV1ContainerStateWaiting struct {
	// Message regarding why the container is not yet running.
	Message *string `json:"message,omitempty"`
	// (brief) reason the container is not yet running.
	Reason *string `json:"reason,omitempty"`
}

// ContainerStateWaiting is a waiting state of a container.
type IoK8sAPICoreV1ContainerStateWaitingInput struct {
	// Message regarding why the container is not yet running.
	Message *string `json:"message,omitempty"`
	// (brief) reason the container is not yet running.
	Reason *string `json:"reason,omitempty"`
}

// ContainerStatus contains details for the current status of this container.
type IoK8sAPICoreV1ContainerStatus struct {
	// AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.
	AllocatedResources *string `json:"allocatedResources,omitempty"`
	// ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example "containerd").
	ContainerID *string `json:"containerID,omitempty"`
	// Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.
	Image string `json:"image"`
	// ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.
	ImageID string `json:"imageID"`
	// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
	LastState *IoK8sAPICoreV1ContainerState `json:"lastState,omitempty"`
	// Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.
	Name string `json:"name"`
	// Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).
	//
	// The value is typically used to determine whether a container is ready to accept traffic.
	Ready bool `json:"ready"`
	// ResourceRequirements describes the compute resource requirements.
	Resources *IoK8sAPICoreV1ResourceRequirements `json:"resources,omitempty"`
	// RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.
	RestartCount int `json:"restartCount"`
	// Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.
	Started *bool `json:"started,omitempty"`
	// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
	State *IoK8sAPICoreV1ContainerState `json:"state,omitempty"`
}

// ContainerStatus contains details for the current status of this container.
type IoK8sAPICoreV1ContainerStatusInput struct {
	// AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.
	AllocatedResources *string `json:"allocatedResources,omitempty"`
	// ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example "containerd").
	ContainerID *string `json:"containerID,omitempty"`
	// Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.
	Image string `json:"image"`
	// ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.
	ImageID string `json:"imageID"`
	// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
	LastState *IoK8sAPICoreV1ContainerStateInput `json:"lastState,omitempty"`
	// Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.
	Name string `json:"name"`
	// Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).
	//
	// The value is typically used to determine whether a container is ready to accept traffic.
	Ready bool `json:"ready"`
	// ResourceRequirements describes the compute resource requirements.
	Resources *IoK8sAPICoreV1ResourceRequirementsInput `json:"resources,omitempty"`
	// RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.
	RestartCount int `json:"restartCount"`
	// Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.
	Started *bool `json:"started,omitempty"`
	// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
	State *IoK8sAPICoreV1ContainerStateInput `json:"state,omitempty"`
}

// DaemonEndpoint contains information about a single Daemon endpoint.
type IoK8sAPICoreV1DaemonEndpoint struct {
	// Port number of the given endpoint.
	Port int `json:"port"`
}

// DaemonEndpoint contains information about a single Daemon endpoint.
type IoK8sAPICoreV1DaemonEndpointInput struct {
	// Port number of the given endpoint.
	Port int `json:"port"`
}

// Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
type IoK8sAPICoreV1DownwardAPIProjection struct {
	// Items is a list of DownwardAPIVolume file
	Items []*IoK8sAPICoreV1DownwardAPIVolumeFile `json:"items,omitempty"`
}

// Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
type IoK8sAPICoreV1DownwardAPIProjectionInput struct {
	// Items is a list of DownwardAPIVolume file
	Items []*IoK8sAPICoreV1DownwardAPIVolumeFileInput `json:"items,omitempty"`
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type IoK8sAPICoreV1DownwardAPIVolumeFile struct {
	// ObjectFieldSelector selects an APIVersioned field of an object.
	FieldRef *IoK8sAPICoreV1ObjectFieldSelector `json:"fieldRef,omitempty"`
	// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `json:"mode,omitempty"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path string `json:"path"`
	// ResourceFieldSelector represents container resources (cpu, memory) and their output format
	ResourceFieldRef *IoK8sAPICoreV1ResourceFieldSelector `json:"resourceFieldRef,omitempty"`
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type IoK8sAPICoreV1DownwardAPIVolumeFileInput struct {
	// ObjectFieldSelector selects an APIVersioned field of an object.
	FieldRef *IoK8sAPICoreV1ObjectFieldSelectorInput `json:"fieldRef,omitempty"`
	// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `json:"mode,omitempty"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path string `json:"path"`
	// ResourceFieldSelector represents container resources (cpu, memory) and their output format
	ResourceFieldRef *IoK8sAPICoreV1ResourceFieldSelectorInput `json:"resourceFieldRef,omitempty"`
}

// DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1DownwardAPIVolumeSource struct {
	// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `json:"defaultMode,omitempty"`
	// Items is a list of downward API volume file
	Items []*IoK8sAPICoreV1DownwardAPIVolumeFile `json:"items,omitempty"`
}

// DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1DownwardAPIVolumeSourceInput struct {
	// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `json:"defaultMode,omitempty"`
	// Items is a list of downward API volume file
	Items []*IoK8sAPICoreV1DownwardAPIVolumeFileInput `json:"items,omitempty"`
}

// Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1EmptyDirVolumeSource struct {
	// medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium *string `json:"medium,omitempty"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// ``` <quantity>        ::= <signedNumber><suffix>
	//
	// 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	//
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//
	// 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	//
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//
	// 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	//
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//
	// - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
	//
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//
	// - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	SizeLimit *string `json:"sizeLimit,omitempty"`
}

// Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1EmptyDirVolumeSourceInput struct {
	// medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium *string `json:"medium,omitempty"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// ``` <quantity>        ::= <signedNumber><suffix>
	//
	// 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	//
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//
	// 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	//
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//
	// 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	//
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//
	// - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
	//
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//
	// - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	SizeLimit *string `json:"sizeLimit,omitempty"`
}

// EndpointAddress is a tuple that describes single IP address.
type IoK8sAPICoreV1EndpointAddress struct {
	// The Hostname of this endpoint
	Hostname *string `json:"hostname,omitempty"`
	// The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or ff02::/16).
	IP string `json:"ip"`
	// Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
	NodeName *string `json:"nodeName,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	TargetRef *IoK8sAPICoreV1ObjectReference `json:"targetRef,omitempty"`
}

// EndpointAddress is a tuple that describes single IP address.
type IoK8sAPICoreV1EndpointAddressInput struct {
	// The Hostname of this endpoint
	Hostname *string `json:"hostname,omitempty"`
	// The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or ff02::/16).
	IP string `json:"ip"`
	// Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
	NodeName *string `json:"nodeName,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	TargetRef *IoK8sAPICoreV1ObjectReferenceInput `json:"targetRef,omitempty"`
}

// EndpointPort is a tuple that describes a single port.
type IoK8sAPICoreV1EndpointPort struct {
	// The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 over cleartext as described in https://www.rfc-editor.org/rfc/rfc7540
	//
	// * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol *string `json:"appProtocol,omitempty"`
	// The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
	Name *string `json:"name,omitempty"`
	// The port number of the endpoint.
	Port int `json:"port"`
	// The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
	Protocol *string `json:"protocol,omitempty"`
}

// EndpointPort is a tuple that describes a single port.
type IoK8sAPICoreV1EndpointPortInput struct {
	// The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 over cleartext as described in https://www.rfc-editor.org/rfc/rfc7540
	//
	// * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol *string `json:"appProtocol,omitempty"`
	// The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
	Name *string `json:"name,omitempty"`
	// The port number of the endpoint.
	Port int `json:"port"`
	// The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
	Protocol *string `json:"protocol,omitempty"`
}

// EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
//
//	{
//	  Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//	  Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//	}
//
// The resulting set of endpoints can be viewed as:
//
//	a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
//	b: [ 10.10.1.1:309, 10.10.2.2:309 ]
type IoK8sAPICoreV1EndpointSubset struct {
	// IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
	Addresses []*IoK8sAPICoreV1EndpointAddress `json:"addresses,omitempty"`
	// IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
	NotReadyAddresses []*IoK8sAPICoreV1EndpointAddress `json:"notReadyAddresses,omitempty"`
	// Port numbers available on the related IP addresses.
	Ports []*IoK8sAPICoreV1EndpointPort `json:"ports,omitempty"`
}

// EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
//
//	{
//	  Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//	  Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//	}
//
// The resulting set of endpoints can be viewed as:
//
//	a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
//	b: [ 10.10.1.1:309, 10.10.2.2:309 ]
type IoK8sAPICoreV1EndpointSubsetInput struct {
	// IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
	Addresses []*IoK8sAPICoreV1EndpointAddressInput `json:"addresses,omitempty"`
	// IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
	NotReadyAddresses []*IoK8sAPICoreV1EndpointAddressInput `json:"notReadyAddresses,omitempty"`
	// Port numbers available on the related IP addresses.
	Ports []*IoK8sAPICoreV1EndpointPortInput `json:"ports,omitempty"`
}

// Endpoints is a collection of endpoints that implement the actual service. Example:
//
//	 Name: "mysvc",
//	 Subsets: [
//	   {
//	     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//	     Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//	   },
//	   {
//	     Addresses: [{"ip": "10.10.3.3"}],
//	     Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
//	   },
//	]
type IoK8sAPICoreV1Endpoints struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
	Subsets []*IoK8sAPICoreV1EndpointSubset `json:"subsets,omitempty"`
}

// Endpoints is a collection of endpoints that implement the actual service. Example:
//
//	 Name: "mysvc",
//	 Subsets: [
//	   {
//	     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//	     Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//	   },
//	   {
//	     Addresses: [{"ip": "10.10.3.3"}],
//	     Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
//	   },
//	]
type IoK8sAPICoreV1EndpointsInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
	Subsets []*IoK8sAPICoreV1EndpointSubsetInput `json:"subsets,omitempty"`
}

// EndpointsList is a list of endpoints.
type IoK8sAPICoreV1EndpointsList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// List of endpoints.
	Items []*IoK8sAPICoreV1Endpoints `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// EnvFromSource represents the source of a set of ConfigMaps
type IoK8sAPICoreV1EnvFromSource struct {
	// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
	//
	// The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
	ConfigMapRef *IoK8sAPICoreV1ConfigMapEnvSource `json:"configMapRef,omitempty"`
	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix *string `json:"prefix,omitempty"`
	// SecretEnvSource selects a Secret to populate the environment variables with.
	//
	// The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
	SecretRef *IoK8sAPICoreV1SecretEnvSource `json:"secretRef,omitempty"`
}

// EnvFromSource represents the source of a set of ConfigMaps
type IoK8sAPICoreV1EnvFromSourceInput struct {
	// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
	//
	// The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
	ConfigMapRef *IoK8sAPICoreV1ConfigMapEnvSourceInput `json:"configMapRef,omitempty"`
	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix *string `json:"prefix,omitempty"`
	// SecretEnvSource selects a Secret to populate the environment variables with.
	//
	// The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
	SecretRef *IoK8sAPICoreV1SecretEnvSourceInput `json:"secretRef,omitempty"`
}

// EnvVar represents an environment variable present in a Container.
type IoK8sAPICoreV1EnvVar struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `json:"name"`
	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `json:"value,omitempty"`
	// EnvVarSource represents a source for the value of an EnvVar.
	ValueFrom *IoK8sAPICoreV1EnvVarSource `json:"valueFrom,omitempty"`
}

// EnvVar represents an environment variable present in a Container.
type IoK8sAPICoreV1EnvVarInput struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `json:"name"`
	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `json:"value,omitempty"`
	// EnvVarSource represents a source for the value of an EnvVar.
	ValueFrom *IoK8sAPICoreV1EnvVarSourceInput `json:"valueFrom,omitempty"`
}

// EnvVarSource represents a source for the value of an EnvVar.
type IoK8sAPICoreV1EnvVarSource struct {
	// Selects a key from a ConfigMap.
	ConfigMapKeyRef *IoK8sAPICoreV1ConfigMapKeySelector `json:"configMapKeyRef,omitempty"`
	// ObjectFieldSelector selects an APIVersioned field of an object.
	FieldRef *IoK8sAPICoreV1ObjectFieldSelector `json:"fieldRef,omitempty"`
	// ResourceFieldSelector represents container resources (cpu, memory) and their output format
	ResourceFieldRef *IoK8sAPICoreV1ResourceFieldSelector `json:"resourceFieldRef,omitempty"`
	// SecretKeySelector selects a key of a Secret.
	SecretKeyRef *IoK8sAPICoreV1SecretKeySelector `json:"secretKeyRef,omitempty"`
}

// EnvVarSource represents a source for the value of an EnvVar.
type IoK8sAPICoreV1EnvVarSourceInput struct {
	// Selects a key from a ConfigMap.
	ConfigMapKeyRef *IoK8sAPICoreV1ConfigMapKeySelectorInput `json:"configMapKeyRef,omitempty"`
	// ObjectFieldSelector selects an APIVersioned field of an object.
	FieldRef *IoK8sAPICoreV1ObjectFieldSelectorInput `json:"fieldRef,omitempty"`
	// ResourceFieldSelector represents container resources (cpu, memory) and their output format
	ResourceFieldRef *IoK8sAPICoreV1ResourceFieldSelectorInput `json:"resourceFieldRef,omitempty"`
	// SecretKeySelector selects a key of a Secret.
	SecretKeyRef *IoK8sAPICoreV1SecretKeySelectorInput `json:"secretKeyRef,omitempty"`
}

// An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
//
// To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
type IoK8sAPICoreV1EphemeralContainer struct {
	// Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []*string `json:"args,omitempty"`
	// Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command []*string `json:"command,omitempty"`
	// List of environment variables to set in the container. Cannot be updated.
	Env []*IoK8sAPICoreV1EnvVar `json:"env,omitempty"`
	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom []*IoK8sAPICoreV1EnvFromSource `json:"envFrom,omitempty"`
	// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
	Image *string `json:"image,omitempty"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy *string `json:"imagePullPolicy,omitempty"`
	// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
	Lifecycle *IoK8sAPICoreV1Lifecycle `json:"lifecycle,omitempty"`
	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	LivenessProbe *IoK8sAPICoreV1Probe `json:"livenessProbe,omitempty"`
	// Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
	Name string `json:"name"`
	// Ports are not allowed for ephemeral containers.
	Ports []*IoK8sAPICoreV1ContainerPort `json:"ports,omitempty"`
	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	ReadinessProbe *IoK8sAPICoreV1Probe `json:"readinessProbe,omitempty"`
	// Resources resize policy for the container.
	ResizePolicy []*IoK8sAPICoreV1ContainerResizePolicy `json:"resizePolicy,omitempty"`
	// ResourceRequirements describes the compute resource requirements.
	Resources *IoK8sAPICoreV1ResourceRequirements `json:"resources,omitempty"`
	// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
	SecurityContext *IoK8sAPICoreV1SecurityContext `json:"securityContext,omitempty"`
	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	StartupProbe *IoK8sAPICoreV1Probe `json:"startupProbe,omitempty"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin *bool `json:"stdin,omitempty"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce *bool `json:"stdinOnce,omitempty"`
	// If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
	//
	// The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
	TargetContainerName *string `json:"targetContainerName,omitempty"`
	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath *string `json:"terminationMessagePath,omitempty"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy *string `json:"terminationMessagePolicy,omitempty"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty *bool `json:"tty,omitempty"`
	// volumeDevices is the list of block devices to be used by the container.
	VolumeDevices []*IoK8sAPICoreV1VolumeDevice `json:"volumeDevices,omitempty"`
	// Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
	VolumeMounts []*IoK8sAPICoreV1VolumeMount `json:"volumeMounts,omitempty"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir *string `json:"workingDir,omitempty"`
}

// An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
//
// To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
type IoK8sAPICoreV1EphemeralContainerInput struct {
	// Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []*string `json:"args,omitempty"`
	// Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command []*string `json:"command,omitempty"`
	// List of environment variables to set in the container. Cannot be updated.
	Env []*IoK8sAPICoreV1EnvVarInput `json:"env,omitempty"`
	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom []*IoK8sAPICoreV1EnvFromSourceInput `json:"envFrom,omitempty"`
	// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
	Image *string `json:"image,omitempty"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy *string `json:"imagePullPolicy,omitempty"`
	// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
	Lifecycle *IoK8sAPICoreV1LifecycleInput `json:"lifecycle,omitempty"`
	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	LivenessProbe *IoK8sAPICoreV1ProbeInput `json:"livenessProbe,omitempty"`
	// Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
	Name string `json:"name"`
	// Ports are not allowed for ephemeral containers.
	Ports []*IoK8sAPICoreV1ContainerPortInput `json:"ports,omitempty"`
	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	ReadinessProbe *IoK8sAPICoreV1ProbeInput `json:"readinessProbe,omitempty"`
	// Resources resize policy for the container.
	ResizePolicy []*IoK8sAPICoreV1ContainerResizePolicyInput `json:"resizePolicy,omitempty"`
	// ResourceRequirements describes the compute resource requirements.
	Resources *IoK8sAPICoreV1ResourceRequirementsInput `json:"resources,omitempty"`
	// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
	SecurityContext *IoK8sAPICoreV1SecurityContextInput `json:"securityContext,omitempty"`
	// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	StartupProbe *IoK8sAPICoreV1ProbeInput `json:"startupProbe,omitempty"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin *bool `json:"stdin,omitempty"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce *bool `json:"stdinOnce,omitempty"`
	// If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
	//
	// The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
	TargetContainerName *string `json:"targetContainerName,omitempty"`
	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath *string `json:"terminationMessagePath,omitempty"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy *string `json:"terminationMessagePolicy,omitempty"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty *bool `json:"tty,omitempty"`
	// volumeDevices is the list of block devices to be used by the container.
	VolumeDevices []*IoK8sAPICoreV1VolumeDeviceInput `json:"volumeDevices,omitempty"`
	// Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
	VolumeMounts []*IoK8sAPICoreV1VolumeMountInput `json:"volumeMounts,omitempty"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir *string `json:"workingDir,omitempty"`
}

// Represents an ephemeral volume that is handled by a normal storage driver.
type IoK8sAPICoreV1EphemeralVolumeSource struct {
	// PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
	VolumeClaimTemplate *IoK8sAPICoreV1PersistentVolumeClaimTemplate `json:"volumeClaimTemplate,omitempty"`
}

// Represents an ephemeral volume that is handled by a normal storage driver.
type IoK8sAPICoreV1EphemeralVolumeSourceInput struct {
	// PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
	VolumeClaimTemplate *IoK8sAPICoreV1PersistentVolumeClaimTemplateInput `json:"volumeClaimTemplate,omitempty"`
}

// Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
type IoK8sAPICoreV1Event struct {
	// What action was taken/failed regarding to the Regarding object.
	Action *string `json:"action,omitempty"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// The number of times this event has occurred.
	Count *int `json:"count,omitempty"`
	// MicroTime is version of Time with microsecond level precision.
	EventTime *string `json:"eventTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	FirstTimestamp *string `json:"firstTimestamp,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	InvolvedObject *IoK8sAPICoreV1ObjectReference `json:"involvedObject"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTimestamp *string `json:"lastTimestamp,omitempty"`
	// A human-readable description of the status of this operation.
	Message *string `json:"message,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
	Reason *string `json:"reason,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	Related *IoK8sAPICoreV1ObjectReference `json:"related,omitempty"`
	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingComponent *string `json:"reportingComponent,omitempty"`
	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance *string `json:"reportingInstance,omitempty"`
	// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
	Series *IoK8sAPICoreV1EventSeries `json:"series,omitempty"`
	// EventSource contains information for an event.
	Source *IoK8sAPICoreV1EventSource `json:"source,omitempty"`
	// Type of this event (Normal, Warning), new types could be added in the future
	Type *string `json:"type,omitempty"`
}

// Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
type IoK8sAPICoreV1EventInput struct {
	// What action was taken/failed regarding to the Regarding object.
	Action *string `json:"action,omitempty"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// The number of times this event has occurred.
	Count *int `json:"count,omitempty"`
	// MicroTime is version of Time with microsecond level precision.
	EventTime *string `json:"eventTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	FirstTimestamp *string `json:"firstTimestamp,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	InvolvedObject *IoK8sAPICoreV1ObjectReferenceInput `json:"involvedObject"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTimestamp *string `json:"lastTimestamp,omitempty"`
	// A human-readable description of the status of this operation.
	Message *string `json:"message,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata"`
	// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
	Reason *string `json:"reason,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	Related *IoK8sAPICoreV1ObjectReferenceInput `json:"related,omitempty"`
	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingComponent *string `json:"reportingComponent,omitempty"`
	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance *string `json:"reportingInstance,omitempty"`
	// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
	Series *IoK8sAPICoreV1EventSeriesInput `json:"series,omitempty"`
	// EventSource contains information for an event.
	Source *IoK8sAPICoreV1EventSourceInput `json:"source,omitempty"`
	// Type of this event (Normal, Warning), new types could be added in the future
	Type *string `json:"type,omitempty"`
}

// EventList is a list of events.
type IoK8sAPICoreV1EventList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// List of events
	Items []*IoK8sAPICoreV1Event `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
type IoK8sAPICoreV1EventSeries struct {
	// Number of occurrences in this series up to the last heartbeat time
	Count *int `json:"count,omitempty"`
	// MicroTime is version of Time with microsecond level precision.
	LastObservedTime *string `json:"lastObservedTime,omitempty"`
}

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
type IoK8sAPICoreV1EventSeriesInput struct {
	// Number of occurrences in this series up to the last heartbeat time
	Count *int `json:"count,omitempty"`
	// MicroTime is version of Time with microsecond level precision.
	LastObservedTime *string `json:"lastObservedTime,omitempty"`
}

// EventSource contains information for an event.
type IoK8sAPICoreV1EventSource struct {
	// Component from which the event is generated.
	Component *string `json:"component,omitempty"`
	// Node name on which the event is generated.
	Host *string `json:"host,omitempty"`
}

// EventSource contains information for an event.
type IoK8sAPICoreV1EventSourceInput struct {
	// Component from which the event is generated.
	Component *string `json:"component,omitempty"`
	// Node name on which the event is generated.
	Host *string `json:"host,omitempty"`
}

// ExecAction describes a "run in container" action.
type IoK8sAPICoreV1ExecAction struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []*string `json:"command,omitempty"`
}

// ExecAction describes a "run in container" action.
type IoK8sAPICoreV1ExecActionInput struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []*string `json:"command,omitempty"`
}

// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1FCVolumeSource struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// lun is Optional: FC target lun number
	Lun *int `json:"lun,omitempty"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// targetWWNs is Optional: FC target worldwide names (WWNs)
	TargetWWNs []*string `json:"targetWWNs,omitempty"`
	// wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
	Wwids []*string `json:"wwids,omitempty"`
}

// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1FCVolumeSourceInput struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// lun is Optional: FC target lun number
	Lun *int `json:"lun,omitempty"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// targetWWNs is Optional: FC target worldwide names (WWNs)
	TargetWWNs []*string `json:"targetWWNs,omitempty"`
	// wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
	Wwids []*string `json:"wwids,omitempty"`
}

// FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
type IoK8sAPICoreV1FlexPersistentVolumeSource struct {
	// driver is the name of the driver to use for this volume.
	Driver string `json:"driver"`
	// fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType *string `json:"fsType,omitempty"`
	// options is Optional: this field holds extra command options if any.
	Options *string `json:"options,omitempty"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	SecretRef *IoK8sAPICoreV1SecretReference `json:"secretRef,omitempty"`
}

// FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
type IoK8sAPICoreV1FlexPersistentVolumeSourceInput struct {
	// driver is the name of the driver to use for this volume.
	Driver string `json:"driver"`
	// fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType *string `json:"fsType,omitempty"`
	// options is Optional: this field holds extra command options if any.
	Options *string `json:"options,omitempty"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	SecretRef *IoK8sAPICoreV1SecretReferenceInput `json:"secretRef,omitempty"`
}

// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
type IoK8sAPICoreV1FlexVolumeSource struct {
	// driver is the name of the driver to use for this volume.
	Driver string `json:"driver"`
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType *string `json:"fsType,omitempty"`
	// options is Optional: this field holds extra command options if any.
	Options *string `json:"options,omitempty"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	SecretRef *IoK8sAPICoreV1LocalObjectReference `json:"secretRef,omitempty"`
}

// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
type IoK8sAPICoreV1FlexVolumeSourceInput struct {
	// driver is the name of the driver to use for this volume.
	Driver string `json:"driver"`
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType *string `json:"fsType,omitempty"`
	// options is Optional: this field holds extra command options if any.
	Options *string `json:"options,omitempty"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	SecretRef *IoK8sAPICoreV1LocalObjectReferenceInput `json:"secretRef,omitempty"`
}

// Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
type IoK8sAPICoreV1FlockerVolumeSource struct {
	// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
	DatasetName *string `json:"datasetName,omitempty"`
	// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
	DatasetUUID *string `json:"datasetUUID,omitempty"`
}

// Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
type IoK8sAPICoreV1FlockerVolumeSourceInput struct {
	// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
	DatasetName *string `json:"datasetName,omitempty"`
	// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
	DatasetUUID *string `json:"datasetUUID,omitempty"`
}

// Represents a Persistent Disk resource in Google Compute Engine.
//
// A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
type IoK8sAPICoreV1GCEPersistentDiskVolumeSource struct {
	// fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	FsType *string `json:"fsType,omitempty"`
	// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition *int `json:"partition,omitempty"`
	// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName string `json:"pdName"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly *bool `json:"readOnly,omitempty"`
}

// Represents a Persistent Disk resource in Google Compute Engine.
//
// A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
type IoK8sAPICoreV1GCEPersistentDiskVolumeSourceInput struct {
	// fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	FsType *string `json:"fsType,omitempty"`
	// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition *int `json:"partition,omitempty"`
	// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName string `json:"pdName"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly *bool `json:"readOnly,omitempty"`
}

type IoK8sAPICoreV1GRPCAction struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port int `json:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
	//
	// If this is not specified, the default behavior is defined by gRPC.
	Service *string `json:"service,omitempty"`
}

type IoK8sAPICoreV1GRPCActionInput struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port int `json:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
	//
	// If this is not specified, the default behavior is defined by gRPC.
	Service *string `json:"service,omitempty"`
}

// Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
//
// DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
type IoK8sAPICoreV1GitRepoVolumeSource struct {
	// directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory *string `json:"directory,omitempty"`
	// repository is the URL
	Repository string `json:"repository"`
	// revision is the commit hash for the specified revision.
	Revision *string `json:"revision,omitempty"`
}

// Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
//
// DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
type IoK8sAPICoreV1GitRepoVolumeSourceInput struct {
	// directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory *string `json:"directory,omitempty"`
	// repository is the URL
	Repository string `json:"repository"`
	// revision is the commit hash for the specified revision.
	Revision *string `json:"revision,omitempty"`
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
type IoK8sAPICoreV1GlusterfsPersistentVolumeSource struct {
	// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints string `json:"endpoints"`
	// endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	EndpointsNamespace *string `json:"endpointsNamespace,omitempty"`
	// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path string `json:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly *bool `json:"readOnly,omitempty"`
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
type IoK8sAPICoreV1GlusterfsPersistentVolumeSourceInput struct {
	// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints string `json:"endpoints"`
	// endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	EndpointsNamespace *string `json:"endpointsNamespace,omitempty"`
	// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path string `json:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly *bool `json:"readOnly,omitempty"`
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
type IoK8sAPICoreV1GlusterfsVolumeSource struct {
	// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints string `json:"endpoints"`
	// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path string `json:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly *bool `json:"readOnly,omitempty"`
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
type IoK8sAPICoreV1GlusterfsVolumeSourceInput struct {
	// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints string `json:"endpoints"`
	// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path string `json:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly *bool `json:"readOnly,omitempty"`
}

// HTTPGetAction describes an action based on HTTP Get requests.
type IoK8sAPICoreV1HTTPGetAction struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `json:"host,omitempty"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HTTPHeaders []*IoK8sAPICoreV1HTTPHeader `json:"httpHeaders,omitempty"`
	// Path to access on the HTTP server.
	Path *string `json:"path,omitempty"`
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `json:"scheme,omitempty"`
}

// HTTPGetAction describes an action based on HTTP Get requests.
type IoK8sAPICoreV1HTTPGetActionInput struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `json:"host,omitempty"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HTTPHeaders []*IoK8sAPICoreV1HTTPHeaderInput `json:"httpHeaders,omitempty"`
	// Path to access on the HTTP server.
	Path *string `json:"path,omitempty"`
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `json:"scheme,omitempty"`
}

// HTTPHeader describes a custom header to be used in HTTP probes
type IoK8sAPICoreV1HTTPHeader struct {
	// The header field name
	Name string `json:"name"`
	// The header field value
	Value string `json:"value"`
}

// HTTPHeader describes a custom header to be used in HTTP probes
type IoK8sAPICoreV1HTTPHeaderInput struct {
	// The header field name
	Name string `json:"name"`
	// The header field value
	Value string `json:"value"`
}

// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
type IoK8sAPICoreV1HostAlias struct {
	// Hostnames for the above IP address.
	Hostnames []*string `json:"hostnames,omitempty"`
	// IP address of the host file entry.
	IP *string `json:"ip,omitempty"`
}

// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
type IoK8sAPICoreV1HostAliasInput struct {
	// Hostnames for the above IP address.
	Hostnames []*string `json:"hostnames,omitempty"`
	// IP address of the host file entry.
	IP *string `json:"ip,omitempty"`
}

// Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
type IoK8sAPICoreV1HostPathVolumeSource struct {
	// path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Path string `json:"path"`
	// type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Type *string `json:"type,omitempty"`
}

// Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
type IoK8sAPICoreV1HostPathVolumeSourceInput struct {
	// path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Path string `json:"path"`
	// type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Type *string `json:"type,omitempty"`
}

// ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1ISCSIPersistentVolumeSource struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery *bool `json:"chapAuthDiscovery,omitempty"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession *bool `json:"chapAuthSession,omitempty"`
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType *string `json:"fsType,omitempty"`
	// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName *string `json:"initiatorName,omitempty"`
	// iqn is Target iSCSI Qualified Name.
	Iqn string `json:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface *string `json:"iscsiInterface,omitempty"`
	// lun is iSCSI Target Lun number.
	Lun int `json:"lun"`
	// portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals []*string `json:"portals,omitempty"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	SecretRef *IoK8sAPICoreV1SecretReference `json:"secretRef,omitempty"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal string `json:"targetPortal"`
}

// ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1ISCSIPersistentVolumeSourceInput struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery *bool `json:"chapAuthDiscovery,omitempty"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession *bool `json:"chapAuthSession,omitempty"`
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType *string `json:"fsType,omitempty"`
	// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName *string `json:"initiatorName,omitempty"`
	// iqn is Target iSCSI Qualified Name.
	Iqn string `json:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface *string `json:"iscsiInterface,omitempty"`
	// lun is iSCSI Target Lun number.
	Lun int `json:"lun"`
	// portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals []*string `json:"portals,omitempty"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	SecretRef *IoK8sAPICoreV1SecretReferenceInput `json:"secretRef,omitempty"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal string `json:"targetPortal"`
}

// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1ISCSIVolumeSource struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery *bool `json:"chapAuthDiscovery,omitempty"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession *bool `json:"chapAuthSession,omitempty"`
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType *string `json:"fsType,omitempty"`
	// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName *string `json:"initiatorName,omitempty"`
	// iqn is the target iSCSI Qualified Name.
	Iqn string `json:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface *string `json:"iscsiInterface,omitempty"`
	// lun represents iSCSI Target Lun number.
	Lun int `json:"lun"`
	// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals []*string `json:"portals,omitempty"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	SecretRef *IoK8sAPICoreV1LocalObjectReference `json:"secretRef,omitempty"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal string `json:"targetPortal"`
}

// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1ISCSIVolumeSourceInput struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery *bool `json:"chapAuthDiscovery,omitempty"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession *bool `json:"chapAuthSession,omitempty"`
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType *string `json:"fsType,omitempty"`
	// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName *string `json:"initiatorName,omitempty"`
	// iqn is the target iSCSI Qualified Name.
	Iqn string `json:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface *string `json:"iscsiInterface,omitempty"`
	// lun represents iSCSI Target Lun number.
	Lun int `json:"lun"`
	// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals []*string `json:"portals,omitempty"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	SecretRef *IoK8sAPICoreV1LocalObjectReferenceInput `json:"secretRef,omitempty"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal string `json:"targetPortal"`
}

// Maps a string key to a path within a volume.
type IoK8sAPICoreV1KeyToPath struct {
	// key is the key to project.
	Key string `json:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `json:"mode,omitempty"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `json:"path"`
}

// Maps a string key to a path within a volume.
type IoK8sAPICoreV1KeyToPathInput struct {
	// key is the key to project.
	Key string `json:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `json:"mode,omitempty"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `json:"path"`
}

// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
type IoK8sAPICoreV1Lifecycle struct {
	// LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
	PostStart *IoK8sAPICoreV1LifecycleHandler `json:"postStart,omitempty"`
	// LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
	PreStop *IoK8sAPICoreV1LifecycleHandler `json:"preStop,omitempty"`
}

// LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
type IoK8sAPICoreV1LifecycleHandler struct {
	// ExecAction describes a "run in container" action.
	Exec *IoK8sAPICoreV1ExecAction `json:"exec,omitempty"`
	// HTTPGetAction describes an action based on HTTP Get requests.
	HTTPGet *IoK8sAPICoreV1HTTPGetAction `json:"httpGet,omitempty"`
	// TCPSocketAction describes an action based on opening a socket
	TCPSocket *IoK8sAPICoreV1TCPSocketAction `json:"tcpSocket,omitempty"`
}

// LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
type IoK8sAPICoreV1LifecycleHandlerInput struct {
	// ExecAction describes a "run in container" action.
	Exec *IoK8sAPICoreV1ExecActionInput `json:"exec,omitempty"`
	// HTTPGetAction describes an action based on HTTP Get requests.
	HTTPGet *IoK8sAPICoreV1HTTPGetActionInput `json:"httpGet,omitempty"`
	// TCPSocketAction describes an action based on opening a socket
	TCPSocket *IoK8sAPICoreV1TCPSocketActionInput `json:"tcpSocket,omitempty"`
}

// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
type IoK8sAPICoreV1LifecycleInput struct {
	// LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
	PostStart *IoK8sAPICoreV1LifecycleHandlerInput `json:"postStart,omitempty"`
	// LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
	PreStop *IoK8sAPICoreV1LifecycleHandlerInput `json:"preStop,omitempty"`
}

// LimitRange sets resource usage limits for each kind of resource in a Namespace.
type IoK8sAPICoreV1LimitRange struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// LimitRangeSpec defines a min/max usage limit for resources that match on kind.
	Spec *IoK8sAPICoreV1LimitRangeSpec `json:"spec,omitempty"`
}

// LimitRange sets resource usage limits for each kind of resource in a Namespace.
type IoK8sAPICoreV1LimitRangeInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// LimitRangeSpec defines a min/max usage limit for resources that match on kind.
	Spec *IoK8sAPICoreV1LimitRangeSpecInput `json:"spec,omitempty"`
}

// LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
type IoK8sAPICoreV1LimitRangeItem struct {
	// Default resource requirement limit value by resource name if resource limit is omitted.
	Default *string `json:"default,omitempty"`
	// DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
	DefaultRequest *string `json:"defaultRequest,omitempty"`
	// Max usage constraints on this kind by resource name.
	Max *string `json:"max,omitempty"`
	// MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
	MaxLimitRequestRatio *string `json:"maxLimitRequestRatio,omitempty"`
	// Min usage constraints on this kind by resource name.
	Min *string `json:"min,omitempty"`
	// Type of resource that this limit applies to.
	Type string `json:"type"`
}

// LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
type IoK8sAPICoreV1LimitRangeItemInput struct {
	// Default resource requirement limit value by resource name if resource limit is omitted.
	Default *string `json:"default,omitempty"`
	// DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
	DefaultRequest *string `json:"defaultRequest,omitempty"`
	// Max usage constraints on this kind by resource name.
	Max *string `json:"max,omitempty"`
	// MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
	MaxLimitRequestRatio *string `json:"maxLimitRequestRatio,omitempty"`
	// Min usage constraints on this kind by resource name.
	Min *string `json:"min,omitempty"`
	// Type of resource that this limit applies to.
	Type string `json:"type"`
}

// LimitRangeList is a list of LimitRange items.
type IoK8sAPICoreV1LimitRangeList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Items []*IoK8sAPICoreV1LimitRange `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// LimitRangeSpec defines a min/max usage limit for resources that match on kind.
type IoK8sAPICoreV1LimitRangeSpec struct {
	// Limits is the list of LimitRangeItem objects that are enforced.
	Limits []*IoK8sAPICoreV1LimitRangeItem `json:"limits"`
}

// LimitRangeSpec defines a min/max usage limit for resources that match on kind.
type IoK8sAPICoreV1LimitRangeSpecInput struct {
	// Limits is the list of LimitRangeItem objects that are enforced.
	Limits []*IoK8sAPICoreV1LimitRangeItemInput `json:"limits"`
}

// LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
type IoK8sAPICoreV1LoadBalancerIngress struct {
	// Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
	Hostname *string `json:"hostname,omitempty"`
	// IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
	IP *string `json:"ip,omitempty"`
	// Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
	Ports []*IoK8sAPICoreV1PortStatus `json:"ports,omitempty"`
}

// LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
type IoK8sAPICoreV1LoadBalancerIngressInput struct {
	// Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
	Hostname *string `json:"hostname,omitempty"`
	// IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
	IP *string `json:"ip,omitempty"`
	// Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
	Ports []*IoK8sAPICoreV1PortStatusInput `json:"ports,omitempty"`
}

// LoadBalancerStatus represents the status of a load-balancer.
type IoK8sAPICoreV1LoadBalancerStatus struct {
	// Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
	Ingress []*IoK8sAPICoreV1LoadBalancerIngress `json:"ingress,omitempty"`
}

// LoadBalancerStatus represents the status of a load-balancer.
type IoK8sAPICoreV1LoadBalancerStatusInput struct {
	// Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
	Ingress []*IoK8sAPICoreV1LoadBalancerIngressInput `json:"ingress,omitempty"`
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type IoK8sAPICoreV1LocalObjectReference struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type IoK8sAPICoreV1LocalObjectReferenceInput struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
}

// Local represents directly-attached storage with node affinity (Beta feature)
type IoK8sAPICoreV1LocalVolumeSource struct {
	// fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
	Path string `json:"path"`
}

// Local represents directly-attached storage with node affinity (Beta feature)
type IoK8sAPICoreV1LocalVolumeSourceInput struct {
	// fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
	Path string `json:"path"`
}

// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
type IoK8sAPICoreV1NFSVolumeSource struct {
	// path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Path string `json:"path"`
	// readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	ReadOnly *bool `json:"readOnly,omitempty"`
	// server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Server string `json:"server"`
}

// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
type IoK8sAPICoreV1NFSVolumeSourceInput struct {
	// path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Path string `json:"path"`
	// readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	ReadOnly *bool `json:"readOnly,omitempty"`
	// server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Server string `json:"server"`
}

// Namespace provides a scope for Names. Use of multiple namespaces is optional.
type IoK8sAPICoreV1Namespace struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// NamespaceSpec describes the attributes on a Namespace.
	Spec *IoK8sAPICoreV1NamespaceSpec `json:"spec,omitempty"`
	// NamespaceStatus is information about the current status of a Namespace.
	Status *IoK8sAPICoreV1NamespaceStatus `json:"status,omitempty"`
}

// NamespaceCondition contains details about state of namespace.
type IoK8sAPICoreV1NamespaceCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	Message            *string `json:"message,omitempty"`
	Reason             *string `json:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of namespace controller condition.
	Type string `json:"type"`
}

// NamespaceCondition contains details about state of namespace.
type IoK8sAPICoreV1NamespaceConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	Message            *string `json:"message,omitempty"`
	Reason             *string `json:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of namespace controller condition.
	Type string `json:"type"`
}

// Namespace provides a scope for Names. Use of multiple namespaces is optional.
type IoK8sAPICoreV1NamespaceInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// NamespaceSpec describes the attributes on a Namespace.
	Spec *IoK8sAPICoreV1NamespaceSpecInput `json:"spec,omitempty"`
	// NamespaceStatus is information about the current status of a Namespace.
	Status *IoK8sAPICoreV1NamespaceStatusInput `json:"status,omitempty"`
}

// NamespaceList is a list of Namespaces.
type IoK8sAPICoreV1NamespaceList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Items []*IoK8sAPICoreV1Namespace `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// NamespaceSpec describes the attributes on a Namespace.
type IoK8sAPICoreV1NamespaceSpec struct {
	// Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
	Finalizers []*string `json:"finalizers,omitempty"`
}

// NamespaceSpec describes the attributes on a Namespace.
type IoK8sAPICoreV1NamespaceSpecInput struct {
	// Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
	Finalizers []*string `json:"finalizers,omitempty"`
}

// NamespaceStatus is information about the current status of a Namespace.
type IoK8sAPICoreV1NamespaceStatus struct {
	// Represents the latest available observations of a namespace's current state.
	Conditions []*IoK8sAPICoreV1NamespaceCondition `json:"conditions,omitempty"`
	// Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
	Phase *string `json:"phase,omitempty"`
}

// NamespaceStatus is information about the current status of a Namespace.
type IoK8sAPICoreV1NamespaceStatusInput struct {
	// Represents the latest available observations of a namespace's current state.
	Conditions []*IoK8sAPICoreV1NamespaceConditionInput `json:"conditions,omitempty"`
	// Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
	Phase *string `json:"phase,omitempty"`
}

// Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
type IoK8sAPICoreV1Node struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// NodeSpec describes the attributes that a node is created with.
	Spec *IoK8sAPICoreV1NodeSpec `json:"spec,omitempty"`
	// NodeStatus is information about the current status of a node.
	Status *IoK8sAPICoreV1NodeStatus `json:"status,omitempty"`
}

// NodeAddress contains information for the node's address.
type IoK8sAPICoreV1NodeAddress struct {
	// The node address.
	Address string `json:"address"`
	// Node address type, one of Hostname, ExternalIP or InternalIP.
	Type string `json:"type"`
}

// NodeAddress contains information for the node's address.
type IoK8sAPICoreV1NodeAddressInput struct {
	// The node address.
	Address string `json:"address"`
	// Node address type, one of Hostname, ExternalIP or InternalIP.
	Type string `json:"type"`
}

// Node affinity is a group of node affinity scheduling rules.
type IoK8sAPICoreV1NodeAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []*IoK8sAPICoreV1PreferredSchedulingTerm `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
	// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
	RequiredDuringSchedulingIgnoredDuringExecution *IoK8sAPICoreV1NodeSelector `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// Node affinity is a group of node affinity scheduling rules.
type IoK8sAPICoreV1NodeAffinityInput struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []*IoK8sAPICoreV1PreferredSchedulingTermInput `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
	// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
	RequiredDuringSchedulingIgnoredDuringExecution *IoK8sAPICoreV1NodeSelectorInput `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// NodeCondition contains condition information for a node.
type IoK8sAPICoreV1NodeCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastHeartbeatTime *string `json:"lastHeartbeatTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// Human readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// (brief) reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of node condition.
	Type string `json:"type"`
}

// NodeCondition contains condition information for a node.
type IoK8sAPICoreV1NodeConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastHeartbeatTime *string `json:"lastHeartbeatTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// Human readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// (brief) reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of node condition.
	Type string `json:"type"`
}

// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
type IoK8sAPICoreV1NodeConfigSource struct {
	// ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
	ConfigMap *IoK8sAPICoreV1ConfigMapNodeConfigSource `json:"configMap,omitempty"`
}

// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
type IoK8sAPICoreV1NodeConfigSourceInput struct {
	// ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
	ConfigMap *IoK8sAPICoreV1ConfigMapNodeConfigSourceInput `json:"configMap,omitempty"`
}

// NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
type IoK8sAPICoreV1NodeConfigStatus struct {
	// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
	Active *IoK8sAPICoreV1NodeConfigSource `json:"active,omitempty"`
	// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
	Assigned *IoK8sAPICoreV1NodeConfigSource `json:"assigned,omitempty"`
	// Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
	Error *string `json:"error,omitempty"`
	// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
	LastKnownGood *IoK8sAPICoreV1NodeConfigSource `json:"lastKnownGood,omitempty"`
}

// NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
type IoK8sAPICoreV1NodeConfigStatusInput struct {
	// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
	Active *IoK8sAPICoreV1NodeConfigSourceInput `json:"active,omitempty"`
	// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
	Assigned *IoK8sAPICoreV1NodeConfigSourceInput `json:"assigned,omitempty"`
	// Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
	Error *string `json:"error,omitempty"`
	// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
	LastKnownGood *IoK8sAPICoreV1NodeConfigSourceInput `json:"lastKnownGood,omitempty"`
}

// NodeDaemonEndpoints lists ports opened by daemons running on the Node.
type IoK8sAPICoreV1NodeDaemonEndpoints struct {
	// DaemonEndpoint contains information about a single Daemon endpoint.
	KubeletEndpoint *IoK8sAPICoreV1DaemonEndpoint `json:"kubeletEndpoint,omitempty"`
}

// NodeDaemonEndpoints lists ports opened by daemons running on the Node.
type IoK8sAPICoreV1NodeDaemonEndpointsInput struct {
	// DaemonEndpoint contains information about a single Daemon endpoint.
	KubeletEndpoint *IoK8sAPICoreV1DaemonEndpointInput `json:"kubeletEndpoint,omitempty"`
}

// Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
type IoK8sAPICoreV1NodeInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// NodeSpec describes the attributes that a node is created with.
	Spec *IoK8sAPICoreV1NodeSpecInput `json:"spec,omitempty"`
	// NodeStatus is information about the current status of a node.
	Status *IoK8sAPICoreV1NodeStatusInput `json:"status,omitempty"`
}

// NodeList is the whole list of all Nodes which have been registered with master.
type IoK8sAPICoreV1NodeList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// List of nodes
	Items []*IoK8sAPICoreV1Node `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
type IoK8sAPICoreV1NodeSelector struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms []*IoK8sAPICoreV1NodeSelectorTerm `json:"nodeSelectorTerms"`
}

// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
type IoK8sAPICoreV1NodeSelectorInput struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms []*IoK8sAPICoreV1NodeSelectorTermInput `json:"nodeSelectorTerms"`
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type IoK8sAPICoreV1NodeSelectorRequirement struct {
	// The label key that the selector applies to.
	Key string `json:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator string `json:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []*string `json:"values,omitempty"`
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type IoK8sAPICoreV1NodeSelectorRequirementInput struct {
	// The label key that the selector applies to.
	Key string `json:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator string `json:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []*string `json:"values,omitempty"`
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type IoK8sAPICoreV1NodeSelectorTerm struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions []*IoK8sAPICoreV1NodeSelectorRequirement `json:"matchExpressions,omitempty"`
	// A list of node selector requirements by node's fields.
	MatchFields []*IoK8sAPICoreV1NodeSelectorRequirement `json:"matchFields,omitempty"`
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type IoK8sAPICoreV1NodeSelectorTermInput struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions []*IoK8sAPICoreV1NodeSelectorRequirementInput `json:"matchExpressions,omitempty"`
	// A list of node selector requirements by node's fields.
	MatchFields []*IoK8sAPICoreV1NodeSelectorRequirementInput `json:"matchFields,omitempty"`
}

// NodeSpec describes the attributes that a node is created with.
type IoK8sAPICoreV1NodeSpec struct {
	// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
	ConfigSource *IoK8sAPICoreV1NodeConfigSource `json:"configSource,omitempty"`
	// Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
	ExternalID *string `json:"externalID,omitempty"`
	// PodCIDR represents the pod IP range assigned to the node.
	PodCidr *string `json:"podCIDR,omitempty"`
	// podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
	PodCIDRs []*string `json:"podCIDRs,omitempty"`
	// ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
	ProviderID *string `json:"providerID,omitempty"`
	// If specified, the node's taints.
	Taints []*IoK8sAPICoreV1Taint `json:"taints,omitempty"`
	// Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
	Unschedulable *bool `json:"unschedulable,omitempty"`
}

// NodeSpec describes the attributes that a node is created with.
type IoK8sAPICoreV1NodeSpecInput struct {
	// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
	ConfigSource *IoK8sAPICoreV1NodeConfigSourceInput `json:"configSource,omitempty"`
	// Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
	ExternalID *string `json:"externalID,omitempty"`
	// PodCIDR represents the pod IP range assigned to the node.
	PodCidr *string `json:"podCIDR,omitempty"`
	// podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
	PodCIDRs []*string `json:"podCIDRs,omitempty"`
	// ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
	ProviderID *string `json:"providerID,omitempty"`
	// If specified, the node's taints.
	Taints []*IoK8sAPICoreV1TaintInput `json:"taints,omitempty"`
	// Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
	Unschedulable *bool `json:"unschedulable,omitempty"`
}

// NodeStatus is information about the current status of a node.
type IoK8sAPICoreV1NodeStatus struct {
	// List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).
	Addresses []*IoK8sAPICoreV1NodeAddress `json:"addresses,omitempty"`
	// Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
	Allocatable *string `json:"allocatable,omitempty"`
	// Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
	Capacity *string `json:"capacity,omitempty"`
	// Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
	Conditions []*IoK8sAPICoreV1NodeCondition `json:"conditions,omitempty"`
	// NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
	Config *IoK8sAPICoreV1NodeConfigStatus `json:"config,omitempty"`
	// NodeDaemonEndpoints lists ports opened by daemons running on the Node.
	DaemonEndpoints *IoK8sAPICoreV1NodeDaemonEndpoints `json:"daemonEndpoints,omitempty"`
	// List of container images on this node
	Images []*IoK8sAPICoreV1ContainerImage `json:"images,omitempty"`
	// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
	NodeInfo *IoK8sAPICoreV1NodeSystemInfo `json:"nodeInfo,omitempty"`
	// NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
	Phase *string `json:"phase,omitempty"`
	// List of volumes that are attached to the node.
	VolumesAttached []*IoK8sAPICoreV1AttachedVolume `json:"volumesAttached,omitempty"`
	// List of attachable volumes in use (mounted) by the node.
	VolumesInUse []*string `json:"volumesInUse,omitempty"`
}

// NodeStatus is information about the current status of a node.
type IoK8sAPICoreV1NodeStatusInput struct {
	// List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).
	Addresses []*IoK8sAPICoreV1NodeAddressInput `json:"addresses,omitempty"`
	// Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
	Allocatable *string `json:"allocatable,omitempty"`
	// Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
	Capacity *string `json:"capacity,omitempty"`
	// Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
	Conditions []*IoK8sAPICoreV1NodeConditionInput `json:"conditions,omitempty"`
	// NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
	Config *IoK8sAPICoreV1NodeConfigStatusInput `json:"config,omitempty"`
	// NodeDaemonEndpoints lists ports opened by daemons running on the Node.
	DaemonEndpoints *IoK8sAPICoreV1NodeDaemonEndpointsInput `json:"daemonEndpoints,omitempty"`
	// List of container images on this node
	Images []*IoK8sAPICoreV1ContainerImageInput `json:"images,omitempty"`
	// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
	NodeInfo *IoK8sAPICoreV1NodeSystemInfoInput `json:"nodeInfo,omitempty"`
	// NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
	Phase *string `json:"phase,omitempty"`
	// List of volumes that are attached to the node.
	VolumesAttached []*IoK8sAPICoreV1AttachedVolumeInput `json:"volumesAttached,omitempty"`
	// List of attachable volumes in use (mounted) by the node.
	VolumesInUse []*string `json:"volumesInUse,omitempty"`
}

// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
type IoK8sAPICoreV1NodeSystemInfo struct {
	// The Architecture reported by the node
	Architecture string `json:"architecture"`
	// Boot ID reported by the node.
	BootID string `json:"bootID"`
	// ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
	ContainerRuntimeVersion string `json:"containerRuntimeVersion"`
	// Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
	KernelVersion string `json:"kernelVersion"`
	// KubeProxy Version reported by the node.
	KubeProxyVersion string `json:"kubeProxyVersion"`
	// Kubelet Version reported by the node.
	KubeletVersion string `json:"kubeletVersion"`
	// MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
	MachineID string `json:"machineID"`
	// The Operating System reported by the node
	OperatingSystem string `json:"operatingSystem"`
	// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
	OsImage string `json:"osImage"`
	// SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
	SystemUUID string `json:"systemUUID"`
}

// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
type IoK8sAPICoreV1NodeSystemInfoInput struct {
	// The Architecture reported by the node
	Architecture string `json:"architecture"`
	// Boot ID reported by the node.
	BootID string `json:"bootID"`
	// ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
	ContainerRuntimeVersion string `json:"containerRuntimeVersion"`
	// Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
	KernelVersion string `json:"kernelVersion"`
	// KubeProxy Version reported by the node.
	KubeProxyVersion string `json:"kubeProxyVersion"`
	// Kubelet Version reported by the node.
	KubeletVersion string `json:"kubeletVersion"`
	// MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
	MachineID string `json:"machineID"`
	// The Operating System reported by the node
	OperatingSystem string `json:"operatingSystem"`
	// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
	OsImage string `json:"osImage"`
	// SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
	SystemUUID string `json:"systemUUID"`
}

// ObjectFieldSelector selects an APIVersioned field of an object.
type IoK8sAPICoreV1ObjectFieldSelector struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	APIVersion *string `json:"apiVersion,omitempty"`
	// Path of the field to select in the specified API version.
	FieldPath string `json:"fieldPath"`
}

// ObjectFieldSelector selects an APIVersioned field of an object.
type IoK8sAPICoreV1ObjectFieldSelectorInput struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	APIVersion *string `json:"apiVersion,omitempty"`
	// Path of the field to select in the specified API version.
	FieldPath string `json:"fieldPath"`
}

// ObjectReference contains enough information to let you inspect or modify the referred object.
type IoK8sAPICoreV1ObjectReference struct {
	// API version of the referent.
	APIVersion *string `json:"apiVersion,omitempty"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
	FieldPath *string `json:"fieldPath,omitempty"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `json:"namespace,omitempty"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `json:"resourceVersion,omitempty"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	UID *string `json:"uid,omitempty"`
}

// ObjectReference contains enough information to let you inspect or modify the referred object.
type IoK8sAPICoreV1ObjectReferenceInput struct {
	// API version of the referent.
	APIVersion *string `json:"apiVersion,omitempty"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
	FieldPath *string `json:"fieldPath,omitempty"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `json:"namespace,omitempty"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `json:"resourceVersion,omitempty"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	UID *string `json:"uid,omitempty"`
}

// PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
type IoK8sAPICoreV1PersistentVolume struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// PersistentVolumeSpec is the specification of a persistent volume.
	Spec *IoK8sAPICoreV1PersistentVolumeSpec `json:"spec,omitempty"`
	// PersistentVolumeStatus is the current status of a persistent volume.
	Status *IoK8sAPICoreV1PersistentVolumeStatus `json:"status,omitempty"`
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type IoK8sAPICoreV1PersistentVolumeClaim struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
	Spec *IoK8sAPICoreV1PersistentVolumeClaimSpec `json:"spec,omitempty"`
	// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
	Status *IoK8sAPICoreV1PersistentVolumeClaimStatus `json:"status,omitempty"`
}

// PersistentVolumeClaimCondition contains details about state of pvc
type IoK8sAPICoreV1PersistentVolumeClaimCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastProbeTime *string `json:"lastProbeTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// message is the human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
	Reason *string `json:"reason,omitempty"`
	Status string  `json:"status"`
	Type   string  `json:"type"`
}

// PersistentVolumeClaimCondition contains details about state of pvc
type IoK8sAPICoreV1PersistentVolumeClaimConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastProbeTime *string `json:"lastProbeTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// message is the human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
	Reason *string `json:"reason,omitempty"`
	Status string  `json:"status"`
	Type   string  `json:"type"`
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type IoK8sAPICoreV1PersistentVolumeClaimInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
	Spec *IoK8sAPICoreV1PersistentVolumeClaimSpecInput `json:"spec,omitempty"`
	// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
	Status *IoK8sAPICoreV1PersistentVolumeClaimStatusInput `json:"status,omitempty"`
}

// PersistentVolumeClaimList is a list of PersistentVolumeClaim items.
type IoK8sAPICoreV1PersistentVolumeClaimList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is a list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Items []*IoK8sAPICoreV1PersistentVolumeClaim `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
type IoK8sAPICoreV1PersistentVolumeClaimSpec struct {
	// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []*string `json:"accessModes,omitempty"`
	// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
	DataSource    *IoK8sAPICoreV1TypedLocalObjectReference `json:"dataSource,omitempty"`
	DataSourceRef *IoK8sAPICoreV1TypedObjectReference      `json:"dataSourceRef,omitempty"`
	// ResourceRequirements describes the compute resource requirements.
	Resources *IoK8sAPICoreV1ResourceRequirements `json:"resources,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector,omitempty"`
	// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `json:"storageClassName,omitempty"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `json:"volumeMode,omitempty"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `json:"volumeName,omitempty"`
}

// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
type IoK8sAPICoreV1PersistentVolumeClaimSpecInput struct {
	// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []*string `json:"accessModes,omitempty"`
	// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
	DataSource    *IoK8sAPICoreV1TypedLocalObjectReferenceInput `json:"dataSource,omitempty"`
	DataSourceRef *IoK8sAPICoreV1TypedObjectReferenceInput      `json:"dataSourceRef,omitempty"`
	// ResourceRequirements describes the compute resource requirements.
	Resources *IoK8sAPICoreV1ResourceRequirementsInput `json:"resources,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"selector,omitempty"`
	// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `json:"storageClassName,omitempty"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `json:"volumeMode,omitempty"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `json:"volumeName,omitempty"`
}

// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
type IoK8sAPICoreV1PersistentVolumeClaimStatus struct {
	// accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []*string `json:"accessModes,omitempty"`
	// allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResources *string `json:"allocatedResources,omitempty"`
	// capacity represents the actual resources of the underlying volume.
	Capacity *string `json:"capacity,omitempty"`
	// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
	Conditions []*IoK8sAPICoreV1PersistentVolumeClaimCondition `json:"conditions,omitempty"`
	// phase represents the current phase of PersistentVolumeClaim.
	Phase *string `json:"phase,omitempty"`
	// resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	ResizeStatus *string `json:"resizeStatus,omitempty"`
}

// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
type IoK8sAPICoreV1PersistentVolumeClaimStatusInput struct {
	// accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []*string `json:"accessModes,omitempty"`
	// allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResources *string `json:"allocatedResources,omitempty"`
	// capacity represents the actual resources of the underlying volume.
	Capacity *string `json:"capacity,omitempty"`
	// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
	Conditions []*IoK8sAPICoreV1PersistentVolumeClaimConditionInput `json:"conditions,omitempty"`
	// phase represents the current phase of PersistentVolumeClaim.
	Phase *string `json:"phase,omitempty"`
	// resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	ResizeStatus *string `json:"resizeStatus,omitempty"`
}

// PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
type IoK8sAPICoreV1PersistentVolumeClaimTemplate struct {
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
	Spec *IoK8sAPICoreV1PersistentVolumeClaimSpec `json:"spec"`
}

// PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
type IoK8sAPICoreV1PersistentVolumeClaimTemplateInput struct {
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
	Spec *IoK8sAPICoreV1PersistentVolumeClaimSpecInput `json:"spec"`
}

// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
type IoK8sAPICoreV1PersistentVolumeClaimVolumeSource struct {
	// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName string `json:"claimName"`
	// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
	ReadOnly *bool `json:"readOnly,omitempty"`
}

// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
type IoK8sAPICoreV1PersistentVolumeClaimVolumeSourceInput struct {
	// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName string `json:"claimName"`
	// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
	ReadOnly *bool `json:"readOnly,omitempty"`
}

// PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
type IoK8sAPICoreV1PersistentVolumeInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// PersistentVolumeSpec is the specification of a persistent volume.
	Spec *IoK8sAPICoreV1PersistentVolumeSpecInput `json:"spec,omitempty"`
	// PersistentVolumeStatus is the current status of a persistent volume.
	Status *IoK8sAPICoreV1PersistentVolumeStatusInput `json:"status,omitempty"`
}

// PersistentVolumeList is a list of PersistentVolume items.
type IoK8sAPICoreV1PersistentVolumeList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is a list of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
	Items []*IoK8sAPICoreV1PersistentVolume `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// PersistentVolumeSpec is the specification of a persistent volume.
type IoK8sAPICoreV1PersistentVolumeSpec struct {
	// accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
	AccessModes []*string `json:"accessModes,omitempty"`
	// Represents a Persistent Disk resource in AWS.
	//
	// An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
	AwsElasticBlockStore *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource `json:"awsElasticBlockStore,omitempty"`
	// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk *IoK8sAPICoreV1AzureDiskVolumeSource `json:"azureDisk,omitempty"`
	// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile *IoK8sAPICoreV1AzureFilePersistentVolumeSource `json:"azureFile,omitempty"`
	// capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
	Capacity *string `json:"capacity,omitempty"`
	// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
	Cephfs *IoK8sAPICoreV1CephFSPersistentVolumeSource `json:"cephfs,omitempty"`
	// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
	Cinder *IoK8sAPICoreV1CinderPersistentVolumeSource `json:"cinder,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	ClaimRef *IoK8sAPICoreV1ObjectReference `json:"claimRef,omitempty"`
	// Represents storage that is managed by an external CSI volume driver (Beta feature)
	Csi *IoK8sAPICoreV1CSIPersistentVolumeSource `json:"csi,omitempty"`
	// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
	Fc *IoK8sAPICoreV1FCVolumeSource `json:"fc,omitempty"`
	// FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
	FlexVolume *IoK8sAPICoreV1FlexPersistentVolumeSource `json:"flexVolume,omitempty"`
	// Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
	Flocker *IoK8sAPICoreV1FlockerVolumeSource `json:"flocker,omitempty"`
	// Represents a Persistent Disk resource in Google Compute Engine.
	//
	// A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
	GcePersistentDisk *IoK8sAPICoreV1GCEPersistentDiskVolumeSource `json:"gcePersistentDisk,omitempty"`
	// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
	Glusterfs *IoK8sAPICoreV1GlusterfsPersistentVolumeSource `json:"glusterfs,omitempty"`
	// Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
	HostPath *IoK8sAPICoreV1HostPathVolumeSource `json:"hostPath,omitempty"`
	// ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
	Iscsi *IoK8sAPICoreV1ISCSIPersistentVolumeSource `json:"iscsi,omitempty"`
	// Local represents directly-attached storage with node affinity (Beta feature)
	Local *IoK8sAPICoreV1LocalVolumeSource `json:"local,omitempty"`
	// mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
	MountOptions []*string `json:"mountOptions,omitempty"`
	// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
	Nfs *IoK8sAPICoreV1NFSVolumeSource `json:"nfs,omitempty"`
	// VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
	NodeAffinity *IoK8sAPICoreV1VolumeNodeAffinity `json:"nodeAffinity,omitempty"`
	// persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
	PersistentVolumeReclaimPolicy *string `json:"persistentVolumeReclaimPolicy,omitempty"`
	// Represents a Photon Controller persistent disk resource.
	PhotonPersistentDisk *IoK8sAPICoreV1PhotonPersistentDiskVolumeSource `json:"photonPersistentDisk,omitempty"`
	// PortworxVolumeSource represents a Portworx volume resource.
	PortworxVolume *IoK8sAPICoreV1PortworxVolumeSource `json:"portworxVolume,omitempty"`
	// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
	Quobyte *IoK8sAPICoreV1QuobyteVolumeSource `json:"quobyte,omitempty"`
	// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
	Rbd *IoK8sAPICoreV1RBDPersistentVolumeSource `json:"rbd,omitempty"`
	// ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
	ScaleIo *IoK8sAPICoreV1ScaleIOPersistentVolumeSource `json:"scaleIO,omitempty"`
	// storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
	StorageClassName *string `json:"storageClassName,omitempty"`
	// Represents a StorageOS persistent volume resource.
	Storageos *IoK8sAPICoreV1StorageOSPersistentVolumeSource `json:"storageos,omitempty"`
	// volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
	VolumeMode *string `json:"volumeMode,omitempty"`
	// Represents a vSphere volume resource.
	VsphereVolume *IoK8sAPICoreV1VsphereVirtualDiskVolumeSource `json:"vsphereVolume,omitempty"`
}

// PersistentVolumeSpec is the specification of a persistent volume.
type IoK8sAPICoreV1PersistentVolumeSpecInput struct {
	// accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
	AccessModes []*string `json:"accessModes,omitempty"`
	// Represents a Persistent Disk resource in AWS.
	//
	// An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
	AwsElasticBlockStore *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSourceInput `json:"awsElasticBlockStore,omitempty"`
	// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk *IoK8sAPICoreV1AzureDiskVolumeSourceInput `json:"azureDisk,omitempty"`
	// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile *IoK8sAPICoreV1AzureFilePersistentVolumeSourceInput `json:"azureFile,omitempty"`
	// capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
	Capacity *string `json:"capacity,omitempty"`
	// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
	Cephfs *IoK8sAPICoreV1CephFSPersistentVolumeSourceInput `json:"cephfs,omitempty"`
	// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
	Cinder *IoK8sAPICoreV1CinderPersistentVolumeSourceInput `json:"cinder,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	ClaimRef *IoK8sAPICoreV1ObjectReferenceInput `json:"claimRef,omitempty"`
	// Represents storage that is managed by an external CSI volume driver (Beta feature)
	Csi *IoK8sAPICoreV1CSIPersistentVolumeSourceInput `json:"csi,omitempty"`
	// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
	Fc *IoK8sAPICoreV1FCVolumeSourceInput `json:"fc,omitempty"`
	// FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
	FlexVolume *IoK8sAPICoreV1FlexPersistentVolumeSourceInput `json:"flexVolume,omitempty"`
	// Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
	Flocker *IoK8sAPICoreV1FlockerVolumeSourceInput `json:"flocker,omitempty"`
	// Represents a Persistent Disk resource in Google Compute Engine.
	//
	// A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
	GcePersistentDisk *IoK8sAPICoreV1GCEPersistentDiskVolumeSourceInput `json:"gcePersistentDisk,omitempty"`
	// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
	Glusterfs *IoK8sAPICoreV1GlusterfsPersistentVolumeSourceInput `json:"glusterfs,omitempty"`
	// Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
	HostPath *IoK8sAPICoreV1HostPathVolumeSourceInput `json:"hostPath,omitempty"`
	// ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
	Iscsi *IoK8sAPICoreV1ISCSIPersistentVolumeSourceInput `json:"iscsi,omitempty"`
	// Local represents directly-attached storage with node affinity (Beta feature)
	Local *IoK8sAPICoreV1LocalVolumeSourceInput `json:"local,omitempty"`
	// mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
	MountOptions []*string `json:"mountOptions,omitempty"`
	// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
	Nfs *IoK8sAPICoreV1NFSVolumeSourceInput `json:"nfs,omitempty"`
	// VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
	NodeAffinity *IoK8sAPICoreV1VolumeNodeAffinityInput `json:"nodeAffinity,omitempty"`
	// persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
	PersistentVolumeReclaimPolicy *string `json:"persistentVolumeReclaimPolicy,omitempty"`
	// Represents a Photon Controller persistent disk resource.
	PhotonPersistentDisk *IoK8sAPICoreV1PhotonPersistentDiskVolumeSourceInput `json:"photonPersistentDisk,omitempty"`
	// PortworxVolumeSource represents a Portworx volume resource.
	PortworxVolume *IoK8sAPICoreV1PortworxVolumeSourceInput `json:"portworxVolume,omitempty"`
	// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
	Quobyte *IoK8sAPICoreV1QuobyteVolumeSourceInput `json:"quobyte,omitempty"`
	// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
	Rbd *IoK8sAPICoreV1RBDPersistentVolumeSourceInput `json:"rbd,omitempty"`
	// ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
	ScaleIo *IoK8sAPICoreV1ScaleIOPersistentVolumeSourceInput `json:"scaleIO,omitempty"`
	// storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
	StorageClassName *string `json:"storageClassName,omitempty"`
	// Represents a StorageOS persistent volume resource.
	Storageos *IoK8sAPICoreV1StorageOSPersistentVolumeSourceInput `json:"storageos,omitempty"`
	// volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
	VolumeMode *string `json:"volumeMode,omitempty"`
	// Represents a vSphere volume resource.
	VsphereVolume *IoK8sAPICoreV1VsphereVirtualDiskVolumeSourceInput `json:"vsphereVolume,omitempty"`
}

// PersistentVolumeStatus is the current status of a persistent volume.
type IoK8sAPICoreV1PersistentVolumeStatus struct {
	// message is a human-readable message indicating details about why the volume is in this state.
	Message *string `json:"message,omitempty"`
	// phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
	Phase *string `json:"phase,omitempty"`
	// reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
	Reason *string `json:"reason,omitempty"`
}

// PersistentVolumeStatus is the current status of a persistent volume.
type IoK8sAPICoreV1PersistentVolumeStatusInput struct {
	// message is a human-readable message indicating details about why the volume is in this state.
	Message *string `json:"message,omitempty"`
	// phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
	Phase *string `json:"phase,omitempty"`
	// reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
	Reason *string `json:"reason,omitempty"`
}

// Represents a Photon Controller persistent disk resource.
type IoK8sAPICoreV1PhotonPersistentDiskVolumeSource struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// pdID is the ID that identifies Photon Controller persistent disk
	PdID string `json:"pdID"`
}

// Represents a Photon Controller persistent disk resource.
type IoK8sAPICoreV1PhotonPersistentDiskVolumeSourceInput struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// pdID is the ID that identifies Photon Controller persistent disk
	PdID string `json:"pdID"`
}

// Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
type IoK8sAPICoreV1Pod struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// PodSpec is a description of a pod.
	Spec *IoK8sAPICoreV1PodSpec `json:"spec,omitempty"`
	// PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
	Status *IoK8sAPICoreV1PodStatus `json:"status,omitempty"`
}

// Pod affinity is a group of inter pod affinity scheduling rules.
type IoK8sAPICoreV1PodAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []*IoK8sAPICoreV1WeightedPodAffinityTerm `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []*IoK8sAPICoreV1PodAffinityTerm `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// Pod affinity is a group of inter pod affinity scheduling rules.
type IoK8sAPICoreV1PodAffinityInput struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []*IoK8sAPICoreV1WeightedPodAffinityTermInput `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []*IoK8sAPICoreV1PodAffinityTermInput `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type IoK8sAPICoreV1PodAffinityTerm struct {
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	LabelSelector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"labelSelector,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"namespaceSelector,omitempty"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces []*string `json:"namespaces,omitempty"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type IoK8sAPICoreV1PodAffinityTermInput struct {
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	LabelSelector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"labelSelector,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"namespaceSelector,omitempty"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces []*string `json:"namespaces,omitempty"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// Pod anti affinity is a group of inter pod anti affinity scheduling rules.
type IoK8sAPICoreV1PodAntiAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []*IoK8sAPICoreV1WeightedPodAffinityTerm `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []*IoK8sAPICoreV1PodAffinityTerm `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// Pod anti affinity is a group of inter pod anti affinity scheduling rules.
type IoK8sAPICoreV1PodAntiAffinityInput struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []*IoK8sAPICoreV1WeightedPodAffinityTermInput `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []*IoK8sAPICoreV1PodAffinityTermInput `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// PodCondition contains details for the current condition of this pod.
type IoK8sAPICoreV1PodCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastProbeTime *string `json:"lastProbeTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// Human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// Unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Status string `json:"status"`
	// Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Type string `json:"type"`
}

// PodCondition contains details for the current condition of this pod.
type IoK8sAPICoreV1PodConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastProbeTime *string `json:"lastProbeTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// Human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// Unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Status string `json:"status"`
	// Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Type string `json:"type"`
}

// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
type IoK8sAPICoreV1PodDNSConfig struct {
	// A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
	Nameservers []*string `json:"nameservers,omitempty"`
	// A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
	Options []*IoK8sAPICoreV1PodDNSConfigOption `json:"options,omitempty"`
	// A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
	Searches []*string `json:"searches,omitempty"`
}

// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
type IoK8sAPICoreV1PodDNSConfigInput struct {
	// A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
	Nameservers []*string `json:"nameservers,omitempty"`
	// A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
	Options []*IoK8sAPICoreV1PodDNSConfigOptionInput `json:"options,omitempty"`
	// A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
	Searches []*string `json:"searches,omitempty"`
}

// PodDNSConfigOption defines DNS resolver options of a pod.
type IoK8sAPICoreV1PodDNSConfigOption struct {
	// Required.
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// PodDNSConfigOption defines DNS resolver options of a pod.
type IoK8sAPICoreV1PodDNSConfigOptionInput struct {
	// Required.
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// IP address information for entries in the (plural) PodIPs field. Each entry includes:
//
//	IP: An IP address allocated to the pod. Routable at least within the cluster.
type IoK8sAPICoreV1PodIP struct {
	// ip is an IP address (IPv4 or IPv6) assigned to the pod
	IP *string `json:"ip,omitempty"`
}

// IP address information for entries in the (plural) PodIPs field. Each entry includes:
//
//	IP: An IP address allocated to the pod. Routable at least within the cluster.
type IoK8sAPICoreV1PodIPInput struct {
	// ip is an IP address (IPv4 or IPv6) assigned to the pod
	IP *string `json:"ip,omitempty"`
}

// Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
type IoK8sAPICoreV1PodInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// PodSpec is a description of a pod.
	Spec *IoK8sAPICoreV1PodSpecInput `json:"spec,omitempty"`
	// PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
	Status *IoK8sAPICoreV1PodStatusInput `json:"status,omitempty"`
}

// PodList is a list of Pods.
type IoK8sAPICoreV1PodList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// List of pods. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []*IoK8sAPICoreV1Pod `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// PodOS defines the OS parameters of a pod.
type IoK8sAPICoreV1PodOs struct {
	// Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
	Name string `json:"name"`
}

// PodOS defines the OS parameters of a pod.
type IoK8sAPICoreV1PodOSInput struct {
	// Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
	Name string `json:"name"`
}

// PodReadinessGate contains the reference to a pod condition
type IoK8sAPICoreV1PodReadinessGate struct {
	// ConditionType refers to a condition in the pod's condition list with matching type.
	ConditionType string `json:"conditionType"`
}

// PodReadinessGate contains the reference to a pod condition
type IoK8sAPICoreV1PodReadinessGateInput struct {
	// ConditionType refers to a condition in the pod's condition list with matching type.
	ConditionType string `json:"conditionType"`
}

// PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
type IoK8sAPICoreV1PodResourceClaim struct {
	// Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
	Name string `json:"name"`
	// ClaimSource describes a reference to a ResourceClaim.
	//
	// Exactly one of these fields should be set.  Consumers of this type must treat an empty object as if it has an unknown value.
	Source *IoK8sAPICoreV1ClaimSource `json:"source,omitempty"`
}

// PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
type IoK8sAPICoreV1PodResourceClaimInput struct {
	// Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
	Name string `json:"name"`
	// ClaimSource describes a reference to a ResourceClaim.
	//
	// Exactly one of these fields should be set.  Consumers of this type must treat an empty object as if it has an unknown value.
	Source *IoK8sAPICoreV1ClaimSourceInput `json:"source,omitempty"`
}

// PodSchedulingGate is associated to a Pod to guard its scheduling.
type IoK8sAPICoreV1PodSchedulingGate struct {
	// Name of the scheduling gate. Each scheduling gate must have a unique name field.
	Name string `json:"name"`
}

// PodSchedulingGate is associated to a Pod to guard its scheduling.
type IoK8sAPICoreV1PodSchedulingGateInput struct {
	// Name of the scheduling gate. Each scheduling gate must have a unique name field.
	Name string `json:"name"`
}

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
type IoK8sAPICoreV1PodSecurityContext struct {
	// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
	//
	// 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
	//
	// If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
	FsGroup *string `json:"fsGroup,omitempty"`
	// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
	FsGroupChangePolicy *string `json:"fsGroupChangePolicy,omitempty"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup *string `json:"runAsGroup,omitempty"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	RunAsUser *string `json:"runAsUser,omitempty"`
	// SELinuxOptions are the labels to be applied to the container
	SeLinuxOptions *IoK8sAPICoreV1SELinuxOptions `json:"seLinuxOptions,omitempty"`
	// SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
	SeccompProfile *IoK8sAPICoreV1SeccompProfile `json:"seccompProfile,omitempty"`
	// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
	SupplementalGroups []*string `json:"supplementalGroups,omitempty"`
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
	Sysctls []*IoK8sAPICoreV1Sysctl `json:"sysctls,omitempty"`
	// WindowsSecurityContextOptions contain Windows-specific options and credentials.
	WindowsOptions *IoK8sAPICoreV1WindowsSecurityContextOptions `json:"windowsOptions,omitempty"`
}

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
type IoK8sAPICoreV1PodSecurityContextInput struct {
	// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
	//
	// 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
	//
	// If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
	FsGroup *string `json:"fsGroup,omitempty"`
	// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
	FsGroupChangePolicy *string `json:"fsGroupChangePolicy,omitempty"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup *string `json:"runAsGroup,omitempty"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	RunAsUser *string `json:"runAsUser,omitempty"`
	// SELinuxOptions are the labels to be applied to the container
	SeLinuxOptions *IoK8sAPICoreV1SELinuxOptionsInput `json:"seLinuxOptions,omitempty"`
	// SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
	SeccompProfile *IoK8sAPICoreV1SeccompProfileInput `json:"seccompProfile,omitempty"`
	// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
	SupplementalGroups []*string `json:"supplementalGroups,omitempty"`
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
	Sysctls []*IoK8sAPICoreV1SysctlInput `json:"sysctls,omitempty"`
	// WindowsSecurityContextOptions contain Windows-specific options and credentials.
	WindowsOptions *IoK8sAPICoreV1WindowsSecurityContextOptionsInput `json:"windowsOptions,omitempty"`
}

// PodSpec is a description of a pod.
type IoK8sAPICoreV1PodSpec struct {
	// Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
	ActiveDeadlineSeconds *string `json:"activeDeadlineSeconds,omitempty"`
	// Affinity is a group of affinity scheduling rules.
	Affinity *IoK8sAPICoreV1Affinity `json:"affinity,omitempty"`
	// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
	AutomountServiceAccountToken *bool `json:"automountServiceAccountToken,omitempty"`
	// List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
	Containers []*IoK8sAPICoreV1Container `json:"containers"`
	// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
	DNSConfig *IoK8sAPICoreV1PodDNSConfig `json:"dnsConfig,omitempty"`
	// Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
	DNSPolicy *string `json:"dnsPolicy,omitempty"`
	// EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
	EnableServiceLinks *bool `json:"enableServiceLinks,omitempty"`
	// List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
	EphemeralContainers []*IoK8sAPICoreV1EphemeralContainer `json:"ephemeralContainers,omitempty"`
	// HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
	HostAliases []*IoK8sAPICoreV1HostAlias `json:"hostAliases,omitempty"`
	// Use the host's ipc namespace. Optional: Default to false.
	HostIPC *bool `json:"hostIPC,omitempty"`
	// Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
	HostNetwork *bool `json:"hostNetwork,omitempty"`
	// Use the host's pid namespace. Optional: Default to false.
	HostPid *bool `json:"hostPID,omitempty"`
	// Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
	HostUsers *bool `json:"hostUsers,omitempty"`
	// Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
	Hostname *string `json:"hostname,omitempty"`
	// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
	ImagePullSecrets []*IoK8sAPICoreV1LocalObjectReference `json:"imagePullSecrets,omitempty"`
	// List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
	InitContainers []*IoK8sAPICoreV1Container `json:"initContainers,omitempty"`
	// NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
	NodeName *string `json:"nodeName,omitempty"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
	NodeSelector *string `json:"nodeSelector,omitempty"`
	// PodOS defines the OS parameters of a pod.
	Os *IoK8sAPICoreV1PodOs `json:"os,omitempty"`
	// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
	Overhead *string `json:"overhead,omitempty"`
	// PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
	PreemptionPolicy *string `json:"preemptionPolicy,omitempty"`
	// The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
	Priority *int `json:"priority,omitempty"`
	// If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
	PriorityClassName *string `json:"priorityClassName,omitempty"`
	// If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
	ReadinessGates []*IoK8sAPICoreV1PodReadinessGate `json:"readinessGates,omitempty"`
	// ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
	//
	// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//
	// This field is immutable.
	ResourceClaims []*IoK8sAPICoreV1PodResourceClaim `json:"resourceClaims,omitempty"`
	// Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
	RestartPolicy *string `json:"restartPolicy,omitempty"`
	// RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
	RuntimeClassName *string `json:"runtimeClassName,omitempty"`
	// If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
	SchedulerName *string `json:"schedulerName,omitempty"`
	// SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.
	//
	// SchedulingGates can only be set at pod creation time, and be removed only afterwards.
	//
	// This is a beta feature enabled by the PodSchedulingReadiness feature gate.
	SchedulingGates []*IoK8sAPICoreV1PodSchedulingGate `json:"schedulingGates,omitempty"`
	// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
	SecurityContext *IoK8sAPICoreV1PodSecurityContext `json:"securityContext,omitempty"`
	// DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
	ServiceAccount *string `json:"serviceAccount,omitempty"`
	// ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
	ServiceAccountName *string `json:"serviceAccountName,omitempty"`
	// If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
	SetHostnameAsFqdn *bool `json:"setHostnameAsFQDN,omitempty"`
	// Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
	ShareProcessNamespace *bool `json:"shareProcessNamespace,omitempty"`
	// If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
	Subdomain *string `json:"subdomain,omitempty"`
	// Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
	TerminationGracePeriodSeconds *string `json:"terminationGracePeriodSeconds,omitempty"`
	// If specified, the pod's tolerations.
	Tolerations []*IoK8sAPICoreV1Toleration `json:"tolerations,omitempty"`
	// TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
	TopologySpreadConstraints []*IoK8sAPICoreV1TopologySpreadConstraint `json:"topologySpreadConstraints,omitempty"`
	// List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
	Volumes []*IoK8sAPICoreV1Volume `json:"volumes,omitempty"`
}

// PodSpec is a description of a pod.
type IoK8sAPICoreV1PodSpecInput struct {
	// Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
	ActiveDeadlineSeconds *string `json:"activeDeadlineSeconds,omitempty"`
	// Affinity is a group of affinity scheduling rules.
	Affinity *IoK8sAPICoreV1AffinityInput `json:"affinity,omitempty"`
	// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
	AutomountServiceAccountToken *bool `json:"automountServiceAccountToken,omitempty"`
	// List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
	Containers []*IoK8sAPICoreV1ContainerInput `json:"containers"`
	// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
	DNSConfig *IoK8sAPICoreV1PodDNSConfigInput `json:"dnsConfig,omitempty"`
	// Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
	DNSPolicy *string `json:"dnsPolicy,omitempty"`
	// EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
	EnableServiceLinks *bool `json:"enableServiceLinks,omitempty"`
	// List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
	EphemeralContainers []*IoK8sAPICoreV1EphemeralContainerInput `json:"ephemeralContainers,omitempty"`
	// HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
	HostAliases []*IoK8sAPICoreV1HostAliasInput `json:"hostAliases,omitempty"`
	// Use the host's ipc namespace. Optional: Default to false.
	HostIPC *bool `json:"hostIPC,omitempty"`
	// Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
	HostNetwork *bool `json:"hostNetwork,omitempty"`
	// Use the host's pid namespace. Optional: Default to false.
	HostPid *bool `json:"hostPID,omitempty"`
	// Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
	HostUsers *bool `json:"hostUsers,omitempty"`
	// Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
	Hostname *string `json:"hostname,omitempty"`
	// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
	ImagePullSecrets []*IoK8sAPICoreV1LocalObjectReferenceInput `json:"imagePullSecrets,omitempty"`
	// List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
	InitContainers []*IoK8sAPICoreV1ContainerInput `json:"initContainers,omitempty"`
	// NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
	NodeName *string `json:"nodeName,omitempty"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
	NodeSelector *string `json:"nodeSelector,omitempty"`
	// PodOS defines the OS parameters of a pod.
	Os *IoK8sAPICoreV1PodOSInput `json:"os,omitempty"`
	// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
	Overhead *string `json:"overhead,omitempty"`
	// PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
	PreemptionPolicy *string `json:"preemptionPolicy,omitempty"`
	// The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
	Priority *int `json:"priority,omitempty"`
	// If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
	PriorityClassName *string `json:"priorityClassName,omitempty"`
	// If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
	ReadinessGates []*IoK8sAPICoreV1PodReadinessGateInput `json:"readinessGates,omitempty"`
	// ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
	//
	// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//
	// This field is immutable.
	ResourceClaims []*IoK8sAPICoreV1PodResourceClaimInput `json:"resourceClaims,omitempty"`
	// Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
	RestartPolicy *string `json:"restartPolicy,omitempty"`
	// RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
	RuntimeClassName *string `json:"runtimeClassName,omitempty"`
	// If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
	SchedulerName *string `json:"schedulerName,omitempty"`
	// SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.
	//
	// SchedulingGates can only be set at pod creation time, and be removed only afterwards.
	//
	// This is a beta feature enabled by the PodSchedulingReadiness feature gate.
	SchedulingGates []*IoK8sAPICoreV1PodSchedulingGateInput `json:"schedulingGates,omitempty"`
	// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
	SecurityContext *IoK8sAPICoreV1PodSecurityContextInput `json:"securityContext,omitempty"`
	// DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
	ServiceAccount *string `json:"serviceAccount,omitempty"`
	// ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
	ServiceAccountName *string `json:"serviceAccountName,omitempty"`
	// If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
	SetHostnameAsFqdn *bool `json:"setHostnameAsFQDN,omitempty"`
	// Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
	ShareProcessNamespace *bool `json:"shareProcessNamespace,omitempty"`
	// If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
	Subdomain *string `json:"subdomain,omitempty"`
	// Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
	TerminationGracePeriodSeconds *string `json:"terminationGracePeriodSeconds,omitempty"`
	// If specified, the pod's tolerations.
	Tolerations []*IoK8sAPICoreV1TolerationInput `json:"tolerations,omitempty"`
	// TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
	TopologySpreadConstraints []*IoK8sAPICoreV1TopologySpreadConstraintInput `json:"topologySpreadConstraints,omitempty"`
	// List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
	Volumes []*IoK8sAPICoreV1VolumeInput `json:"volumes,omitempty"`
}

// PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
type IoK8sAPICoreV1PodStatus struct {
	// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Conditions []*IoK8sAPICoreV1PodCondition `json:"conditions,omitempty"`
	// The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	ContainerStatuses []*IoK8sAPICoreV1ContainerStatus `json:"containerStatuses,omitempty"`
	// Status for any ephemeral containers that have run in this pod.
	EphemeralContainerStatuses []*IoK8sAPICoreV1ContainerStatus `json:"ephemeralContainerStatuses,omitempty"`
	// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
	HostIP *string `json:"hostIP,omitempty"`
	// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	InitContainerStatuses []*IoK8sAPICoreV1ContainerStatus `json:"initContainerStatuses,omitempty"`
	// A human readable message indicating details about why the pod is in this condition.
	Message *string `json:"message,omitempty"`
	// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
	NominatedNodeName *string `json:"nominatedNodeName,omitempty"`
	// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
	//
	// Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
	//
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
	Phase *string `json:"phase,omitempty"`
	// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
	PodIP *string `json:"podIP,omitempty"`
	// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
	PodIPs []*IoK8sAPICoreV1PodIP `json:"podIPs,omitempty"`
	// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes
	QosClass *string `json:"qosClass,omitempty"`
	// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
	Reason *string `json:"reason,omitempty"`
	// Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to "Proposed"
	Resize *string `json:"resize,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	StartTime *string `json:"startTime,omitempty"`
}

// PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
type IoK8sAPICoreV1PodStatusInput struct {
	// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Conditions []*IoK8sAPICoreV1PodConditionInput `json:"conditions,omitempty"`
	// The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	ContainerStatuses []*IoK8sAPICoreV1ContainerStatusInput `json:"containerStatuses,omitempty"`
	// Status for any ephemeral containers that have run in this pod.
	EphemeralContainerStatuses []*IoK8sAPICoreV1ContainerStatusInput `json:"ephemeralContainerStatuses,omitempty"`
	// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
	HostIP *string `json:"hostIP,omitempty"`
	// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	InitContainerStatuses []*IoK8sAPICoreV1ContainerStatusInput `json:"initContainerStatuses,omitempty"`
	// A human readable message indicating details about why the pod is in this condition.
	Message *string `json:"message,omitempty"`
	// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
	NominatedNodeName *string `json:"nominatedNodeName,omitempty"`
	// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
	//
	// Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
	//
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
	Phase *string `json:"phase,omitempty"`
	// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
	PodIP *string `json:"podIP,omitempty"`
	// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
	PodIPs []*IoK8sAPICoreV1PodIPInput `json:"podIPs,omitempty"`
	// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes
	QosClass *string `json:"qosClass,omitempty"`
	// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
	Reason *string `json:"reason,omitempty"`
	// Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to "Proposed"
	Resize *string `json:"resize,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	StartTime *string `json:"startTime,omitempty"`
}

// PodTemplate describes a template for creating copies of a predefined pod.
type IoK8sAPICoreV1PodTemplate struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// PodTemplateSpec describes the data a pod should have when created from a template
	Template *IoK8sAPICoreV1PodTemplateSpec `json:"template,omitempty"`
}

// PodTemplate describes a template for creating copies of a predefined pod.
type IoK8sAPICoreV1PodTemplateInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// PodTemplateSpec describes the data a pod should have when created from a template
	Template *IoK8sAPICoreV1PodTemplateSpecInput `json:"template,omitempty"`
}

// PodTemplateList is a list of PodTemplates.
type IoK8sAPICoreV1PodTemplateList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// List of pod templates
	Items []*IoK8sAPICoreV1PodTemplate `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// PodTemplateSpec describes the data a pod should have when created from a template
type IoK8sAPICoreV1PodTemplateSpec struct {
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// PodSpec is a description of a pod.
	Spec *IoK8sAPICoreV1PodSpec `json:"spec,omitempty"`
}

// PodTemplateSpec describes the data a pod should have when created from a template
type IoK8sAPICoreV1PodTemplateSpecInput struct {
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// PodSpec is a description of a pod.
	Spec *IoK8sAPICoreV1PodSpecInput `json:"spec,omitempty"`
}

type IoK8sAPICoreV1PortStatus struct {
	// Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
	//   CamelCase names
	// - cloud provider specific error values must have names that comply with the
	//   format foo.example.com/CamelCase.
	Error *string `json:"error,omitempty"`
	// Port is the port number of the service port of which status is recorded here
	Port int `json:"port"`
	// Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
	Protocol string `json:"protocol"`
}

type IoK8sAPICoreV1PortStatusInput struct {
	// Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
	//   CamelCase names
	// - cloud provider specific error values must have names that comply with the
	//   format foo.example.com/CamelCase.
	Error *string `json:"error,omitempty"`
	// Port is the port number of the service port of which status is recorded here
	Port int `json:"port"`
	// Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
	Protocol string `json:"protocol"`
}

// PortworxVolumeSource represents a Portworx volume resource.
type IoK8sAPICoreV1PortworxVolumeSource struct {
	// fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// volumeID uniquely identifies a Portworx volume
	VolumeID string `json:"volumeID"`
}

// PortworxVolumeSource represents a Portworx volume resource.
type IoK8sAPICoreV1PortworxVolumeSourceInput struct {
	// fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// volumeID uniquely identifies a Portworx volume
	VolumeID string `json:"volumeID"`
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type IoK8sAPICoreV1PreferredSchedulingTerm struct {
	// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
	Preference *IoK8sAPICoreV1NodeSelectorTerm `json:"preference"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight int `json:"weight"`
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type IoK8sAPICoreV1PreferredSchedulingTermInput struct {
	// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
	Preference *IoK8sAPICoreV1NodeSelectorTermInput `json:"preference"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight int `json:"weight"`
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type IoK8sAPICoreV1Probe struct {
	// ExecAction describes a "run in container" action.
	Exec *IoK8sAPICoreV1ExecAction `json:"exec,omitempty"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int                      `json:"failureThreshold,omitempty"`
	Grpc             *IoK8sAPICoreV1GRPCAction `json:"grpc,omitempty"`
	// HTTPGetAction describes an action based on HTTP Get requests.
	HTTPGet *IoK8sAPICoreV1HTTPGetAction `json:"httpGet,omitempty"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int `json:"initialDelaySeconds,omitempty"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int `json:"periodSeconds,omitempty"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int `json:"successThreshold,omitempty"`
	// TCPSocketAction describes an action based on opening a socket
	TCPSocket *IoK8sAPICoreV1TCPSocketAction `json:"tcpSocket,omitempty"`
	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds *string `json:"terminationGracePeriodSeconds,omitempty"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty"`
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type IoK8sAPICoreV1ProbeInput struct {
	// ExecAction describes a "run in container" action.
	Exec *IoK8sAPICoreV1ExecActionInput `json:"exec,omitempty"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int                           `json:"failureThreshold,omitempty"`
	Grpc             *IoK8sAPICoreV1GRPCActionInput `json:"grpc,omitempty"`
	// HTTPGetAction describes an action based on HTTP Get requests.
	HTTPGet *IoK8sAPICoreV1HTTPGetActionInput `json:"httpGet,omitempty"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int `json:"initialDelaySeconds,omitempty"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int `json:"periodSeconds,omitempty"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int `json:"successThreshold,omitempty"`
	// TCPSocketAction describes an action based on opening a socket
	TCPSocket *IoK8sAPICoreV1TCPSocketActionInput `json:"tcpSocket,omitempty"`
	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds *string `json:"terminationGracePeriodSeconds,omitempty"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty"`
}

// Represents a projected volume source
type IoK8sAPICoreV1ProjectedVolumeSource struct {
	// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `json:"defaultMode,omitempty"`
	// sources is the list of volume projections
	Sources []*IoK8sAPICoreV1VolumeProjection `json:"sources,omitempty"`
}

// Represents a projected volume source
type IoK8sAPICoreV1ProjectedVolumeSourceInput struct {
	// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `json:"defaultMode,omitempty"`
	// sources is the list of volume projections
	Sources []*IoK8sAPICoreV1VolumeProjectionInput `json:"sources,omitempty"`
}

// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
type IoK8sAPICoreV1QuobyteVolumeSource struct {
	// group to map volume access to Default is no group
	Group *string `json:"group,omitempty"`
	// readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
	Registry string `json:"registry"`
	// tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
	Tenant *string `json:"tenant,omitempty"`
	// user to map volume access to Defaults to serivceaccount user
	User *string `json:"user,omitempty"`
	// volume is a string that references an already created Quobyte volume by name.
	Volume string `json:"volume"`
}

// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
type IoK8sAPICoreV1QuobyteVolumeSourceInput struct {
	// group to map volume access to Default is no group
	Group *string `json:"group,omitempty"`
	// readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
	Registry string `json:"registry"`
	// tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
	Tenant *string `json:"tenant,omitempty"`
	// user to map volume access to Defaults to serivceaccount user
	User *string `json:"user,omitempty"`
	// volume is a string that references an already created Quobyte volume by name.
	Volume string `json:"volume"`
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1RBDPersistentVolumeSource struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
	FsType *string `json:"fsType,omitempty"`
	// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image string `json:"image"`
	// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring *string `json:"keyring,omitempty"`
	// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors []*string `json:"monitors"`
	// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool *string `json:"pool,omitempty"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly *bool `json:"readOnly,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	SecretRef *IoK8sAPICoreV1SecretReference `json:"secretRef,omitempty"`
	// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User *string `json:"user,omitempty"`
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1RBDPersistentVolumeSourceInput struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
	FsType *string `json:"fsType,omitempty"`
	// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image string `json:"image"`
	// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring *string `json:"keyring,omitempty"`
	// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors []*string `json:"monitors"`
	// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool *string `json:"pool,omitempty"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly *bool `json:"readOnly,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	SecretRef *IoK8sAPICoreV1SecretReferenceInput `json:"secretRef,omitempty"`
	// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User *string `json:"user,omitempty"`
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1RBDVolumeSource struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
	FsType *string `json:"fsType,omitempty"`
	// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image string `json:"image"`
	// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring *string `json:"keyring,omitempty"`
	// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors []*string `json:"monitors"`
	// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool *string `json:"pool,omitempty"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly *bool `json:"readOnly,omitempty"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	SecretRef *IoK8sAPICoreV1LocalObjectReference `json:"secretRef,omitempty"`
	// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User *string `json:"user,omitempty"`
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1RBDVolumeSourceInput struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
	FsType *string `json:"fsType,omitempty"`
	// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image string `json:"image"`
	// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring *string `json:"keyring,omitempty"`
	// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors []*string `json:"monitors"`
	// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool *string `json:"pool,omitempty"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly *bool `json:"readOnly,omitempty"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	SecretRef *IoK8sAPICoreV1LocalObjectReferenceInput `json:"secretRef,omitempty"`
	// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User *string `json:"user,omitempty"`
}

// ReplicationController represents the configuration of a replication controller.
type IoK8sAPICoreV1ReplicationController struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// ReplicationControllerSpec is the specification of a replication controller.
	Spec *IoK8sAPICoreV1ReplicationControllerSpec `json:"spec,omitempty"`
	// ReplicationControllerStatus represents the current status of a replication controller.
	Status *IoK8sAPICoreV1ReplicationControllerStatus `json:"status,omitempty"`
}

// ReplicationControllerCondition describes the state of a replication controller at a certain point.
type IoK8sAPICoreV1ReplicationControllerCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// A human readable message indicating details about the transition.
	Message *string `json:"message,omitempty"`
	// The reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of replication controller condition.
	Type string `json:"type"`
}

// ReplicationControllerCondition describes the state of a replication controller at a certain point.
type IoK8sAPICoreV1ReplicationControllerConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// A human readable message indicating details about the transition.
	Message *string `json:"message,omitempty"`
	// The reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of replication controller condition.
	Type string `json:"type"`
}

// ReplicationController represents the configuration of a replication controller.
type IoK8sAPICoreV1ReplicationControllerInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// ReplicationControllerSpec is the specification of a replication controller.
	Spec *IoK8sAPICoreV1ReplicationControllerSpecInput `json:"spec,omitempty"`
	// ReplicationControllerStatus represents the current status of a replication controller.
	Status *IoK8sAPICoreV1ReplicationControllerStatusInput `json:"status,omitempty"`
}

// ReplicationControllerList is a collection of replication controllers.
type IoK8sAPICoreV1ReplicationControllerList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
	Items []*IoK8sAPICoreV1ReplicationController `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// ReplicationControllerSpec is the specification of a replication controller.
type IoK8sAPICoreV1ReplicationControllerSpec struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int `json:"minReadySeconds,omitempty"`
	// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
	Replicas *int `json:"replicas,omitempty"`
	// Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector *string `json:"selector,omitempty"`
	// PodTemplateSpec describes the data a pod should have when created from a template
	Template *IoK8sAPICoreV1PodTemplateSpec `json:"template,omitempty"`
}

// ReplicationControllerSpec is the specification of a replication controller.
type IoK8sAPICoreV1ReplicationControllerSpecInput struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int `json:"minReadySeconds,omitempty"`
	// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
	Replicas *int `json:"replicas,omitempty"`
	// Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector *string `json:"selector,omitempty"`
	// PodTemplateSpec describes the data a pod should have when created from a template
	Template *IoK8sAPICoreV1PodTemplateSpecInput `json:"template,omitempty"`
}

// ReplicationControllerStatus represents the current status of a replication controller.
type IoK8sAPICoreV1ReplicationControllerStatus struct {
	// The number of available replicas (ready for at least minReadySeconds) for this replication controller.
	AvailableReplicas *int `json:"availableReplicas,omitempty"`
	// Represents the latest available observations of a replication controller's current state.
	Conditions []*IoK8sAPICoreV1ReplicationControllerCondition `json:"conditions,omitempty"`
	// The number of pods that have labels matching the labels of the pod template of the replication controller.
	FullyLabeledReplicas *int `json:"fullyLabeledReplicas,omitempty"`
	// ObservedGeneration reflects the generation of the most recently observed replication controller.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
	// The number of ready replicas for this replication controller.
	ReadyReplicas *int `json:"readyReplicas,omitempty"`
	// Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
	Replicas int `json:"replicas"`
}

// ReplicationControllerStatus represents the current status of a replication controller.
type IoK8sAPICoreV1ReplicationControllerStatusInput struct {
	// The number of available replicas (ready for at least minReadySeconds) for this replication controller.
	AvailableReplicas *int `json:"availableReplicas,omitempty"`
	// Represents the latest available observations of a replication controller's current state.
	Conditions []*IoK8sAPICoreV1ReplicationControllerConditionInput `json:"conditions,omitempty"`
	// The number of pods that have labels matching the labels of the pod template of the replication controller.
	FullyLabeledReplicas *int `json:"fullyLabeledReplicas,omitempty"`
	// ObservedGeneration reflects the generation of the most recently observed replication controller.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
	// The number of ready replicas for this replication controller.
	ReadyReplicas *int `json:"readyReplicas,omitempty"`
	// Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
	Replicas int `json:"replicas"`
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type IoK8sAPICoreV1ResourceClaim struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name string `json:"name"`
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type IoK8sAPICoreV1ResourceClaimInput struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name string `json:"name"`
}

// ResourceFieldSelector represents container resources (cpu, memory) and their output format
type IoK8sAPICoreV1ResourceFieldSelector struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `json:"containerName,omitempty"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// ``` <quantity>        ::= <signedNumber><suffix>
	//
	// 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	//
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//
	// 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	//
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//
	// 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	//
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//
	// - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
	//
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//
	// - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	Divisor *string `json:"divisor,omitempty"`
	// Required: resource to select
	Resource string `json:"resource"`
}

// ResourceFieldSelector represents container resources (cpu, memory) and their output format
type IoK8sAPICoreV1ResourceFieldSelectorInput struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `json:"containerName,omitempty"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// ``` <quantity>        ::= <signedNumber><suffix>
	//
	// 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	//
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//
	// 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	//
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//
	// 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	//
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//
	// - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
	//
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//
	// - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	Divisor *string `json:"divisor,omitempty"`
	// Required: resource to select
	Resource string `json:"resource"`
}

// ResourceQuota sets aggregate quota restrictions enforced per namespace
type IoK8sAPICoreV1ResourceQuota struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
	Spec *IoK8sAPICoreV1ResourceQuotaSpec `json:"spec,omitempty"`
	// ResourceQuotaStatus defines the enforced hard limits and observed use.
	Status *IoK8sAPICoreV1ResourceQuotaStatus `json:"status,omitempty"`
}

// ResourceQuota sets aggregate quota restrictions enforced per namespace
type IoK8sAPICoreV1ResourceQuotaInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
	Spec *IoK8sAPICoreV1ResourceQuotaSpecInput `json:"spec,omitempty"`
	// ResourceQuotaStatus defines the enforced hard limits and observed use.
	Status *IoK8sAPICoreV1ResourceQuotaStatusInput `json:"status,omitempty"`
}

// ResourceQuotaList is a list of ResourceQuota items.
type IoK8sAPICoreV1ResourceQuotaList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Items []*IoK8sAPICoreV1ResourceQuota `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
type IoK8sAPICoreV1ResourceQuotaSpec struct {
	// hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Hard *string `json:"hard,omitempty"`
	// A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
	ScopeSelector *IoK8sAPICoreV1ScopeSelector `json:"scopeSelector,omitempty"`
	// A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
	Scopes []*string `json:"scopes,omitempty"`
}

// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
type IoK8sAPICoreV1ResourceQuotaSpecInput struct {
	// hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Hard *string `json:"hard,omitempty"`
	// A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
	ScopeSelector *IoK8sAPICoreV1ScopeSelectorInput `json:"scopeSelector,omitempty"`
	// A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
	Scopes []*string `json:"scopes,omitempty"`
}

// ResourceQuotaStatus defines the enforced hard limits and observed use.
type IoK8sAPICoreV1ResourceQuotaStatus struct {
	// Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Hard *string `json:"hard,omitempty"`
	// Used is the current observed total usage of the resource in the namespace.
	Used *string `json:"used,omitempty"`
}

// ResourceQuotaStatus defines the enforced hard limits and observed use.
type IoK8sAPICoreV1ResourceQuotaStatusInput struct {
	// Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Hard *string `json:"hard,omitempty"`
	// Used is the current observed total usage of the resource in the namespace.
	Used *string `json:"used,omitempty"`
}

// ResourceRequirements describes the compute resource requirements.
type IoK8sAPICoreV1ResourceRequirements struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//
	// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//
	// This field is immutable. It can only be set for containers.
	Claims []*IoK8sAPICoreV1ResourceClaim `json:"claims,omitempty"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits *string `json:"limits,omitempty"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests *string `json:"requests,omitempty"`
}

// ResourceRequirements describes the compute resource requirements.
type IoK8sAPICoreV1ResourceRequirementsInput struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//
	// This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//
	// This field is immutable. It can only be set for containers.
	Claims []*IoK8sAPICoreV1ResourceClaimInput `json:"claims,omitempty"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits *string `json:"limits,omitempty"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests *string `json:"requests,omitempty"`
}

// SELinuxOptions are the labels to be applied to the container
type IoK8sAPICoreV1SELinuxOptions struct {
	// Level is SELinux level label that applies to the container.
	Level *string `json:"level,omitempty"`
	// Role is a SELinux role label that applies to the container.
	Role *string `json:"role,omitempty"`
	// Type is a SELinux type label that applies to the container.
	Type *string `json:"type,omitempty"`
	// User is a SELinux user label that applies to the container.
	User *string `json:"user,omitempty"`
}

// SELinuxOptions are the labels to be applied to the container
type IoK8sAPICoreV1SELinuxOptionsInput struct {
	// Level is SELinux level label that applies to the container.
	Level *string `json:"level,omitempty"`
	// Role is a SELinux role label that applies to the container.
	Role *string `json:"role,omitempty"`
	// Type is a SELinux type label that applies to the container.
	Type *string `json:"type,omitempty"`
	// User is a SELinux user label that applies to the container.
	User *string `json:"user,omitempty"`
}

// ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
type IoK8sAPICoreV1ScaleIOPersistentVolumeSource struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
	FsType *string `json:"fsType,omitempty"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway string `json:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain *string `json:"protectionDomain,omitempty"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	SecretRef *IoK8sAPICoreV1SecretReference `json:"secretRef"`
	// sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
	SslEnabled *bool `json:"sslEnabled,omitempty"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode *string `json:"storageMode,omitempty"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool *string `json:"storagePool,omitempty"`
	// system is the name of the storage system as configured in ScaleIO.
	System string `json:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName *string `json:"volumeName,omitempty"`
}

// ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
type IoK8sAPICoreV1ScaleIOPersistentVolumeSourceInput struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
	FsType *string `json:"fsType,omitempty"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway string `json:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain *string `json:"protectionDomain,omitempty"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	SecretRef *IoK8sAPICoreV1SecretReferenceInput `json:"secretRef"`
	// sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
	SslEnabled *bool `json:"sslEnabled,omitempty"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode *string `json:"storageMode,omitempty"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool *string `json:"storagePool,omitempty"`
	// system is the name of the storage system as configured in ScaleIO.
	System string `json:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName *string `json:"volumeName,omitempty"`
}

// ScaleIOVolumeSource represents a persistent ScaleIO volume
type IoK8sAPICoreV1ScaleIOVolumeSource struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
	FsType *string `json:"fsType,omitempty"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway string `json:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain *string `json:"protectionDomain,omitempty"`
	// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	SecretRef *IoK8sAPICoreV1LocalObjectReference `json:"secretRef"`
	// sslEnabled Flag enable/disable SSL communication with Gateway, default false
	SslEnabled *bool `json:"sslEnabled,omitempty"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode *string `json:"storageMode,omitempty"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool *string `json:"storagePool,omitempty"`
	// system is the name of the storage system as configured in ScaleIO.
	System string `json:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName *string `json:"volumeName,omitempty"`
}

// ScaleIOVolumeSource represents a persistent ScaleIO volume
type IoK8sAPICoreV1ScaleIOVolumeSourceInput struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
	FsType *string `json:"fsType,omitempty"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway string `json:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain *string `json:"protectionDomain,omitempty"`
	// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	SecretRef *IoK8sAPICoreV1LocalObjectReferenceInput `json:"secretRef"`
	// sslEnabled Flag enable/disable SSL communication with Gateway, default false
	SslEnabled *bool `json:"sslEnabled,omitempty"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode *string `json:"storageMode,omitempty"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool *string `json:"storagePool,omitempty"`
	// system is the name of the storage system as configured in ScaleIO.
	System string `json:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName *string `json:"volumeName,omitempty"`
}

// A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
type IoK8sAPICoreV1ScopeSelector struct {
	// A list of scope selector requirements by scope of the resources.
	MatchExpressions []*IoK8sAPICoreV1ScopedResourceSelectorRequirement `json:"matchExpressions,omitempty"`
}

// A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
type IoK8sAPICoreV1ScopeSelectorInput struct {
	// A list of scope selector requirements by scope of the resources.
	MatchExpressions []*IoK8sAPICoreV1ScopedResourceSelectorRequirementInput `json:"matchExpressions,omitempty"`
}

// A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
type IoK8sAPICoreV1ScopedResourceSelectorRequirement struct {
	// Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
	Operator string `json:"operator"`
	// The name of the scope that the selector applies to.
	ScopeName string `json:"scopeName"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []*string `json:"values,omitempty"`
}

// A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
type IoK8sAPICoreV1ScopedResourceSelectorRequirementInput struct {
	// Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
	Operator string `json:"operator"`
	// The name of the scope that the selector applies to.
	ScopeName string `json:"scopeName"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []*string `json:"values,omitempty"`
}

// SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
type IoK8sAPICoreV1SeccompProfile struct {
	// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`
	// type indicates which kind of seccomp profile will be applied. Valid options are:
	//
	// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
	Type string `json:"type"`
}

// SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
type IoK8sAPICoreV1SeccompProfileInput struct {
	// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`
	// type indicates which kind of seccomp profile will be applied. Valid options are:
	//
	// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
	Type string `json:"type"`
}

// Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
type IoK8sAPICoreV1Secret struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
	Data *string `json:"data,omitempty"`
	// Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
	Immutable *bool `json:"immutable,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
	StringData *string `json:"stringData,omitempty"`
	// Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
	Type *string `json:"type,omitempty"`
}

// SecretEnvSource selects a Secret to populate the environment variables with.
//
// The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type IoK8sAPICoreV1SecretEnvSource struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// Specify whether the Secret must be defined
	Optional *bool `json:"optional,omitempty"`
}

// SecretEnvSource selects a Secret to populate the environment variables with.
//
// The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type IoK8sAPICoreV1SecretEnvSourceInput struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// Specify whether the Secret must be defined
	Optional *bool `json:"optional,omitempty"`
}

// Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
type IoK8sAPICoreV1SecretInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
	Data *string `json:"data,omitempty"`
	// Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
	Immutable *bool `json:"immutable,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
	StringData *string `json:"stringData,omitempty"`
	// Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
	Type *string `json:"type,omitempty"`
}

// SecretKeySelector selects a key of a Secret.
type IoK8sAPICoreV1SecretKeySelector struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `json:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `json:"optional,omitempty"`
}

// SecretKeySelector selects a key of a Secret.
type IoK8sAPICoreV1SecretKeySelectorInput struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `json:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `json:"optional,omitempty"`
}

// SecretList is a list of Secret.
type IoK8sAPICoreV1SecretList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret
	Items []*IoK8sAPICoreV1Secret `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// Adapts a secret into a projected volume.
//
// The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
type IoK8sAPICoreV1SecretProjection struct {
	// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []*IoK8sAPICoreV1KeyToPath `json:"items,omitempty"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// optional field specify whether the Secret or its key must be defined
	Optional *bool `json:"optional,omitempty"`
}

// Adapts a secret into a projected volume.
//
// The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
type IoK8sAPICoreV1SecretProjectionInput struct {
	// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []*IoK8sAPICoreV1KeyToPathInput `json:"items,omitempty"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// optional field specify whether the Secret or its key must be defined
	Optional *bool `json:"optional,omitempty"`
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type IoK8sAPICoreV1SecretReference struct {
	// name is unique within a namespace to reference a secret resource.
	Name *string `json:"name,omitempty"`
	// namespace defines the space within which the secret name must be unique.
	Namespace *string `json:"namespace,omitempty"`
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type IoK8sAPICoreV1SecretReferenceInput struct {
	// name is unique within a namespace to reference a secret resource.
	Name *string `json:"name,omitempty"`
	// namespace defines the space within which the secret name must be unique.
	Namespace *string `json:"namespace,omitempty"`
}

// Adapts a Secret into a volume.
//
// The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1SecretVolumeSource struct {
	// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `json:"defaultMode,omitempty"`
	// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []*IoK8sAPICoreV1KeyToPath `json:"items,omitempty"`
	// optional field specify whether the Secret or its keys must be defined
	Optional *bool `json:"optional,omitempty"`
	// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName *string `json:"secretName,omitempty"`
}

// Adapts a Secret into a volume.
//
// The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
type IoK8sAPICoreV1SecretVolumeSourceInput struct {
	// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `json:"defaultMode,omitempty"`
	// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []*IoK8sAPICoreV1KeyToPathInput `json:"items,omitempty"`
	// optional field specify whether the Secret or its keys must be defined
	Optional *bool `json:"optional,omitempty"`
	// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName *string `json:"secretName,omitempty"`
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
type IoK8sAPICoreV1SecurityContext struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`
	// Adds and removes POSIX capabilities from running containers.
	Capabilities *IoK8sAPICoreV1Capabilities `json:"capabilities,omitempty"`
	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
	Privileged *bool `json:"privileged,omitempty"`
	// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
	ProcMount *string `json:"procMount,omitempty"`
	// Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup *string `json:"runAsGroup,omitempty"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	RunAsUser *string `json:"runAsUser,omitempty"`
	// SELinuxOptions are the labels to be applied to the container
	SeLinuxOptions *IoK8sAPICoreV1SELinuxOptions `json:"seLinuxOptions,omitempty"`
	// SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
	SeccompProfile *IoK8sAPICoreV1SeccompProfile `json:"seccompProfile,omitempty"`
	// WindowsSecurityContextOptions contain Windows-specific options and credentials.
	WindowsOptions *IoK8sAPICoreV1WindowsSecurityContextOptions `json:"windowsOptions,omitempty"`
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
type IoK8sAPICoreV1SecurityContextInput struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`
	// Adds and removes POSIX capabilities from running containers.
	Capabilities *IoK8sAPICoreV1CapabilitiesInput `json:"capabilities,omitempty"`
	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
	Privileged *bool `json:"privileged,omitempty"`
	// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
	ProcMount *string `json:"procMount,omitempty"`
	// Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup *string `json:"runAsGroup,omitempty"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	RunAsUser *string `json:"runAsUser,omitempty"`
	// SELinuxOptions are the labels to be applied to the container
	SeLinuxOptions *IoK8sAPICoreV1SELinuxOptionsInput `json:"seLinuxOptions,omitempty"`
	// SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
	SeccompProfile *IoK8sAPICoreV1SeccompProfileInput `json:"seccompProfile,omitempty"`
	// WindowsSecurityContextOptions contain Windows-specific options and credentials.
	WindowsOptions *IoK8sAPICoreV1WindowsSecurityContextOptionsInput `json:"windowsOptions,omitempty"`
}

// Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
type IoK8sAPICoreV1Service struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// ServiceSpec describes the attributes that a user creates on a service.
	Spec *IoK8sAPICoreV1ServiceSpec `json:"spec,omitempty"`
	// ServiceStatus represents the current status of a service.
	Status *IoK8sAPICoreV1ServiceStatus `json:"status,omitempty"`
}

// ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
type IoK8sAPICoreV1ServiceAccount struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
	AutomountServiceAccountToken *bool `json:"automountServiceAccountToken,omitempty"`
	// ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
	ImagePullSecrets []*IoK8sAPICoreV1LocalObjectReference `json:"imagePullSecrets,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret
	Secrets []*IoK8sAPICoreV1ObjectReference `json:"secrets,omitempty"`
}

// ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
type IoK8sAPICoreV1ServiceAccountInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
	AutomountServiceAccountToken *bool `json:"automountServiceAccountToken,omitempty"`
	// ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
	ImagePullSecrets []*IoK8sAPICoreV1LocalObjectReferenceInput `json:"imagePullSecrets,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret
	Secrets []*IoK8sAPICoreV1ObjectReferenceInput `json:"secrets,omitempty"`
}

// ServiceAccountList is a list of ServiceAccount objects
type IoK8sAPICoreV1ServiceAccountList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
	Items []*IoK8sAPICoreV1ServiceAccount `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
type IoK8sAPICoreV1ServiceAccountTokenProjection struct {
	// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
	Audience *string `json:"audience,omitempty"`
	// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
	ExpirationSeconds *string `json:"expirationSeconds,omitempty"`
	// path is the path relative to the mount point of the file to project the token into.
	Path string `json:"path"`
}

// ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
type IoK8sAPICoreV1ServiceAccountTokenProjectionInput struct {
	// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
	Audience *string `json:"audience,omitempty"`
	// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
	ExpirationSeconds *string `json:"expirationSeconds,omitempty"`
	// path is the path relative to the mount point of the file to project the token into.
	Path string `json:"path"`
}

// Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
type IoK8sAPICoreV1ServiceInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// ServiceSpec describes the attributes that a user creates on a service.
	Spec *IoK8sAPICoreV1ServiceSpecInput `json:"spec,omitempty"`
	// ServiceStatus represents the current status of a service.
	Status *IoK8sAPICoreV1ServiceStatusInput `json:"status,omitempty"`
}

// ServiceList holds a list of services.
type IoK8sAPICoreV1ServiceList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// List of services
	Items []*IoK8sAPICoreV1Service `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// ServicePort contains information on service's port.
type IoK8sAPICoreV1ServicePort struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol *string `json:"appProtocol,omitempty"`
	// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
	Name *string `json:"name,omitempty"`
	// The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `json:"nodePort,omitempty"`
	// The port that will be exposed by this service.
	Port int `json:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
	Protocol *string `json:"protocol,omitempty"`
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	TargetPort *string `json:"targetPort,omitempty"`
}

// ServicePort contains information on service's port.
type IoK8sAPICoreV1ServicePortInput struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol *string `json:"appProtocol,omitempty"`
	// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
	Name *string `json:"name,omitempty"`
	// The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `json:"nodePort,omitempty"`
	// The port that will be exposed by this service.
	Port int `json:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
	Protocol *string `json:"protocol,omitempty"`
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	TargetPort *string `json:"targetPort,omitempty"`
}

// ServiceSpec describes the attributes that a user creates on a service.
type IoK8sAPICoreV1ServiceSpec struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts *bool `json:"allocateLoadBalancerNodePorts,omitempty"`
	// clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `json:"clusterIP,omitempty"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs []*string `json:"clusterIPs,omitempty"`
	// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
	ExternalIPs []*string `json:"externalIPs,omitempty"`
	// externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName *string `json:"externalName,omitempty"`
	// externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.
	ExternalTrafficPolicy *string `json:"externalTrafficPolicy,omitempty"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.
	HealthCheckNodePort *int `json:"healthCheckNodePort,omitempty"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).
	InternalTrafficPolicy *string `json:"internalTrafficPolicy,omitempty"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	IPFamilies []*string `json:"ipFamilies,omitempty"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
	IPFamilyPolicy *string `json:"ipFamilyPolicy,omitempty"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass *string `json:"loadBalancerClass,omitempty"`
	// Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations, and it cannot support dual-stack. As of Kubernetes v1.24, users are encouraged to use implementation-specific annotations when available. This field may be removed in a future API version.
	LoadBalancerIP *string `json:"loadBalancerIP,omitempty"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges []*string `json:"loadBalancerSourceRanges,omitempty"`
	// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []*IoK8sAPICoreV1ServicePort `json:"ports,omitempty"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses *bool `json:"publishNotReadyAddresses,omitempty"`
	// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector *string `json:"selector,omitempty"`
	// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity *string `json:"sessionAffinity,omitempty"`
	// SessionAffinityConfig represents the configurations of session affinity.
	SessionAffinityConfig *IoK8sAPICoreV1SessionAffinityConfig `json:"sessionAffinityConfig,omitempty"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `json:"type,omitempty"`
}

// ServiceSpec describes the attributes that a user creates on a service.
type IoK8sAPICoreV1ServiceSpecInput struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts *bool `json:"allocateLoadBalancerNodePorts,omitempty"`
	// clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `json:"clusterIP,omitempty"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs []*string `json:"clusterIPs,omitempty"`
	// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
	ExternalIPs []*string `json:"externalIPs,omitempty"`
	// externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName *string `json:"externalName,omitempty"`
	// externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.
	ExternalTrafficPolicy *string `json:"externalTrafficPolicy,omitempty"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.
	HealthCheckNodePort *int `json:"healthCheckNodePort,omitempty"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).
	InternalTrafficPolicy *string `json:"internalTrafficPolicy,omitempty"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	IPFamilies []*string `json:"ipFamilies,omitempty"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
	IPFamilyPolicy *string `json:"ipFamilyPolicy,omitempty"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass *string `json:"loadBalancerClass,omitempty"`
	// Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations, and it cannot support dual-stack. As of Kubernetes v1.24, users are encouraged to use implementation-specific annotations when available. This field may be removed in a future API version.
	LoadBalancerIP *string `json:"loadBalancerIP,omitempty"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges []*string `json:"loadBalancerSourceRanges,omitempty"`
	// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []*IoK8sAPICoreV1ServicePortInput `json:"ports,omitempty"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses *bool `json:"publishNotReadyAddresses,omitempty"`
	// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector *string `json:"selector,omitempty"`
	// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity *string `json:"sessionAffinity,omitempty"`
	// SessionAffinityConfig represents the configurations of session affinity.
	SessionAffinityConfig *IoK8sAPICoreV1SessionAffinityConfigInput `json:"sessionAffinityConfig,omitempty"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `json:"type,omitempty"`
}

// ServiceStatus represents the current status of a service.
type IoK8sAPICoreV1ServiceStatus struct {
	// Current service state
	Conditions []*IoK8sApimachineryPkgApisMetaV1Condition `json:"conditions,omitempty"`
	// LoadBalancerStatus represents the status of a load-balancer.
	LoadBalancer *IoK8sAPICoreV1LoadBalancerStatus `json:"loadBalancer,omitempty"`
}

// ServiceStatus represents the current status of a service.
type IoK8sAPICoreV1ServiceStatusInput struct {
	// Current service state
	Conditions []*IoK8sApimachineryPkgApisMetaV1ConditionInput `json:"conditions,omitempty"`
	// LoadBalancerStatus represents the status of a load-balancer.
	LoadBalancer *IoK8sAPICoreV1LoadBalancerStatusInput `json:"loadBalancer,omitempty"`
}

// SessionAffinityConfig represents the configurations of session affinity.
type IoK8sAPICoreV1SessionAffinityConfig struct {
	// ClientIPConfig represents the configurations of Client IP based session affinity.
	ClientIP *IoK8sAPICoreV1ClientIPConfig `json:"clientIP,omitempty"`
}

// SessionAffinityConfig represents the configurations of session affinity.
type IoK8sAPICoreV1SessionAffinityConfigInput struct {
	// ClientIPConfig represents the configurations of Client IP based session affinity.
	ClientIP *IoK8sAPICoreV1ClientIPConfigInput `json:"clientIP,omitempty"`
}

// Represents a StorageOS persistent volume resource.
type IoK8sAPICoreV1StorageOSPersistentVolumeSource struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	SecretRef *IoK8sAPICoreV1ObjectReference `json:"secretRef,omitempty"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
	VolumeName *string `json:"volumeName,omitempty"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace *string `json:"volumeNamespace,omitempty"`
}

// Represents a StorageOS persistent volume resource.
type IoK8sAPICoreV1StorageOSPersistentVolumeSourceInput struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	SecretRef *IoK8sAPICoreV1ObjectReferenceInput `json:"secretRef,omitempty"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
	VolumeName *string `json:"volumeName,omitempty"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace *string `json:"volumeNamespace,omitempty"`
}

// Represents a StorageOS persistent volume resource.
type IoK8sAPICoreV1StorageOSVolumeSource struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	SecretRef *IoK8sAPICoreV1LocalObjectReference `json:"secretRef,omitempty"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
	VolumeName *string `json:"volumeName,omitempty"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace *string `json:"volumeNamespace,omitempty"`
}

// Represents a StorageOS persistent volume resource.
type IoK8sAPICoreV1StorageOSVolumeSourceInput struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	SecretRef *IoK8sAPICoreV1LocalObjectReferenceInput `json:"secretRef,omitempty"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
	VolumeName *string `json:"volumeName,omitempty"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace *string `json:"volumeNamespace,omitempty"`
}

// Sysctl defines a kernel parameter to be set
type IoK8sAPICoreV1Sysctl struct {
	// Name of a property to set
	Name string `json:"name"`
	// Value of a property to set
	Value string `json:"value"`
}

// Sysctl defines a kernel parameter to be set
type IoK8sAPICoreV1SysctlInput struct {
	// Name of a property to set
	Name string `json:"name"`
	// Value of a property to set
	Value string `json:"value"`
}

// TCPSocketAction describes an action based on opening a socket
type IoK8sAPICoreV1TCPSocketAction struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `json:"host,omitempty"`
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`
}

// TCPSocketAction describes an action based on opening a socket
type IoK8sAPICoreV1TCPSocketActionInput struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `json:"host,omitempty"`
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port string `json:"port"`
}

// The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
type IoK8sAPICoreV1Taint struct {
	// Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
	Effect string `json:"effect"`
	// Required. The taint key to be applied to a node.
	Key string `json:"key"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	TimeAdded *string `json:"timeAdded,omitempty"`
	// The taint value corresponding to the taint key.
	Value *string `json:"value,omitempty"`
}

// The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
type IoK8sAPICoreV1TaintInput struct {
	// Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
	Effect string `json:"effect"`
	// Required. The taint key to be applied to a node.
	Key string `json:"key"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	TimeAdded *string `json:"timeAdded,omitempty"`
	// The taint value corresponding to the taint key.
	Value *string `json:"value,omitempty"`
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type IoK8sAPICoreV1Toleration struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `json:"effect,omitempty"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `json:"key,omitempty"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `json:"operator,omitempty"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *string `json:"tolerationSeconds,omitempty"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `json:"value,omitempty"`
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type IoK8sAPICoreV1TolerationInput struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `json:"effect,omitempty"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `json:"key,omitempty"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `json:"operator,omitempty"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *string `json:"tolerationSeconds,omitempty"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `json:"value,omitempty"`
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type IoK8sAPICoreV1TopologySelectorLabelRequirement struct {
	// The label key that the selector applies to.
	Key string `json:"key"`
	// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
	Values []*string `json:"values"`
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type IoK8sAPICoreV1TopologySelectorLabelRequirementInput struct {
	// The label key that the selector applies to.
	Key string `json:"key"`
	// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
	Values []*string `json:"values"`
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type IoK8sAPICoreV1TopologySelectorTerm struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions []*IoK8sAPICoreV1TopologySelectorLabelRequirement `json:"matchLabelExpressions,omitempty"`
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type IoK8sAPICoreV1TopologySelectorTermInput struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions []*IoK8sAPICoreV1TopologySelectorLabelRequirementInput `json:"matchLabelExpressions,omitempty"`
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type IoK8sAPICoreV1TopologySpreadConstraint struct {
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	LabelSelector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"labelSelector,omitempty"`
	// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
	//
	// This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
	MatchLabelKeys []*string `json:"matchLabelKeys,omitempty"`
	// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew int `json:"maxSkew"`
	// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
	//
	// For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
	//
	// This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
	MinDomains *int `json:"minDomains,omitempty"`
	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
	//
	// If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy *string `json:"nodeAffinityPolicy,omitempty"`
	// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
	//
	// If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy *string `json:"nodeTaintsPolicy,omitempty"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
	TopologyKey string `json:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
	//   but giving higher precedence to topologies that would help reduce the
	//   skew.
	// A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
	WhenUnsatisfiable string `json:"whenUnsatisfiable"`
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type IoK8sAPICoreV1TopologySpreadConstraintInput struct {
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	LabelSelector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"labelSelector,omitempty"`
	// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
	//
	// This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
	MatchLabelKeys []*string `json:"matchLabelKeys,omitempty"`
	// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew int `json:"maxSkew"`
	// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
	//
	// For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
	//
	// This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
	MinDomains *int `json:"minDomains,omitempty"`
	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
	//
	// If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy *string `json:"nodeAffinityPolicy,omitempty"`
	// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
	//
	// If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy *string `json:"nodeTaintsPolicy,omitempty"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
	TopologyKey string `json:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
	//   but giving higher precedence to topologies that would help reduce the
	//   skew.
	// A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
	WhenUnsatisfiable string `json:"whenUnsatisfiable"`
}

// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
type IoK8sAPICoreV1TypedLocalObjectReference struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	APIGroup *string `json:"apiGroup,omitempty"`
	// Kind is the type of resource being referenced
	Kind string `json:"kind"`
	// Name is the name of resource being referenced
	Name string `json:"name"`
}

// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
type IoK8sAPICoreV1TypedLocalObjectReferenceInput struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	APIGroup *string `json:"apiGroup,omitempty"`
	// Kind is the type of resource being referenced
	Kind string `json:"kind"`
	// Name is the name of resource being referenced
	Name string `json:"name"`
}

type IoK8sAPICoreV1TypedObjectReference struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	APIGroup *string `json:"apiGroup,omitempty"`
	// Kind is the type of resource being referenced
	Kind string `json:"kind"`
	// Name is the name of resource being referenced
	Name string `json:"name"`
	// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace *string `json:"namespace,omitempty"`
}

type IoK8sAPICoreV1TypedObjectReferenceInput struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	APIGroup *string `json:"apiGroup,omitempty"`
	// Kind is the type of resource being referenced
	Kind string `json:"kind"`
	// Name is the name of resource being referenced
	Name string `json:"name"`
	// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace *string `json:"namespace,omitempty"`
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type IoK8sAPICoreV1Volume struct {
	// Represents a Persistent Disk resource in AWS.
	//
	// An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
	AwsElasticBlockStore *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource `json:"awsElasticBlockStore,omitempty"`
	// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk *IoK8sAPICoreV1AzureDiskVolumeSource `json:"azureDisk,omitempty"`
	// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile *IoK8sAPICoreV1AzureFileVolumeSource `json:"azureFile,omitempty"`
	// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
	Cephfs *IoK8sAPICoreV1CephFSVolumeSource `json:"cephfs,omitempty"`
	// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
	Cinder *IoK8sAPICoreV1CinderVolumeSource `json:"cinder,omitempty"`
	// Adapts a ConfigMap into a volume.
	//
	// The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
	ConfigMap *IoK8sAPICoreV1ConfigMapVolumeSource `json:"configMap,omitempty"`
	// Represents a source location of a volume to mount, managed by an external CSI driver
	Csi *IoK8sAPICoreV1CSIVolumeSource `json:"csi,omitempty"`
	// DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
	DownwardAPI *IoK8sAPICoreV1DownwardAPIVolumeSource `json:"downwardAPI,omitempty"`
	// Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
	EmptyDir *IoK8sAPICoreV1EmptyDirVolumeSource `json:"emptyDir,omitempty"`
	// Represents an ephemeral volume that is handled by a normal storage driver.
	Ephemeral *IoK8sAPICoreV1EphemeralVolumeSource `json:"ephemeral,omitempty"`
	// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
	Fc *IoK8sAPICoreV1FCVolumeSource `json:"fc,omitempty"`
	// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
	FlexVolume *IoK8sAPICoreV1FlexVolumeSource `json:"flexVolume,omitempty"`
	// Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
	Flocker *IoK8sAPICoreV1FlockerVolumeSource `json:"flocker,omitempty"`
	// Represents a Persistent Disk resource in Google Compute Engine.
	//
	// A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
	GcePersistentDisk *IoK8sAPICoreV1GCEPersistentDiskVolumeSource `json:"gcePersistentDisk,omitempty"`
	// Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
	//
	// DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
	GitRepo *IoK8sAPICoreV1GitRepoVolumeSource `json:"gitRepo,omitempty"`
	// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
	Glusterfs *IoK8sAPICoreV1GlusterfsVolumeSource `json:"glusterfs,omitempty"`
	// Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
	HostPath *IoK8sAPICoreV1HostPathVolumeSource `json:"hostPath,omitempty"`
	// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
	Iscsi *IoK8sAPICoreV1ISCSIVolumeSource `json:"iscsi,omitempty"`
	// name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `json:"name"`
	// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
	Nfs *IoK8sAPICoreV1NFSVolumeSource `json:"nfs,omitempty"`
	// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
	PersistentVolumeClaim *IoK8sAPICoreV1PersistentVolumeClaimVolumeSource `json:"persistentVolumeClaim,omitempty"`
	// Represents a Photon Controller persistent disk resource.
	PhotonPersistentDisk *IoK8sAPICoreV1PhotonPersistentDiskVolumeSource `json:"photonPersistentDisk,omitempty"`
	// PortworxVolumeSource represents a Portworx volume resource.
	PortworxVolume *IoK8sAPICoreV1PortworxVolumeSource `json:"portworxVolume,omitempty"`
	// Represents a projected volume source
	Projected *IoK8sAPICoreV1ProjectedVolumeSource `json:"projected,omitempty"`
	// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
	Quobyte *IoK8sAPICoreV1QuobyteVolumeSource `json:"quobyte,omitempty"`
	// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
	Rbd *IoK8sAPICoreV1RBDVolumeSource `json:"rbd,omitempty"`
	// ScaleIOVolumeSource represents a persistent ScaleIO volume
	ScaleIo *IoK8sAPICoreV1ScaleIOVolumeSource `json:"scaleIO,omitempty"`
	// Adapts a Secret into a volume.
	//
	// The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
	Secret *IoK8sAPICoreV1SecretVolumeSource `json:"secret,omitempty"`
	// Represents a StorageOS persistent volume resource.
	Storageos *IoK8sAPICoreV1StorageOSVolumeSource `json:"storageos,omitempty"`
	// Represents a vSphere volume resource.
	VsphereVolume *IoK8sAPICoreV1VsphereVirtualDiskVolumeSource `json:"vsphereVolume,omitempty"`
}

// volumeDevice describes a mapping of a raw block device within a container.
type IoK8sAPICoreV1VolumeDevice struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath string `json:"devicePath"`
	// name must match the name of a persistentVolumeClaim in the pod
	Name string `json:"name"`
}

// volumeDevice describes a mapping of a raw block device within a container.
type IoK8sAPICoreV1VolumeDeviceInput struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath string `json:"devicePath"`
	// name must match the name of a persistentVolumeClaim in the pod
	Name string `json:"name"`
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type IoK8sAPICoreV1VolumeInput struct {
	// Represents a Persistent Disk resource in AWS.
	//
	// An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
	AwsElasticBlockStore *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSourceInput `json:"awsElasticBlockStore,omitempty"`
	// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk *IoK8sAPICoreV1AzureDiskVolumeSourceInput `json:"azureDisk,omitempty"`
	// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile *IoK8sAPICoreV1AzureFileVolumeSourceInput `json:"azureFile,omitempty"`
	// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
	Cephfs *IoK8sAPICoreV1CephFSVolumeSourceInput `json:"cephfs,omitempty"`
	// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
	Cinder *IoK8sAPICoreV1CinderVolumeSourceInput `json:"cinder,omitempty"`
	// Adapts a ConfigMap into a volume.
	//
	// The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
	ConfigMap *IoK8sAPICoreV1ConfigMapVolumeSourceInput `json:"configMap,omitempty"`
	// Represents a source location of a volume to mount, managed by an external CSI driver
	Csi *IoK8sAPICoreV1CSIVolumeSourceInput `json:"csi,omitempty"`
	// DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
	DownwardAPI *IoK8sAPICoreV1DownwardAPIVolumeSourceInput `json:"downwardAPI,omitempty"`
	// Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
	EmptyDir *IoK8sAPICoreV1EmptyDirVolumeSourceInput `json:"emptyDir,omitempty"`
	// Represents an ephemeral volume that is handled by a normal storage driver.
	Ephemeral *IoK8sAPICoreV1EphemeralVolumeSourceInput `json:"ephemeral,omitempty"`
	// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
	Fc *IoK8sAPICoreV1FCVolumeSourceInput `json:"fc,omitempty"`
	// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
	FlexVolume *IoK8sAPICoreV1FlexVolumeSourceInput `json:"flexVolume,omitempty"`
	// Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
	Flocker *IoK8sAPICoreV1FlockerVolumeSourceInput `json:"flocker,omitempty"`
	// Represents a Persistent Disk resource in Google Compute Engine.
	//
	// A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
	GcePersistentDisk *IoK8sAPICoreV1GCEPersistentDiskVolumeSourceInput `json:"gcePersistentDisk,omitempty"`
	// Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
	//
	// DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
	GitRepo *IoK8sAPICoreV1GitRepoVolumeSourceInput `json:"gitRepo,omitempty"`
	// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
	Glusterfs *IoK8sAPICoreV1GlusterfsVolumeSourceInput `json:"glusterfs,omitempty"`
	// Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
	HostPath *IoK8sAPICoreV1HostPathVolumeSourceInput `json:"hostPath,omitempty"`
	// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
	Iscsi *IoK8sAPICoreV1ISCSIVolumeSourceInput `json:"iscsi,omitempty"`
	// name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `json:"name"`
	// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
	Nfs *IoK8sAPICoreV1NFSVolumeSourceInput `json:"nfs,omitempty"`
	// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
	PersistentVolumeClaim *IoK8sAPICoreV1PersistentVolumeClaimVolumeSourceInput `json:"persistentVolumeClaim,omitempty"`
	// Represents a Photon Controller persistent disk resource.
	PhotonPersistentDisk *IoK8sAPICoreV1PhotonPersistentDiskVolumeSourceInput `json:"photonPersistentDisk,omitempty"`
	// PortworxVolumeSource represents a Portworx volume resource.
	PortworxVolume *IoK8sAPICoreV1PortworxVolumeSourceInput `json:"portworxVolume,omitempty"`
	// Represents a projected volume source
	Projected *IoK8sAPICoreV1ProjectedVolumeSourceInput `json:"projected,omitempty"`
	// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
	Quobyte *IoK8sAPICoreV1QuobyteVolumeSourceInput `json:"quobyte,omitempty"`
	// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
	Rbd *IoK8sAPICoreV1RBDVolumeSourceInput `json:"rbd,omitempty"`
	// ScaleIOVolumeSource represents a persistent ScaleIO volume
	ScaleIo *IoK8sAPICoreV1ScaleIOVolumeSourceInput `json:"scaleIO,omitempty"`
	// Adapts a Secret into a volume.
	//
	// The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
	Secret *IoK8sAPICoreV1SecretVolumeSourceInput `json:"secret,omitempty"`
	// Represents a StorageOS persistent volume resource.
	Storageos *IoK8sAPICoreV1StorageOSVolumeSourceInput `json:"storageos,omitempty"`
	// Represents a vSphere volume resource.
	VsphereVolume *IoK8sAPICoreV1VsphereVirtualDiskVolumeSourceInput `json:"vsphereVolume,omitempty"`
}

// VolumeMount describes a mounting of a Volume within a container.
type IoK8sAPICoreV1VolumeMount struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath string `json:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation *string `json:"mountPropagation,omitempty"`
	// This must match the Name of a Volume.
	Name string `json:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath *string `json:"subPath,omitempty"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr *string `json:"subPathExpr,omitempty"`
}

// VolumeMount describes a mounting of a Volume within a container.
type IoK8sAPICoreV1VolumeMountInput struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath string `json:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation *string `json:"mountPropagation,omitempty"`
	// This must match the Name of a Volume.
	Name string `json:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath *string `json:"subPath,omitempty"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr *string `json:"subPathExpr,omitempty"`
}

// VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
type IoK8sAPICoreV1VolumeNodeAffinity struct {
	// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
	Required *IoK8sAPICoreV1NodeSelector `json:"required,omitempty"`
}

// VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
type IoK8sAPICoreV1VolumeNodeAffinityInput struct {
	// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
	Required *IoK8sAPICoreV1NodeSelectorInput `json:"required,omitempty"`
}

// Projection that may be projected along with other supported volume types
type IoK8sAPICoreV1VolumeProjection struct {
	// Adapts a ConfigMap into a projected volume.
	//
	// The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
	ConfigMap *IoK8sAPICoreV1ConfigMapProjection `json:"configMap,omitempty"`
	// Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
	DownwardAPI *IoK8sAPICoreV1DownwardAPIProjection `json:"downwardAPI,omitempty"`
	// Adapts a secret into a projected volume.
	//
	// The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
	Secret *IoK8sAPICoreV1SecretProjection `json:"secret,omitempty"`
	// ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
	ServiceAccountToken *IoK8sAPICoreV1ServiceAccountTokenProjection `json:"serviceAccountToken,omitempty"`
}

// Projection that may be projected along with other supported volume types
type IoK8sAPICoreV1VolumeProjectionInput struct {
	// Adapts a ConfigMap into a projected volume.
	//
	// The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
	ConfigMap *IoK8sAPICoreV1ConfigMapProjectionInput `json:"configMap,omitempty"`
	// Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
	DownwardAPI *IoK8sAPICoreV1DownwardAPIProjectionInput `json:"downwardAPI,omitempty"`
	// Adapts a secret into a projected volume.
	//
	// The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
	Secret *IoK8sAPICoreV1SecretProjectionInput `json:"secret,omitempty"`
	// ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
	ServiceAccountToken *IoK8sAPICoreV1ServiceAccountTokenProjectionInput `json:"serviceAccountToken,omitempty"`
}

// Represents a vSphere volume resource.
type IoK8sAPICoreV1VsphereVirtualDiskVolumeSource struct {
	// fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
	StoragePolicyID *string `json:"storagePolicyID,omitempty"`
	// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
	StoragePolicyName *string `json:"storagePolicyName,omitempty"`
	// volumePath is the path that identifies vSphere volume vmdk
	VolumePath string `json:"volumePath"`
}

// Represents a vSphere volume resource.
type IoK8sAPICoreV1VsphereVirtualDiskVolumeSourceInput struct {
	// fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
	StoragePolicyID *string `json:"storagePolicyID,omitempty"`
	// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
	StoragePolicyName *string `json:"storagePolicyName,omitempty"`
	// volumePath is the path that identifies vSphere volume vmdk
	VolumePath string `json:"volumePath"`
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type IoK8sAPICoreV1WeightedPodAffinityTerm struct {
	// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
	PodAffinityTerm *IoK8sAPICoreV1PodAffinityTerm `json:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight int `json:"weight"`
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type IoK8sAPICoreV1WeightedPodAffinityTermInput struct {
	// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
	PodAffinityTerm *IoK8sAPICoreV1PodAffinityTermInput `json:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight int `json:"weight"`
}

// WindowsSecurityContextOptions contain Windows-specific options and credentials.
type IoK8sAPICoreV1WindowsSecurityContextOptions struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`
	// HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess *bool `json:"hostProcess,omitempty"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// WindowsSecurityContextOptions contain Windows-specific options and credentials.
type IoK8sAPICoreV1WindowsSecurityContextOptionsInput struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`
	// HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess *bool `json:"hostProcess,omitempty"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// Endpoint represents a single logical "backend" implementing a service.
type IoK8sAPIDiscoveryV1Endpoint struct {
	// addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100. These are all assumed to be fungible and clients may choose to only use the first element. Refer to: https://issue.k8s.io/106267
	Addresses []*string `json:"addresses"`
	// EndpointConditions represents the current condition of an endpoint.
	Conditions *IoK8sAPIDiscoveryV1EndpointConditions `json:"conditions,omitempty"`
	// deprecatedTopology contains topology information part of the v1beta1 API. This field is deprecated, and will be removed when the v1beta1 API is removed (no sooner than kubernetes v1.24).  While this field can hold values, it is not writable through the v1 API, and any attempts to write to it will be silently ignored. Topology information can be found in the zone and nodeName fields instead.
	DeprecatedTopology *string `json:"deprecatedTopology,omitempty"`
	// EndpointHints provides hints describing how an endpoint should be consumed.
	Hints *IoK8sAPIDiscoveryV1EndpointHints `json:"hints,omitempty"`
	// hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.
	Hostname *string `json:"hostname,omitempty"`
	// nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node.
	NodeName *string `json:"nodeName,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	TargetRef *IoK8sAPICoreV1ObjectReference `json:"targetRef,omitempty"`
	// zone is the name of the Zone this endpoint exists in.
	Zone *string `json:"zone,omitempty"`
}

// EndpointConditions represents the current condition of an endpoint.
type IoK8sAPIDiscoveryV1EndpointConditions struct {
	// ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be "true" for terminating endpoints, except when the normal readiness behavior is being explicitly overridden, for example when the associated Service has set the publishNotReadyAddresses flag.
	Ready *bool `json:"ready,omitempty"`
	// serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition.
	Serving *bool `json:"serving,omitempty"`
	// terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating.
	Terminating *bool `json:"terminating,omitempty"`
}

// EndpointConditions represents the current condition of an endpoint.
type IoK8sAPIDiscoveryV1EndpointConditionsInput struct {
	// ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be "true" for terminating endpoints, except when the normal readiness behavior is being explicitly overridden, for example when the associated Service has set the publishNotReadyAddresses flag.
	Ready *bool `json:"ready,omitempty"`
	// serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition.
	Serving *bool `json:"serving,omitempty"`
	// terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating.
	Terminating *bool `json:"terminating,omitempty"`
}

// EndpointHints provides hints describing how an endpoint should be consumed.
type IoK8sAPIDiscoveryV1EndpointHints struct {
	// forZones indicates the zone(s) this endpoint should be consumed by to enable topology aware routing.
	ForZones []*IoK8sAPIDiscoveryV1ForZone `json:"forZones,omitempty"`
}

// EndpointHints provides hints describing how an endpoint should be consumed.
type IoK8sAPIDiscoveryV1EndpointHintsInput struct {
	// forZones indicates the zone(s) this endpoint should be consumed by to enable topology aware routing.
	ForZones []*IoK8sAPIDiscoveryV1ForZoneInput `json:"forZones,omitempty"`
}

// Endpoint represents a single logical "backend" implementing a service.
type IoK8sAPIDiscoveryV1EndpointInput struct {
	// addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100. These are all assumed to be fungible and clients may choose to only use the first element. Refer to: https://issue.k8s.io/106267
	Addresses []*string `json:"addresses"`
	// EndpointConditions represents the current condition of an endpoint.
	Conditions *IoK8sAPIDiscoveryV1EndpointConditionsInput `json:"conditions,omitempty"`
	// deprecatedTopology contains topology information part of the v1beta1 API. This field is deprecated, and will be removed when the v1beta1 API is removed (no sooner than kubernetes v1.24).  While this field can hold values, it is not writable through the v1 API, and any attempts to write to it will be silently ignored. Topology information can be found in the zone and nodeName fields instead.
	DeprecatedTopology *string `json:"deprecatedTopology,omitempty"`
	// EndpointHints provides hints describing how an endpoint should be consumed.
	Hints *IoK8sAPIDiscoveryV1EndpointHintsInput `json:"hints,omitempty"`
	// hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.
	Hostname *string `json:"hostname,omitempty"`
	// nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node.
	NodeName *string `json:"nodeName,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	TargetRef *IoK8sAPICoreV1ObjectReferenceInput `json:"targetRef,omitempty"`
	// zone is the name of the Zone this endpoint exists in.
	Zone *string `json:"zone,omitempty"`
}

// EndpointPort represents a Port used by an EndpointSlice
type IoK8sAPIDiscoveryV1EndpointPort struct {
	// The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 over cleartext as described in https://www.rfc-editor.org/rfc/rfc7540
	//
	// * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol *string `json:"appProtocol,omitempty"`
	// name represents the name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is dervied from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.
	Name *string `json:"name,omitempty"`
	// port represents the port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.
	Port *int `json:"port,omitempty"`
	// protocol represents the IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
	Protocol *string `json:"protocol,omitempty"`
}

// EndpointPort represents a Port used by an EndpointSlice
type IoK8sAPIDiscoveryV1EndpointPortInput struct {
	// The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 over cleartext as described in https://www.rfc-editor.org/rfc/rfc7540
	//
	// * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
	AppProtocol *string `json:"appProtocol,omitempty"`
	// name represents the name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is dervied from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.
	Name *string `json:"name,omitempty"`
	// port represents the port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.
	Port *int `json:"port,omitempty"`
	// protocol represents the IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
	Protocol *string `json:"protocol,omitempty"`
}

// EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.
type IoK8sAPIDiscoveryV1EndpointSlice struct {
	// addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name.
	AddressType string `json:"addressType"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.
	Endpoints []*IoK8sAPIDiscoveryV1Endpoint `json:"endpoints"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates "all ports". Each slice may include a maximum of 100 ports.
	Ports []*IoK8sAPIDiscoveryV1EndpointPort `json:"ports,omitempty"`
}

// EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.
type IoK8sAPIDiscoveryV1EndpointSliceInput struct {
	// addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name.
	AddressType string `json:"addressType"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.
	Endpoints []*IoK8sAPIDiscoveryV1EndpointInput `json:"endpoints"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates "all ports". Each slice may include a maximum of 100 ports.
	Ports []*IoK8sAPIDiscoveryV1EndpointPortInput `json:"ports,omitempty"`
}

// EndpointSliceList represents a list of endpoint slices
type IoK8sAPIDiscoveryV1EndpointSliceList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is the list of endpoint slices
	Items []*IoK8sAPIDiscoveryV1EndpointSlice `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// ForZone provides information about which zones should consume this endpoint.
type IoK8sAPIDiscoveryV1ForZone struct {
	// name represents the name of the zone.
	Name string `json:"name"`
}

// ForZone provides information about which zones should consume this endpoint.
type IoK8sAPIDiscoveryV1ForZoneInput struct {
	// name represents the name of the zone.
	Name string `json:"name"`
}

// Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
type IoK8sAPIEventsV1Event struct {
	// action is what action was taken/failed regarding to the regarding object. It is machine-readable. This field cannot be empty for new Events and it can have at most 128 characters.
	Action *string `json:"action,omitempty"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.
	DeprecatedCount *int `json:"deprecatedCount,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	DeprecatedFirstTimestamp *string `json:"deprecatedFirstTimestamp,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	DeprecatedLastTimestamp *string `json:"deprecatedLastTimestamp,omitempty"`
	// EventSource contains information for an event.
	DeprecatedSource *IoK8sAPICoreV1EventSource `json:"deprecatedSource,omitempty"`
	// MicroTime is version of Time with microsecond level precision.
	EventTime string `json:"eventTime"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// note is a human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.
	Note *string `json:"note,omitempty"`
	// reason is why the action was taken. It is human-readable. This field cannot be empty for new Events and it can have at most 128 characters.
	Reason *string `json:"reason,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	Regarding *IoK8sAPICoreV1ObjectReference `json:"regarding,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	Related *IoK8sAPICoreV1ObjectReference `json:"related,omitempty"`
	// reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`. This field cannot be empty for new Events.
	ReportingController *string `json:"reportingController,omitempty"`
	// reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be empty for new Events and it can have at most 128 characters.
	ReportingInstance *string `json:"reportingInstance,omitempty"`
	// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. How often to update the EventSeries is up to the event reporters. The default event reporter in "k8s.io/client-go/tools/events/event_broadcaster.go" shows how this struct is updated on heartbeats and can guide customized reporter implementations.
	Series *IoK8sAPIEventsV1EventSeries `json:"series,omitempty"`
	// type is the type of this event (Normal, Warning), new types could be added in the future. It is machine-readable. This field cannot be empty for new Events.
	Type *string `json:"type,omitempty"`
}

// Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
type IoK8sAPIEventsV1EventInput struct {
	// action is what action was taken/failed regarding to the regarding object. It is machine-readable. This field cannot be empty for new Events and it can have at most 128 characters.
	Action *string `json:"action,omitempty"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.
	DeprecatedCount *int `json:"deprecatedCount,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	DeprecatedFirstTimestamp *string `json:"deprecatedFirstTimestamp,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	DeprecatedLastTimestamp *string `json:"deprecatedLastTimestamp,omitempty"`
	// EventSource contains information for an event.
	DeprecatedSource *IoK8sAPICoreV1EventSourceInput `json:"deprecatedSource,omitempty"`
	// MicroTime is version of Time with microsecond level precision.
	EventTime string `json:"eventTime"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// note is a human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.
	Note *string `json:"note,omitempty"`
	// reason is why the action was taken. It is human-readable. This field cannot be empty for new Events and it can have at most 128 characters.
	Reason *string `json:"reason,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	Regarding *IoK8sAPICoreV1ObjectReferenceInput `json:"regarding,omitempty"`
	// ObjectReference contains enough information to let you inspect or modify the referred object.
	Related *IoK8sAPICoreV1ObjectReferenceInput `json:"related,omitempty"`
	// reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`. This field cannot be empty for new Events.
	ReportingController *string `json:"reportingController,omitempty"`
	// reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be empty for new Events and it can have at most 128 characters.
	ReportingInstance *string `json:"reportingInstance,omitempty"`
	// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. How often to update the EventSeries is up to the event reporters. The default event reporter in "k8s.io/client-go/tools/events/event_broadcaster.go" shows how this struct is updated on heartbeats and can guide customized reporter implementations.
	Series *IoK8sAPIEventsV1EventSeriesInput `json:"series,omitempty"`
	// type is the type of this event (Normal, Warning), new types could be added in the future. It is machine-readable. This field cannot be empty for new Events.
	Type *string `json:"type,omitempty"`
}

// EventList is a list of Event objects.
type IoK8sAPIEventsV1EventList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is a list of schema objects.
	Items []*IoK8sAPIEventsV1Event `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. How often to update the EventSeries is up to the event reporters. The default event reporter in "k8s.io/client-go/tools/events/event_broadcaster.go" shows how this struct is updated on heartbeats and can guide customized reporter implementations.
type IoK8sAPIEventsV1EventSeries struct {
	// count is the number of occurrences in this series up to the last heartbeat time.
	Count int `json:"count"`
	// MicroTime is version of Time with microsecond level precision.
	LastObservedTime string `json:"lastObservedTime"`
}

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. How often to update the EventSeries is up to the event reporters. The default event reporter in "k8s.io/client-go/tools/events/event_broadcaster.go" shows how this struct is updated on heartbeats and can guide customized reporter implementations.
type IoK8sAPIEventsV1EventSeriesInput struct {
	// count is the number of occurrences in this series up to the last heartbeat time.
	Count int `json:"count"`
	// MicroTime is version of Time with microsecond level precision.
	LastObservedTime string `json:"lastObservedTime"`
}

// FlowDistinguisherMethod specifies the method of a flow distinguisher.
type IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod struct {
	// `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
	Type string `json:"type"`
}

// FlowDistinguisherMethod specifies the method of a flow distinguisher.
type IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethodInput struct {
	// `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
	Type string `json:"type"`
}

// FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
type IoK8sAPIFlowcontrolV1beta2FlowSchema struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// FlowSchemaSpec describes how the FlowSchema's specification looks like.
	Spec *IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec `json:"spec,omitempty"`
	// FlowSchemaStatus represents the current state of a FlowSchema.
	Status *IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus `json:"status,omitempty"`
}

// FlowSchemaCondition describes conditions for a FlowSchema.
type IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// `message` is a human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status *string `json:"status,omitempty"`
	// `type` is the type of the condition. Required.
	Type *string `json:"type,omitempty"`
}

// FlowSchemaCondition describes conditions for a FlowSchema.
type IoK8sAPIFlowcontrolV1beta2FlowSchemaConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// `message` is a human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status *string `json:"status,omitempty"`
	// `type` is the type of the condition. Required.
	Type *string `json:"type,omitempty"`
}

// FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
type IoK8sAPIFlowcontrolV1beta2FlowSchemaInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// FlowSchemaSpec describes how the FlowSchema's specification looks like.
	Spec *IoK8sAPIFlowcontrolV1beta2FlowSchemaSpecInput `json:"spec,omitempty"`
	// FlowSchemaStatus represents the current state of a FlowSchema.
	Status *IoK8sAPIFlowcontrolV1beta2FlowSchemaStatusInput `json:"status,omitempty"`
}

// FlowSchemaList is a list of FlowSchema objects.
type IoK8sAPIFlowcontrolV1beta2FlowSchemaList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// `items` is a list of FlowSchemas.
	Items []*IoK8sAPIFlowcontrolV1beta2FlowSchema `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// FlowSchemaSpec describes how the FlowSchema's specification looks like.
type IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec struct {
	// FlowDistinguisherMethod specifies the method of a flow distinguisher.
	DistinguisherMethod *IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod `json:"distinguisherMethod,omitempty"`
	// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
	MatchingPrecedence *int `json:"matchingPrecedence,omitempty"`
	// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
	PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference `json:"priorityLevelConfiguration"`
	// `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
	Rules []*IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects `json:"rules,omitempty"`
}

// FlowSchemaSpec describes how the FlowSchema's specification looks like.
type IoK8sAPIFlowcontrolV1beta2FlowSchemaSpecInput struct {
	// FlowDistinguisherMethod specifies the method of a flow distinguisher.
	DistinguisherMethod *IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethodInput `json:"distinguisherMethod,omitempty"`
	// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
	MatchingPrecedence *int `json:"matchingPrecedence,omitempty"`
	// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
	PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReferenceInput `json:"priorityLevelConfiguration"`
	// `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
	Rules []*IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjectsInput `json:"rules,omitempty"`
}

// FlowSchemaStatus represents the current state of a FlowSchema.
type IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus struct {
	// `conditions` is a list of the current states of FlowSchema.
	Conditions []*IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition `json:"conditions,omitempty"`
}

// FlowSchemaStatus represents the current state of a FlowSchema.
type IoK8sAPIFlowcontrolV1beta2FlowSchemaStatusInput struct {
	// `conditions` is a list of the current states of FlowSchema.
	Conditions []*IoK8sAPIFlowcontrolV1beta2FlowSchemaConditionInput `json:"conditions,omitempty"`
}

// GroupSubject holds detailed information for group-kind subject.
type IoK8sAPIFlowcontrolV1beta2GroupSubject struct {
	// name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
	Name string `json:"name"`
}

// GroupSubject holds detailed information for group-kind subject.
type IoK8sAPIFlowcontrolV1beta2GroupSubjectInput struct {
	// name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
	Name string `json:"name"`
}

// LimitResponse defines how to handle requests that can not be executed right now.
type IoK8sAPIFlowcontrolV1beta2LimitResponse struct {
	// QueuingConfiguration holds the configuration parameters for queuing
	Queuing *IoK8sAPIFlowcontrolV1beta2QueuingConfiguration `json:"queuing,omitempty"`
	// `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
	Type string `json:"type"`
}

// LimitResponse defines how to handle requests that can not be executed right now.
type IoK8sAPIFlowcontrolV1beta2LimitResponseInput struct {
	// QueuingConfiguration holds the configuration parameters for queuing
	Queuing *IoK8sAPIFlowcontrolV1beta2QueuingConfigurationInput `json:"queuing,omitempty"`
	// `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
	Type string `json:"type"`
}

// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
//   - How are requests for this priority level limited?
//   - What should be done with requests that exceed the limit?
type IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration struct {
	// `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:
	//
	//             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
	//
	// bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
	AssuredConcurrencyShares *int `json:"assuredConcurrencyShares,omitempty"`
	// `borrowingLimitPercent`, if present, configures a limit on how many seats this priority level can borrow from other priority levels. The limit is known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total number of seats that this level may borrow at any one time. This field holds the ratio of that limit to the level's nominal concurrency limit. When this field is non-nil, it must hold a non-negative integer and the limit is calculated as follows.
	//
	// BorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0 )
	//
	// The value of this field can be more than 100, implying that this priority level can borrow a number of seats that is greater than its own nominal concurrency limit (NominalCL). When this field is left `nil`, the limit is effectively infinite.
	BorrowingLimitPercent *int `json:"borrowingLimitPercent,omitempty"`
	// `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels. The value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.
	//
	// LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
	LendablePercent *int `json:"lendablePercent,omitempty"`
	// LimitResponse defines how to handle requests that can not be executed right now.
	LimitResponse *IoK8sAPIFlowcontrolV1beta2LimitResponse `json:"limitResponse,omitempty"`
}

// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
//   - How are requests for this priority level limited?
//   - What should be done with requests that exceed the limit?
type IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfigurationInput struct {
	// `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:
	//
	//             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
	//
	// bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
	AssuredConcurrencyShares *int `json:"assuredConcurrencyShares,omitempty"`
	// `borrowingLimitPercent`, if present, configures a limit on how many seats this priority level can borrow from other priority levels. The limit is known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total number of seats that this level may borrow at any one time. This field holds the ratio of that limit to the level's nominal concurrency limit. When this field is non-nil, it must hold a non-negative integer and the limit is calculated as follows.
	//
	// BorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0 )
	//
	// The value of this field can be more than 100, implying that this priority level can borrow a number of seats that is greater than its own nominal concurrency limit (NominalCL). When this field is left `nil`, the limit is effectively infinite.
	BorrowingLimitPercent *int `json:"borrowingLimitPercent,omitempty"`
	// `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels. The value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.
	//
	// LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
	LendablePercent *int `json:"lendablePercent,omitempty"`
	// LimitResponse defines how to handle requests that can not be executed right now.
	LimitResponse *IoK8sAPIFlowcontrolV1beta2LimitResponseInput `json:"limitResponse,omitempty"`
}

// NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
type IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule struct {
	// `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
	//   - "/healthz" is legal
	//   - "/hea*" is illegal
	//   - "/hea" is legal but matches nothing
	//   - "/hea/*" also matches nothing
	//   - "/healthz/*" matches all per-component health checks.
	// "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
	NonResourceURLs []*string `json:"nonResourceURLs"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
	Verbs []*string `json:"verbs"`
}

// NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
type IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRuleInput struct {
	// `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
	//   - "/healthz" is legal
	//   - "/hea*" is illegal
	//   - "/hea" is legal but matches nothing
	//   - "/hea/*" also matches nothing
	//   - "/healthz/*" matches all per-component health checks.
	// "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
	NonResourceURLs []*string `json:"nonResourceURLs"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
	Verbs []*string `json:"verbs"`
}

// PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
type IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects struct {
	// `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
	NonResourceRules []*IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule `json:"nonResourceRules,omitempty"`
	// `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
	ResourceRules []*IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule `json:"resourceRules,omitempty"`
	// subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
	Subjects []*IoK8sAPIFlowcontrolV1beta2Subject `json:"subjects"`
}

// PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
type IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjectsInput struct {
	// `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
	NonResourceRules []*IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRuleInput `json:"nonResourceRules,omitempty"`
	// `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
	ResourceRules []*IoK8sAPIFlowcontrolV1beta2ResourcePolicyRuleInput `json:"resourceRules,omitempty"`
	// subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
	Subjects []*IoK8sAPIFlowcontrolV1beta2SubjectInput `json:"subjects"`
}

// PriorityLevelConfiguration represents the configuration of a priority level.
type IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
	Spec *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec `json:"spec,omitempty"`
	// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
	Status *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus `json:"status,omitempty"`
}

// PriorityLevelConfigurationCondition defines the condition of priority level.
type IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// `message` is a human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status *string `json:"status,omitempty"`
	// `type` is the type of the condition. Required.
	Type *string `json:"type,omitempty"`
}

// PriorityLevelConfigurationCondition defines the condition of priority level.
type IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// `message` is a human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status *string `json:"status,omitempty"`
	// `type` is the type of the condition. Required.
	Type *string `json:"type,omitempty"`
}

// PriorityLevelConfiguration represents the configuration of a priority level.
type IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
	Spec *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpecInput `json:"spec,omitempty"`
	// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
	Status *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatusInput `json:"status,omitempty"`
}

// PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
type IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// `items` is a list of request-priorities.
	Items []*IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
type IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference struct {
	// `name` is the name of the priority level configuration being referenced Required.
	Name string `json:"name"`
}

// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
type IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReferenceInput struct {
	// `name` is the name of the priority level configuration being referenced Required.
	Name string `json:"name"`
}

// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
type IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec struct {
	// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
	//   - How are requests for this priority level limited?
	//   - What should be done with requests that exceed the limit?
	Limited *IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration `json:"limited,omitempty"`
	// `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
	Type string `json:"type"`
}

// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
type IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpecInput struct {
	// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
	//   - How are requests for this priority level limited?
	//   - What should be done with requests that exceed the limit?
	Limited *IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfigurationInput `json:"limited,omitempty"`
	// `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
	Type string `json:"type"`
}

// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
type IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus struct {
	// `conditions` is the current state of "request-priority".
	Conditions []*IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition `json:"conditions,omitempty"`
}

// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
type IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatusInput struct {
	// `conditions` is the current state of "request-priority".
	Conditions []*IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationConditionInput `json:"conditions,omitempty"`
}

// QueuingConfiguration holds the configuration parameters for queuing
type IoK8sAPIFlowcontrolV1beta2QueuingConfiguration struct {
	// `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
	HandSize *int `json:"handSize,omitempty"`
	// `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
	QueueLengthLimit *int `json:"queueLengthLimit,omitempty"`
	// `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
	Queues *int `json:"queues,omitempty"`
}

// QueuingConfiguration holds the configuration parameters for queuing
type IoK8sAPIFlowcontrolV1beta2QueuingConfigurationInput struct {
	// `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
	HandSize *int `json:"handSize,omitempty"`
	// `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
	QueueLengthLimit *int `json:"queueLengthLimit,omitempty"`
	// `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
	Queues *int `json:"queues,omitempty"`
}

// ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) either (d1) the request does not specify a namespace (i.e., `Namespace==""`) and clusterScope is true or (d2) the request specifies a namespace and least one member of namespaces matches the request's namespace.
type IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule struct {
	// `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
	APIGroups []*string `json:"apiGroups"`
	// `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
	ClusterScope *bool `json:"clusterScope,omitempty"`
	// `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
	Namespaces []*string `json:"namespaces,omitempty"`
	// `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
	Resources []*string `json:"resources"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
	Verbs []*string `json:"verbs"`
}

// ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) either (d1) the request does not specify a namespace (i.e., `Namespace==""`) and clusterScope is true or (d2) the request specifies a namespace and least one member of namespaces matches the request's namespace.
type IoK8sAPIFlowcontrolV1beta2ResourcePolicyRuleInput struct {
	// `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
	APIGroups []*string `json:"apiGroups"`
	// `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
	ClusterScope *bool `json:"clusterScope,omitempty"`
	// `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
	Namespaces []*string `json:"namespaces,omitempty"`
	// `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
	Resources []*string `json:"resources"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
	Verbs []*string `json:"verbs"`
}

// ServiceAccountSubject holds detailed information for service-account-kind subject.
type IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject struct {
	// `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
	Name string `json:"name"`
	// `namespace` is the namespace of matching ServiceAccount objects. Required.
	Namespace string `json:"namespace"`
}

// ServiceAccountSubject holds detailed information for service-account-kind subject.
type IoK8sAPIFlowcontrolV1beta2ServiceAccountSubjectInput struct {
	// `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
	Name string `json:"name"`
	// `namespace` is the namespace of matching ServiceAccount objects. Required.
	Namespace string `json:"namespace"`
}

// Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
type IoK8sAPIFlowcontrolV1beta2Subject struct {
	// GroupSubject holds detailed information for group-kind subject.
	Group *IoK8sAPIFlowcontrolV1beta2GroupSubject `json:"group,omitempty"`
	// `kind` indicates which one of the other fields is non-empty. Required
	Kind string `json:"kind"`
	// ServiceAccountSubject holds detailed information for service-account-kind subject.
	ServiceAccount *IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject `json:"serviceAccount,omitempty"`
	// UserSubject holds detailed information for user-kind subject.
	User *IoK8sAPIFlowcontrolV1beta2UserSubject `json:"user,omitempty"`
}

// Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
type IoK8sAPIFlowcontrolV1beta2SubjectInput struct {
	// GroupSubject holds detailed information for group-kind subject.
	Group *IoK8sAPIFlowcontrolV1beta2GroupSubjectInput `json:"group,omitempty"`
	// `kind` indicates which one of the other fields is non-empty. Required
	Kind string `json:"kind"`
	// ServiceAccountSubject holds detailed information for service-account-kind subject.
	ServiceAccount *IoK8sAPIFlowcontrolV1beta2ServiceAccountSubjectInput `json:"serviceAccount,omitempty"`
	// UserSubject holds detailed information for user-kind subject.
	User *IoK8sAPIFlowcontrolV1beta2UserSubjectInput `json:"user,omitempty"`
}

// UserSubject holds detailed information for user-kind subject.
type IoK8sAPIFlowcontrolV1beta2UserSubject struct {
	// `name` is the username that matches, or "*" to match all usernames. Required.
	Name string `json:"name"`
}

// UserSubject holds detailed information for user-kind subject.
type IoK8sAPIFlowcontrolV1beta2UserSubjectInput struct {
	// `name` is the username that matches, or "*" to match all usernames. Required.
	Name string `json:"name"`
}

// FlowDistinguisherMethod specifies the method of a flow distinguisher.
type IoK8sAPIFlowcontrolV1beta3FlowDistinguisherMethod struct {
	// `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
	Type string `json:"type"`
}

// FlowDistinguisherMethod specifies the method of a flow distinguisher.
type IoK8sAPIFlowcontrolV1beta3FlowDistinguisherMethodInput struct {
	// `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
	Type string `json:"type"`
}

// FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
type IoK8sAPIFlowcontrolV1beta3FlowSchema struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// FlowSchemaSpec describes how the FlowSchema's specification looks like.
	Spec *IoK8sAPIFlowcontrolV1beta3FlowSchemaSpec `json:"spec,omitempty"`
	// FlowSchemaStatus represents the current state of a FlowSchema.
	Status *IoK8sAPIFlowcontrolV1beta3FlowSchemaStatus `json:"status,omitempty"`
}

// FlowSchemaCondition describes conditions for a FlowSchema.
type IoK8sAPIFlowcontrolV1beta3FlowSchemaCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// `message` is a human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status *string `json:"status,omitempty"`
	// `type` is the type of the condition. Required.
	Type *string `json:"type,omitempty"`
}

// FlowSchemaCondition describes conditions for a FlowSchema.
type IoK8sAPIFlowcontrolV1beta3FlowSchemaConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// `message` is a human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status *string `json:"status,omitempty"`
	// `type` is the type of the condition. Required.
	Type *string `json:"type,omitempty"`
}

// FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
type IoK8sAPIFlowcontrolV1beta3FlowSchemaInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// FlowSchemaSpec describes how the FlowSchema's specification looks like.
	Spec *IoK8sAPIFlowcontrolV1beta3FlowSchemaSpecInput `json:"spec,omitempty"`
	// FlowSchemaStatus represents the current state of a FlowSchema.
	Status *IoK8sAPIFlowcontrolV1beta3FlowSchemaStatusInput `json:"status,omitempty"`
}

// FlowSchemaList is a list of FlowSchema objects.
type IoK8sAPIFlowcontrolV1beta3FlowSchemaList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// `items` is a list of FlowSchemas.
	Items []*IoK8sAPIFlowcontrolV1beta3FlowSchema `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// FlowSchemaSpec describes how the FlowSchema's specification looks like.
type IoK8sAPIFlowcontrolV1beta3FlowSchemaSpec struct {
	// FlowDistinguisherMethod specifies the method of a flow distinguisher.
	DistinguisherMethod *IoK8sAPIFlowcontrolV1beta3FlowDistinguisherMethod `json:"distinguisherMethod,omitempty"`
	// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
	MatchingPrecedence *int `json:"matchingPrecedence,omitempty"`
	// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
	PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationReference `json:"priorityLevelConfiguration"`
	// `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
	Rules []*IoK8sAPIFlowcontrolV1beta3PolicyRulesWithSubjects `json:"rules,omitempty"`
}

// FlowSchemaSpec describes how the FlowSchema's specification looks like.
type IoK8sAPIFlowcontrolV1beta3FlowSchemaSpecInput struct {
	// FlowDistinguisherMethod specifies the method of a flow distinguisher.
	DistinguisherMethod *IoK8sAPIFlowcontrolV1beta3FlowDistinguisherMethodInput `json:"distinguisherMethod,omitempty"`
	// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
	MatchingPrecedence *int `json:"matchingPrecedence,omitempty"`
	// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
	PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationReferenceInput `json:"priorityLevelConfiguration"`
	// `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
	Rules []*IoK8sAPIFlowcontrolV1beta3PolicyRulesWithSubjectsInput `json:"rules,omitempty"`
}

// FlowSchemaStatus represents the current state of a FlowSchema.
type IoK8sAPIFlowcontrolV1beta3FlowSchemaStatus struct {
	// `conditions` is a list of the current states of FlowSchema.
	Conditions []*IoK8sAPIFlowcontrolV1beta3FlowSchemaCondition `json:"conditions,omitempty"`
}

// FlowSchemaStatus represents the current state of a FlowSchema.
type IoK8sAPIFlowcontrolV1beta3FlowSchemaStatusInput struct {
	// `conditions` is a list of the current states of FlowSchema.
	Conditions []*IoK8sAPIFlowcontrolV1beta3FlowSchemaConditionInput `json:"conditions,omitempty"`
}

// GroupSubject holds detailed information for group-kind subject.
type IoK8sAPIFlowcontrolV1beta3GroupSubject struct {
	// name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
	Name string `json:"name"`
}

// GroupSubject holds detailed information for group-kind subject.
type IoK8sAPIFlowcontrolV1beta3GroupSubjectInput struct {
	// name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
	Name string `json:"name"`
}

// LimitResponse defines how to handle requests that can not be executed right now.
type IoK8sAPIFlowcontrolV1beta3LimitResponse struct {
	// QueuingConfiguration holds the configuration parameters for queuing
	Queuing *IoK8sAPIFlowcontrolV1beta3QueuingConfiguration `json:"queuing,omitempty"`
	// `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
	Type string `json:"type"`
}

// LimitResponse defines how to handle requests that can not be executed right now.
type IoK8sAPIFlowcontrolV1beta3LimitResponseInput struct {
	// QueuingConfiguration holds the configuration parameters for queuing
	Queuing *IoK8sAPIFlowcontrolV1beta3QueuingConfigurationInput `json:"queuing,omitempty"`
	// `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
	Type string `json:"type"`
}

// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
//   - How are requests for this priority level limited?
//   - What should be done with requests that exceed the limit?
type IoK8sAPIFlowcontrolV1beta3LimitedPriorityLevelConfiguration struct {
	// `borrowingLimitPercent`, if present, configures a limit on how many seats this priority level can borrow from other priority levels. The limit is known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total number of seats that this level may borrow at any one time. This field holds the ratio of that limit to the level's nominal concurrency limit. When this field is non-nil, it must hold a non-negative integer and the limit is calculated as follows.
	//
	// BorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0 )
	//
	// The value of this field can be more than 100, implying that this priority level can borrow a number of seats that is greater than its own nominal concurrency limit (NominalCL). When this field is left `nil`, the limit is effectively infinite.
	BorrowingLimitPercent *int `json:"borrowingLimitPercent,omitempty"`
	// `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels. The value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.
	//
	// LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
	LendablePercent *int `json:"lendablePercent,omitempty"`
	// LimitResponse defines how to handle requests that can not be executed right now.
	LimitResponse *IoK8sAPIFlowcontrolV1beta3LimitResponse `json:"limitResponse,omitempty"`
	// `nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats available at this priority level. This is used both for requests dispatched from this priority level as well as requests dispatched from other priority levels borrowing seats from this level. The server's concurrency limit (ServerCL) is divided among the Limited priority levels in proportion to their NCS values:
	//
	// NominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[limited priority level k] NCS(k)
	//
	// Bigger numbers mean a larger nominal concurrency limit, at the expense of every other Limited priority level. This field has a default value of 30.
	NominalConcurrencyShares *int `json:"nominalConcurrencyShares,omitempty"`
}

// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
//   - How are requests for this priority level limited?
//   - What should be done with requests that exceed the limit?
type IoK8sAPIFlowcontrolV1beta3LimitedPriorityLevelConfigurationInput struct {
	// `borrowingLimitPercent`, if present, configures a limit on how many seats this priority level can borrow from other priority levels. The limit is known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total number of seats that this level may borrow at any one time. This field holds the ratio of that limit to the level's nominal concurrency limit. When this field is non-nil, it must hold a non-negative integer and the limit is calculated as follows.
	//
	// BorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0 )
	//
	// The value of this field can be more than 100, implying that this priority level can borrow a number of seats that is greater than its own nominal concurrency limit (NominalCL). When this field is left `nil`, the limit is effectively infinite.
	BorrowingLimitPercent *int `json:"borrowingLimitPercent,omitempty"`
	// `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels. The value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.
	//
	// LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
	LendablePercent *int `json:"lendablePercent,omitempty"`
	// LimitResponse defines how to handle requests that can not be executed right now.
	LimitResponse *IoK8sAPIFlowcontrolV1beta3LimitResponseInput `json:"limitResponse,omitempty"`
	// `nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats available at this priority level. This is used both for requests dispatched from this priority level as well as requests dispatched from other priority levels borrowing seats from this level. The server's concurrency limit (ServerCL) is divided among the Limited priority levels in proportion to their NCS values:
	//
	// NominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[limited priority level k] NCS(k)
	//
	// Bigger numbers mean a larger nominal concurrency limit, at the expense of every other Limited priority level. This field has a default value of 30.
	NominalConcurrencyShares *int `json:"nominalConcurrencyShares,omitempty"`
}

// NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
type IoK8sAPIFlowcontrolV1beta3NonResourcePolicyRule struct {
	// `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
	//   - "/healthz" is legal
	//   - "/hea*" is illegal
	//   - "/hea" is legal but matches nothing
	//   - "/hea/*" also matches nothing
	//   - "/healthz/*" matches all per-component health checks.
	// "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
	NonResourceURLs []*string `json:"nonResourceURLs"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
	Verbs []*string `json:"verbs"`
}

// NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
type IoK8sAPIFlowcontrolV1beta3NonResourcePolicyRuleInput struct {
	// `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
	//   - "/healthz" is legal
	//   - "/hea*" is illegal
	//   - "/hea" is legal but matches nothing
	//   - "/hea/*" also matches nothing
	//   - "/healthz/*" matches all per-component health checks.
	// "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
	NonResourceURLs []*string `json:"nonResourceURLs"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
	Verbs []*string `json:"verbs"`
}

// PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
type IoK8sAPIFlowcontrolV1beta3PolicyRulesWithSubjects struct {
	// `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
	NonResourceRules []*IoK8sAPIFlowcontrolV1beta3NonResourcePolicyRule `json:"nonResourceRules,omitempty"`
	// `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
	ResourceRules []*IoK8sAPIFlowcontrolV1beta3ResourcePolicyRule `json:"resourceRules,omitempty"`
	// subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
	Subjects []*IoK8sAPIFlowcontrolV1beta3Subject `json:"subjects"`
}

// PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
type IoK8sAPIFlowcontrolV1beta3PolicyRulesWithSubjectsInput struct {
	// `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
	NonResourceRules []*IoK8sAPIFlowcontrolV1beta3NonResourcePolicyRuleInput `json:"nonResourceRules,omitempty"`
	// `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
	ResourceRules []*IoK8sAPIFlowcontrolV1beta3ResourcePolicyRuleInput `json:"resourceRules,omitempty"`
	// subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
	Subjects []*IoK8sAPIFlowcontrolV1beta3SubjectInput `json:"subjects"`
}

// PriorityLevelConfiguration represents the configuration of a priority level.
type IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
	Spec *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationSpec `json:"spec,omitempty"`
	// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
	Status *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationStatus `json:"status,omitempty"`
}

// PriorityLevelConfigurationCondition defines the condition of priority level.
type IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// `message` is a human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status *string `json:"status,omitempty"`
	// `type` is the type of the condition. Required.
	Type *string `json:"type,omitempty"`
}

// PriorityLevelConfigurationCondition defines the condition of priority level.
type IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// `message` is a human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status *string `json:"status,omitempty"`
	// `type` is the type of the condition. Required.
	Type *string `json:"type,omitempty"`
}

// PriorityLevelConfiguration represents the configuration of a priority level.
type IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
	Spec *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationSpecInput `json:"spec,omitempty"`
	// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
	Status *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationStatusInput `json:"status,omitempty"`
}

// PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
type IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// `items` is a list of request-priorities.
	Items []*IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
type IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationReference struct {
	// `name` is the name of the priority level configuration being referenced Required.
	Name string `json:"name"`
}

// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
type IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationReferenceInput struct {
	// `name` is the name of the priority level configuration being referenced Required.
	Name string `json:"name"`
}

// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
type IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationSpec struct {
	// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
	//   - How are requests for this priority level limited?
	//   - What should be done with requests that exceed the limit?
	Limited *IoK8sAPIFlowcontrolV1beta3LimitedPriorityLevelConfiguration `json:"limited,omitempty"`
	// `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
	Type string `json:"type"`
}

// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
type IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationSpecInput struct {
	// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
	//   - How are requests for this priority level limited?
	//   - What should be done with requests that exceed the limit?
	Limited *IoK8sAPIFlowcontrolV1beta3LimitedPriorityLevelConfigurationInput `json:"limited,omitempty"`
	// `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
	Type string `json:"type"`
}

// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
type IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationStatus struct {
	// `conditions` is the current state of "request-priority".
	Conditions []*IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationCondition `json:"conditions,omitempty"`
}

// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
type IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationStatusInput struct {
	// `conditions` is the current state of "request-priority".
	Conditions []*IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationConditionInput `json:"conditions,omitempty"`
}

// QueuingConfiguration holds the configuration parameters for queuing
type IoK8sAPIFlowcontrolV1beta3QueuingConfiguration struct {
	// `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
	HandSize *int `json:"handSize,omitempty"`
	// `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
	QueueLengthLimit *int `json:"queueLengthLimit,omitempty"`
	// `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
	Queues *int `json:"queues,omitempty"`
}

// QueuingConfiguration holds the configuration parameters for queuing
type IoK8sAPIFlowcontrolV1beta3QueuingConfigurationInput struct {
	// `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
	HandSize *int `json:"handSize,omitempty"`
	// `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
	QueueLengthLimit *int `json:"queueLengthLimit,omitempty"`
	// `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
	Queues *int `json:"queues,omitempty"`
}

// ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) either (d1) the request does not specify a namespace (i.e., `Namespace==""`) and clusterScope is true or (d2) the request specifies a namespace and least one member of namespaces matches the request's namespace.
type IoK8sAPIFlowcontrolV1beta3ResourcePolicyRule struct {
	// `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
	APIGroups []*string `json:"apiGroups"`
	// `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
	ClusterScope *bool `json:"clusterScope,omitempty"`
	// `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
	Namespaces []*string `json:"namespaces,omitempty"`
	// `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
	Resources []*string `json:"resources"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
	Verbs []*string `json:"verbs"`
}

// ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) either (d1) the request does not specify a namespace (i.e., `Namespace==""`) and clusterScope is true or (d2) the request specifies a namespace and least one member of namespaces matches the request's namespace.
type IoK8sAPIFlowcontrolV1beta3ResourcePolicyRuleInput struct {
	// `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
	APIGroups []*string `json:"apiGroups"`
	// `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
	ClusterScope *bool `json:"clusterScope,omitempty"`
	// `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
	Namespaces []*string `json:"namespaces,omitempty"`
	// `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
	Resources []*string `json:"resources"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
	Verbs []*string `json:"verbs"`
}

// ServiceAccountSubject holds detailed information for service-account-kind subject.
type IoK8sAPIFlowcontrolV1beta3ServiceAccountSubject struct {
	// `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
	Name string `json:"name"`
	// `namespace` is the namespace of matching ServiceAccount objects. Required.
	Namespace string `json:"namespace"`
}

// ServiceAccountSubject holds detailed information for service-account-kind subject.
type IoK8sAPIFlowcontrolV1beta3ServiceAccountSubjectInput struct {
	// `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
	Name string `json:"name"`
	// `namespace` is the namespace of matching ServiceAccount objects. Required.
	Namespace string `json:"namespace"`
}

// Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
type IoK8sAPIFlowcontrolV1beta3Subject struct {
	// GroupSubject holds detailed information for group-kind subject.
	Group *IoK8sAPIFlowcontrolV1beta3GroupSubject `json:"group,omitempty"`
	// `kind` indicates which one of the other fields is non-empty. Required
	Kind string `json:"kind"`
	// ServiceAccountSubject holds detailed information for service-account-kind subject.
	ServiceAccount *IoK8sAPIFlowcontrolV1beta3ServiceAccountSubject `json:"serviceAccount,omitempty"`
	// UserSubject holds detailed information for user-kind subject.
	User *IoK8sAPIFlowcontrolV1beta3UserSubject `json:"user,omitempty"`
}

// Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
type IoK8sAPIFlowcontrolV1beta3SubjectInput struct {
	// GroupSubject holds detailed information for group-kind subject.
	Group *IoK8sAPIFlowcontrolV1beta3GroupSubjectInput `json:"group,omitempty"`
	// `kind` indicates which one of the other fields is non-empty. Required
	Kind string `json:"kind"`
	// ServiceAccountSubject holds detailed information for service-account-kind subject.
	ServiceAccount *IoK8sAPIFlowcontrolV1beta3ServiceAccountSubjectInput `json:"serviceAccount,omitempty"`
	// UserSubject holds detailed information for user-kind subject.
	User *IoK8sAPIFlowcontrolV1beta3UserSubjectInput `json:"user,omitempty"`
}

// UserSubject holds detailed information for user-kind subject.
type IoK8sAPIFlowcontrolV1beta3UserSubject struct {
	// `name` is the username that matches, or "*" to match all usernames. Required.
	Name string `json:"name"`
}

// UserSubject holds detailed information for user-kind subject.
type IoK8sAPIFlowcontrolV1beta3UserSubjectInput struct {
	// `name` is the username that matches, or "*" to match all usernames. Required.
	Name string `json:"name"`
}

// HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
type IoK8sAPINetworkingV1HTTPIngressPath struct {
	// IngressBackend describes all endpoints for a given service and port.
	Backend *IoK8sAPINetworkingV1IngressBackend `json:"backend"`
	// path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
	Path *string `json:"path,omitempty"`
	// pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
	//   done on a path element by element basis. A path element refers is the
	//   list of labels in the path split by the '/' separator. A request is a
	//   match for path p if every p is an element-wise prefix of p of the
	//   request path. Note that if the last element of the path is a substring
	//   of the last element in request path, it is not a match (e.g. /foo/bar
	//   matches /foo/bar/baz, but does not match /foo/barbaz).
	// * ImplementationSpecific: Interpretation of the Path matching is up to
	//   the IngressClass. Implementations can treat this as a separate PathType
	//   or treat it identically to Prefix or Exact path types.
	// Implementations are required to support all path types.
	PathType string `json:"pathType"`
}

// HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
type IoK8sAPINetworkingV1HTTPIngressPathInput struct {
	// IngressBackend describes all endpoints for a given service and port.
	Backend *IoK8sAPINetworkingV1IngressBackendInput `json:"backend"`
	// path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
	Path *string `json:"path,omitempty"`
	// pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
	//   done on a path element by element basis. A path element refers is the
	//   list of labels in the path split by the '/' separator. A request is a
	//   match for path p if every p is an element-wise prefix of p of the
	//   request path. Note that if the last element of the path is a substring
	//   of the last element in request path, it is not a match (e.g. /foo/bar
	//   matches /foo/bar/baz, but does not match /foo/barbaz).
	// * ImplementationSpecific: Interpretation of the Path matching is up to
	//   the IngressClass. Implementations can treat this as a separate PathType
	//   or treat it identically to Prefix or Exact path types.
	// Implementations are required to support all path types.
	PathType string `json:"pathType"`
}

// HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
type IoK8sAPINetworkingV1HTTPIngressRuleValue struct {
	// paths is a collection of paths that map requests to backends.
	Paths []*IoK8sAPINetworkingV1HTTPIngressPath `json:"paths"`
}

// HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
type IoK8sAPINetworkingV1HTTPIngressRuleValueInput struct {
	// paths is a collection of paths that map requests to backends.
	Paths []*IoK8sAPINetworkingV1HTTPIngressPathInput `json:"paths"`
}

// IPBlock describes a particular CIDR (Ex. "192.168.1.0/24","2001:db8::/64") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
type IoK8sAPINetworkingV1IPBlock struct {
	// cidr is a string representing the IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64"
	Cidr string `json:"cidr"`
	// except is a slice of CIDRs that should not be included within an IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64" Except values will be rejected if they are outside the cidr range
	Except []*string `json:"except,omitempty"`
}

// IPBlock describes a particular CIDR (Ex. "192.168.1.0/24","2001:db8::/64") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
type IoK8sAPINetworkingV1IPBlockInput struct {
	// cidr is a string representing the IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64"
	Cidr string `json:"cidr"`
	// except is a slice of CIDRs that should not be included within an IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64" Except values will be rejected if they are outside the cidr range
	Except []*string `json:"except,omitempty"`
}

// Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
type IoK8sAPINetworkingV1Ingress struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// IngressSpec describes the Ingress the user wishes to exist.
	Spec *IoK8sAPINetworkingV1IngressSpec `json:"spec,omitempty"`
	// IngressStatus describe the current state of the Ingress.
	Status *IoK8sAPINetworkingV1IngressStatus `json:"status,omitempty"`
}

// IngressBackend describes all endpoints for a given service and port.
type IoK8sAPINetworkingV1IngressBackend struct {
	// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
	Resource *IoK8sAPICoreV1TypedLocalObjectReference `json:"resource,omitempty"`
	// IngressServiceBackend references a Kubernetes Service as a Backend.
	Service *IoK8sAPINetworkingV1IngressServiceBackend `json:"service,omitempty"`
}

// IngressBackend describes all endpoints for a given service and port.
type IoK8sAPINetworkingV1IngressBackendInput struct {
	// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
	Resource *IoK8sAPICoreV1TypedLocalObjectReferenceInput `json:"resource,omitempty"`
	// IngressServiceBackend references a Kubernetes Service as a Backend.
	Service *IoK8sAPINetworkingV1IngressServiceBackendInput `json:"service,omitempty"`
}

// IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.
type IoK8sAPINetworkingV1IngressClass struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// IngressClassSpec provides information about the class of an Ingress.
	Spec *IoK8sAPINetworkingV1IngressClassSpec `json:"spec,omitempty"`
}

// IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.
type IoK8sAPINetworkingV1IngressClassInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// IngressClassSpec provides information about the class of an Ingress.
	Spec *IoK8sAPINetworkingV1IngressClassSpecInput `json:"spec,omitempty"`
}

// IngressClassList is a collection of IngressClasses.
type IoK8sAPINetworkingV1IngressClassList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is the list of IngressClasses.
	Items []*IoK8sAPINetworkingV1IngressClass `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.
type IoK8sAPINetworkingV1IngressClassParametersReference struct {
	// apiGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	APIGroup *string `json:"apiGroup,omitempty"`
	// kind is the type of resource being referenced.
	Kind string `json:"kind"`
	// name is the name of resource being referenced.
	Name string `json:"name"`
	// namespace is the namespace of the resource being referenced. This field is required when scope is set to "Namespace" and must be unset when scope is set to "Cluster".
	Namespace *string `json:"namespace,omitempty"`
	// scope represents if this refers to a cluster or namespace scoped resource. This may be set to "Cluster" (default) or "Namespace".
	Scope *string `json:"scope,omitempty"`
}

// IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.
type IoK8sAPINetworkingV1IngressClassParametersReferenceInput struct {
	// apiGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	APIGroup *string `json:"apiGroup,omitempty"`
	// kind is the type of resource being referenced.
	Kind string `json:"kind"`
	// name is the name of resource being referenced.
	Name string `json:"name"`
	// namespace is the namespace of the resource being referenced. This field is required when scope is set to "Namespace" and must be unset when scope is set to "Cluster".
	Namespace *string `json:"namespace,omitempty"`
	// scope represents if this refers to a cluster or namespace scoped resource. This may be set to "Cluster" (default) or "Namespace".
	Scope *string `json:"scope,omitempty"`
}

// IngressClassSpec provides information about the class of an Ingress.
type IoK8sAPINetworkingV1IngressClassSpec struct {
	// controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.
	Controller *string `json:"controller,omitempty"`
	// IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.
	Parameters *IoK8sAPINetworkingV1IngressClassParametersReference `json:"parameters,omitempty"`
}

// IngressClassSpec provides information about the class of an Ingress.
type IoK8sAPINetworkingV1IngressClassSpecInput struct {
	// controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.
	Controller *string `json:"controller,omitempty"`
	// IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.
	Parameters *IoK8sAPINetworkingV1IngressClassParametersReferenceInput `json:"parameters,omitempty"`
}

// Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
type IoK8sAPINetworkingV1IngressInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// IngressSpec describes the Ingress the user wishes to exist.
	Spec *IoK8sAPINetworkingV1IngressSpecInput `json:"spec,omitempty"`
	// IngressStatus describe the current state of the Ingress.
	Status *IoK8sAPINetworkingV1IngressStatusInput `json:"status,omitempty"`
}

// IngressList is a collection of Ingress.
type IoK8sAPINetworkingV1IngressList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is the list of Ingress.
	Items []*IoK8sAPINetworkingV1Ingress `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// IngressLoadBalancerIngress represents the status of a load-balancer ingress point.
type IoK8sAPINetworkingV1IngressLoadBalancerIngress struct {
	// hostname is set for load-balancer ingress points that are DNS based.
	Hostname *string `json:"hostname,omitempty"`
	// ip is set for load-balancer ingress points that are IP based.
	IP *string `json:"ip,omitempty"`
	// ports provides information about the ports exposed by this LoadBalancer.
	Ports []*IoK8sAPINetworkingV1IngressPortStatus `json:"ports,omitempty"`
}

// IngressLoadBalancerIngress represents the status of a load-balancer ingress point.
type IoK8sAPINetworkingV1IngressLoadBalancerIngressInput struct {
	// hostname is set for load-balancer ingress points that are DNS based.
	Hostname *string `json:"hostname,omitempty"`
	// ip is set for load-balancer ingress points that are IP based.
	IP *string `json:"ip,omitempty"`
	// ports provides information about the ports exposed by this LoadBalancer.
	Ports []*IoK8sAPINetworkingV1IngressPortStatusInput `json:"ports,omitempty"`
}

// IngressLoadBalancerStatus represents the status of a load-balancer.
type IoK8sAPINetworkingV1IngressLoadBalancerStatus struct {
	// ingress is a list containing ingress points for the load-balancer.
	Ingress []*IoK8sAPINetworkingV1IngressLoadBalancerIngress `json:"ingress,omitempty"`
}

// IngressLoadBalancerStatus represents the status of a load-balancer.
type IoK8sAPINetworkingV1IngressLoadBalancerStatusInput struct {
	// ingress is a list containing ingress points for the load-balancer.
	Ingress []*IoK8sAPINetworkingV1IngressLoadBalancerIngressInput `json:"ingress,omitempty"`
}

// IngressPortStatus represents the error condition of a service port
type IoK8sAPINetworkingV1IngressPortStatus struct {
	// error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
	//   CamelCase names
	// - cloud provider specific error values must have names that comply with the
	//   format foo.example.com/CamelCase.
	Error *string `json:"error,omitempty"`
	// port is the port number of the ingress port.
	Port int `json:"port"`
	// protocol is the protocol of the ingress port. The supported values are: "TCP", "UDP", "SCTP"
	Protocol string `json:"protocol"`
}

// IngressPortStatus represents the error condition of a service port
type IoK8sAPINetworkingV1IngressPortStatusInput struct {
	// error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
	//   CamelCase names
	// - cloud provider specific error values must have names that comply with the
	//   format foo.example.com/CamelCase.
	Error *string `json:"error,omitempty"`
	// port is the port number of the ingress port.
	Port int `json:"port"`
	// protocol is the protocol of the ingress port. The supported values are: "TCP", "UDP", "SCTP"
	Protocol string `json:"protocol"`
}

// IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
type IoK8sAPINetworkingV1IngressRule struct {
	// host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
	//    the IP in the Spec of the parent Ingress.
	// 2. The `:` delimiter is not respected because ports are not allowed.
	// 	  Currently the port of an Ingress is implicitly :80 for http and
	// 	  :443 for https.
	// Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
	//
	// host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If host is precise, the request matches this rule if the http host header is equal to Host. 2. If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
	Host *string `json:"host,omitempty"`
	// HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
	HTTP *IoK8sAPINetworkingV1HTTPIngressRuleValue `json:"http,omitempty"`
}

// IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
type IoK8sAPINetworkingV1IngressRuleInput struct {
	// host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
	//    the IP in the Spec of the parent Ingress.
	// 2. The `:` delimiter is not respected because ports are not allowed.
	// 	  Currently the port of an Ingress is implicitly :80 for http and
	// 	  :443 for https.
	// Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
	//
	// host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If host is precise, the request matches this rule if the http host header is equal to Host. 2. If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
	Host *string `json:"host,omitempty"`
	// HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
	HTTP *IoK8sAPINetworkingV1HTTPIngressRuleValueInput `json:"http,omitempty"`
}

// IngressServiceBackend references a Kubernetes Service as a Backend.
type IoK8sAPINetworkingV1IngressServiceBackend struct {
	// name is the referenced service. The service must exist in the same namespace as the Ingress object.
	Name string `json:"name"`
	// ServiceBackendPort is the service port being referenced.
	Port *IoK8sAPINetworkingV1ServiceBackendPort `json:"port,omitempty"`
}

// IngressServiceBackend references a Kubernetes Service as a Backend.
type IoK8sAPINetworkingV1IngressServiceBackendInput struct {
	// name is the referenced service. The service must exist in the same namespace as the Ingress object.
	Name string `json:"name"`
	// ServiceBackendPort is the service port being referenced.
	Port *IoK8sAPINetworkingV1ServiceBackendPortInput `json:"port,omitempty"`
}

// IngressSpec describes the Ingress the user wishes to exist.
type IoK8sAPINetworkingV1IngressSpec struct {
	// IngressBackend describes all endpoints for a given service and port.
	DefaultBackend *IoK8sAPINetworkingV1IngressBackend `json:"defaultBackend,omitempty"`
	// ingressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -> IngressClass -> Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.
	IngressClassName *string `json:"ingressClassName,omitempty"`
	// rules is a list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
	Rules []*IoK8sAPINetworkingV1IngressRule `json:"rules,omitempty"`
	// tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
	TLS []*IoK8sAPINetworkingV1IngressTLS `json:"tls,omitempty"`
}

// IngressSpec describes the Ingress the user wishes to exist.
type IoK8sAPINetworkingV1IngressSpecInput struct {
	// IngressBackend describes all endpoints for a given service and port.
	DefaultBackend *IoK8sAPINetworkingV1IngressBackendInput `json:"defaultBackend,omitempty"`
	// ingressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -> IngressClass -> Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.
	IngressClassName *string `json:"ingressClassName,omitempty"`
	// rules is a list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
	Rules []*IoK8sAPINetworkingV1IngressRuleInput `json:"rules,omitempty"`
	// tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
	TLS []*IoK8sAPINetworkingV1IngressTLSInput `json:"tls,omitempty"`
}

// IngressStatus describe the current state of the Ingress.
type IoK8sAPINetworkingV1IngressStatus struct {
	// IngressLoadBalancerStatus represents the status of a load-balancer.
	LoadBalancer *IoK8sAPINetworkingV1IngressLoadBalancerStatus `json:"loadBalancer,omitempty"`
}

// IngressStatus describe the current state of the Ingress.
type IoK8sAPINetworkingV1IngressStatusInput struct {
	// IngressLoadBalancerStatus represents the status of a load-balancer.
	LoadBalancer *IoK8sAPINetworkingV1IngressLoadBalancerStatusInput `json:"loadBalancer,omitempty"`
}

// IngressTLS describes the transport layer security associated with an ingress.
type IoK8sAPINetworkingV1IngressTLS struct {
	// hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
	Hosts []*string `json:"hosts,omitempty"`
	// secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the "Host" header is used for routing.
	SecretName *string `json:"secretName,omitempty"`
}

// IngressTLS describes the transport layer security associated with an ingress.
type IoK8sAPINetworkingV1IngressTLSInput struct {
	// hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
	Hosts []*string `json:"hosts,omitempty"`
	// secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the "Host" header is used for routing.
	SecretName *string `json:"secretName,omitempty"`
}

// NetworkPolicy describes what network traffic is allowed for a set of Pods
type IoK8sAPINetworkingV1NetworkPolicy struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// NetworkPolicySpec provides the specification of a NetworkPolicy
	Spec *IoK8sAPINetworkingV1NetworkPolicySpec `json:"spec,omitempty"`
	// NetworkPolicyStatus describes the current state of the NetworkPolicy.
	Status *IoK8sAPINetworkingV1NetworkPolicyStatus `json:"status,omitempty"`
}

// NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
type IoK8sAPINetworkingV1NetworkPolicyEgressRule struct {
	// ports is a list of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
	Ports []*IoK8sAPINetworkingV1NetworkPolicyPort `json:"ports,omitempty"`
	// to is a list of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
	To []*IoK8sAPINetworkingV1NetworkPolicyPeer `json:"to,omitempty"`
}

// NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
type IoK8sAPINetworkingV1NetworkPolicyEgressRuleInput struct {
	// ports is a list of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
	Ports []*IoK8sAPINetworkingV1NetworkPolicyPortInput `json:"ports,omitempty"`
	// to is a list of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
	To []*IoK8sAPINetworkingV1NetworkPolicyPeerInput `json:"to,omitempty"`
}

// NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
type IoK8sAPINetworkingV1NetworkPolicyIngressRule struct {
	// from is a list of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
	From []*IoK8sAPINetworkingV1NetworkPolicyPeer `json:"from,omitempty"`
	// ports is a list of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
	Ports []*IoK8sAPINetworkingV1NetworkPolicyPort `json:"ports,omitempty"`
}

// NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
type IoK8sAPINetworkingV1NetworkPolicyIngressRuleInput struct {
	// from is a list of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
	From []*IoK8sAPINetworkingV1NetworkPolicyPeerInput `json:"from,omitempty"`
	// ports is a list of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
	Ports []*IoK8sAPINetworkingV1NetworkPolicyPortInput `json:"ports,omitempty"`
}

// NetworkPolicy describes what network traffic is allowed for a set of Pods
type IoK8sAPINetworkingV1NetworkPolicyInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// NetworkPolicySpec provides the specification of a NetworkPolicy
	Spec *IoK8sAPINetworkingV1NetworkPolicySpecInput `json:"spec,omitempty"`
	// NetworkPolicyStatus describes the current state of the NetworkPolicy.
	Status *IoK8sAPINetworkingV1NetworkPolicyStatusInput `json:"status,omitempty"`
}

// NetworkPolicyList is a list of NetworkPolicy objects.
type IoK8sAPINetworkingV1NetworkPolicyList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is a list of schema objects.
	Items []*IoK8sAPINetworkingV1NetworkPolicy `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed
type IoK8sAPINetworkingV1NetworkPolicyPeer struct {
	// IPBlock describes a particular CIDR (Ex. "192.168.1.0/24","2001:db8::/64") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
	IPBlock *IoK8sAPINetworkingV1IPBlock `json:"ipBlock,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"namespaceSelector,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	PodSelector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"podSelector,omitempty"`
}

// NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed
type IoK8sAPINetworkingV1NetworkPolicyPeerInput struct {
	// IPBlock describes a particular CIDR (Ex. "192.168.1.0/24","2001:db8::/64") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
	IPBlock *IoK8sAPINetworkingV1IPBlockInput `json:"ipBlock,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NamespaceSelector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"namespaceSelector,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	PodSelector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"podSelector,omitempty"`
}

// NetworkPolicyPort describes a port to allow traffic on
type IoK8sAPINetworkingV1NetworkPolicyPort struct {
	// endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.
	EndPort *int `json:"endPort,omitempty"`
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port *string `json:"port,omitempty"`
	// protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
	Protocol *string `json:"protocol,omitempty"`
}

// NetworkPolicyPort describes a port to allow traffic on
type IoK8sAPINetworkingV1NetworkPolicyPortInput struct {
	// endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.
	EndPort *int `json:"endPort,omitempty"`
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	Port *string `json:"port,omitempty"`
	// protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
	Protocol *string `json:"protocol,omitempty"`
}

// NetworkPolicySpec provides the specification of a NetworkPolicy
type IoK8sAPINetworkingV1NetworkPolicySpec struct {
	// egress is a list of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
	Egress []*IoK8sAPINetworkingV1NetworkPolicyEgressRule `json:"egress,omitempty"`
	// ingress is a list of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
	Ingress []*IoK8sAPINetworkingV1NetworkPolicyIngressRule `json:"ingress,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	PodSelector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"podSelector"`
	// policyTypes is a list of rule types that the NetworkPolicy relates to. Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"]. If this field is not specified, it will default based on the existence of ingress or egress rules; policies that contain an egress section are assumed to affect egress, and all policies (whether or not they contain an ingress section) are assumed to affect ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
	PolicyTypes []*string `json:"policyTypes,omitempty"`
}

// NetworkPolicySpec provides the specification of a NetworkPolicy
type IoK8sAPINetworkingV1NetworkPolicySpecInput struct {
	// egress is a list of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
	Egress []*IoK8sAPINetworkingV1NetworkPolicyEgressRuleInput `json:"egress,omitempty"`
	// ingress is a list of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
	Ingress []*IoK8sAPINetworkingV1NetworkPolicyIngressRuleInput `json:"ingress,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	PodSelector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"podSelector"`
	// policyTypes is a list of rule types that the NetworkPolicy relates to. Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"]. If this field is not specified, it will default based on the existence of ingress or egress rules; policies that contain an egress section are assumed to affect egress, and all policies (whether or not they contain an ingress section) are assumed to affect ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
	PolicyTypes []*string `json:"policyTypes,omitempty"`
}

// NetworkPolicyStatus describes the current state of the NetworkPolicy.
type IoK8sAPINetworkingV1NetworkPolicyStatus struct {
	// conditions holds an array of metav1.Condition that describe the state of the NetworkPolicy. Current service state
	Conditions []*IoK8sApimachineryPkgApisMetaV1Condition `json:"conditions,omitempty"`
}

// NetworkPolicyStatus describes the current state of the NetworkPolicy.
type IoK8sAPINetworkingV1NetworkPolicyStatusInput struct {
	// conditions holds an array of metav1.Condition that describe the state of the NetworkPolicy. Current service state
	Conditions []*IoK8sApimachineryPkgApisMetaV1ConditionInput `json:"conditions,omitempty"`
}

// ServiceBackendPort is the service port being referenced.
type IoK8sAPINetworkingV1ServiceBackendPort struct {
	// name is the name of the port on the Service. This is a mutually exclusive setting with "Number".
	Name *string `json:"name,omitempty"`
	// number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".
	Number *int `json:"number,omitempty"`
}

// ServiceBackendPort is the service port being referenced.
type IoK8sAPINetworkingV1ServiceBackendPortInput struct {
	// name is the name of the port on the Service. This is a mutually exclusive setting with "Number".
	Name *string `json:"name,omitempty"`
	// number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".
	Number *int `json:"number,omitempty"`
}

// ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).  A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node.  A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate.  In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.
type IoK8sAPINetworkingV1alpha1ClusterCidr struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// ClusterCIDRSpec defines the desired state of ClusterCIDR.
	Spec *IoK8sAPINetworkingV1alpha1ClusterCIDRSpec `json:"spec,omitempty"`
}

// ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).  A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node.  A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate.  In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.
type IoK8sAPINetworkingV1alpha1ClusterCIDRInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// ClusterCIDRSpec defines the desired state of ClusterCIDR.
	Spec *IoK8sAPINetworkingV1alpha1ClusterCIDRSpecInput `json:"spec,omitempty"`
}

// ClusterCIDRList contains a list of ClusterCIDR.
type IoK8sAPINetworkingV1alpha1ClusterCIDRList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is the list of ClusterCIDRs.
	Items []*IoK8sAPINetworkingV1alpha1ClusterCidr `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// ClusterCIDRSpec defines the desired state of ClusterCIDR.
type IoK8sAPINetworkingV1alpha1ClusterCIDRSpec struct {
	// ipv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of ipv4 and ipv6 must be specified. This field is immutable.
	Ipv4 *string `json:"ipv4,omitempty"`
	// ipv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of ipv4 and ipv6 must be specified. This field is immutable.
	Ipv6 *string `json:"ipv6,omitempty"`
	// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
	NodeSelector *IoK8sAPICoreV1NodeSelector `json:"nodeSelector,omitempty"`
	// perNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
	PerNodeHostBits int `json:"perNodeHostBits"`
}

// ClusterCIDRSpec defines the desired state of ClusterCIDR.
type IoK8sAPINetworkingV1alpha1ClusterCIDRSpecInput struct {
	// ipv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of ipv4 and ipv6 must be specified. This field is immutable.
	Ipv4 *string `json:"ipv4,omitempty"`
	// ipv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of ipv4 and ipv6 must be specified. This field is immutable.
	Ipv6 *string `json:"ipv6,omitempty"`
	// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
	NodeSelector *IoK8sAPICoreV1NodeSelectorInput `json:"nodeSelector,omitempty"`
	// perNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.
	PerNodeHostBits int `json:"perNodeHostBits"`
}

// IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1
type IoK8sAPINetworkingV1alpha1IPAddress struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// IPAddressSpec describe the attributes in an IP Address.
	Spec *IoK8sAPINetworkingV1alpha1IPAddressSpec `json:"spec,omitempty"`
}

// IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1
type IoK8sAPINetworkingV1alpha1IPAddressInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// IPAddressSpec describe the attributes in an IP Address.
	Spec *IoK8sAPINetworkingV1alpha1IPAddressSpecInput `json:"spec,omitempty"`
}

// IPAddressList contains a list of IPAddress.
type IoK8sAPINetworkingV1alpha1IPAddressList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is the list of IPAddresses.
	Items []*IoK8sAPINetworkingV1alpha1IPAddress `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// IPAddressSpec describe the attributes in an IP Address.
type IoK8sAPINetworkingV1alpha1IPAddressSpec struct {
	// ParentReference describes a reference to a parent object.
	ParentRef *IoK8sAPINetworkingV1alpha1ParentReference `json:"parentRef,omitempty"`
}

// IPAddressSpec describe the attributes in an IP Address.
type IoK8sAPINetworkingV1alpha1IPAddressSpecInput struct {
	// ParentReference describes a reference to a parent object.
	ParentRef *IoK8sAPINetworkingV1alpha1ParentReferenceInput `json:"parentRef,omitempty"`
}

// ParentReference describes a reference to a parent object.
type IoK8sAPINetworkingV1alpha1ParentReference struct {
	// Group is the group of the object being referenced.
	Group *string `json:"group,omitempty"`
	// Name is the name of the object being referenced.
	Name *string `json:"name,omitempty"`
	// Namespace is the namespace of the object being referenced.
	Namespace *string `json:"namespace,omitempty"`
	// Resource is the resource of the object being referenced.
	Resource *string `json:"resource,omitempty"`
	// UID is the uid of the object being referenced.
	UID *string `json:"uid,omitempty"`
}

// ParentReference describes a reference to a parent object.
type IoK8sAPINetworkingV1alpha1ParentReferenceInput struct {
	// Group is the group of the object being referenced.
	Group *string `json:"group,omitempty"`
	// Name is the name of the object being referenced.
	Name *string `json:"name,omitempty"`
	// Namespace is the namespace of the object being referenced.
	Namespace *string `json:"namespace,omitempty"`
	// Resource is the resource of the object being referenced.
	Resource *string `json:"resource,omitempty"`
	// UID is the uid of the object being referenced.
	UID *string `json:"uid,omitempty"`
}

// Overhead structure represents the resource overhead associated with running a pod.
type IoK8sAPINodeV1Overhead struct {
	// podFixed represents the fixed resource overhead associated with running a pod.
	PodFixed *string `json:"podFixed,omitempty"`
}

// Overhead structure represents the resource overhead associated with running a pod.
type IoK8sAPINodeV1OverheadInput struct {
	// podFixed represents the fixed resource overhead associated with running a pod.
	PodFixed *string `json:"podFixed,omitempty"`
}

// RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://kubernetes.io/docs/concepts/containers/runtime-class/
type IoK8sAPINodeV1RuntimeClass struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called "runc" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.
	Handler string `json:"handler"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// Overhead structure represents the resource overhead associated with running a pod.
	Overhead *IoK8sAPINodeV1Overhead `json:"overhead,omitempty"`
	// Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
	Scheduling *IoK8sAPINodeV1Scheduling `json:"scheduling,omitempty"`
}

// RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://kubernetes.io/docs/concepts/containers/runtime-class/
type IoK8sAPINodeV1RuntimeClassInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called "runc" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.
	Handler string `json:"handler"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// Overhead structure represents the resource overhead associated with running a pod.
	Overhead *IoK8sAPINodeV1OverheadInput `json:"overhead,omitempty"`
	// Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
	Scheduling *IoK8sAPINodeV1SchedulingInput `json:"scheduling,omitempty"`
}

// RuntimeClassList is a list of RuntimeClass objects.
type IoK8sAPINodeV1RuntimeClassList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is a list of schema objects.
	Items []*IoK8sAPINodeV1RuntimeClass `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
type IoK8sAPINodeV1Scheduling struct {
	// nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.
	NodeSelector *string `json:"nodeSelector,omitempty"`
	// tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
	Tolerations []*IoK8sAPICoreV1Toleration `json:"tolerations,omitempty"`
}

// Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
type IoK8sAPINodeV1SchedulingInput struct {
	// nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.
	NodeSelector *string `json:"nodeSelector,omitempty"`
	// tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
	Tolerations []*IoK8sAPICoreV1TolerationInput `json:"tolerations,omitempty"`
}

// Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
type IoK8sAPIPolicyV1Eviction struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// DeleteOptions may be provided when deleting an API object.
	DeleteOptions *IoK8sApimachineryPkgApisMetaV1DeleteOptions `json:"deleteOptions,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
}

// Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
type IoK8sAPIPolicyV1EvictionInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// DeleteOptions may be provided when deleting an API object.
	DeleteOptions *IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput `json:"deleteOptions,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
}

// PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
type IoK8sAPIPolicyV1PodDisruptionBudget struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
	Spec *IoK8sAPIPolicyV1PodDisruptionBudgetSpec `json:"spec,omitempty"`
	// PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
	Status *IoK8sAPIPolicyV1PodDisruptionBudgetStatus `json:"status,omitempty"`
}

// PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
type IoK8sAPIPolicyV1PodDisruptionBudgetInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
	Spec *IoK8sAPIPolicyV1PodDisruptionBudgetSpecInput `json:"spec,omitempty"`
	// PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
	Status *IoK8sAPIPolicyV1PodDisruptionBudgetStatusInput `json:"status,omitempty"`
}

// PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
type IoK8sAPIPolicyV1PodDisruptionBudgetList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is a list of PodDisruptionBudgets
	Items []*IoK8sAPIPolicyV1PodDisruptionBudget `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
type IoK8sAPIPolicyV1PodDisruptionBudgetSpec struct {
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	MaxUnavailable *string `json:"maxUnavailable,omitempty"`
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	MinAvailable *string `json:"minAvailable,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector,omitempty"`
	// UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods should be considered for eviction. Current implementation considers healthy pods, as pods that have status.conditions item with type="Ready",status="True".
	//
	// Valid policies are IfHealthyBudget and AlwaysAllow. If no policy is specified, the default behavior will be used, which corresponds to the IfHealthyBudget policy.
	//
	// IfHealthyBudget policy means that running pods (status.phase="Running"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.
	//
	// AlwaysAllow policy means that all running pods (status.phase="Running"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.
	//
	// Additional policies may be added in the future. Clients making eviction decisions should disallow eviction of unhealthy pods if they encounter an unrecognized policy in this field.
	//
	// This field is beta-level. The eviction API uses this field when the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
	UnhealthyPodEvictionPolicy *string `json:"unhealthyPodEvictionPolicy,omitempty"`
}

// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
type IoK8sAPIPolicyV1PodDisruptionBudgetSpecInput struct {
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	MaxUnavailable *string `json:"maxUnavailable,omitempty"`
	// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
	MinAvailable *string `json:"minAvailable,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"selector,omitempty"`
	// UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods should be considered for eviction. Current implementation considers healthy pods, as pods that have status.conditions item with type="Ready",status="True".
	//
	// Valid policies are IfHealthyBudget and AlwaysAllow. If no policy is specified, the default behavior will be used, which corresponds to the IfHealthyBudget policy.
	//
	// IfHealthyBudget policy means that running pods (status.phase="Running"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.
	//
	// AlwaysAllow policy means that all running pods (status.phase="Running"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.
	//
	// Additional policies may be added in the future. Clients making eviction decisions should disallow eviction of unhealthy pods if they encounter an unrecognized policy in this field.
	//
	// This field is beta-level. The eviction API uses this field when the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
	UnhealthyPodEvictionPolicy *string `json:"unhealthyPodEvictionPolicy,omitempty"`
}

// PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
type IoK8sAPIPolicyV1PodDisruptionBudgetStatus struct {
	// Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed condition. The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute
	//               the number of allowed disruptions. Therefore no disruptions are
	//               allowed and the status of the condition will be False.
	// - InsufficientPods: The number of pods are either at or below the number
	//                     required by the PodDisruptionBudget. No disruptions are
	//                     allowed and the status of the condition will be False.
	// - SufficientPods: There are more pods than required by the PodDisruptionBudget.
	//                   The condition will be True, and the number of allowed
	//                   disruptions are provided by the disruptionsAllowed property.
	Conditions []*IoK8sApimachineryPkgApisMetaV1Condition `json:"conditions,omitempty"`
	// current number of healthy pods
	CurrentHealthy int `json:"currentHealthy"`
	// minimum desired number of healthy pods
	DesiredHealthy int `json:"desiredHealthy"`
	// DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
	DisruptedPods *string `json:"disruptedPods,omitempty"`
	// Number of pod disruptions that are currently allowed.
	DisruptionsAllowed int `json:"disruptionsAllowed"`
	// total number of pods counted by this disruption budget
	ExpectedPods int `json:"expectedPods"`
	// Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
}

// PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
type IoK8sAPIPolicyV1PodDisruptionBudgetStatusInput struct {
	// Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed condition. The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute
	//               the number of allowed disruptions. Therefore no disruptions are
	//               allowed and the status of the condition will be False.
	// - InsufficientPods: The number of pods are either at or below the number
	//                     required by the PodDisruptionBudget. No disruptions are
	//                     allowed and the status of the condition will be False.
	// - SufficientPods: There are more pods than required by the PodDisruptionBudget.
	//                   The condition will be True, and the number of allowed
	//                   disruptions are provided by the disruptionsAllowed property.
	Conditions []*IoK8sApimachineryPkgApisMetaV1ConditionInput `json:"conditions,omitempty"`
	// current number of healthy pods
	CurrentHealthy int `json:"currentHealthy"`
	// minimum desired number of healthy pods
	DesiredHealthy int `json:"desiredHealthy"`
	// DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
	DisruptedPods *string `json:"disruptedPods,omitempty"`
	// Number of pod disruptions that are currently allowed.
	DisruptionsAllowed int `json:"disruptionsAllowed"`
	// total number of pods counted by this disruption budget
	ExpectedPods int `json:"expectedPods"`
	// Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
}

// AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
type IoK8sAPIRbacV1AggregationRule struct {
	// ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
	ClusterRoleSelectors []*IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"clusterRoleSelectors,omitempty"`
}

// AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
type IoK8sAPIRbacV1AggregationRuleInput struct {
	// ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
	ClusterRoleSelectors []*IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"clusterRoleSelectors,omitempty"`
}

// ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.
type IoK8sAPIRbacV1ClusterRole struct {
	// AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
	AggregationRule *IoK8sAPIRbacV1AggregationRule `json:"aggregationRule,omitempty"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// Rules holds all the PolicyRules for this ClusterRole
	Rules []*IoK8sAPIRbacV1PolicyRule `json:"rules,omitempty"`
}

// ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.
type IoK8sAPIRbacV1ClusterRoleBinding struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// RoleRef contains information that points to the role being used
	RoleRef *IoK8sAPIRbacV1RoleRef `json:"roleRef"`
	// Subjects holds references to the objects the role applies to.
	Subjects []*IoK8sAPIRbacV1Subject `json:"subjects,omitempty"`
}

// ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.
type IoK8sAPIRbacV1ClusterRoleBindingInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// RoleRef contains information that points to the role being used
	RoleRef *IoK8sAPIRbacV1RoleRefInput `json:"roleRef"`
	// Subjects holds references to the objects the role applies to.
	Subjects []*IoK8sAPIRbacV1SubjectInput `json:"subjects,omitempty"`
}

// ClusterRoleBindingList is a collection of ClusterRoleBindings
type IoK8sAPIRbacV1ClusterRoleBindingList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is a list of ClusterRoleBindings
	Items []*IoK8sAPIRbacV1ClusterRoleBinding `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.
type IoK8sAPIRbacV1ClusterRoleInput struct {
	// AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
	AggregationRule *IoK8sAPIRbacV1AggregationRuleInput `json:"aggregationRule,omitempty"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// Rules holds all the PolicyRules for this ClusterRole
	Rules []*IoK8sAPIRbacV1PolicyRuleInput `json:"rules,omitempty"`
}

// ClusterRoleList is a collection of ClusterRoles
type IoK8sAPIRbacV1ClusterRoleList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is a list of ClusterRoles
	Items []*IoK8sAPIRbacV1ClusterRole `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
type IoK8sAPIRbacV1PolicyRule struct {
	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. "" represents the core API group and "*" represents all API groups.
	APIGroups []*string `json:"apiGroups,omitempty"`
	// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
	NonResourceURLs []*string `json:"nonResourceURLs,omitempty"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
	ResourceNames []*string `json:"resourceNames,omitempty"`
	// Resources is a list of resources this rule applies to. '*' represents all resources.
	Resources []*string `json:"resources,omitempty"`
	// Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.
	Verbs []*string `json:"verbs"`
}

// PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
type IoK8sAPIRbacV1PolicyRuleInput struct {
	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. "" represents the core API group and "*" represents all API groups.
	APIGroups []*string `json:"apiGroups,omitempty"`
	// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
	NonResourceURLs []*string `json:"nonResourceURLs,omitempty"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
	ResourceNames []*string `json:"resourceNames,omitempty"`
	// Resources is a list of resources this rule applies to. '*' represents all resources.
	Resources []*string `json:"resources,omitempty"`
	// Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.
	Verbs []*string `json:"verbs"`
}

// Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.
type IoK8sAPIRbacV1Role struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// Rules holds all the PolicyRules for this Role
	Rules []*IoK8sAPIRbacV1PolicyRule `json:"rules,omitempty"`
}

// RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.
type IoK8sAPIRbacV1RoleBinding struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// RoleRef contains information that points to the role being used
	RoleRef *IoK8sAPIRbacV1RoleRef `json:"roleRef"`
	// Subjects holds references to the objects the role applies to.
	Subjects []*IoK8sAPIRbacV1Subject `json:"subjects,omitempty"`
}

// RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.
type IoK8sAPIRbacV1RoleBindingInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// RoleRef contains information that points to the role being used
	RoleRef *IoK8sAPIRbacV1RoleRefInput `json:"roleRef"`
	// Subjects holds references to the objects the role applies to.
	Subjects []*IoK8sAPIRbacV1SubjectInput `json:"subjects,omitempty"`
}

// RoleBindingList is a collection of RoleBindings
type IoK8sAPIRbacV1RoleBindingList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is a list of RoleBindings
	Items []*IoK8sAPIRbacV1RoleBinding `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.
type IoK8sAPIRbacV1RoleInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// Rules holds all the PolicyRules for this Role
	Rules []*IoK8sAPIRbacV1PolicyRuleInput `json:"rules,omitempty"`
}

// RoleList is a collection of Roles
type IoK8sAPIRbacV1RoleList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is a list of Roles
	Items []*IoK8sAPIRbacV1Role `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// RoleRef contains information that points to the role being used
type IoK8sAPIRbacV1RoleRef struct {
	// APIGroup is the group for the resource being referenced
	APIGroup string `json:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `json:"kind"`
	// Name is the name of resource being referenced
	Name string `json:"name"`
}

// RoleRef contains information that points to the role being used
type IoK8sAPIRbacV1RoleRefInput struct {
	// APIGroup is the group for the resource being referenced
	APIGroup string `json:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `json:"kind"`
	// Name is the name of resource being referenced
	Name string `json:"name"`
}

// Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
type IoK8sAPIRbacV1Subject struct {
	// APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
	APIGroup *string `json:"apiGroup,omitempty"`
	// Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
	Kind string `json:"kind"`
	// Name of the object being referenced.
	Name string `json:"name"`
	// Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
	Namespace *string `json:"namespace,omitempty"`
}

// Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
type IoK8sAPIRbacV1SubjectInput struct {
	// APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
	APIGroup *string `json:"apiGroup,omitempty"`
	// Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
	Kind string `json:"kind"`
	// Name of the object being referenced.
	Name string `json:"name"`
	// Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
	Namespace *string `json:"namespace,omitempty"`
}

// AllocationResult contains attributes of an allocated resource.
type IoK8sAPIResourceV1alpha2AllocationResult struct {
	// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
	AvailableOnNodes *IoK8sAPICoreV1NodeSelector `json:"availableOnNodes,omitempty"`
	// ResourceHandles contain the state associated with an allocation that should be maintained throughout the lifetime of a claim. Each ResourceHandle contains data that should be passed to a specific kubelet plugin once it lands on a node. This data is returned by the driver after a successful allocation and is opaque to Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
	//
	// Setting this field is optional. It has a maximum size of 32 entries. If null (or empty), it is assumed this allocation will be processed by a single kubelet plugin with no ResourceHandle data attached. The name of the kubelet plugin invoked will match the DriverName set in the ResourceClaimStatus this AllocationResult is embedded in.
	ResourceHandles []*IoK8sAPIResourceV1alpha2ResourceHandle `json:"resourceHandles,omitempty"`
	// Shareable determines whether the resource supports more than one consumer at a time.
	Shareable *bool `json:"shareable,omitempty"`
}

// AllocationResult contains attributes of an allocated resource.
type IoK8sAPIResourceV1alpha2AllocationResultInput struct {
	// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
	AvailableOnNodes *IoK8sAPICoreV1NodeSelectorInput `json:"availableOnNodes,omitempty"`
	// ResourceHandles contain the state associated with an allocation that should be maintained throughout the lifetime of a claim. Each ResourceHandle contains data that should be passed to a specific kubelet plugin once it lands on a node. This data is returned by the driver after a successful allocation and is opaque to Kubernetes. Driver documentation may explain to users how to interpret this data if needed.
	//
	// Setting this field is optional. It has a maximum size of 32 entries. If null (or empty), it is assumed this allocation will be processed by a single kubelet plugin with no ResourceHandle data attached. The name of the kubelet plugin invoked will match the DriverName set in the ResourceClaimStatus this AllocationResult is embedded in.
	ResourceHandles []*IoK8sAPIResourceV1alpha2ResourceHandleInput `json:"resourceHandles,omitempty"`
	// Shareable determines whether the resource supports more than one consumer at a time.
	Shareable *bool `json:"shareable,omitempty"`
}

// PodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type IoK8sAPIResourceV1alpha2PodSchedulingContext struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// PodSchedulingContextSpec describes where resources for the Pod are needed.
	Spec *IoK8sAPIResourceV1alpha2PodSchedulingContextSpec `json:"spec"`
	// PodSchedulingContextStatus describes where resources for the Pod can be allocated.
	Status *IoK8sAPIResourceV1alpha2PodSchedulingContextStatus `json:"status,omitempty"`
}

// PodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type IoK8sAPIResourceV1alpha2PodSchedulingContextInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// PodSchedulingContextSpec describes where resources for the Pod are needed.
	Spec *IoK8sAPIResourceV1alpha2PodSchedulingContextSpecInput `json:"spec"`
	// PodSchedulingContextStatus describes where resources for the Pod can be allocated.
	Status *IoK8sAPIResourceV1alpha2PodSchedulingContextStatusInput `json:"status,omitempty"`
}

// PodSchedulingContextList is a collection of Pod scheduling objects.
type IoK8sAPIResourceV1alpha2PodSchedulingContextList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is the list of PodSchedulingContext objects.
	Items []*IoK8sAPIResourceV1alpha2PodSchedulingContext `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// PodSchedulingContextSpec describes where resources for the Pod are needed.
type IoK8sAPIResourceV1alpha2PodSchedulingContextSpec struct {
	// PotentialNodes lists nodes where the Pod might be able to run.
	//
	// The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
	PotentialNodes []*string `json:"potentialNodes,omitempty"`
	// SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
	SelectedNode *string `json:"selectedNode,omitempty"`
}

// PodSchedulingContextSpec describes where resources for the Pod are needed.
type IoK8sAPIResourceV1alpha2PodSchedulingContextSpecInput struct {
	// PotentialNodes lists nodes where the Pod might be able to run.
	//
	// The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
	PotentialNodes []*string `json:"potentialNodes,omitempty"`
	// SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
	SelectedNode *string `json:"selectedNode,omitempty"`
}

// PodSchedulingContextStatus describes where resources for the Pod can be allocated.
type IoK8sAPIResourceV1alpha2PodSchedulingContextStatus struct {
	// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
	ResourceClaims []*IoK8sAPIResourceV1alpha2ResourceClaimSchedulingStatus `json:"resourceClaims,omitempty"`
}

// PodSchedulingContextStatus describes where resources for the Pod can be allocated.
type IoK8sAPIResourceV1alpha2PodSchedulingContextStatusInput struct {
	// ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
	ResourceClaims []*IoK8sAPIResourceV1alpha2ResourceClaimSchedulingStatusInput `json:"resourceClaims,omitempty"`
}

// ResourceClaim describes which resources are needed by a resource consumer. Its status tracks whether the resource has been allocated and what the resulting attributes are.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type IoK8sAPIResourceV1alpha2ResourceClaim struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// ResourceClaimSpec defines how a resource is to be allocated.
	Spec *IoK8sAPIResourceV1alpha2ResourceClaimSpec `json:"spec"`
	// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
	Status *IoK8sAPIResourceV1alpha2ResourceClaimStatus `json:"status,omitempty"`
}

// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
type IoK8sAPIResourceV1alpha2ResourceClaimConsumerReference struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	APIGroup *string `json:"apiGroup,omitempty"`
	// Name is the name of resource being referenced.
	Name string `json:"name"`
	// Resource is the type of resource being referenced, for example "pods".
	Resource string `json:"resource"`
	// UID identifies exactly one incarnation of the resource.
	UID string `json:"uid"`
}

// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
type IoK8sAPIResourceV1alpha2ResourceClaimConsumerReferenceInput struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	APIGroup *string `json:"apiGroup,omitempty"`
	// Name is the name of resource being referenced.
	Name string `json:"name"`
	// Resource is the type of resource being referenced, for example "pods".
	Resource string `json:"resource"`
	// UID identifies exactly one incarnation of the resource.
	UID string `json:"uid"`
}

// ResourceClaim describes which resources are needed by a resource consumer. Its status tracks whether the resource has been allocated and what the resulting attributes are.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type IoK8sAPIResourceV1alpha2ResourceClaimInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// ResourceClaimSpec defines how a resource is to be allocated.
	Spec *IoK8sAPIResourceV1alpha2ResourceClaimSpecInput `json:"spec"`
	// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
	Status *IoK8sAPIResourceV1alpha2ResourceClaimStatusInput `json:"status,omitempty"`
}

// ResourceClaimList is a collection of claims.
type IoK8sAPIResourceV1alpha2ResourceClaimList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is the list of resource claims.
	Items []*IoK8sAPIResourceV1alpha2ResourceClaim `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
type IoK8sAPIResourceV1alpha2ResourceClaimParametersReference struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	APIGroup *string `json:"apiGroup,omitempty"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
	Kind string `json:"kind"`
	// Name is the name of resource being referenced.
	Name string `json:"name"`
}

// ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
type IoK8sAPIResourceV1alpha2ResourceClaimParametersReferenceInput struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	APIGroup *string `json:"apiGroup,omitempty"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".
	Kind string `json:"kind"`
	// Name is the name of resource being referenced.
	Name string `json:"name"`
}

// ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with "WaitForFirstConsumer" allocation mode.
type IoK8sAPIResourceV1alpha2ResourceClaimSchedulingStatus struct {
	// Name matches the pod.spec.resourceClaims[*].Name field.
	Name *string `json:"name,omitempty"`
	// UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
	//
	// The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.
	UnsuitableNodes []*string `json:"unsuitableNodes,omitempty"`
}

// ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with "WaitForFirstConsumer" allocation mode.
type IoK8sAPIResourceV1alpha2ResourceClaimSchedulingStatusInput struct {
	// Name matches the pod.spec.resourceClaims[*].Name field.
	Name *string `json:"name,omitempty"`
	// UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
	//
	// The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.
	UnsuitableNodes []*string `json:"unsuitableNodes,omitempty"`
}

// ResourceClaimSpec defines how a resource is to be allocated.
type IoK8sAPIResourceV1alpha2ResourceClaimSpec struct {
	// Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
	AllocationMode *string `json:"allocationMode,omitempty"`
	// ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
	ParametersRef *IoK8sAPIResourceV1alpha2ResourceClaimParametersReference `json:"parametersRef,omitempty"`
	// ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
	ResourceClassName string `json:"resourceClassName"`
}

// ResourceClaimSpec defines how a resource is to be allocated.
type IoK8sAPIResourceV1alpha2ResourceClaimSpecInput struct {
	// Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.
	AllocationMode *string `json:"allocationMode,omitempty"`
	// ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
	ParametersRef *IoK8sAPIResourceV1alpha2ResourceClaimParametersReferenceInput `json:"parametersRef,omitempty"`
	// ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.
	ResourceClassName string `json:"resourceClassName"`
}

// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
type IoK8sAPIResourceV1alpha2ResourceClaimStatus struct {
	// AllocationResult contains attributes of an allocated resource.
	Allocation *IoK8sAPIResourceV1alpha2AllocationResult `json:"allocation,omitempty"`
	// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
	//
	// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
	//
	// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
	DeallocationRequested *bool `json:"deallocationRequested,omitempty"`
	// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
	DriverName *string `json:"driverName,omitempty"`
	// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
	//
	// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
	ReservedFor []*IoK8sAPIResourceV1alpha2ResourceClaimConsumerReference `json:"reservedFor,omitempty"`
}

// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
type IoK8sAPIResourceV1alpha2ResourceClaimStatusInput struct {
	// AllocationResult contains attributes of an allocated resource.
	Allocation *IoK8sAPIResourceV1alpha2AllocationResultInput `json:"allocation,omitempty"`
	// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
	//
	// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
	//
	// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
	DeallocationRequested *bool `json:"deallocationRequested,omitempty"`
	// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
	DriverName *string `json:"driverName,omitempty"`
	// ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
	//
	// There can be at most 32 such reservations. This may get increased in the future, but not reduced.
	ReservedFor []*IoK8sAPIResourceV1alpha2ResourceClaimConsumerReferenceInput `json:"reservedFor,omitempty"`
}

// ResourceClaimTemplate is used to produce ResourceClaim objects.
type IoK8sAPIResourceV1alpha2ResourceClaimTemplate struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
	Spec *IoK8sAPIResourceV1alpha2ResourceClaimTemplateSpec `json:"spec"`
}

// ResourceClaimTemplate is used to produce ResourceClaim objects.
type IoK8sAPIResourceV1alpha2ResourceClaimTemplateInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
	Spec *IoK8sAPIResourceV1alpha2ResourceClaimTemplateSpecInput `json:"spec"`
}

// ResourceClaimTemplateList is a collection of claim templates.
type IoK8sAPIResourceV1alpha2ResourceClaimTemplateList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is the list of resource claim templates.
	Items []*IoK8sAPIResourceV1alpha2ResourceClaimTemplate `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
type IoK8sAPIResourceV1alpha2ResourceClaimTemplateSpec struct {
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// ResourceClaimSpec defines how a resource is to be allocated.
	Spec *IoK8sAPIResourceV1alpha2ResourceClaimSpec `json:"spec"`
}

// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
type IoK8sAPIResourceV1alpha2ResourceClaimTemplateSpecInput struct {
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// ResourceClaimSpec defines how a resource is to be allocated.
	Spec *IoK8sAPIResourceV1alpha2ResourceClaimSpecInput `json:"spec"`
}

// ResourceClass is used by administrators to influence how resources are allocated.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type IoK8sAPIResourceV1alpha2ResourceClass struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.
	//
	// Resource drivers have a unique name in forward domain order (acme.example.com).
	DriverName string `json:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.
	ParametersRef *IoK8sAPIResourceV1alpha2ResourceClassParametersReference `json:"parametersRef,omitempty"`
	// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
	SuitableNodes *IoK8sAPICoreV1NodeSelector `json:"suitableNodes,omitempty"`
}

// ResourceClass is used by administrators to influence how resources are allocated.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
type IoK8sAPIResourceV1alpha2ResourceClassInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.
	//
	// Resource drivers have a unique name in forward domain order (acme.example.com).
	DriverName string `json:"driverName"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.
	ParametersRef *IoK8sAPIResourceV1alpha2ResourceClassParametersReferenceInput `json:"parametersRef,omitempty"`
	// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
	SuitableNodes *IoK8sAPICoreV1NodeSelectorInput `json:"suitableNodes,omitempty"`
}

// ResourceClassList is a collection of classes.
type IoK8sAPIResourceV1alpha2ResourceClassList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is the list of resource classes.
	Items []*IoK8sAPIResourceV1alpha2ResourceClass `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.
type IoK8sAPIResourceV1alpha2ResourceClassParametersReference struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	APIGroup *string `json:"apiGroup,omitempty"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
	Kind string `json:"kind"`
	// Name is the name of resource being referenced.
	Name string `json:"name"`
	// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
	Namespace *string `json:"namespace,omitempty"`
}

// ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.
type IoK8sAPIResourceV1alpha2ResourceClassParametersReferenceInput struct {
	// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
	APIGroup *string `json:"apiGroup,omitempty"`
	// Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.
	Kind string `json:"kind"`
	// Name is the name of resource being referenced.
	Name string `json:"name"`
	// Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.
	Namespace *string `json:"namespace,omitempty"`
}

// ResourceHandle holds opaque resource data for processing by a specific kubelet plugin.
type IoK8sAPIResourceV1alpha2ResourceHandle struct {
	// Data contains the opaque data associated with this ResourceHandle. It is set by the controller component of the resource driver whose name matches the DriverName set in the ResourceClaimStatus this ResourceHandle is embedded in. It is set at allocation time and is intended for processing by the kubelet plugin whose name matches the DriverName set in this ResourceHandle.
	//
	// The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
	Data *string `json:"data,omitempty"`
	// DriverName specifies the name of the resource driver whose kubelet plugin should be invoked to process this ResourceHandle's data once it lands on a node. This may differ from the DriverName set in ResourceClaimStatus this ResourceHandle is embedded in.
	DriverName *string `json:"driverName,omitempty"`
}

// ResourceHandle holds opaque resource data for processing by a specific kubelet plugin.
type IoK8sAPIResourceV1alpha2ResourceHandleInput struct {
	// Data contains the opaque data associated with this ResourceHandle. It is set by the controller component of the resource driver whose name matches the DriverName set in the ResourceClaimStatus this ResourceHandle is embedded in. It is set at allocation time and is intended for processing by the kubelet plugin whose name matches the DriverName set in this ResourceHandle.
	//
	// The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
	Data *string `json:"data,omitempty"`
	// DriverName specifies the name of the resource driver whose kubelet plugin should be invoked to process this ResourceHandle's data once it lands on a node. This may differ from the DriverName set in ResourceClaimStatus this ResourceHandle is embedded in.
	DriverName *string `json:"driverName,omitempty"`
}

// PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.
type IoK8sAPISchedulingV1PriorityClass struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// description is an arbitrary string that usually provides guidelines on when this priority class should be used.
	Description *string `json:"description,omitempty"`
	// globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to true, the smallest value of such global default PriorityClasses will be used as the default priority.
	GlobalDefault *bool `json:"globalDefault,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// preemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
	PreemptionPolicy *string `json:"preemptionPolicy,omitempty"`
	// value represents the integer value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec.
	Value int `json:"value"`
}

// PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.
type IoK8sAPISchedulingV1PriorityClassInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// description is an arbitrary string that usually provides guidelines on when this priority class should be used.
	Description *string `json:"description,omitempty"`
	// globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to true, the smallest value of such global default PriorityClasses will be used as the default priority.
	GlobalDefault *bool `json:"globalDefault,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// preemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
	PreemptionPolicy *string `json:"preemptionPolicy,omitempty"`
	// value represents the integer value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec.
	Value int `json:"value"`
}

// PriorityClassList is a collection of priority classes.
type IoK8sAPISchedulingV1PriorityClassList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is the list of PriorityClasses
	Items []*IoK8sAPISchedulingV1PriorityClass `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
type IoK8sAPIStorageV1CSIDriver struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// CSIDriverSpec is the specification of a CSIDriver.
	Spec *IoK8sAPIStorageV1CSIDriverSpec `json:"spec"`
}

// CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
type IoK8sAPIStorageV1CSIDriverInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// CSIDriverSpec is the specification of a CSIDriver.
	Spec *IoK8sAPIStorageV1CSIDriverSpecInput `json:"spec"`
}

// CSIDriverList is a collection of CSIDriver objects.
type IoK8sAPIStorageV1CSIDriverList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is the list of CSIDriver
	Items []*IoK8sAPIStorageV1CSIDriver `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// CSIDriverSpec is the specification of a CSIDriver.
type IoK8sAPIStorageV1CSIDriverSpec struct {
	// attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
	//
	// This field is immutable.
	AttachRequired *bool `json:"attachRequired,omitempty"`
	// fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.
	//
	// This field is immutable.
	//
	// Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.
	FsGroupPolicy *string `json:"fsGroupPolicy,omitempty"`
	// podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.
	//
	// The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.
	//
	// The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" if the volume is an ephemeral inline volume
	//                                 defined by a CSIVolumeSource, otherwise "false"
	//
	// "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
	//
	// This field is immutable.
	PodInfoOnMount *bool `json:"podInfoOnMount,omitempty"`
	// requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.
	//
	// Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.
	RequiresRepublish *bool `json:"requiresRepublish,omitempty"`
	// seLinuxMount specifies if the CSI driver supports "-o context" mount option.
	//
	// When "true", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with "-o context=xyz" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.
	//
	// When "false", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.
	//
	// Default is "false".
	SeLinuxMount *bool `json:"seLinuxMount,omitempty"`
	// storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.
	//
	// The check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.
	//
	// Alternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.
	//
	// This field was immutable in Kubernetes <= 1.22 and now is mutable.
	StorageCapacity *bool `json:"storageCapacity,omitempty"`
	// tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: "csi.storage.k8s.io/serviceAccount.tokens": {
	//   "<audience>": {
	//     "token": <token>,
	//     "expirationTimestamp": <expiration timestamp in RFC3339>,
	//   },
	//   ...
	// }
	//
	// Note: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.
	TokenRequests []*IoK8sAPIStorageV1TokenRequest `json:"tokenRequests,omitempty"`
	// volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.
	//
	// The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.
	//
	// For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.
	//
	// This field is beta. This field is immutable.
	VolumeLifecycleModes []*string `json:"volumeLifecycleModes,omitempty"`
}

// CSIDriverSpec is the specification of a CSIDriver.
type IoK8sAPIStorageV1CSIDriverSpecInput struct {
	// attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
	//
	// This field is immutable.
	AttachRequired *bool `json:"attachRequired,omitempty"`
	// fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.
	//
	// This field is immutable.
	//
	// Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.
	FsGroupPolicy *string `json:"fsGroupPolicy,omitempty"`
	// podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.
	//
	// The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.
	//
	// The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" if the volume is an ephemeral inline volume
	//                                 defined by a CSIVolumeSource, otherwise "false"
	//
	// "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
	//
	// This field is immutable.
	PodInfoOnMount *bool `json:"podInfoOnMount,omitempty"`
	// requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.
	//
	// Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.
	RequiresRepublish *bool `json:"requiresRepublish,omitempty"`
	// seLinuxMount specifies if the CSI driver supports "-o context" mount option.
	//
	// When "true", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with "-o context=xyz" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.
	//
	// When "false", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.
	//
	// Default is "false".
	SeLinuxMount *bool `json:"seLinuxMount,omitempty"`
	// storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.
	//
	// The check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.
	//
	// Alternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.
	//
	// This field was immutable in Kubernetes <= 1.22 and now is mutable.
	StorageCapacity *bool `json:"storageCapacity,omitempty"`
	// tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: "csi.storage.k8s.io/serviceAccount.tokens": {
	//   "<audience>": {
	//     "token": <token>,
	//     "expirationTimestamp": <expiration timestamp in RFC3339>,
	//   },
	//   ...
	// }
	//
	// Note: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.
	TokenRequests []*IoK8sAPIStorageV1TokenRequestInput `json:"tokenRequests,omitempty"`
	// volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.
	//
	// The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.
	//
	// For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.
	//
	// This field is beta. This field is immutable.
	VolumeLifecycleModes []*string `json:"volumeLifecycleModes,omitempty"`
}

// CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
type IoK8sAPIStorageV1CSINode struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// CSINodeSpec holds information about the specification of all CSI drivers installed on a node
	Spec *IoK8sAPIStorageV1CSINodeSpec `json:"spec"`
}

// CSINodeDriver holds information about the specification of one CSI driver installed on a node
type IoK8sAPIStorageV1CSINodeDriver struct {
	// VolumeNodeResources is a set of resource limits for scheduling of volumes.
	Allocatable *IoK8sAPIStorageV1VolumeNodeResources `json:"allocatable,omitempty"`
	// name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
	Name string `json:"name"`
	// nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
	NodeID string `json:"nodeID"`
	// topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
	TopologyKeys []*string `json:"topologyKeys,omitempty"`
}

// CSINodeDriver holds information about the specification of one CSI driver installed on a node
type IoK8sAPIStorageV1CSINodeDriverInput struct {
	// VolumeNodeResources is a set of resource limits for scheduling of volumes.
	Allocatable *IoK8sAPIStorageV1VolumeNodeResourcesInput `json:"allocatable,omitempty"`
	// name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
	Name string `json:"name"`
	// nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
	NodeID string `json:"nodeID"`
	// topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
	TopologyKeys []*string `json:"topologyKeys,omitempty"`
}

// CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
type IoK8sAPIStorageV1CSINodeInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// CSINodeSpec holds information about the specification of all CSI drivers installed on a node
	Spec *IoK8sAPIStorageV1CSINodeSpecInput `json:"spec"`
}

// CSINodeList is a collection of CSINode objects.
type IoK8sAPIStorageV1CSINodeList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is the list of CSINode
	Items []*IoK8sAPIStorageV1CSINode `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// CSINodeSpec holds information about the specification of all CSI drivers installed on a node
type IoK8sAPIStorageV1CSINodeSpec struct {
	// drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
	Drivers []*IoK8sAPIStorageV1CSINodeDriver `json:"drivers"`
}

// CSINodeSpec holds information about the specification of all CSI drivers installed on a node
type IoK8sAPIStorageV1CSINodeSpecInput struct {
	// drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
	Drivers []*IoK8sAPIStorageV1CSINodeDriverInput `json:"drivers"`
}

// CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.
//
// For example this can express things like: - StorageClass "standard" has "1234 GiB" available in "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in "kubernetes.io/hostname=knode-abc123"
//
// The following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero
//
// The producer of these objects can decide which approach is more suitable.
//
// They are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.
type IoK8sAPIStorageV1CSIStorageCapacity struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// ``` <quantity>        ::= <signedNumber><suffix>
	//
	// 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	//
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//
	// 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	//
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//
	// 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	//
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//
	// - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
	//
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//
	// - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	Capacity *string `json:"capacity,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// ``` <quantity>        ::= <signedNumber><suffix>
	//
	// 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	//
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//
	// 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	//
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//
	// 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	//
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//
	// - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
	//
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//
	// - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	MaximumVolumeSize *string `json:"maximumVolumeSize,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NodeTopology *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"nodeTopology,omitempty"`
	// storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.
	StorageClassName string `json:"storageClassName"`
}

// CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.
//
// For example this can express things like: - StorageClass "standard" has "1234 GiB" available in "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in "kubernetes.io/hostname=knode-abc123"
//
// The following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero
//
// The producer of these objects can decide which approach is more suitable.
//
// They are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.
type IoK8sAPIStorageV1CSIStorageCapacityInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// ``` <quantity>        ::= <signedNumber><suffix>
	//
	// 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	//
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//
	// 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	//
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//
	// 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	//
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//
	// - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
	//
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//
	// - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	Capacity *string `json:"capacity,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
	//
	// The serialization format is:
	//
	// ``` <quantity>        ::= <signedNumber><suffix>
	//
	// 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
	//
	// <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
	//
	// 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
	//
	// <decimalSI>       ::= m | "" | k | M | G | T | P | E
	//
	// 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
	//
	// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
	//
	// No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
	//
	// When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
	//
	// Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
	//
	// - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
	//
	// The sign will be omitted unless the number is negative.
	//
	// Examples:
	//
	// - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
	//
	// Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
	//
	// Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
	//
	// This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	MaximumVolumeSize *string `json:"maximumVolumeSize,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
	NodeTopology *IoK8sApimachineryPkgApisMetaV1LabelSelectorInput `json:"nodeTopology,omitempty"`
	// storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.
	StorageClassName string `json:"storageClassName"`
}

// CSIStorageCapacityList is a collection of CSIStorageCapacity objects.
type IoK8sAPIStorageV1CSIStorageCapacityList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is the list of CSIStorageCapacity objects.
	Items []*IoK8sAPIStorageV1CSIStorageCapacity `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
//
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
type IoK8sAPIStorageV1StorageClass struct {
	// allowVolumeExpansion shows whether the storage class allow volume expand.
	AllowVolumeExpansion *bool `json:"allowVolumeExpansion,omitempty"`
	// allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.
	AllowedTopologies []*IoK8sAPICoreV1TopologySelectorTerm `json:"allowedTopologies,omitempty"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
	MountOptions []*string `json:"mountOptions,omitempty"`
	// parameters holds the parameters for the provisioner that should create volumes of this storage class.
	Parameters *string `json:"parameters,omitempty"`
	// provisioner indicates the type of the provisioner.
	Provisioner string `json:"provisioner"`
	// reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.
	ReclaimPolicy *string `json:"reclaimPolicy,omitempty"`
	// volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
	VolumeBindingMode *string `json:"volumeBindingMode,omitempty"`
}

// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
//
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
type IoK8sAPIStorageV1StorageClassInput struct {
	// allowVolumeExpansion shows whether the storage class allow volume expand.
	AllowVolumeExpansion *bool `json:"allowVolumeExpansion,omitempty"`
	// allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.
	AllowedTopologies []*IoK8sAPICoreV1TopologySelectorTermInput `json:"allowedTopologies,omitempty"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
	MountOptions []*string `json:"mountOptions,omitempty"`
	// parameters holds the parameters for the provisioner that should create volumes of this storage class.
	Parameters *string `json:"parameters,omitempty"`
	// provisioner indicates the type of the provisioner.
	Provisioner string `json:"provisioner"`
	// reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.
	ReclaimPolicy *string `json:"reclaimPolicy,omitempty"`
	// volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
	VolumeBindingMode *string `json:"volumeBindingMode,omitempty"`
}

// StorageClassList is a collection of storage classes.
type IoK8sAPIStorageV1StorageClassList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is the list of StorageClasses
	Items []*IoK8sAPIStorageV1StorageClass `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// TokenRequest contains parameters of a service account token.
type IoK8sAPIStorageV1TokenRequest struct {
	// audience is the intended audience of the token in "TokenRequestSpec". It will default to the audiences of kube apiserver.
	Audience string `json:"audience"`
	// expirationSeconds is the duration of validity of the token in "TokenRequestSpec". It has the same default value of "ExpirationSeconds" in "TokenRequestSpec".
	ExpirationSeconds *string `json:"expirationSeconds,omitempty"`
}

// TokenRequest contains parameters of a service account token.
type IoK8sAPIStorageV1TokenRequestInput struct {
	// audience is the intended audience of the token in "TokenRequestSpec". It will default to the audiences of kube apiserver.
	Audience string `json:"audience"`
	// expirationSeconds is the duration of validity of the token in "TokenRequestSpec". It has the same default value of "ExpirationSeconds" in "TokenRequestSpec".
	ExpirationSeconds *string `json:"expirationSeconds,omitempty"`
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type IoK8sAPIStorageV1VolumeAttachment struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
	Spec *IoK8sAPIStorageV1VolumeAttachmentSpec `json:"spec"`
	// VolumeAttachmentStatus is the status of a VolumeAttachment request.
	Status *IoK8sAPIStorageV1VolumeAttachmentStatus `json:"status,omitempty"`
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
//
// VolumeAttachment objects are non-namespaced.
type IoK8sAPIStorageV1VolumeAttachmentInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
	Spec *IoK8sAPIStorageV1VolumeAttachmentSpecInput `json:"spec"`
	// VolumeAttachmentStatus is the status of a VolumeAttachment request.
	Status *IoK8sAPIStorageV1VolumeAttachmentStatusInput `json:"status,omitempty"`
}

// VolumeAttachmentList is a collection of VolumeAttachment objects.
type IoK8sAPIStorageV1VolumeAttachmentList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items is the list of VolumeAttachments
	Items []*IoK8sAPIStorageV1VolumeAttachment `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type IoK8sAPIStorageV1VolumeAttachmentSource struct {
	// PersistentVolumeSpec is the specification of a persistent volume.
	InlineVolumeSpec *IoK8sAPICoreV1PersistentVolumeSpec `json:"inlineVolumeSpec,omitempty"`
	// persistentVolumeName represents the name of the persistent volume to attach.
	PersistentVolumeName *string `json:"persistentVolumeName,omitempty"`
}

// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
type IoK8sAPIStorageV1VolumeAttachmentSourceInput struct {
	// PersistentVolumeSpec is the specification of a persistent volume.
	InlineVolumeSpec *IoK8sAPICoreV1PersistentVolumeSpecInput `json:"inlineVolumeSpec,omitempty"`
	// persistentVolumeName represents the name of the persistent volume to attach.
	PersistentVolumeName *string `json:"persistentVolumeName,omitempty"`
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type IoK8sAPIStorageV1VolumeAttachmentSpec struct {
	// attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
	Attacher string `json:"attacher"`
	// nodeName represents the node that the volume should be attached to.
	NodeName string `json:"nodeName"`
	// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
	Source *IoK8sAPIStorageV1VolumeAttachmentSource `json:"source"`
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
type IoK8sAPIStorageV1VolumeAttachmentSpecInput struct {
	// attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
	Attacher string `json:"attacher"`
	// nodeName represents the node that the volume should be attached to.
	NodeName string `json:"nodeName"`
	// VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
	Source *IoK8sAPIStorageV1VolumeAttachmentSourceInput `json:"source"`
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type IoK8sAPIStorageV1VolumeAttachmentStatus struct {
	// VolumeError captures an error encountered during a volume operation.
	AttachError *IoK8sAPIStorageV1VolumeError `json:"attachError,omitempty"`
	// attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	Attached bool `json:"attached"`
	// attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachmentMetadata *string `json:"attachmentMetadata,omitempty"`
	// VolumeError captures an error encountered during a volume operation.
	DetachError *IoK8sAPIStorageV1VolumeError `json:"detachError,omitempty"`
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
type IoK8sAPIStorageV1VolumeAttachmentStatusInput struct {
	// VolumeError captures an error encountered during a volume operation.
	AttachError *IoK8sAPIStorageV1VolumeErrorInput `json:"attachError,omitempty"`
	// attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	Attached bool `json:"attached"`
	// attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachmentMetadata *string `json:"attachmentMetadata,omitempty"`
	// VolumeError captures an error encountered during a volume operation.
	DetachError *IoK8sAPIStorageV1VolumeErrorInput `json:"detachError,omitempty"`
}

// VolumeError captures an error encountered during a volume operation.
type IoK8sAPIStorageV1VolumeError struct {
	// message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
	Message *string `json:"message,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	Time *string `json:"time,omitempty"`
}

// VolumeError captures an error encountered during a volume operation.
type IoK8sAPIStorageV1VolumeErrorInput struct {
	// message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
	Message *string `json:"message,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	Time *string `json:"time,omitempty"`
}

// VolumeNodeResources is a set of resource limits for scheduling of volumes.
type IoK8sAPIStorageV1VolumeNodeResources struct {
	// count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.
	Count *int `json:"count,omitempty"`
}

// VolumeNodeResources is a set of resource limits for scheduling of volumes.
type IoK8sAPIStorageV1VolumeNodeResourcesInput struct {
	// count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.
	Count *int `json:"count,omitempty"`
}

// CustomResourceColumnDefinition specifies a column for server side printing.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition struct {
	// description is a human readable description of this column.
	Description *string `json:"description,omitempty"`
	// format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
	Format *string `json:"format,omitempty"`
	// jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
	JSONPath string `json:"jsonPath"`
	// name is a human readable name for the column.
	Name string `json:"name"`
	// priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
	Priority *int `json:"priority,omitempty"`
	// type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
	Type string `json:"type"`
}

// CustomResourceColumnDefinition specifies a column for server side printing.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinitionInput struct {
	// description is a human readable description of this column.
	Description *string `json:"description,omitempty"`
	// format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
	Format *string `json:"format,omitempty"`
	// jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
	JSONPath string `json:"jsonPath"`
	// name is a human readable name for the column.
	Name string `json:"name"`
	// priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
	Priority *int `json:"priority,omitempty"`
	// type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
	Type string `json:"type"`
}

// CustomResourceConversion describes how to convert different versions of a CR.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion struct {
	// strategy specifies how custom resources are converted between versions. Allowed values are: - `"None"`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `"Webhook"`: API Server will call to an external webhook to do the conversion. Additional information
	//   is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set.
	Strategy string `json:"strategy"`
	// WebhookConversion describes how to call a conversion webhook
	Webhook *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion `json:"webhook,omitempty"`
}

// CustomResourceConversion describes how to convert different versions of a CR.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversionInput struct {
	// strategy specifies how custom resources are converted between versions. Allowed values are: - `"None"`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `"Webhook"`: API Server will call to an external webhook to do the conversion. Additional information
	//   is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set.
	Strategy string `json:"strategy"`
	// WebhookConversion describes how to call a conversion webhook
	Webhook *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversionInput `json:"webhook,omitempty"`
}

// CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format <.spec.name>.<.spec.group>.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// CustomResourceDefinitionSpec describes how a user wants their resource to appear
	Spec *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec `json:"spec"`
	// CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
	Status *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus `json:"status,omitempty"`
}

// CustomResourceDefinitionCondition contains details for the current condition of this pod.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// message is a human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// reason is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// status is the status of the condition. Can be True, False, Unknown.
	Status string `json:"status"`
	// type is the type of the condition. Types include Established, NamesAccepted and Terminating.
	Type string `json:"type"`
}

// CustomResourceDefinitionCondition contains details for the current condition of this pod.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// message is a human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// reason is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// status is the status of the condition. Can be True, False, Unknown.
	Status string `json:"status"`
	// type is the type of the condition. Types include Established, NamesAccepted and Terminating.
	Type string `json:"type"`
}

// CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format <.spec.name>.<.spec.group>.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// CustomResourceDefinitionSpec describes how a user wants their resource to appear
	Spec *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpecInput `json:"spec"`
	// CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
	Status *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatusInput `json:"status,omitempty"`
}

// CustomResourceDefinitionList is a list of CustomResourceDefinition objects.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// items list individual CustomResourceDefinition objects
	Items []*IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames struct {
	// categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
	Categories []*string `json:"categories,omitempty"`
	// kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
	Kind string `json:"kind"`
	// listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
	ListKind *string `json:"listKind,omitempty"`
	// plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
	Plural string `json:"plural"`
	// shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
	ShortNames []*string `json:"shortNames,omitempty"`
	// singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
	Singular *string `json:"singular,omitempty"`
}

// CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNamesInput struct {
	// categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
	Categories []*string `json:"categories,omitempty"`
	// kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
	Kind string `json:"kind"`
	// listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
	ListKind *string `json:"listKind,omitempty"`
	// plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
	Plural string `json:"plural"`
	// shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
	ShortNames []*string `json:"shortNames,omitempty"`
	// singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
	Singular *string `json:"singular,omitempty"`
}

// CustomResourceDefinitionSpec describes how a user wants their resource to appear
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec struct {
	// CustomResourceConversion describes how to convert different versions of a CR.
	Conversion *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion `json:"conversion,omitempty"`
	// group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
	Group string `json:"group"`
	// CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
	Names *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames `json:"names"`
	// preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#field-pruning for details.
	PreserveUnknownFields *bool `json:"preserveUnknownFields,omitempty"`
	// scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.
	Scope string `json:"scope"`
	// versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
	Versions []*IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion `json:"versions"`
}

// CustomResourceDefinitionSpec describes how a user wants their resource to appear
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpecInput struct {
	// CustomResourceConversion describes how to convert different versions of a CR.
	Conversion *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversionInput `json:"conversion,omitempty"`
	// group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
	Group string `json:"group"`
	// CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
	Names *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNamesInput `json:"names"`
	// preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#field-pruning for details.
	PreserveUnknownFields *bool `json:"preserveUnknownFields,omitempty"`
	// scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.
	Scope string `json:"scope"`
	// versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
	Versions []*IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersionInput `json:"versions"`
}

// CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus struct {
	// CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
	AcceptedNames *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames `json:"acceptedNames,omitempty"`
	// conditions indicate state for particular aspects of a CustomResourceDefinition
	Conditions []*IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition `json:"conditions,omitempty"`
	// storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.
	StoredVersions []*string `json:"storedVersions,omitempty"`
}

// CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatusInput struct {
	// CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
	AcceptedNames *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNamesInput `json:"acceptedNames,omitempty"`
	// conditions indicate state for particular aspects of a CustomResourceDefinition
	Conditions []*IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionConditionInput `json:"conditions,omitempty"`
	// storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.
	StoredVersions []*string `json:"storedVersions,omitempty"`
}

// CustomResourceDefinitionVersion describes a version for CRD.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion struct {
	// additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If no columns are specified, a single column displaying the age of the custom resource is used.
	AdditionalPrinterColumns []*IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition `json:"additionalPrinterColumns,omitempty"`
	// deprecated indicates this version of the custom resource API is deprecated. When set to true, API requests to this version receive a warning header in the server response. Defaults to false.
	Deprecated *bool `json:"deprecated,omitempty"`
	// deprecationWarning overrides the default warning returned to API clients. May only be set when `deprecated` is true. The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists.
	DeprecationWarning *string `json:"deprecationWarning,omitempty"`
	// name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.
	Name string `json:"name"`
	// CustomResourceValidation is a list of validation methods for CustomResources.
	Schema *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation `json:"schema,omitempty"`
	// served is a flag enabling/disabling this version from being served via REST APIs
	Served bool `json:"served"`
	// storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.
	Storage bool `json:"storage"`
	// CustomResourceSubresources defines the status and scale subresources for CustomResources.
	Subresources *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources `json:"subresources,omitempty"`
}

// CustomResourceDefinitionVersion describes a version for CRD.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersionInput struct {
	// additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If no columns are specified, a single column displaying the age of the custom resource is used.
	AdditionalPrinterColumns []*IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinitionInput `json:"additionalPrinterColumns,omitempty"`
	// deprecated indicates this version of the custom resource API is deprecated. When set to true, API requests to this version receive a warning header in the server response. Defaults to false.
	Deprecated *bool `json:"deprecated,omitempty"`
	// deprecationWarning overrides the default warning returned to API clients. May only be set when `deprecated` is true. The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists.
	DeprecationWarning *string `json:"deprecationWarning,omitempty"`
	// name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.
	Name string `json:"name"`
	// CustomResourceValidation is a list of validation methods for CustomResources.
	Schema *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidationInput `json:"schema,omitempty"`
	// served is a flag enabling/disabling this version from being served via REST APIs
	Served bool `json:"served"`
	// storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.
	Storage bool `json:"storage"`
	// CustomResourceSubresources defines the status and scale subresources for CustomResources.
	Subresources *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourcesInput `json:"subresources,omitempty"`
}

// CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale struct {
	// labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.
	LabelSelectorPath *string `json:"labelSelectorPath,omitempty"`
	// specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.
	SpecReplicasPath string `json:"specReplicasPath"`
	// statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.
	StatusReplicasPath string `json:"statusReplicasPath"`
}

// CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScaleInput struct {
	// labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.
	LabelSelectorPath *string `json:"labelSelectorPath,omitempty"`
	// specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.
	SpecReplicasPath string `json:"specReplicasPath"`
	// statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.
	StatusReplicasPath string `json:"statusReplicasPath"`
}

// CustomResourceSubresources defines the status and scale subresources for CustomResources.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources struct {
	// CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.
	Scale *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale `json:"scale,omitempty"`
	// CustomResourceSubresourceStatus defines how to serve the status subresource for CustomResources. Status is represented by the `.status` JSON path inside of a CustomResource. When set, * exposes a /status subresource for the custom resource * PUT requests to the /status subresource take a custom resource object, and ignore changes to anything except the status stanza * PUT/POST/PATCH requests to the custom resource ignore changes to the status stanza
	Status *string `json:"status,omitempty"`
}

// CustomResourceSubresources defines the status and scale subresources for CustomResources.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourcesInput struct {
	// CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.
	Scale *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScaleInput `json:"scale,omitempty"`
	// CustomResourceSubresourceStatus defines how to serve the status subresource for CustomResources. Status is represented by the `.status` JSON path inside of a CustomResource. When set, * exposes a /status subresource for the custom resource * PUT requests to the /status subresource take a custom resource object, and ignore changes to anything except the status stanza * PUT/POST/PATCH requests to the custom resource ignore changes to the status stanza
	Status *string `json:"status,omitempty"`
}

// CustomResourceValidation is a list of validation methods for CustomResources.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation struct {
	// JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
	OpenAPIV3Schema *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps `json:"openAPIV3Schema,omitempty"`
}

// CustomResourceValidation is a list of validation methods for CustomResources.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidationInput struct {
	// JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
	OpenAPIV3Schema *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsInput `json:"openAPIV3Schema,omitempty"`
}

// ExternalDocumentation allows referencing an external resource for extended documentation.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation struct {
	Description *string `json:"description,omitempty"`
	URL         *string `json:"url,omitempty"`
}

// ExternalDocumentation allows referencing an external resource for extended documentation.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentationInput struct {
	Description *string `json:"description,omitempty"`
	URL         *string `json:"url,omitempty"`
}

// JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps struct {
	// JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
	AdditionalItems *string `json:"additionalItems,omitempty"`
	// JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
	AdditionalProperties *string                                                             `json:"additionalProperties,omitempty"`
	AllOf                []*IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps `json:"allOf,omitempty"`
	AnyOf                []*IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps `json:"anyOf,omitempty"`
	// JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
	Default      *string   `json:"default,omitempty"`
	Definitions  *string   `json:"definitions,omitempty"`
	Dependencies *string   `json:"dependencies,omitempty"`
	Description  *string   `json:"description,omitempty"`
	Enum         []*string `json:"enum,omitempty"`
	// JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
	Example          *string `json:"example,omitempty"`
	ExclusiveMaximum *bool   `json:"exclusiveMaximum,omitempty"`
	ExclusiveMinimum *bool   `json:"exclusiveMinimum,omitempty"`
	// ExternalDocumentation allows referencing an external resource for extended documentation.
	ExternalDocs *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation `json:"externalDocs,omitempty"`
	// format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:
	//
	// - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041" - isbn10: an ISBN10 number string like "0321751043" - isbn13: an ISBN13 number string like "978-0321751041" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\d{3}[- ]?\d{2}[- ]?\d{4}$ - hexcolor: an hexadecimal color code like "#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like "rgb(255,255,2559" - byte: base64 encoded binary data - password: any kind of string - date: a date string like "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.
	Format *string `json:"format,omitempty"`
	ID     *string `json:"id,omitempty"`
	// JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes.
	Items         *string  `json:"items,omitempty"`
	MaxItems      *string  `json:"maxItems,omitempty"`
	MaxLength     *string  `json:"maxLength,omitempty"`
	MaxProperties *string  `json:"maxProperties,omitempty"`
	Maximum       *float64 `json:"maximum,omitempty"`
	MinItems      *string  `json:"minItems,omitempty"`
	MinLength     *string  `json:"minLength,omitempty"`
	MinProperties *string  `json:"minProperties,omitempty"`
	Minimum       *float64 `json:"minimum,omitempty"`
	MultipleOf    *float64 `json:"multipleOf,omitempty"`
	// JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
	Not               *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps   `json:"not,omitempty"`
	Nullable          *bool                                                               `json:"nullable,omitempty"`
	OneOf             []*IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps `json:"oneOf,omitempty"`
	Pattern           *string                                                             `json:"pattern,omitempty"`
	PatternProperties *string                                                             `json:"patternProperties,omitempty"`
	Properties        *string                                                             `json:"properties,omitempty"`
	Ref               *string                                                             `json:"ref,omitempty"`
	Required          []*string                                                           `json:"required,omitempty"`
	Schema            *string                                                             `json:"schema,omitempty"`
	Title             *string                                                             `json:"title,omitempty"`
	Type              *string                                                             `json:"type,omitempty"`
	UniqueItems       *bool                                                               `json:"uniqueItems,omitempty"`
	// x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).
	XKubernetesEmbeddedResource *bool `json:"xKubernetesEmbeddedResource,omitempty"`
	// x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:
	//
	// 1) anyOf:
	//    - type: integer
	//    - type: string
	// 2) allOf:
	//    - anyOf:
	//      - type: integer
	//      - type: string
	//    - ... zero or more
	XKubernetesIntOrString *bool `json:"xKubernetesIntOrString,omitempty"`
	// x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.
	//
	// This tag MUST only be used on lists that have the "x-kubernetes-list-type" extension set to "map". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).
	//
	// The properties specified must either be required or have a default value, to ensure those properties are present for all list items.
	XKubernetesListMapKeys []*string `json:"xKubernetesListMapKeys,omitempty"`
	// x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:
	//
	// 1) `atomic`: the list is treated as a single entity, like a scalar.
	//      Atomic lists will be entirely replaced when updated. This extension
	//      may be used on any type of list (struct, scalar, ...).
	// 2) `set`:
	//      Sets are lists that must not have multiple items with the same value. Each
	//      value must be a scalar, an object with x-kubernetes-map-type `atomic` or an
	//      array with x-kubernetes-list-type `atomic`.
	// 3) `map`:
	//      These lists are like maps in that their elements have a non-index key
	//      used to identify them. Order is preserved upon merge. The map tag
	//      must only be used on a list with elements of type object.
	// Defaults to atomic for arrays.
	XKubernetesListType *string `json:"xKubernetesListType,omitempty"`
	// x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:
	//
	// 1) `granular`:
	//      These maps are actual maps (key-value pairs) and each fields are independent
	//      from each other (they can each be manipulated by separate actors). This is
	//      the default behaviour for all maps.
	// 2) `atomic`: the list is treated as a single entity, like a scalar.
	//      Atomic maps will be entirely replaced when updated.
	XKubernetesMapType *string `json:"xKubernetesMapType,omitempty"`
	// x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.
	XKubernetesPreserveUnknownFields *bool `json:"xKubernetesPreserveUnknownFields,omitempty"`
	// x-kubernetes-validations describes a list of validation rules written in the CEL expression language. This field is an alpha-level. Using this field requires the feature gate `CustomResourceValidationExpressions` to be enabled.
	XKubernetesValidations []*IoK8sApiextensionsApiserverPkgApisApiextensionsV1ValidationRule `json:"xKubernetesValidations,omitempty"`
}

// JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsInput struct {
	// JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
	AdditionalItems *string `json:"additionalItems,omitempty"`
	// JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
	AdditionalProperties *string                                                                  `json:"additionalProperties,omitempty"`
	AllOf                []*IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsInput `json:"allOf,omitempty"`
	AnyOf                []*IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsInput `json:"anyOf,omitempty"`
	// JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
	Default      *string   `json:"default,omitempty"`
	Definitions  *string   `json:"definitions,omitempty"`
	Dependencies *string   `json:"dependencies,omitempty"`
	Description  *string   `json:"description,omitempty"`
	Enum         []*string `json:"enum,omitempty"`
	// JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
	Example          *string `json:"example,omitempty"`
	ExclusiveMaximum *bool   `json:"exclusiveMaximum,omitempty"`
	ExclusiveMinimum *bool   `json:"exclusiveMinimum,omitempty"`
	// ExternalDocumentation allows referencing an external resource for extended documentation.
	ExternalDocs *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentationInput `json:"externalDocs,omitempty"`
	// format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:
	//
	// - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041" - isbn10: an ISBN10 number string like "0321751043" - isbn13: an ISBN13 number string like "978-0321751041" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\d{3}[- ]?\d{2}[- ]?\d{4}$ - hexcolor: an hexadecimal color code like "#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like "rgb(255,255,2559" - byte: base64 encoded binary data - password: any kind of string - date: a date string like "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.
	Format *string `json:"format,omitempty"`
	ID     *string `json:"id,omitempty"`
	// JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes.
	Items         *string  `json:"items,omitempty"`
	MaxItems      *string  `json:"maxItems,omitempty"`
	MaxLength     *string  `json:"maxLength,omitempty"`
	MaxProperties *string  `json:"maxProperties,omitempty"`
	Maximum       *float64 `json:"maximum,omitempty"`
	MinItems      *string  `json:"minItems,omitempty"`
	MinLength     *string  `json:"minLength,omitempty"`
	MinProperties *string  `json:"minProperties,omitempty"`
	Minimum       *float64 `json:"minimum,omitempty"`
	MultipleOf    *float64 `json:"multipleOf,omitempty"`
	// JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
	Not               *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsInput   `json:"not,omitempty"`
	Nullable          *bool                                                                    `json:"nullable,omitempty"`
	OneOf             []*IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsInput `json:"oneOf,omitempty"`
	Pattern           *string                                                                  `json:"pattern,omitempty"`
	PatternProperties *string                                                                  `json:"patternProperties,omitempty"`
	Properties        *string                                                                  `json:"properties,omitempty"`
	Ref               *string                                                                  `json:"ref,omitempty"`
	Required          []*string                                                                `json:"required,omitempty"`
	Schema            *string                                                                  `json:"schema,omitempty"`
	Title             *string                                                                  `json:"title,omitempty"`
	Type              *string                                                                  `json:"type,omitempty"`
	UniqueItems       *bool                                                                    `json:"uniqueItems,omitempty"`
	// x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).
	XKubernetesEmbeddedResource *bool `json:"xKubernetesEmbeddedResource,omitempty"`
	// x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:
	//
	// 1) anyOf:
	//    - type: integer
	//    - type: string
	// 2) allOf:
	//    - anyOf:
	//      - type: integer
	//      - type: string
	//    - ... zero or more
	XKubernetesIntOrString *bool `json:"xKubernetesIntOrString,omitempty"`
	// x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.
	//
	// This tag MUST only be used on lists that have the "x-kubernetes-list-type" extension set to "map". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).
	//
	// The properties specified must either be required or have a default value, to ensure those properties are present for all list items.
	XKubernetesListMapKeys []*string `json:"xKubernetesListMapKeys,omitempty"`
	// x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:
	//
	// 1) `atomic`: the list is treated as a single entity, like a scalar.
	//      Atomic lists will be entirely replaced when updated. This extension
	//      may be used on any type of list (struct, scalar, ...).
	// 2) `set`:
	//      Sets are lists that must not have multiple items with the same value. Each
	//      value must be a scalar, an object with x-kubernetes-map-type `atomic` or an
	//      array with x-kubernetes-list-type `atomic`.
	// 3) `map`:
	//      These lists are like maps in that their elements have a non-index key
	//      used to identify them. Order is preserved upon merge. The map tag
	//      must only be used on a list with elements of type object.
	// Defaults to atomic for arrays.
	XKubernetesListType *string `json:"xKubernetesListType,omitempty"`
	// x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:
	//
	// 1) `granular`:
	//      These maps are actual maps (key-value pairs) and each fields are independent
	//      from each other (they can each be manipulated by separate actors). This is
	//      the default behaviour for all maps.
	// 2) `atomic`: the list is treated as a single entity, like a scalar.
	//      Atomic maps will be entirely replaced when updated.
	XKubernetesMapType *string `json:"xKubernetesMapType,omitempty"`
	// x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.
	XKubernetesPreserveUnknownFields *bool `json:"xKubernetesPreserveUnknownFields,omitempty"`
	// x-kubernetes-validations describes a list of validation rules written in the CEL expression language. This field is an alpha-level. Using this field requires the feature gate `CustomResourceValidationExpressions` to be enabled.
	XKubernetesValidations []*IoK8sApiextensionsApiserverPkgApisApiextensionsV1ValidationRuleInput `json:"xKubernetesValidations,omitempty"`
}

// ServiceReference holds a reference to Service.legacy.k8s.io
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference struct {
	// name is the name of the service. Required
	Name string `json:"name"`
	// namespace is the namespace of the service. Required
	Namespace string `json:"namespace"`
	// path is an optional URL path at which the webhook will be contacted.
	Path *string `json:"path,omitempty"`
	// port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.
	Port *int `json:"port,omitempty"`
}

// ServiceReference holds a reference to Service.legacy.k8s.io
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReferenceInput struct {
	// name is the name of the service. Required
	Name string `json:"name"`
	// namespace is the namespace of the service. Required
	Namespace string `json:"namespace"`
	// path is an optional URL path at which the webhook will be contacted.
	Path *string `json:"path,omitempty"`
	// port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.
	Port *int `json:"port,omitempty"`
}

// ValidationRule describes a validation rule written in the CEL expression language.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1ValidationRule struct {
	// Message represents the message displayed when validation fails. The message is required if the Rule contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host"
	Message *string `json:"message,omitempty"`
	// MessageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a rule, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the rule; the only difference is the return type. Example: "x must be less than max ("+string(self.max)+")"
	MessageExpression *string `json:"messageExpression,omitempty"`
	// Rule represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec The Rule is scoped to the location of the x-kubernetes-validations extension in the schema. The `self` variable in the CEL expression is bound to the scoped value. Example: - Rule scoped to the root of a resource with a status subresource: {"rule": "self.status.actual <= self.spec.maxDesired"}
	//
	// If the Rule is scoped to an object with properties, the accessible properties of the object are field selectable via `self.field` and field presence can be checked via `has(self.field)`. Null valued fields are treated as absent fields in CEL expressions. If the Rule is scoped to an object with additionalProperties (i.e. a map) the value of the map are accessible via `self[mapKey]`, map containment can be checked via `mapKey in self` and all entries of the map are accessible via CEL macros and functions such as `self.all(...)`. If the Rule is scoped to an array, the elements of the array are accessible via `self[i]` and also by macros and functions. If the Rule is scoped to a scalar, `self` is bound to the scalar value. Examples: - Rule scoped to a map of objects: {"rule": "self.components['Widget'].priority < 10"} - Rule scoped to a list of integers: {"rule": "self.values.all(value, value >= 0 && value < 100)"} - Rule scoped to a string value: {"rule": "self.startsWith('kube')"}
	//
	// The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object and from any x-kubernetes-embedded-resource annotated objects. No other metadata properties are accessible.
	//
	// Unknown data preserved in custom resources via x-kubernetes-preserve-unknown-fields is not accessible in CEL expressions. This includes: - Unknown field values that are preserved by object schemas with x-kubernetes-preserve-unknown-fields. - Object properties where the property schema is of an "unknown type". An "unknown type" is recursively defined as:
	//   - A schema with no type and x-kubernetes-preserve-unknown-fields set to true
	//   - An array where the items schema is of an "unknown type"
	//   - An object where the additionalProperties schema is of an "unknown type"
	//
	// Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
	// 	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
	// 	  "import", "let", "loop", "package", "namespace", "return".
	// Examples:
	//   - Rule accessing a property named "namespace": {"rule": "self.__namespace__ > 0"}
	//   - Rule accessing a property named "x-prop": {"rule": "self.x__dash__prop > 0"}
	//   - Rule accessing a property named "redact__d": {"rule": "self.redact__underscores__d > 0"}
	//
	// Equality on arrays with x-kubernetes-list-type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
	//   - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
	//     non-intersecting elements in `Y` are appended, retaining their partial order.
	//   - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
	//     are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
	//     non-intersecting keys are appended, retaining their partial order.
	Rule string `json:"rule"`
}

// ValidationRule describes a validation rule written in the CEL expression language.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1ValidationRuleInput struct {
	// Message represents the message displayed when validation fails. The message is required if the Rule contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host"
	Message *string `json:"message,omitempty"`
	// MessageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a rule, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the rule; the only difference is the return type. Example: "x must be less than max ("+string(self.max)+")"
	MessageExpression *string `json:"messageExpression,omitempty"`
	// Rule represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec The Rule is scoped to the location of the x-kubernetes-validations extension in the schema. The `self` variable in the CEL expression is bound to the scoped value. Example: - Rule scoped to the root of a resource with a status subresource: {"rule": "self.status.actual <= self.spec.maxDesired"}
	//
	// If the Rule is scoped to an object with properties, the accessible properties of the object are field selectable via `self.field` and field presence can be checked via `has(self.field)`. Null valued fields are treated as absent fields in CEL expressions. If the Rule is scoped to an object with additionalProperties (i.e. a map) the value of the map are accessible via `self[mapKey]`, map containment can be checked via `mapKey in self` and all entries of the map are accessible via CEL macros and functions such as `self.all(...)`. If the Rule is scoped to an array, the elements of the array are accessible via `self[i]` and also by macros and functions. If the Rule is scoped to a scalar, `self` is bound to the scalar value. Examples: - Rule scoped to a map of objects: {"rule": "self.components['Widget'].priority < 10"} - Rule scoped to a list of integers: {"rule": "self.values.all(value, value >= 0 && value < 100)"} - Rule scoped to a string value: {"rule": "self.startsWith('kube')"}
	//
	// The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object and from any x-kubernetes-embedded-resource annotated objects. No other metadata properties are accessible.
	//
	// Unknown data preserved in custom resources via x-kubernetes-preserve-unknown-fields is not accessible in CEL expressions. This includes: - Unknown field values that are preserved by object schemas with x-kubernetes-preserve-unknown-fields. - Object properties where the property schema is of an "unknown type". An "unknown type" is recursively defined as:
	//   - A schema with no type and x-kubernetes-preserve-unknown-fields set to true
	//   - An array where the items schema is of an "unknown type"
	//   - An object where the additionalProperties schema is of an "unknown type"
	//
	// Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
	// 	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
	// 	  "import", "let", "loop", "package", "namespace", "return".
	// Examples:
	//   - Rule accessing a property named "namespace": {"rule": "self.__namespace__ > 0"}
	//   - Rule accessing a property named "x-prop": {"rule": "self.x__dash__prop > 0"}
	//   - Rule accessing a property named "redact__d": {"rule": "self.redact__underscores__d > 0"}
	//
	// Equality on arrays with x-kubernetes-list-type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
	//   - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
	//     non-intersecting elements in `Y` are appended, retaining their partial order.
	//   - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
	//     are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
	//     non-intersecting keys are appended, retaining their partial order.
	Rule string `json:"rule"`
}

// WebhookClientConfig contains the information to make a TLS connection with the webhook.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig struct {
	// caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
	CaBundle *string `json:"caBundle,omitempty"`
	// ServiceReference holds a reference to Service.legacy.k8s.io
	Service *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference `json:"service,omitempty"`
	// url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
	//
	// The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
	//
	// Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
	//
	// The scheme must be "https"; the URL must begin with "https://".
	//
	// A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
	//
	// Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
	URL *string `json:"url,omitempty"`
}

// WebhookClientConfig contains the information to make a TLS connection with the webhook.
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfigInput struct {
	// caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
	CaBundle *string `json:"caBundle,omitempty"`
	// ServiceReference holds a reference to Service.legacy.k8s.io
	Service *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReferenceInput `json:"service,omitempty"`
	// url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
	//
	// The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
	//
	// Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
	//
	// The scheme must be "https"; the URL must begin with "https://".
	//
	// A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
	//
	// Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
	URL *string `json:"url,omitempty"`
}

// WebhookConversion describes how to call a conversion webhook
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion struct {
	// WebhookClientConfig contains the information to make a TLS connection with the webhook.
	ClientConfig *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig `json:"clientConfig,omitempty"`
	// conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail.
	ConversionReviewVersions []*string `json:"conversionReviewVersions"`
}

// WebhookConversion describes how to call a conversion webhook
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversionInput struct {
	// WebhookClientConfig contains the information to make a TLS connection with the webhook.
	ClientConfig *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfigInput `json:"clientConfig,omitempty"`
	// conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail.
	ConversionReviewVersions []*string `json:"conversionReviewVersions"`
}

// APIGroup contains the name, the supported versions, and the preferred version of a group.
type IoK8sApimachineryPkgApisMetaV1APIGroup struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// name is the name of the group.
	Name string `json:"name"`
	// GroupVersion contains the "group/version" and "version" string of a version. It is made a struct to keep extensibility.
	PreferredVersion *IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery `json:"preferredVersion,omitempty"`
	// a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
	ServerAddressByClientCIDRs []*IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCidr `json:"serverAddressByClientCIDRs,omitempty"`
	// versions are the versions supported in this group.
	Versions []*IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery `json:"versions"`
}

// APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.
type IoK8sApimachineryPkgApisMetaV1APIGroupList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// groups is a list of APIGroup.
	Groups []*IoK8sApimachineryPkgApisMetaV1APIGroup `json:"groups"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
}

// APIResource specifies the name of a resource and whether it is namespaced.
type IoK8sApimachineryPkgApisMetaV1APIResource struct {
	// categories is a list of the grouped resources this resource belongs to (e.g. 'all')
	Categories []*string `json:"categories,omitempty"`
	// group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale".
	Group *string `json:"group,omitempty"`
	// kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
	Kind string `json:"kind"`
	// name is the plural name of the resource.
	Name string `json:"name"`
	// namespaced indicates if a resource is namespaced or not.
	Namespaced bool `json:"namespaced"`
	// shortNames is a list of suggested short names of the resource.
	ShortNames []*string `json:"shortNames,omitempty"`
	// singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.
	SingularName string `json:"singularName"`
	// The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.
	StorageVersionHash *string `json:"storageVersionHash,omitempty"`
	// verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)
	Verbs []*string `json:"verbs"`
	// version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)".
	Version *string `json:"version,omitempty"`
}

// APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.
type IoK8sApimachineryPkgApisMetaV1APIResourceList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// groupVersion is the group and version this APIResourceList is for.
	GroupVersion string `json:"groupVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// resources contains the name of the resources and if they are namespaced.
	Resources []*IoK8sApimachineryPkgApisMetaV1APIResource `json:"resources"`
}

// APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.
type IoK8sApimachineryPkgApisMetaV1APIVersions struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
	ServerAddressByClientCIDRs []*IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCidr `json:"serverAddressByClientCIDRs"`
	// versions are the api versions that are available.
	Versions []*string `json:"versions"`
}

// Condition contains details for one aspect of the current state of this API Resource.
type IoK8sApimachineryPkgApisMetaV1Condition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime string `json:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition. This may be an empty string.
	Message string `json:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
	Reason string `json:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type string `json:"type"`
}

// Condition contains details for one aspect of the current state of this API Resource.
type IoK8sApimachineryPkgApisMetaV1ConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime string `json:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition. This may be an empty string.
	Message string `json:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
	ObservedGeneration *string `json:"observedGeneration,omitempty"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
	Reason string `json:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type string `json:"type"`
}

// DeleteOptions may be provided when deleting an API object.
type IoK8sApimachineryPkgApisMetaV1DeleteOptions struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
	DryRun []*string `json:"dryRun,omitempty"`
	// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
	GracePeriodSeconds *string `json:"gracePeriodSeconds,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
	OrphanDependents *bool `json:"orphanDependents,omitempty"`
	// Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
	Preconditions *IoK8sApimachineryPkgApisMetaV1Preconditions `json:"preconditions,omitempty"`
	// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
	PropagationPolicy *string `json:"propagationPolicy,omitempty"`
}

// DeleteOptions may be provided when deleting an API object.
type IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
	DryRun []*string `json:"dryRun,omitempty"`
	// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
	GracePeriodSeconds *string `json:"gracePeriodSeconds,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
	OrphanDependents *bool `json:"orphanDependents,omitempty"`
	// Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
	Preconditions *IoK8sApimachineryPkgApisMetaV1PreconditionsInput `json:"preconditions,omitempty"`
	// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
	PropagationPolicy *string `json:"propagationPolicy,omitempty"`
}

// GroupVersion contains the "group/version" and "version" string of a version. It is made a struct to keep extensibility.
type IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery struct {
	// groupVersion specifies the API group and version in the form "group/version"
	GroupVersion string `json:"groupVersion"`
	// version specifies the version in the form of "version". This is to save the clients the trouble of splitting the GroupVersion.
	Version string `json:"version"`
}

// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
type IoK8sApimachineryPkgApisMetaV1LabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []*IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement `json:"matchExpressions,omitempty"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels *string `json:"matchLabels,omitempty"`
}

// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
type IoK8sApimachineryPkgApisMetaV1LabelSelectorInput struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []*IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirementInput `json:"matchExpressions,omitempty"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels *string `json:"matchLabels,omitempty"`
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []*string `json:"values,omitempty"`
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirementInput struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []*string `json:"values,omitempty"`
}

// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type IoK8sApimachineryPkgApisMetaV1ListMeta struct {
	// continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
	Continue *string `json:"continue,omitempty"`
	// remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
	RemainingItemCount *string `json:"remainingItemCount,omitempty"`
	// String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `json:"resourceVersion,omitempty"`
	// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
	SelfLink *string `json:"selfLink,omitempty"`
}

// ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
type IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry struct {
	// APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
	APIVersion *string `json:"apiVersion,omitempty"`
	// FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
	FieldsType *string `json:"fieldsType,omitempty"`
	// FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.
	//
	// Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.
	//
	// The exact format is defined in sigs.k8s.io/structured-merge-diff
	FieldsV1 *string `json:"fieldsV1,omitempty"`
	// Manager is an identifier of the workflow managing these fields.
	Manager *string `json:"manager,omitempty"`
	// Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
	Operation *string `json:"operation,omitempty"`
	// Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
	Subresource *string `json:"subresource,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	Time *string `json:"time,omitempty"`
}

// ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
type IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntryInput struct {
	// APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
	APIVersion *string `json:"apiVersion,omitempty"`
	// FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
	FieldsType *string `json:"fieldsType,omitempty"`
	// FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.
	//
	// Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.
	//
	// The exact format is defined in sigs.k8s.io/structured-merge-diff
	FieldsV1 *string `json:"fieldsV1,omitempty"`
	// Manager is an identifier of the workflow managing these fields.
	Manager *string `json:"manager,omitempty"`
	// Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
	Operation *string `json:"operation,omitempty"`
	// Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
	Subresource *string `json:"subresource,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	Time *string `json:"time,omitempty"`
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type IoK8sApimachineryPkgApisMetaV1ObjectMeta struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
	Annotations *string `json:"annotations,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	CreationTimestamp *string `json:"creationTimestamp,omitempty"`
	// Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
	DeletionGracePeriodSeconds *string `json:"deletionGracePeriodSeconds,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	DeletionTimestamp *string `json:"deletionTimestamp,omitempty"`
	// Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
	Finalizers []*string `json:"finalizers,omitempty"`
	// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
	//
	// If this field is specified and the generated name exists, the server will return a 409.
	//
	// Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
	GenerateName *string `json:"generateName,omitempty"`
	// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
	Generation *string `json:"generation,omitempty"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
	Labels *string `json:"labels,omitempty"`
	// ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
	ManagedFields []*IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry `json:"managedFields,omitempty"`
	// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name *string `json:"name,omitempty"`
	// Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
	//
	// Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
	Namespace *string `json:"namespace,omitempty"`
	// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
	OwnerReferences []*IoK8sApimachineryPkgApisMetaV1OwnerReference `json:"ownerReferences,omitempty"`
	// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
	//
	// Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `json:"resourceVersion,omitempty"`
	// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
	SelfLink *string `json:"selfLink,omitempty"`
	// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
	//
	// Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	UID *string `json:"uid,omitempty"`
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type IoK8sApimachineryPkgApisMetaV1ObjectMetaInput struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
	Annotations *string `json:"annotations,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	CreationTimestamp *string `json:"creationTimestamp,omitempty"`
	// Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
	DeletionGracePeriodSeconds *string `json:"deletionGracePeriodSeconds,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	DeletionTimestamp *string `json:"deletionTimestamp,omitempty"`
	// Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
	Finalizers []*string `json:"finalizers,omitempty"`
	// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
	//
	// If this field is specified and the generated name exists, the server will return a 409.
	//
	// Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
	GenerateName *string `json:"generateName,omitempty"`
	// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
	Generation *string `json:"generation,omitempty"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
	Labels *string `json:"labels,omitempty"`
	// ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
	ManagedFields []*IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntryInput `json:"managedFields,omitempty"`
	// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name *string `json:"name,omitempty"`
	// Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
	//
	// Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
	Namespace *string `json:"namespace,omitempty"`
	// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
	OwnerReferences []*IoK8sApimachineryPkgApisMetaV1OwnerReferenceInput `json:"ownerReferences,omitempty"`
	// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
	//
	// Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `json:"resourceVersion,omitempty"`
	// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
	SelfLink *string `json:"selfLink,omitempty"`
	// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
	//
	// Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	UID *string `json:"uid,omitempty"`
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type IoK8sApimachineryPkgApisMetaV1OwnerReference struct {
	// API version of the referent.
	APIVersion string `json:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
	BlockOwnerDeletion *bool `json:"blockOwnerDeletion,omitempty"`
	// If true, this reference points to the managing controller.
	Controller *bool `json:"controller,omitempty"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name string `json:"name"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	UID string `json:"uid"`
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type IoK8sApimachineryPkgApisMetaV1OwnerReferenceInput struct {
	// API version of the referent.
	APIVersion string `json:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
	BlockOwnerDeletion *bool `json:"blockOwnerDeletion,omitempty"`
	// If true, this reference points to the managing controller.
	Controller *bool `json:"controller,omitempty"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name string `json:"name"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	UID string `json:"uid"`
}

// Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
type IoK8sApimachineryPkgApisMetaV1Preconditions struct {
	// Specifies the target ResourceVersion
	ResourceVersion *string `json:"resourceVersion,omitempty"`
	// Specifies the target UID.
	UID *string `json:"uid,omitempty"`
}

// Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
type IoK8sApimachineryPkgApisMetaV1PreconditionsInput struct {
	// Specifies the target ResourceVersion
	ResourceVersion *string `json:"resourceVersion,omitempty"`
	// Specifies the target UID.
	UID *string `json:"uid,omitempty"`
}

// ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.
type IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCidr struct {
	// The CIDR with which clients can match their IP to figure out the server address that they should use.
	ClientCidr string `json:"clientCIDR"`
	// Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.
	ServerAddress string `json:"serverAddress"`
}

// Status is a return value for calls that don't return other objects.
type IoK8sApimachineryPkgApisMetaV1Status struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Suggested HTTP return code for this status, 0 if not set.
	Code *int `json:"code,omitempty"`
	// StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
	Details *IoK8sApimachineryPkgApisMetaV1StatusDetails `json:"details,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// A human-readable description of the status of this operation.
	Message *string `json:"message,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
	// A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
	Reason *string `json:"reason,omitempty"`
	// Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *string `json:"status,omitempty"`
}

// StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
type IoK8sApimachineryPkgApisMetaV1StatusCause struct {
	// The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
	//
	// Examples:
	//   "name" - the field "name" on the current resource
	//   "items[0].name" - the field "name" on the first array entry in "items"
	Field *string `json:"field,omitempty"`
	// A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
	Message *string `json:"message,omitempty"`
	// A machine-readable description of the cause of the error. If this value is empty there is no information available.
	Reason *string `json:"reason,omitempty"`
}

// StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
type IoK8sApimachineryPkgApisMetaV1StatusDetails struct {
	// The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
	Causes []*IoK8sApimachineryPkgApisMetaV1StatusCause `json:"causes,omitempty"`
	// The group attribute of the resource associated with the status StatusReason.
	Group *string `json:"group,omitempty"`
	// The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
	Name *string `json:"name,omitempty"`
	// If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
	RetryAfterSeconds *int `json:"retryAfterSeconds,omitempty"`
	// UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	UID *string `json:"uid,omitempty"`
}

// Event represents a single event to a watched resource.
type IoK8sApimachineryPkgApisMetaV1WatchEvent struct {
	// RawExtension is used to hold extensions in external versions.
	//
	// To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.
	//
	// // Internal package:
	//
	// 	type MyAPIObject struct {
	// 		runtime.TypeMeta `json:",inline"`
	// 		MyPlugin runtime.Object `json:"myPlugin"`
	// 	}
	//
	// 	type PluginA struct {
	// 		AOption string `json:"aOption"`
	// 	}
	//
	// // External package:
	//
	// 	type MyAPIObject struct {
	// 		runtime.TypeMeta `json:",inline"`
	// 		MyPlugin runtime.RawExtension `json:"myPlugin"`
	// 	}
	//
	// 	type PluginA struct {
	// 		AOption string `json:"aOption"`
	// 	}
	//
	// // On the wire, the JSON will look something like this:
	//
	// 	{
	// 		"kind":"MyAPIObject",
	// 		"apiVersion":"v1",
	// 		"myPlugin": {
	// 			"kind":"PluginA",
	// 			"aOption":"foo",
	// 		},
	// 	}
	//
	// So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
	Object string `json:"object"`
	Type   string `json:"type"`
}

// Info contains versioning information. how we'll want to distribute that information.
type IoK8sApimachineryPkgVersionInfo struct {
	BuildDate    string `json:"buildDate"`
	Compiler     string `json:"compiler"`
	GitCommit    string `json:"gitCommit"`
	GitTreeState string `json:"gitTreeState"`
	GitVersion   string `json:"gitVersion"`
	GoVersion    string `json:"goVersion"`
	Major        string `json:"major"`
	Minor        string `json:"minor"`
	Platform     string `json:"platform"`
}

// APIService represents a server for a particular GroupVersion. Name must be "version.group".
type IoK8sKubeAggregatorPkgApisApiregistrationV1APIService struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`
	// APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
	Spec *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec `json:"spec,omitempty"`
	// APIServiceStatus contains derived information about an API server
	Status *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus `json:"status,omitempty"`
}

// APIServiceCondition describes the state of an APIService at a particular point
type IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// Human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// Unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status is the status of the condition. Can be True, False, Unknown.
	Status string `json:"status"`
	// Type is the type of the condition.
	Type string `json:"type"`
}

// APIServiceCondition describes the state of an APIService at a particular point
type IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceConditionInput struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// Human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// Unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status is the status of the condition. Can be True, False, Unknown.
	Status string `json:"status"`
	// Type is the type of the condition.
	Type string `json:"type"`
}

// APIService represents a server for a particular GroupVersion. Name must be "version.group".
type IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceInput struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMetaInput `json:"metadata,omitempty"`
	// APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
	Spec *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpecInput `json:"spec,omitempty"`
	// APIServiceStatus contains derived information about an API server
	Status *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatusInput `json:"status,omitempty"`
}

// APIServiceList is a list of APIService objects.
type IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion *string `json:"apiVersion,omitempty"`
	// Items is the list of APIService
	Items []*IoK8sKubeAggregatorPkgApisApiregistrationV1APIService `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`
}

// APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
type IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec struct {
	// CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.
	CaBundle *string `json:"caBundle,omitempty"`
	// Group is the API group name this server hosts
	Group *string `json:"group,omitempty"`
	// GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s
	GroupPriorityMinimum int `json:"groupPriorityMinimum"`
	// InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.
	InsecureSkipTLSVerify *bool `json:"insecureSkipTLSVerify,omitempty"`
	// ServiceReference holds a reference to Service.legacy.k8s.io
	Service *IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference `json:"service,omitempty"`
	// Version is the API version this server hosts.  For example, "v1"
	Version *string `json:"version,omitempty"`
	// VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
	VersionPriority int `json:"versionPriority"`
}

// APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
type IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpecInput struct {
	// CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.
	CaBundle *string `json:"caBundle,omitempty"`
	// Group is the API group name this server hosts
	Group *string `json:"group,omitempty"`
	// GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s
	GroupPriorityMinimum int `json:"groupPriorityMinimum"`
	// InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.
	InsecureSkipTLSVerify *bool `json:"insecureSkipTLSVerify,omitempty"`
	// ServiceReference holds a reference to Service.legacy.k8s.io
	Service *IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReferenceInput `json:"service,omitempty"`
	// Version is the API version this server hosts.  For example, "v1"
	Version *string `json:"version,omitempty"`
	// VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
	VersionPriority int `json:"versionPriority"`
}

// APIServiceStatus contains derived information about an API server
type IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus struct {
	// Current service state of apiService.
	Conditions []*IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition `json:"conditions,omitempty"`
}

// APIServiceStatus contains derived information about an API server
type IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatusInput struct {
	// Current service state of apiService.
	Conditions []*IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceConditionInput `json:"conditions,omitempty"`
}

// ServiceReference holds a reference to Service.legacy.k8s.io
type IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference struct {
	// Name is the name of the service
	Name *string `json:"name,omitempty"`
	// Namespace is the namespace of the service
	Namespace *string `json:"namespace,omitempty"`
	// If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
	Port *int `json:"port,omitempty"`
}

// ServiceReference holds a reference to Service.legacy.k8s.io
type IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReferenceInput struct {
	// Name is the name of the service
	Name *string `json:"name,omitempty"`
	// Namespace is the namespace of the service
	Namespace *string `json:"namespace,omitempty"`
	// If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
	Port *int `json:"port,omitempty"`
}

// Warning: Not every request will work with this viewer type
type MutationViewerAnyAuth struct {
	// connect DELETE requests to proxy of Pod
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/pods/{name}/proxy
	ConnectCoreV1DeleteNamespacedPodProxy *string `json:"connectCoreV1DeleteNamespacedPodProxy,omitempty"`
	// connect DELETE requests to proxy of Pod
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
	ConnectCoreV1DeleteNamespacedPodProxyWithPath *string `json:"connectCoreV1DeleteNamespacedPodProxyWithPath,omitempty"`
	// connect DELETE requests to proxy of Service
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/services/{name}/proxy
	ConnectCoreV1DeleteNamespacedServiceProxy *string `json:"connectCoreV1DeleteNamespacedServiceProxy,omitempty"`
	// connect DELETE requests to proxy of Service
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
	ConnectCoreV1DeleteNamespacedServiceProxyWithPath *string `json:"connectCoreV1DeleteNamespacedServiceProxyWithPath,omitempty"`
	// connect DELETE requests to proxy of Node
	//
	// Equivalent to DELETE /api/v1/nodes/{name}/proxy
	ConnectCoreV1DeleteNodeProxy *string `json:"connectCoreV1DeleteNodeProxy,omitempty"`
	// connect DELETE requests to proxy of Node
	//
	// Equivalent to DELETE /api/v1/nodes/{name}/proxy/{path}
	ConnectCoreV1DeleteNodeProxyWithPath *string `json:"connectCoreV1DeleteNodeProxyWithPath,omitempty"`
	// connect HEAD requests to proxy of Pod
	//
	// Equivalent to HEAD /api/v1/namespaces/{namespace}/pods/{name}/proxy
	ConnectCoreV1HeadNamespacedPodProxy *string `json:"connectCoreV1HeadNamespacedPodProxy,omitempty"`
	// connect HEAD requests to proxy of Pod
	//
	// Equivalent to HEAD /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
	ConnectCoreV1HeadNamespacedPodProxyWithPath *string `json:"connectCoreV1HeadNamespacedPodProxyWithPath,omitempty"`
	// connect HEAD requests to proxy of Service
	//
	// Equivalent to HEAD /api/v1/namespaces/{namespace}/services/{name}/proxy
	ConnectCoreV1HeadNamespacedServiceProxy *string `json:"connectCoreV1HeadNamespacedServiceProxy,omitempty"`
	// connect HEAD requests to proxy of Service
	//
	// Equivalent to HEAD /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
	ConnectCoreV1HeadNamespacedServiceProxyWithPath *string `json:"connectCoreV1HeadNamespacedServiceProxyWithPath,omitempty"`
	// connect HEAD requests to proxy of Node
	//
	// Equivalent to HEAD /api/v1/nodes/{name}/proxy
	ConnectCoreV1HeadNodeProxy *string `json:"connectCoreV1HeadNodeProxy,omitempty"`
	// connect HEAD requests to proxy of Node
	//
	// Equivalent to HEAD /api/v1/nodes/{name}/proxy/{path}
	ConnectCoreV1HeadNodeProxyWithPath *string `json:"connectCoreV1HeadNodeProxyWithPath,omitempty"`
	// connect OPTIONS requests to proxy of Pod
	//
	// Equivalent to OPTIONS /api/v1/namespaces/{namespace}/pods/{name}/proxy
	ConnectCoreV1OptionsNamespacedPodProxy *string `json:"connectCoreV1OptionsNamespacedPodProxy,omitempty"`
	// connect OPTIONS requests to proxy of Pod
	//
	// Equivalent to OPTIONS /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
	ConnectCoreV1OptionsNamespacedPodProxyWithPath *string `json:"connectCoreV1OptionsNamespacedPodProxyWithPath,omitempty"`
	// connect OPTIONS requests to proxy of Service
	//
	// Equivalent to OPTIONS /api/v1/namespaces/{namespace}/services/{name}/proxy
	ConnectCoreV1OptionsNamespacedServiceProxy *string `json:"connectCoreV1OptionsNamespacedServiceProxy,omitempty"`
	// connect OPTIONS requests to proxy of Service
	//
	// Equivalent to OPTIONS /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
	ConnectCoreV1OptionsNamespacedServiceProxyWithPath *string `json:"connectCoreV1OptionsNamespacedServiceProxyWithPath,omitempty"`
	// connect OPTIONS requests to proxy of Node
	//
	// Equivalent to OPTIONS /api/v1/nodes/{name}/proxy
	ConnectCoreV1OptionsNodeProxy *string `json:"connectCoreV1OptionsNodeProxy,omitempty"`
	// connect OPTIONS requests to proxy of Node
	//
	// Equivalent to OPTIONS /api/v1/nodes/{name}/proxy/{path}
	ConnectCoreV1OptionsNodeProxyWithPath *string `json:"connectCoreV1OptionsNodeProxyWithPath,omitempty"`
	// connect PATCH requests to proxy of Pod
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/pods/{name}/proxy
	ConnectCoreV1PatchNamespacedPodProxy *string `json:"connectCoreV1PatchNamespacedPodProxy,omitempty"`
	// connect PATCH requests to proxy of Pod
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
	ConnectCoreV1PatchNamespacedPodProxyWithPath *string `json:"connectCoreV1PatchNamespacedPodProxyWithPath,omitempty"`
	// connect PATCH requests to proxy of Service
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/services/{name}/proxy
	ConnectCoreV1PatchNamespacedServiceProxy *string `json:"connectCoreV1PatchNamespacedServiceProxy,omitempty"`
	// connect PATCH requests to proxy of Service
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
	ConnectCoreV1PatchNamespacedServiceProxyWithPath *string `json:"connectCoreV1PatchNamespacedServiceProxyWithPath,omitempty"`
	// connect PATCH requests to proxy of Node
	//
	// Equivalent to PATCH /api/v1/nodes/{name}/proxy
	ConnectCoreV1PatchNodeProxy *string `json:"connectCoreV1PatchNodeProxy,omitempty"`
	// connect PATCH requests to proxy of Node
	//
	// Equivalent to PATCH /api/v1/nodes/{name}/proxy/{path}
	ConnectCoreV1PatchNodeProxyWithPath *string `json:"connectCoreV1PatchNodeProxyWithPath,omitempty"`
	// connect POST requests to attach of Pod
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/attach
	ConnectCoreV1PostNamespacedPodAttach *string `json:"connectCoreV1PostNamespacedPodAttach,omitempty"`
	// connect POST requests to exec of Pod
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/exec
	ConnectCoreV1PostNamespacedPodExec *string `json:"connectCoreV1PostNamespacedPodExec,omitempty"`
	// connect POST requests to portforward of Pod
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/portforward
	ConnectCoreV1PostNamespacedPodPortforward *string `json:"connectCoreV1PostNamespacedPodPortforward,omitempty"`
	// connect POST requests to proxy of Pod
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/proxy
	ConnectCoreV1PostNamespacedPodProxy *string `json:"connectCoreV1PostNamespacedPodProxy,omitempty"`
	// connect POST requests to proxy of Pod
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
	ConnectCoreV1PostNamespacedPodProxyWithPath *string `json:"connectCoreV1PostNamespacedPodProxyWithPath,omitempty"`
	// connect POST requests to proxy of Service
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/services/{name}/proxy
	ConnectCoreV1PostNamespacedServiceProxy *string `json:"connectCoreV1PostNamespacedServiceProxy,omitempty"`
	// connect POST requests to proxy of Service
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
	ConnectCoreV1PostNamespacedServiceProxyWithPath *string `json:"connectCoreV1PostNamespacedServiceProxyWithPath,omitempty"`
	// connect POST requests to proxy of Node
	//
	// Equivalent to POST /api/v1/nodes/{name}/proxy
	ConnectCoreV1PostNodeProxy *string `json:"connectCoreV1PostNodeProxy,omitempty"`
	// connect POST requests to proxy of Node
	//
	// Equivalent to POST /api/v1/nodes/{name}/proxy/{path}
	ConnectCoreV1PostNodeProxyWithPath *string `json:"connectCoreV1PostNodeProxyWithPath,omitempty"`
	// connect PUT requests to proxy of Pod
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/pods/{name}/proxy
	ConnectCoreV1PutNamespacedPodProxy *string `json:"connectCoreV1PutNamespacedPodProxy,omitempty"`
	// connect PUT requests to proxy of Pod
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
	ConnectCoreV1PutNamespacedPodProxyWithPath *string `json:"connectCoreV1PutNamespacedPodProxyWithPath,omitempty"`
	// connect PUT requests to proxy of Service
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/services/{name}/proxy
	ConnectCoreV1PutNamespacedServiceProxy *string `json:"connectCoreV1PutNamespacedServiceProxy,omitempty"`
	// connect PUT requests to proxy of Service
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
	ConnectCoreV1PutNamespacedServiceProxyWithPath *string `json:"connectCoreV1PutNamespacedServiceProxyWithPath,omitempty"`
	// connect PUT requests to proxy of Node
	//
	// Equivalent to PUT /api/v1/nodes/{name}/proxy
	ConnectCoreV1PutNodeProxy *string `json:"connectCoreV1PutNodeProxy,omitempty"`
	// connect PUT requests to proxy of Node
	//
	// Equivalent to PUT /api/v1/nodes/{name}/proxy/{path}
	ConnectCoreV1PutNodeProxyWithPath *string `json:"connectCoreV1PutNodeProxyWithPath,omitempty"`
	// create a MutatingWebhookConfiguration
	//
	// Equivalent to POST /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations
	CreateAdmissionregistrationV1MutatingWebhookConfiguration *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration `json:"createAdmissionregistrationV1MutatingWebhookConfiguration,omitempty"`
	// create a ValidatingWebhookConfiguration
	//
	// Equivalent to POST /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations
	CreateAdmissionregistrationV1ValidatingWebhookConfiguration *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration `json:"createAdmissionregistrationV1ValidatingWebhookConfiguration,omitempty"`
	// create a ValidatingAdmissionPolicy
	//
	// Equivalent to POST /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies
	CreateAdmissionregistrationV1alpha1ValidatingAdmissionPolicy *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy `json:"createAdmissionregistrationV1alpha1ValidatingAdmissionPolicy,omitempty"`
	// create a ValidatingAdmissionPolicyBinding
	//
	// Equivalent to POST /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings
	CreateAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding `json:"createAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding,omitempty"`
	// create a CustomResourceDefinition
	//
	// Equivalent to POST /apis/apiextensions.k8s.io/v1/customresourcedefinitions
	CreateApiextensionsV1CustomResourceDefinition *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition `json:"createApiextensionsV1CustomResourceDefinition,omitempty"`
	// create an APIService
	//
	// Equivalent to POST /apis/apiregistration.k8s.io/v1/apiservices
	CreateApiregistrationV1APIService *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService `json:"createApiregistrationV1APIService,omitempty"`
	// create a ControllerRevision
	//
	// Equivalent to POST /apis/apps/v1/namespaces/{namespace}/controllerrevisions
	CreateAppsV1NamespacedControllerRevision *IoK8sAPIAppsV1ControllerRevision `json:"createAppsV1NamespacedControllerRevision,omitempty"`
	// create a DaemonSet
	//
	// Equivalent to POST /apis/apps/v1/namespaces/{namespace}/daemonsets
	CreateAppsV1NamespacedDaemonSet *IoK8sAPIAppsV1DaemonSet `json:"createAppsV1NamespacedDaemonSet,omitempty"`
	// create a Deployment
	//
	// Equivalent to POST /apis/apps/v1/namespaces/{namespace}/deployments
	CreateAppsV1NamespacedDeployment *IoK8sAPIAppsV1Deployment `json:"createAppsV1NamespacedDeployment,omitempty"`
	// create a ReplicaSet
	//
	// Equivalent to POST /apis/apps/v1/namespaces/{namespace}/replicasets
	CreateAppsV1NamespacedReplicaSet *IoK8sAPIAppsV1ReplicaSet `json:"createAppsV1NamespacedReplicaSet,omitempty"`
	// create a StatefulSet
	//
	// Equivalent to POST /apis/apps/v1/namespaces/{namespace}/statefulsets
	CreateAppsV1NamespacedStatefulSet *IoK8sAPIAppsV1StatefulSet `json:"createAppsV1NamespacedStatefulSet,omitempty"`
	// create a TokenReview
	//
	// Equivalent to POST /apis/authentication.k8s.io/v1/tokenreviews
	CreateAuthenticationV1TokenReview *IoK8sAPIAuthenticationV1TokenReview `json:"createAuthenticationV1TokenReview,omitempty"`
	// create a SelfSubjectReview
	//
	// Equivalent to POST /apis/authentication.k8s.io/v1alpha1/selfsubjectreviews
	CreateAuthenticationV1alpha1SelfSubjectReview *IoK8sAPIAuthenticationV1alpha1SelfSubjectReview `json:"createAuthenticationV1alpha1SelfSubjectReview,omitempty"`
	// create a SelfSubjectReview
	//
	// Equivalent to POST /apis/authentication.k8s.io/v1beta1/selfsubjectreviews
	CreateAuthenticationV1beta1SelfSubjectReview *IoK8sAPIAuthenticationV1beta1SelfSubjectReview `json:"createAuthenticationV1beta1SelfSubjectReview,omitempty"`
	// create a LocalSubjectAccessReview
	//
	// Equivalent to POST /apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews
	CreateAuthorizationV1NamespacedLocalSubjectAccessReview *IoK8sAPIAuthorizationV1LocalSubjectAccessReview `json:"createAuthorizationV1NamespacedLocalSubjectAccessReview,omitempty"`
	// create a SelfSubjectAccessReview
	//
	// Equivalent to POST /apis/authorization.k8s.io/v1/selfsubjectaccessreviews
	CreateAuthorizationV1SelfSubjectAccessReview *IoK8sAPIAuthorizationV1SelfSubjectAccessReview `json:"createAuthorizationV1SelfSubjectAccessReview,omitempty"`
	// create a SelfSubjectRulesReview
	//
	// Equivalent to POST /apis/authorization.k8s.io/v1/selfsubjectrulesreviews
	CreateAuthorizationV1SelfSubjectRulesReview *IoK8sAPIAuthorizationV1SelfSubjectRulesReview `json:"createAuthorizationV1SelfSubjectRulesReview,omitempty"`
	// create a SubjectAccessReview
	//
	// Equivalent to POST /apis/authorization.k8s.io/v1/subjectaccessreviews
	CreateAuthorizationV1SubjectAccessReview *IoK8sAPIAuthorizationV1SubjectAccessReview `json:"createAuthorizationV1SubjectAccessReview,omitempty"`
	// create a HorizontalPodAutoscaler
	//
	// Equivalent to POST /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers
	CreateAutoscalingV1NamespacedHorizontalPodAutoscaler *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler `json:"createAutoscalingV1NamespacedHorizontalPodAutoscaler,omitempty"`
	// create a HorizontalPodAutoscaler
	//
	// Equivalent to POST /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers
	CreateAutoscalingV2NamespacedHorizontalPodAutoscaler *IoK8sAPIAutoscalingV2HorizontalPodAutoscaler `json:"createAutoscalingV2NamespacedHorizontalPodAutoscaler,omitempty"`
	// create a CronJob
	//
	// Equivalent to POST /apis/batch/v1/namespaces/{namespace}/cronjobs
	CreateBatchV1NamespacedCronJob *IoK8sAPIBatchV1CronJob `json:"createBatchV1NamespacedCronJob,omitempty"`
	// create a Job
	//
	// Equivalent to POST /apis/batch/v1/namespaces/{namespace}/jobs
	CreateBatchV1NamespacedJob *IoK8sAPIBatchV1Job `json:"createBatchV1NamespacedJob,omitempty"`
	// create a CertificateSigningRequest
	//
	// Equivalent to POST /apis/certificates.k8s.io/v1/certificatesigningrequests
	CreateCertificatesV1CertificateSigningRequest *IoK8sAPICertificatesV1CertificateSigningRequest `json:"createCertificatesV1CertificateSigningRequest,omitempty"`
	// create a ClusterTrustBundle
	//
	// Equivalent to POST /apis/certificates.k8s.io/v1alpha1/clustertrustbundles
	CreateCertificatesV1alpha1ClusterTrustBundle *IoK8sAPICertificatesV1alpha1ClusterTrustBundle `json:"createCertificatesV1alpha1ClusterTrustBundle,omitempty"`
	// create a Lease
	//
	// Equivalent to POST /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases
	CreateCoordinationV1NamespacedLease *IoK8sAPICoordinationV1Lease `json:"createCoordinationV1NamespacedLease,omitempty"`
	// create a Namespace
	//
	// Equivalent to POST /api/v1/namespaces
	CreateCoreV1Namespace *IoK8sAPICoreV1Namespace `json:"createCoreV1Namespace,omitempty"`
	// create a Binding
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/bindings
	CreateCoreV1NamespacedBinding *IoK8sAPICoreV1Binding `json:"createCoreV1NamespacedBinding,omitempty"`
	// create a ConfigMap
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/configmaps
	CreateCoreV1NamespacedConfigMap *IoK8sAPICoreV1ConfigMap `json:"createCoreV1NamespacedConfigMap,omitempty"`
	// create Endpoints
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/endpoints
	CreateCoreV1NamespacedEndpoints *IoK8sAPICoreV1Endpoints `json:"createCoreV1NamespacedEndpoints,omitempty"`
	// create an Event
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/events
	CreateCoreV1NamespacedEvent *IoK8sAPICoreV1Event `json:"createCoreV1NamespacedEvent,omitempty"`
	// create a LimitRange
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/limitranges
	CreateCoreV1NamespacedLimitRange *IoK8sAPICoreV1LimitRange `json:"createCoreV1NamespacedLimitRange,omitempty"`
	// create a PersistentVolumeClaim
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/persistentvolumeclaims
	CreateCoreV1NamespacedPersistentVolumeClaim *IoK8sAPICoreV1PersistentVolumeClaim `json:"createCoreV1NamespacedPersistentVolumeClaim,omitempty"`
	// create a Pod
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/pods
	CreateCoreV1NamespacedPod *IoK8sAPICoreV1Pod `json:"createCoreV1NamespacedPod,omitempty"`
	// create binding of a Pod
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/binding
	CreateCoreV1NamespacedPodBinding *IoK8sAPICoreV1Binding `json:"createCoreV1NamespacedPodBinding,omitempty"`
	// create eviction of a Pod
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/eviction
	CreateCoreV1NamespacedPodEviction *IoK8sAPIPolicyV1Eviction `json:"createCoreV1NamespacedPodEviction,omitempty"`
	// create a PodTemplate
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/podtemplates
	CreateCoreV1NamespacedPodTemplate *IoK8sAPICoreV1PodTemplate `json:"createCoreV1NamespacedPodTemplate,omitempty"`
	// create a ReplicationController
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/replicationcontrollers
	CreateCoreV1NamespacedReplicationController *IoK8sAPICoreV1ReplicationController `json:"createCoreV1NamespacedReplicationController,omitempty"`
	// create a ResourceQuota
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/resourcequotas
	CreateCoreV1NamespacedResourceQuota *IoK8sAPICoreV1ResourceQuota `json:"createCoreV1NamespacedResourceQuota,omitempty"`
	// create a Secret
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/secrets
	CreateCoreV1NamespacedSecret *IoK8sAPICoreV1Secret `json:"createCoreV1NamespacedSecret,omitempty"`
	// create a Service
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/services
	CreateCoreV1NamespacedService *IoK8sAPICoreV1Service `json:"createCoreV1NamespacedService,omitempty"`
	// create a ServiceAccount
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/serviceaccounts
	CreateCoreV1NamespacedServiceAccount *IoK8sAPICoreV1ServiceAccount `json:"createCoreV1NamespacedServiceAccount,omitempty"`
	// create token of a ServiceAccount
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/serviceaccounts/{name}/token
	CreateCoreV1NamespacedServiceAccountToken *IoK8sAPIAuthenticationV1TokenRequest `json:"createCoreV1NamespacedServiceAccountToken,omitempty"`
	// create a Node
	//
	// Equivalent to POST /api/v1/nodes
	CreateCoreV1Node *IoK8sAPICoreV1Node `json:"createCoreV1Node,omitempty"`
	// create a PersistentVolume
	//
	// Equivalent to POST /api/v1/persistentvolumes
	CreateCoreV1PersistentVolume *IoK8sAPICoreV1PersistentVolume `json:"createCoreV1PersistentVolume,omitempty"`
	// create an EndpointSlice
	//
	// Equivalent to POST /apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices
	CreateDiscoveryV1NamespacedEndpointSlice *IoK8sAPIDiscoveryV1EndpointSlice `json:"createDiscoveryV1NamespacedEndpointSlice,omitempty"`
	// create an Event
	//
	// Equivalent to POST /apis/events.k8s.io/v1/namespaces/{namespace}/events
	CreateEventsV1NamespacedEvent *IoK8sAPIEventsV1Event `json:"createEventsV1NamespacedEvent,omitempty"`
	// create a FlowSchema
	//
	// Equivalent to POST /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas
	CreateFlowcontrolApiserverV1beta2FlowSchema *IoK8sAPIFlowcontrolV1beta2FlowSchema `json:"createFlowcontrolApiserverV1beta2FlowSchema,omitempty"`
	// create a PriorityLevelConfiguration
	//
	// Equivalent to POST /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations
	CreateFlowcontrolApiserverV1beta2PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration `json:"createFlowcontrolApiserverV1beta2PriorityLevelConfiguration,omitempty"`
	// create a FlowSchema
	//
	// Equivalent to POST /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas
	CreateFlowcontrolApiserverV1beta3FlowSchema *IoK8sAPIFlowcontrolV1beta3FlowSchema `json:"createFlowcontrolApiserverV1beta3FlowSchema,omitempty"`
	// create a PriorityLevelConfiguration
	//
	// Equivalent to POST /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations
	CreateFlowcontrolApiserverV1beta3PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration `json:"createFlowcontrolApiserverV1beta3PriorityLevelConfiguration,omitempty"`
	// create a StorageVersion
	//
	// Equivalent to POST /apis/internal.apiserver.k8s.io/v1alpha1/storageversions
	CreateInternalApiserverV1alpha1StorageVersion *IoK8sAPIApiserverinternalV1alpha1StorageVersion `json:"createInternalApiserverV1alpha1StorageVersion,omitempty"`
	// create an IngressClass
	//
	// Equivalent to POST /apis/networking.k8s.io/v1/ingressclasses
	CreateNetworkingV1IngressClass *IoK8sAPINetworkingV1IngressClass `json:"createNetworkingV1IngressClass,omitempty"`
	// create an Ingress
	//
	// Equivalent to POST /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses
	CreateNetworkingV1NamespacedIngress *IoK8sAPINetworkingV1Ingress `json:"createNetworkingV1NamespacedIngress,omitempty"`
	// create a NetworkPolicy
	//
	// Equivalent to POST /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies
	CreateNetworkingV1NamespacedNetworkPolicy *IoK8sAPINetworkingV1NetworkPolicy `json:"createNetworkingV1NamespacedNetworkPolicy,omitempty"`
	// create a ClusterCIDR
	//
	// Equivalent to POST /apis/networking.k8s.io/v1alpha1/clustercidrs
	CreateNetworkingV1alpha1ClusterCidr *IoK8sAPINetworkingV1alpha1ClusterCidr `json:"createNetworkingV1alpha1ClusterCIDR,omitempty"`
	// create an IPAddress
	//
	// Equivalent to POST /apis/networking.k8s.io/v1alpha1/ipaddresses
	CreateNetworkingV1alpha1IPAddress *IoK8sAPINetworkingV1alpha1IPAddress `json:"createNetworkingV1alpha1IPAddress,omitempty"`
	// create a RuntimeClass
	//
	// Equivalent to POST /apis/node.k8s.io/v1/runtimeclasses
	CreateNodeV1RuntimeClass *IoK8sAPINodeV1RuntimeClass `json:"createNodeV1RuntimeClass,omitempty"`
	// create a PodDisruptionBudget
	//
	// Equivalent to POST /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets
	CreatePolicyV1NamespacedPodDisruptionBudget *IoK8sAPIPolicyV1PodDisruptionBudget `json:"createPolicyV1NamespacedPodDisruptionBudget,omitempty"`
	// create a ClusterRole
	//
	// Equivalent to POST /apis/rbac.authorization.k8s.io/v1/clusterroles
	CreateRbacAuthorizationV1ClusterRole *IoK8sAPIRbacV1ClusterRole `json:"createRbacAuthorizationV1ClusterRole,omitempty"`
	// create a ClusterRoleBinding
	//
	// Equivalent to POST /apis/rbac.authorization.k8s.io/v1/clusterrolebindings
	CreateRbacAuthorizationV1ClusterRoleBinding *IoK8sAPIRbacV1ClusterRoleBinding `json:"createRbacAuthorizationV1ClusterRoleBinding,omitempty"`
	// create a Role
	//
	// Equivalent to POST /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles
	CreateRbacAuthorizationV1NamespacedRole *IoK8sAPIRbacV1Role `json:"createRbacAuthorizationV1NamespacedRole,omitempty"`
	// create a RoleBinding
	//
	// Equivalent to POST /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings
	CreateRbacAuthorizationV1NamespacedRoleBinding *IoK8sAPIRbacV1RoleBinding `json:"createRbacAuthorizationV1NamespacedRoleBinding,omitempty"`
	// create a PodSchedulingContext
	//
	// Equivalent to POST /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts
	CreateResourceV1alpha2NamespacedPodSchedulingContext *IoK8sAPIResourceV1alpha2PodSchedulingContext `json:"createResourceV1alpha2NamespacedPodSchedulingContext,omitempty"`
	// create a ResourceClaim
	//
	// Equivalent to POST /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims
	CreateResourceV1alpha2NamespacedResourceClaim *IoK8sAPIResourceV1alpha2ResourceClaim `json:"createResourceV1alpha2NamespacedResourceClaim,omitempty"`
	// create a ResourceClaimTemplate
	//
	// Equivalent to POST /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates
	CreateResourceV1alpha2NamespacedResourceClaimTemplate *IoK8sAPIResourceV1alpha2ResourceClaimTemplate `json:"createResourceV1alpha2NamespacedResourceClaimTemplate,omitempty"`
	// create a ResourceClass
	//
	// Equivalent to POST /apis/resource.k8s.io/v1alpha2/resourceclasses
	CreateResourceV1alpha2ResourceClass *IoK8sAPIResourceV1alpha2ResourceClass `json:"createResourceV1alpha2ResourceClass,omitempty"`
	// create a PriorityClass
	//
	// Equivalent to POST /apis/scheduling.k8s.io/v1/priorityclasses
	CreateSchedulingV1PriorityClass *IoK8sAPISchedulingV1PriorityClass `json:"createSchedulingV1PriorityClass,omitempty"`
	// create a CSIDriver
	//
	// Equivalent to POST /apis/storage.k8s.io/v1/csidrivers
	CreateStorageV1CSIDriver *IoK8sAPIStorageV1CSIDriver `json:"createStorageV1CSIDriver,omitempty"`
	// create a CSINode
	//
	// Equivalent to POST /apis/storage.k8s.io/v1/csinodes
	CreateStorageV1CSINode *IoK8sAPIStorageV1CSINode `json:"createStorageV1CSINode,omitempty"`
	// create a CSIStorageCapacity
	//
	// Equivalent to POST /apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities
	CreateStorageV1NamespacedCSIStorageCapacity *IoK8sAPIStorageV1CSIStorageCapacity `json:"createStorageV1NamespacedCSIStorageCapacity,omitempty"`
	// create a StorageClass
	//
	// Equivalent to POST /apis/storage.k8s.io/v1/storageclasses
	CreateStorageV1StorageClass *IoK8sAPIStorageV1StorageClass `json:"createStorageV1StorageClass,omitempty"`
	// create a VolumeAttachment
	//
	// Equivalent to POST /apis/storage.k8s.io/v1/volumeattachments
	CreateStorageV1VolumeAttachment *IoK8sAPIStorageV1VolumeAttachment `json:"createStorageV1VolumeAttachment,omitempty"`
	// delete collection of MutatingWebhookConfiguration
	//
	// Equivalent to DELETE /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations
	DeleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration,omitempty"`
	// delete collection of ValidatingWebhookConfiguration
	//
	// Equivalent to DELETE /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations
	DeleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration,omitempty"`
	// delete a MutatingWebhookConfiguration
	//
	// Equivalent to DELETE /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}
	DeleteAdmissionregistrationV1MutatingWebhookConfiguration *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAdmissionregistrationV1MutatingWebhookConfiguration,omitempty"`
	// delete a ValidatingWebhookConfiguration
	//
	// Equivalent to DELETE /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}
	DeleteAdmissionregistrationV1ValidatingWebhookConfiguration *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAdmissionregistrationV1ValidatingWebhookConfiguration,omitempty"`
	// delete collection of ValidatingAdmissionPolicy
	//
	// Equivalent to DELETE /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies
	DeleteAdmissionregistrationV1alpha1CollectionValidatingAdmissionPolicy *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAdmissionregistrationV1alpha1CollectionValidatingAdmissionPolicy,omitempty"`
	// delete collection of ValidatingAdmissionPolicyBinding
	//
	// Equivalent to DELETE /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings
	DeleteAdmissionregistrationV1alpha1CollectionValidatingAdmissionPolicyBinding *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAdmissionregistrationV1alpha1CollectionValidatingAdmissionPolicyBinding,omitempty"`
	// delete a ValidatingAdmissionPolicy
	//
	// Equivalent to DELETE /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}
	DeleteAdmissionregistrationV1alpha1ValidatingAdmissionPolicy *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAdmissionregistrationV1alpha1ValidatingAdmissionPolicy,omitempty"`
	// delete a ValidatingAdmissionPolicyBinding
	//
	// Equivalent to DELETE /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}
	DeleteAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding,omitempty"`
	// delete collection of CustomResourceDefinition
	//
	// Equivalent to DELETE /apis/apiextensions.k8s.io/v1/customresourcedefinitions
	DeleteApiextensionsV1CollectionCustomResourceDefinition *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteApiextensionsV1CollectionCustomResourceDefinition,omitempty"`
	// delete a CustomResourceDefinition
	//
	// Equivalent to DELETE /apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}
	DeleteApiextensionsV1CustomResourceDefinition *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteApiextensionsV1CustomResourceDefinition,omitempty"`
	// delete an APIService
	//
	// Equivalent to DELETE /apis/apiregistration.k8s.io/v1/apiservices/{name}
	DeleteApiregistrationV1APIService *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteApiregistrationV1APIService,omitempty"`
	// delete collection of APIService
	//
	// Equivalent to DELETE /apis/apiregistration.k8s.io/v1/apiservices
	DeleteApiregistrationV1CollectionAPIService *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteApiregistrationV1CollectionAPIService,omitempty"`
	// delete collection of ControllerRevision
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/controllerrevisions
	DeleteAppsV1CollectionNamespacedControllerRevision *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1CollectionNamespacedControllerRevision,omitempty"`
	// delete collection of DaemonSet
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/daemonsets
	DeleteAppsV1CollectionNamespacedDaemonSet *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1CollectionNamespacedDaemonSet,omitempty"`
	// delete collection of Deployment
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/deployments
	DeleteAppsV1CollectionNamespacedDeployment *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1CollectionNamespacedDeployment,omitempty"`
	// delete collection of ReplicaSet
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/replicasets
	DeleteAppsV1CollectionNamespacedReplicaSet *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1CollectionNamespacedReplicaSet,omitempty"`
	// delete collection of StatefulSet
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/statefulsets
	DeleteAppsV1CollectionNamespacedStatefulSet *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1CollectionNamespacedStatefulSet,omitempty"`
	// delete a ControllerRevision
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}
	DeleteAppsV1NamespacedControllerRevision *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1NamespacedControllerRevision,omitempty"`
	// delete a DaemonSet
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}
	DeleteAppsV1NamespacedDaemonSet *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1NamespacedDaemonSet,omitempty"`
	// delete a Deployment
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/deployments/{name}
	DeleteAppsV1NamespacedDeployment *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1NamespacedDeployment,omitempty"`
	// delete a ReplicaSet
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/replicasets/{name}
	DeleteAppsV1NamespacedReplicaSet *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1NamespacedReplicaSet,omitempty"`
	// delete a StatefulSet
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}
	DeleteAppsV1NamespacedStatefulSet *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1NamespacedStatefulSet,omitempty"`
	// delete collection of HorizontalPodAutoscaler
	//
	// Equivalent to DELETE /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers
	DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler,omitempty"`
	// delete a HorizontalPodAutoscaler
	//
	// Equivalent to DELETE /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}
	DeleteAutoscalingV1NamespacedHorizontalPodAutoscaler *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAutoscalingV1NamespacedHorizontalPodAutoscaler,omitempty"`
	// delete collection of HorizontalPodAutoscaler
	//
	// Equivalent to DELETE /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers
	DeleteAutoscalingV2CollectionNamespacedHorizontalPodAutoscaler *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAutoscalingV2CollectionNamespacedHorizontalPodAutoscaler,omitempty"`
	// delete a HorizontalPodAutoscaler
	//
	// Equivalent to DELETE /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}
	DeleteAutoscalingV2NamespacedHorizontalPodAutoscaler *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAutoscalingV2NamespacedHorizontalPodAutoscaler,omitempty"`
	// delete collection of CronJob
	//
	// Equivalent to DELETE /apis/batch/v1/namespaces/{namespace}/cronjobs
	DeleteBatchV1CollectionNamespacedCronJob *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteBatchV1CollectionNamespacedCronJob,omitempty"`
	// delete collection of Job
	//
	// Equivalent to DELETE /apis/batch/v1/namespaces/{namespace}/jobs
	DeleteBatchV1CollectionNamespacedJob *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteBatchV1CollectionNamespacedJob,omitempty"`
	// delete a CronJob
	//
	// Equivalent to DELETE /apis/batch/v1/namespaces/{namespace}/cronjobs/{name}
	DeleteBatchV1NamespacedCronJob *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteBatchV1NamespacedCronJob,omitempty"`
	// delete a Job
	//
	// Equivalent to DELETE /apis/batch/v1/namespaces/{namespace}/jobs/{name}
	DeleteBatchV1NamespacedJob *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteBatchV1NamespacedJob,omitempty"`
	// delete a CertificateSigningRequest
	//
	// Equivalent to DELETE /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}
	DeleteCertificatesV1CertificateSigningRequest *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCertificatesV1CertificateSigningRequest,omitempty"`
	// delete collection of CertificateSigningRequest
	//
	// Equivalent to DELETE /apis/certificates.k8s.io/v1/certificatesigningrequests
	DeleteCertificatesV1CollectionCertificateSigningRequest *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCertificatesV1CollectionCertificateSigningRequest,omitempty"`
	// delete a ClusterTrustBundle
	//
	// Equivalent to DELETE /apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}
	DeleteCertificatesV1alpha1ClusterTrustBundle *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCertificatesV1alpha1ClusterTrustBundle,omitempty"`
	// delete collection of ClusterTrustBundle
	//
	// Equivalent to DELETE /apis/certificates.k8s.io/v1alpha1/clustertrustbundles
	DeleteCertificatesV1alpha1CollectionClusterTrustBundle *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCertificatesV1alpha1CollectionClusterTrustBundle,omitempty"`
	// delete collection of Lease
	//
	// Equivalent to DELETE /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases
	DeleteCoordinationV1CollectionNamespacedLease *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoordinationV1CollectionNamespacedLease,omitempty"`
	// delete a Lease
	//
	// Equivalent to DELETE /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}
	DeleteCoordinationV1NamespacedLease *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoordinationV1NamespacedLease,omitempty"`
	// delete collection of ConfigMap
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/configmaps
	DeleteCoreV1CollectionNamespacedConfigMap *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedConfigMap,omitempty"`
	// delete collection of Endpoints
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/endpoints
	DeleteCoreV1CollectionNamespacedEndpoints *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedEndpoints,omitempty"`
	// delete collection of Event
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/events
	DeleteCoreV1CollectionNamespacedEvent *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedEvent,omitempty"`
	// delete collection of LimitRange
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/limitranges
	DeleteCoreV1CollectionNamespacedLimitRange *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedLimitRange,omitempty"`
	// delete collection of PersistentVolumeClaim
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/persistentvolumeclaims
	DeleteCoreV1CollectionNamespacedPersistentVolumeClaim *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedPersistentVolumeClaim,omitempty"`
	// delete collection of Pod
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/pods
	DeleteCoreV1CollectionNamespacedPod *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedPod,omitempty"`
	// delete collection of PodTemplate
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/podtemplates
	DeleteCoreV1CollectionNamespacedPodTemplate *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedPodTemplate,omitempty"`
	// delete collection of ReplicationController
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/replicationcontrollers
	DeleteCoreV1CollectionNamespacedReplicationController *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedReplicationController,omitempty"`
	// delete collection of ResourceQuota
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/resourcequotas
	DeleteCoreV1CollectionNamespacedResourceQuota *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedResourceQuota,omitempty"`
	// delete collection of Secret
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/secrets
	DeleteCoreV1CollectionNamespacedSecret *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedSecret,omitempty"`
	// delete collection of Service
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/services
	DeleteCoreV1CollectionNamespacedService *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedService,omitempty"`
	// delete collection of ServiceAccount
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/serviceaccounts
	DeleteCoreV1CollectionNamespacedServiceAccount *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedServiceAccount,omitempty"`
	// delete collection of Node
	//
	// Equivalent to DELETE /api/v1/nodes
	DeleteCoreV1CollectionNode *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNode,omitempty"`
	// delete collection of PersistentVolume
	//
	// Equivalent to DELETE /api/v1/persistentvolumes
	DeleteCoreV1CollectionPersistentVolume *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionPersistentVolume,omitempty"`
	// delete a Namespace
	//
	// Equivalent to DELETE /api/v1/namespaces/{name}
	DeleteCoreV1Namespace *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1Namespace,omitempty"`
	// delete a ConfigMap
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/configmaps/{name}
	DeleteCoreV1NamespacedConfigMap *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1NamespacedConfigMap,omitempty"`
	// delete Endpoints
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/endpoints/{name}
	DeleteCoreV1NamespacedEndpoints *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1NamespacedEndpoints,omitempty"`
	// delete an Event
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/events/{name}
	DeleteCoreV1NamespacedEvent *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1NamespacedEvent,omitempty"`
	// delete a LimitRange
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/limitranges/{name}
	DeleteCoreV1NamespacedLimitRange *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1NamespacedLimitRange,omitempty"`
	// delete a PersistentVolumeClaim
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}
	DeleteCoreV1NamespacedPersistentVolumeClaim *IoK8sAPICoreV1PersistentVolumeClaim `json:"deleteCoreV1NamespacedPersistentVolumeClaim,omitempty"`
	// delete a Pod
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/pods/{name}
	DeleteCoreV1NamespacedPod *IoK8sAPICoreV1Pod `json:"deleteCoreV1NamespacedPod,omitempty"`
	// delete a PodTemplate
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/podtemplates/{name}
	DeleteCoreV1NamespacedPodTemplate *IoK8sAPICoreV1PodTemplate `json:"deleteCoreV1NamespacedPodTemplate,omitempty"`
	// delete a ReplicationController
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/replicationcontrollers/{name}
	DeleteCoreV1NamespacedReplicationController *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1NamespacedReplicationController,omitempty"`
	// delete a ResourceQuota
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/resourcequotas/{name}
	DeleteCoreV1NamespacedResourceQuota *IoK8sAPICoreV1ResourceQuota `json:"deleteCoreV1NamespacedResourceQuota,omitempty"`
	// delete a Secret
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/secrets/{name}
	DeleteCoreV1NamespacedSecret *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1NamespacedSecret,omitempty"`
	// delete a Service
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/services/{name}
	DeleteCoreV1NamespacedService *IoK8sAPICoreV1Service `json:"deleteCoreV1NamespacedService,omitempty"`
	// delete a ServiceAccount
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/serviceaccounts/{name}
	DeleteCoreV1NamespacedServiceAccount *IoK8sAPICoreV1ServiceAccount `json:"deleteCoreV1NamespacedServiceAccount,omitempty"`
	// delete a Node
	//
	// Equivalent to DELETE /api/v1/nodes/{name}
	DeleteCoreV1Node *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1Node,omitempty"`
	// delete a PersistentVolume
	//
	// Equivalent to DELETE /api/v1/persistentvolumes/{name}
	DeleteCoreV1PersistentVolume *IoK8sAPICoreV1PersistentVolume `json:"deleteCoreV1PersistentVolume,omitempty"`
	// delete collection of EndpointSlice
	//
	// Equivalent to DELETE /apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices
	DeleteDiscoveryV1CollectionNamespacedEndpointSlice *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteDiscoveryV1CollectionNamespacedEndpointSlice,omitempty"`
	// delete an EndpointSlice
	//
	// Equivalent to DELETE /apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}
	DeleteDiscoveryV1NamespacedEndpointSlice *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteDiscoveryV1NamespacedEndpointSlice,omitempty"`
	// delete collection of Event
	//
	// Equivalent to DELETE /apis/events.k8s.io/v1/namespaces/{namespace}/events
	DeleteEventsV1CollectionNamespacedEvent *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteEventsV1CollectionNamespacedEvent,omitempty"`
	// delete an Event
	//
	// Equivalent to DELETE /apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}
	DeleteEventsV1NamespacedEvent *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteEventsV1NamespacedEvent,omitempty"`
	// delete collection of FlowSchema
	//
	// Equivalent to DELETE /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas
	DeleteFlowcontrolApiserverV1beta2CollectionFlowSchema *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteFlowcontrolApiserverV1beta2CollectionFlowSchema,omitempty"`
	// delete collection of PriorityLevelConfiguration
	//
	// Equivalent to DELETE /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations
	DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfiguration *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfiguration,omitempty"`
	// delete a FlowSchema
	//
	// Equivalent to DELETE /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}
	DeleteFlowcontrolApiserverV1beta2FlowSchema *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteFlowcontrolApiserverV1beta2FlowSchema,omitempty"`
	// delete a PriorityLevelConfiguration
	//
	// Equivalent to DELETE /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}
	DeleteFlowcontrolApiserverV1beta2PriorityLevelConfiguration *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteFlowcontrolApiserverV1beta2PriorityLevelConfiguration,omitempty"`
	// delete collection of FlowSchema
	//
	// Equivalent to DELETE /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas
	DeleteFlowcontrolApiserverV1beta3CollectionFlowSchema *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteFlowcontrolApiserverV1beta3CollectionFlowSchema,omitempty"`
	// delete collection of PriorityLevelConfiguration
	//
	// Equivalent to DELETE /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations
	DeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfiguration *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfiguration,omitempty"`
	// delete a FlowSchema
	//
	// Equivalent to DELETE /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}
	DeleteFlowcontrolApiserverV1beta3FlowSchema *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteFlowcontrolApiserverV1beta3FlowSchema,omitempty"`
	// delete a PriorityLevelConfiguration
	//
	// Equivalent to DELETE /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}
	DeleteFlowcontrolApiserverV1beta3PriorityLevelConfiguration *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteFlowcontrolApiserverV1beta3PriorityLevelConfiguration,omitempty"`
	// delete collection of StorageVersion
	//
	// Equivalent to DELETE /apis/internal.apiserver.k8s.io/v1alpha1/storageversions
	DeleteInternalApiserverV1alpha1CollectionStorageVersion *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteInternalApiserverV1alpha1CollectionStorageVersion,omitempty"`
	// delete a StorageVersion
	//
	// Equivalent to DELETE /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}
	DeleteInternalApiserverV1alpha1StorageVersion *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteInternalApiserverV1alpha1StorageVersion,omitempty"`
	// delete collection of IngressClass
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1/ingressclasses
	DeleteNetworkingV1CollectionIngressClass *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1CollectionIngressClass,omitempty"`
	// delete collection of Ingress
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses
	DeleteNetworkingV1CollectionNamespacedIngress *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1CollectionNamespacedIngress,omitempty"`
	// delete collection of NetworkPolicy
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies
	DeleteNetworkingV1CollectionNamespacedNetworkPolicy *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1CollectionNamespacedNetworkPolicy,omitempty"`
	// delete an IngressClass
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1/ingressclasses/{name}
	DeleteNetworkingV1IngressClass *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1IngressClass,omitempty"`
	// delete an Ingress
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}
	DeleteNetworkingV1NamespacedIngress *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1NamespacedIngress,omitempty"`
	// delete a NetworkPolicy
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}
	DeleteNetworkingV1NamespacedNetworkPolicy *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1NamespacedNetworkPolicy,omitempty"`
	// delete a ClusterCIDR
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1alpha1/clustercidrs/{name}
	DeleteNetworkingV1alpha1ClusterCidr *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1alpha1ClusterCIDR,omitempty"`
	// delete collection of ClusterCIDR
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1alpha1/clustercidrs
	DeleteNetworkingV1alpha1CollectionClusterCidr *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1alpha1CollectionClusterCIDR,omitempty"`
	// delete collection of IPAddress
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1alpha1/ipaddresses
	DeleteNetworkingV1alpha1CollectionIPAddress *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1alpha1CollectionIPAddress,omitempty"`
	// delete an IPAddress
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1alpha1/ipaddresses/{name}
	DeleteNetworkingV1alpha1IPAddress *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1alpha1IPAddress,omitempty"`
	// delete collection of RuntimeClass
	//
	// Equivalent to DELETE /apis/node.k8s.io/v1/runtimeclasses
	DeleteNodeV1CollectionRuntimeClass *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNodeV1CollectionRuntimeClass,omitempty"`
	// delete a RuntimeClass
	//
	// Equivalent to DELETE /apis/node.k8s.io/v1/runtimeclasses/{name}
	DeleteNodeV1RuntimeClass *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNodeV1RuntimeClass,omitempty"`
	// delete collection of PodDisruptionBudget
	//
	// Equivalent to DELETE /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets
	DeletePolicyV1CollectionNamespacedPodDisruptionBudget *IoK8sApimachineryPkgApisMetaV1Status `json:"deletePolicyV1CollectionNamespacedPodDisruptionBudget,omitempty"`
	// delete a PodDisruptionBudget
	//
	// Equivalent to DELETE /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}
	DeletePolicyV1NamespacedPodDisruptionBudget *IoK8sApimachineryPkgApisMetaV1Status `json:"deletePolicyV1NamespacedPodDisruptionBudget,omitempty"`
	// delete a ClusterRole
	//
	// Equivalent to DELETE /apis/rbac.authorization.k8s.io/v1/clusterroles/{name}
	DeleteRbacAuthorizationV1ClusterRole *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteRbacAuthorizationV1ClusterRole,omitempty"`
	// delete a ClusterRoleBinding
	//
	// Equivalent to DELETE /apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}
	DeleteRbacAuthorizationV1ClusterRoleBinding *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteRbacAuthorizationV1ClusterRoleBinding,omitempty"`
	// delete collection of ClusterRole
	//
	// Equivalent to DELETE /apis/rbac.authorization.k8s.io/v1/clusterroles
	DeleteRbacAuthorizationV1CollectionClusterRole *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteRbacAuthorizationV1CollectionClusterRole,omitempty"`
	// delete collection of ClusterRoleBinding
	//
	// Equivalent to DELETE /apis/rbac.authorization.k8s.io/v1/clusterrolebindings
	DeleteRbacAuthorizationV1CollectionClusterRoleBinding *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteRbacAuthorizationV1CollectionClusterRoleBinding,omitempty"`
	// delete collection of Role
	//
	// Equivalent to DELETE /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles
	DeleteRbacAuthorizationV1CollectionNamespacedRole *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteRbacAuthorizationV1CollectionNamespacedRole,omitempty"`
	// delete collection of RoleBinding
	//
	// Equivalent to DELETE /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings
	DeleteRbacAuthorizationV1CollectionNamespacedRoleBinding *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteRbacAuthorizationV1CollectionNamespacedRoleBinding,omitempty"`
	// delete a Role
	//
	// Equivalent to DELETE /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}
	DeleteRbacAuthorizationV1NamespacedRole *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteRbacAuthorizationV1NamespacedRole,omitempty"`
	// delete a RoleBinding
	//
	// Equivalent to DELETE /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}
	DeleteRbacAuthorizationV1NamespacedRoleBinding *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteRbacAuthorizationV1NamespacedRoleBinding,omitempty"`
	// delete collection of PodSchedulingContext
	//
	// Equivalent to DELETE /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts
	DeleteResourceV1alpha2CollectionNamespacedPodSchedulingContext *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteResourceV1alpha2CollectionNamespacedPodSchedulingContext,omitempty"`
	// delete collection of ResourceClaim
	//
	// Equivalent to DELETE /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims
	DeleteResourceV1alpha2CollectionNamespacedResourceClaim *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteResourceV1alpha2CollectionNamespacedResourceClaim,omitempty"`
	// delete collection of ResourceClaimTemplate
	//
	// Equivalent to DELETE /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates
	DeleteResourceV1alpha2CollectionNamespacedResourceClaimTemplate *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteResourceV1alpha2CollectionNamespacedResourceClaimTemplate,omitempty"`
	// delete collection of ResourceClass
	//
	// Equivalent to DELETE /apis/resource.k8s.io/v1alpha2/resourceclasses
	DeleteResourceV1alpha2CollectionResourceClass *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteResourceV1alpha2CollectionResourceClass,omitempty"`
	// delete a PodSchedulingContext
	//
	// Equivalent to DELETE /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}
	DeleteResourceV1alpha2NamespacedPodSchedulingContext *IoK8sAPIResourceV1alpha2PodSchedulingContext `json:"deleteResourceV1alpha2NamespacedPodSchedulingContext,omitempty"`
	// delete a ResourceClaim
	//
	// Equivalent to DELETE /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}
	DeleteResourceV1alpha2NamespacedResourceClaim *IoK8sAPIResourceV1alpha2ResourceClaim `json:"deleteResourceV1alpha2NamespacedResourceClaim,omitempty"`
	// delete a ResourceClaimTemplate
	//
	// Equivalent to DELETE /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}
	DeleteResourceV1alpha2NamespacedResourceClaimTemplate *IoK8sAPIResourceV1alpha2ResourceClaimTemplate `json:"deleteResourceV1alpha2NamespacedResourceClaimTemplate,omitempty"`
	// delete a ResourceClass
	//
	// Equivalent to DELETE /apis/resource.k8s.io/v1alpha2/resourceclasses/{name}
	DeleteResourceV1alpha2ResourceClass *IoK8sAPIResourceV1alpha2ResourceClass `json:"deleteResourceV1alpha2ResourceClass,omitempty"`
	// delete collection of PriorityClass
	//
	// Equivalent to DELETE /apis/scheduling.k8s.io/v1/priorityclasses
	DeleteSchedulingV1CollectionPriorityClass *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteSchedulingV1CollectionPriorityClass,omitempty"`
	// delete a PriorityClass
	//
	// Equivalent to DELETE /apis/scheduling.k8s.io/v1/priorityclasses/{name}
	DeleteSchedulingV1PriorityClass *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteSchedulingV1PriorityClass,omitempty"`
	// delete a CSIDriver
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/csidrivers/{name}
	DeleteStorageV1CSIDriver *IoK8sAPIStorageV1CSIDriver `json:"deleteStorageV1CSIDriver,omitempty"`
	// delete a CSINode
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/csinodes/{name}
	DeleteStorageV1CSINode *IoK8sAPIStorageV1CSINode `json:"deleteStorageV1CSINode,omitempty"`
	// delete collection of CSIDriver
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/csidrivers
	DeleteStorageV1CollectionCSIDriver *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteStorageV1CollectionCSIDriver,omitempty"`
	// delete collection of CSINode
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/csinodes
	DeleteStorageV1CollectionCSINode *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteStorageV1CollectionCSINode,omitempty"`
	// delete collection of CSIStorageCapacity
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities
	DeleteStorageV1CollectionNamespacedCSIStorageCapacity *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteStorageV1CollectionNamespacedCSIStorageCapacity,omitempty"`
	// delete collection of StorageClass
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/storageclasses
	DeleteStorageV1CollectionStorageClass *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteStorageV1CollectionStorageClass,omitempty"`
	// delete collection of VolumeAttachment
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/volumeattachments
	DeleteStorageV1CollectionVolumeAttachment *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteStorageV1CollectionVolumeAttachment,omitempty"`
	// delete a CSIStorageCapacity
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities/{name}
	DeleteStorageV1NamespacedCSIStorageCapacity *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteStorageV1NamespacedCSIStorageCapacity,omitempty"`
	// delete a StorageClass
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/storageclasses/{name}
	DeleteStorageV1StorageClass *IoK8sAPIStorageV1StorageClass `json:"deleteStorageV1StorageClass,omitempty"`
	// delete a VolumeAttachment
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/volumeattachments/{name}
	DeleteStorageV1VolumeAttachment *IoK8sAPIStorageV1VolumeAttachment `json:"deleteStorageV1VolumeAttachment,omitempty"`
	// partially update the specified MutatingWebhookConfiguration
	//
	// Equivalent to PATCH /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}
	PatchAdmissionregistrationV1MutatingWebhookConfiguration *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration `json:"patchAdmissionregistrationV1MutatingWebhookConfiguration,omitempty"`
	// partially update the specified ValidatingWebhookConfiguration
	//
	// Equivalent to PATCH /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}
	PatchAdmissionregistrationV1ValidatingWebhookConfiguration *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration `json:"patchAdmissionregistrationV1ValidatingWebhookConfiguration,omitempty"`
	// partially update the specified ValidatingAdmissionPolicy
	//
	// Equivalent to PATCH /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}
	PatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicy *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy `json:"patchAdmissionregistrationV1alpha1ValidatingAdmissionPolicy,omitempty"`
	// partially update the specified ValidatingAdmissionPolicyBinding
	//
	// Equivalent to PATCH /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}
	PatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding `json:"patchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding,omitempty"`
	// partially update status of the specified ValidatingAdmissionPolicy
	//
	// Equivalent to PATCH /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}/status
	PatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy `json:"patchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus,omitempty"`
	// partially update the specified CustomResourceDefinition
	//
	// Equivalent to PATCH /apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}
	PatchApiextensionsV1CustomResourceDefinition *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition `json:"patchApiextensionsV1CustomResourceDefinition,omitempty"`
	// partially update status of the specified CustomResourceDefinition
	//
	// Equivalent to PATCH /apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status
	PatchApiextensionsV1CustomResourceDefinitionStatus *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition `json:"patchApiextensionsV1CustomResourceDefinitionStatus,omitempty"`
	// partially update the specified APIService
	//
	// Equivalent to PATCH /apis/apiregistration.k8s.io/v1/apiservices/{name}
	PatchApiregistrationV1APIService *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService `json:"patchApiregistrationV1APIService,omitempty"`
	// partially update status of the specified APIService
	//
	// Equivalent to PATCH /apis/apiregistration.k8s.io/v1/apiservices/{name}/status
	PatchApiregistrationV1APIServiceStatus *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService `json:"patchApiregistrationV1APIServiceStatus,omitempty"`
	// partially update the specified ControllerRevision
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}
	PatchAppsV1NamespacedControllerRevision *IoK8sAPIAppsV1ControllerRevision `json:"patchAppsV1NamespacedControllerRevision,omitempty"`
	// partially update the specified DaemonSet
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}
	PatchAppsV1NamespacedDaemonSet *IoK8sAPIAppsV1DaemonSet `json:"patchAppsV1NamespacedDaemonSet,omitempty"`
	// partially update status of the specified DaemonSet
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status
	PatchAppsV1NamespacedDaemonSetStatus *IoK8sAPIAppsV1DaemonSet `json:"patchAppsV1NamespacedDaemonSetStatus,omitempty"`
	// partially update the specified Deployment
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/deployments/{name}
	PatchAppsV1NamespacedDeployment *IoK8sAPIAppsV1Deployment `json:"patchAppsV1NamespacedDeployment,omitempty"`
	// partially update scale of the specified Deployment
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale
	PatchAppsV1NamespacedDeploymentScale *IoK8sAPIAutoscalingV1Scale `json:"patchAppsV1NamespacedDeploymentScale,omitempty"`
	// partially update status of the specified Deployment
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/deployments/{name}/status
	PatchAppsV1NamespacedDeploymentStatus *IoK8sAPIAppsV1Deployment `json:"patchAppsV1NamespacedDeploymentStatus,omitempty"`
	// partially update the specified ReplicaSet
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/replicasets/{name}
	PatchAppsV1NamespacedReplicaSet *IoK8sAPIAppsV1ReplicaSet `json:"patchAppsV1NamespacedReplicaSet,omitempty"`
	// partially update scale of the specified ReplicaSet
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale
	PatchAppsV1NamespacedReplicaSetScale *IoK8sAPIAutoscalingV1Scale `json:"patchAppsV1NamespacedReplicaSetScale,omitempty"`
	// partially update status of the specified ReplicaSet
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status
	PatchAppsV1NamespacedReplicaSetStatus *IoK8sAPIAppsV1ReplicaSet `json:"patchAppsV1NamespacedReplicaSetStatus,omitempty"`
	// partially update the specified StatefulSet
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}
	PatchAppsV1NamespacedStatefulSet *IoK8sAPIAppsV1StatefulSet `json:"patchAppsV1NamespacedStatefulSet,omitempty"`
	// partially update scale of the specified StatefulSet
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale
	PatchAppsV1NamespacedStatefulSetScale *IoK8sAPIAutoscalingV1Scale `json:"patchAppsV1NamespacedStatefulSetScale,omitempty"`
	// partially update status of the specified StatefulSet
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status
	PatchAppsV1NamespacedStatefulSetStatus *IoK8sAPIAppsV1StatefulSet `json:"patchAppsV1NamespacedStatefulSetStatus,omitempty"`
	// partially update the specified HorizontalPodAutoscaler
	//
	// Equivalent to PATCH /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}
	PatchAutoscalingV1NamespacedHorizontalPodAutoscaler *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler `json:"patchAutoscalingV1NamespacedHorizontalPodAutoscaler,omitempty"`
	// partially update status of the specified HorizontalPodAutoscaler
	//
	// Equivalent to PATCH /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
	PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler `json:"patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus,omitempty"`
	// partially update the specified HorizontalPodAutoscaler
	//
	// Equivalent to PATCH /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}
	PatchAutoscalingV2NamespacedHorizontalPodAutoscaler *IoK8sAPIAutoscalingV2HorizontalPodAutoscaler `json:"patchAutoscalingV2NamespacedHorizontalPodAutoscaler,omitempty"`
	// partially update status of the specified HorizontalPodAutoscaler
	//
	// Equivalent to PATCH /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
	PatchAutoscalingV2NamespacedHorizontalPodAutoscalerStatus *IoK8sAPIAutoscalingV2HorizontalPodAutoscaler `json:"patchAutoscalingV2NamespacedHorizontalPodAutoscalerStatus,omitempty"`
	// partially update the specified CronJob
	//
	// Equivalent to PATCH /apis/batch/v1/namespaces/{namespace}/cronjobs/{name}
	PatchBatchV1NamespacedCronJob *IoK8sAPIBatchV1CronJob `json:"patchBatchV1NamespacedCronJob,omitempty"`
	// partially update status of the specified CronJob
	//
	// Equivalent to PATCH /apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status
	PatchBatchV1NamespacedCronJobStatus *IoK8sAPIBatchV1CronJob `json:"patchBatchV1NamespacedCronJobStatus,omitempty"`
	// partially update the specified Job
	//
	// Equivalent to PATCH /apis/batch/v1/namespaces/{namespace}/jobs/{name}
	PatchBatchV1NamespacedJob *IoK8sAPIBatchV1Job `json:"patchBatchV1NamespacedJob,omitempty"`
	// partially update status of the specified Job
	//
	// Equivalent to PATCH /apis/batch/v1/namespaces/{namespace}/jobs/{name}/status
	PatchBatchV1NamespacedJobStatus *IoK8sAPIBatchV1Job `json:"patchBatchV1NamespacedJobStatus,omitempty"`
	// partially update the specified CertificateSigningRequest
	//
	// Equivalent to PATCH /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}
	PatchCertificatesV1CertificateSigningRequest *IoK8sAPICertificatesV1CertificateSigningRequest `json:"patchCertificatesV1CertificateSigningRequest,omitempty"`
	// partially update approval of the specified CertificateSigningRequest
	//
	// Equivalent to PATCH /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval
	PatchCertificatesV1CertificateSigningRequestApproval *IoK8sAPICertificatesV1CertificateSigningRequest `json:"patchCertificatesV1CertificateSigningRequestApproval,omitempty"`
	// partially update status of the specified CertificateSigningRequest
	//
	// Equivalent to PATCH /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status
	PatchCertificatesV1CertificateSigningRequestStatus *IoK8sAPICertificatesV1CertificateSigningRequest `json:"patchCertificatesV1CertificateSigningRequestStatus,omitempty"`
	// partially update the specified ClusterTrustBundle
	//
	// Equivalent to PATCH /apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}
	PatchCertificatesV1alpha1ClusterTrustBundle *IoK8sAPICertificatesV1alpha1ClusterTrustBundle `json:"patchCertificatesV1alpha1ClusterTrustBundle,omitempty"`
	// partially update the specified Lease
	//
	// Equivalent to PATCH /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}
	PatchCoordinationV1NamespacedLease *IoK8sAPICoordinationV1Lease `json:"patchCoordinationV1NamespacedLease,omitempty"`
	// partially update the specified Namespace
	//
	// Equivalent to PATCH /api/v1/namespaces/{name}
	PatchCoreV1Namespace *IoK8sAPICoreV1Namespace `json:"patchCoreV1Namespace,omitempty"`
	// partially update status of the specified Namespace
	//
	// Equivalent to PATCH /api/v1/namespaces/{name}/status
	PatchCoreV1NamespaceStatus *IoK8sAPICoreV1Namespace `json:"patchCoreV1NamespaceStatus,omitempty"`
	// partially update the specified ConfigMap
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/configmaps/{name}
	PatchCoreV1NamespacedConfigMap *IoK8sAPICoreV1ConfigMap `json:"patchCoreV1NamespacedConfigMap,omitempty"`
	// partially update the specified Endpoints
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/endpoints/{name}
	PatchCoreV1NamespacedEndpoints *IoK8sAPICoreV1Endpoints `json:"patchCoreV1NamespacedEndpoints,omitempty"`
	// partially update the specified Event
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/events/{name}
	PatchCoreV1NamespacedEvent *IoK8sAPICoreV1Event `json:"patchCoreV1NamespacedEvent,omitempty"`
	// partially update the specified LimitRange
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/limitranges/{name}
	PatchCoreV1NamespacedLimitRange *IoK8sAPICoreV1LimitRange `json:"patchCoreV1NamespacedLimitRange,omitempty"`
	// partially update the specified PersistentVolumeClaim
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}
	PatchCoreV1NamespacedPersistentVolumeClaim *IoK8sAPICoreV1PersistentVolumeClaim `json:"patchCoreV1NamespacedPersistentVolumeClaim,omitempty"`
	// partially update status of the specified PersistentVolumeClaim
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status
	PatchCoreV1NamespacedPersistentVolumeClaimStatus *IoK8sAPICoreV1PersistentVolumeClaim `json:"patchCoreV1NamespacedPersistentVolumeClaimStatus,omitempty"`
	// partially update the specified Pod
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/pods/{name}
	PatchCoreV1NamespacedPod *IoK8sAPICoreV1Pod `json:"patchCoreV1NamespacedPod,omitempty"`
	// partially update ephemeralcontainers of the specified Pod
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers
	PatchCoreV1NamespacedPodEphemeralcontainers *IoK8sAPICoreV1Pod `json:"patchCoreV1NamespacedPodEphemeralcontainers,omitempty"`
	// partially update status of the specified Pod
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/pods/{name}/status
	PatchCoreV1NamespacedPodStatus *IoK8sAPICoreV1Pod `json:"patchCoreV1NamespacedPodStatus,omitempty"`
	// partially update the specified PodTemplate
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/podtemplates/{name}
	PatchCoreV1NamespacedPodTemplate *IoK8sAPICoreV1PodTemplate `json:"patchCoreV1NamespacedPodTemplate,omitempty"`
	// partially update the specified ReplicationController
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/replicationcontrollers/{name}
	PatchCoreV1NamespacedReplicationController *IoK8sAPICoreV1ReplicationController `json:"patchCoreV1NamespacedReplicationController,omitempty"`
	// partially update scale of the specified ReplicationController
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale
	PatchCoreV1NamespacedReplicationControllerScale *IoK8sAPIAutoscalingV1Scale `json:"patchCoreV1NamespacedReplicationControllerScale,omitempty"`
	// partially update status of the specified ReplicationController
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status
	PatchCoreV1NamespacedReplicationControllerStatus *IoK8sAPICoreV1ReplicationController `json:"patchCoreV1NamespacedReplicationControllerStatus,omitempty"`
	// partially update the specified ResourceQuota
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/resourcequotas/{name}
	PatchCoreV1NamespacedResourceQuota *IoK8sAPICoreV1ResourceQuota `json:"patchCoreV1NamespacedResourceQuota,omitempty"`
	// partially update status of the specified ResourceQuota
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/resourcequotas/{name}/status
	PatchCoreV1NamespacedResourceQuotaStatus *IoK8sAPICoreV1ResourceQuota `json:"patchCoreV1NamespacedResourceQuotaStatus,omitempty"`
	// partially update the specified Secret
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/secrets/{name}
	PatchCoreV1NamespacedSecret *IoK8sAPICoreV1Secret `json:"patchCoreV1NamespacedSecret,omitempty"`
	// partially update the specified Service
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/services/{name}
	PatchCoreV1NamespacedService *IoK8sAPICoreV1Service `json:"patchCoreV1NamespacedService,omitempty"`
	// partially update the specified ServiceAccount
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/serviceaccounts/{name}
	PatchCoreV1NamespacedServiceAccount *IoK8sAPICoreV1ServiceAccount `json:"patchCoreV1NamespacedServiceAccount,omitempty"`
	// partially update status of the specified Service
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/services/{name}/status
	PatchCoreV1NamespacedServiceStatus *IoK8sAPICoreV1Service `json:"patchCoreV1NamespacedServiceStatus,omitempty"`
	// partially update the specified Node
	//
	// Equivalent to PATCH /api/v1/nodes/{name}
	PatchCoreV1Node *IoK8sAPICoreV1Node `json:"patchCoreV1Node,omitempty"`
	// partially update status of the specified Node
	//
	// Equivalent to PATCH /api/v1/nodes/{name}/status
	PatchCoreV1NodeStatus *IoK8sAPICoreV1Node `json:"patchCoreV1NodeStatus,omitempty"`
	// partially update the specified PersistentVolume
	//
	// Equivalent to PATCH /api/v1/persistentvolumes/{name}
	PatchCoreV1PersistentVolume *IoK8sAPICoreV1PersistentVolume `json:"patchCoreV1PersistentVolume,omitempty"`
	// partially update status of the specified PersistentVolume
	//
	// Equivalent to PATCH /api/v1/persistentvolumes/{name}/status
	PatchCoreV1PersistentVolumeStatus *IoK8sAPICoreV1PersistentVolume `json:"patchCoreV1PersistentVolumeStatus,omitempty"`
	// partially update the specified EndpointSlice
	//
	// Equivalent to PATCH /apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}
	PatchDiscoveryV1NamespacedEndpointSlice *IoK8sAPIDiscoveryV1EndpointSlice `json:"patchDiscoveryV1NamespacedEndpointSlice,omitempty"`
	// partially update the specified Event
	//
	// Equivalent to PATCH /apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}
	PatchEventsV1NamespacedEvent *IoK8sAPIEventsV1Event `json:"patchEventsV1NamespacedEvent,omitempty"`
	// partially update the specified FlowSchema
	//
	// Equivalent to PATCH /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}
	PatchFlowcontrolApiserverV1beta2FlowSchema *IoK8sAPIFlowcontrolV1beta2FlowSchema `json:"patchFlowcontrolApiserverV1beta2FlowSchema,omitempty"`
	// partially update status of the specified FlowSchema
	//
	// Equivalent to PATCH /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}/status
	PatchFlowcontrolApiserverV1beta2FlowSchemaStatus *IoK8sAPIFlowcontrolV1beta2FlowSchema `json:"patchFlowcontrolApiserverV1beta2FlowSchemaStatus,omitempty"`
	// partially update the specified PriorityLevelConfiguration
	//
	// Equivalent to PATCH /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}
	PatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration `json:"patchFlowcontrolApiserverV1beta2PriorityLevelConfiguration,omitempty"`
	// partially update status of the specified PriorityLevelConfiguration
	//
	// Equivalent to PATCH /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}/status
	PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration `json:"patchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus,omitempty"`
	// partially update the specified FlowSchema
	//
	// Equivalent to PATCH /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}
	PatchFlowcontrolApiserverV1beta3FlowSchema *IoK8sAPIFlowcontrolV1beta3FlowSchema `json:"patchFlowcontrolApiserverV1beta3FlowSchema,omitempty"`
	// partially update status of the specified FlowSchema
	//
	// Equivalent to PATCH /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}/status
	PatchFlowcontrolApiserverV1beta3FlowSchemaStatus *IoK8sAPIFlowcontrolV1beta3FlowSchema `json:"patchFlowcontrolApiserverV1beta3FlowSchemaStatus,omitempty"`
	// partially update the specified PriorityLevelConfiguration
	//
	// Equivalent to PATCH /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}
	PatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration `json:"patchFlowcontrolApiserverV1beta3PriorityLevelConfiguration,omitempty"`
	// partially update status of the specified PriorityLevelConfiguration
	//
	// Equivalent to PATCH /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}/status
	PatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration `json:"patchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus,omitempty"`
	// partially update the specified StorageVersion
	//
	// Equivalent to PATCH /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}
	PatchInternalApiserverV1alpha1StorageVersion *IoK8sAPIApiserverinternalV1alpha1StorageVersion `json:"patchInternalApiserverV1alpha1StorageVersion,omitempty"`
	// partially update status of the specified StorageVersion
	//
	// Equivalent to PATCH /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}/status
	PatchInternalApiserverV1alpha1StorageVersionStatus *IoK8sAPIApiserverinternalV1alpha1StorageVersion `json:"patchInternalApiserverV1alpha1StorageVersionStatus,omitempty"`
	// partially update the specified IngressClass
	//
	// Equivalent to PATCH /apis/networking.k8s.io/v1/ingressclasses/{name}
	PatchNetworkingV1IngressClass *IoK8sAPINetworkingV1IngressClass `json:"patchNetworkingV1IngressClass,omitempty"`
	// partially update the specified Ingress
	//
	// Equivalent to PATCH /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}
	PatchNetworkingV1NamespacedIngress *IoK8sAPINetworkingV1Ingress `json:"patchNetworkingV1NamespacedIngress,omitempty"`
	// partially update status of the specified Ingress
	//
	// Equivalent to PATCH /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status
	PatchNetworkingV1NamespacedIngressStatus *IoK8sAPINetworkingV1Ingress `json:"patchNetworkingV1NamespacedIngressStatus,omitempty"`
	// partially update the specified NetworkPolicy
	//
	// Equivalent to PATCH /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}
	PatchNetworkingV1NamespacedNetworkPolicy *IoK8sAPINetworkingV1NetworkPolicy `json:"patchNetworkingV1NamespacedNetworkPolicy,omitempty"`
	// partially update status of the specified NetworkPolicy
	//
	// Equivalent to PATCH /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}/status
	PatchNetworkingV1NamespacedNetworkPolicyStatus *IoK8sAPINetworkingV1NetworkPolicy `json:"patchNetworkingV1NamespacedNetworkPolicyStatus,omitempty"`
	// partially update the specified ClusterCIDR
	//
	// Equivalent to PATCH /apis/networking.k8s.io/v1alpha1/clustercidrs/{name}
	PatchNetworkingV1alpha1ClusterCidr *IoK8sAPINetworkingV1alpha1ClusterCidr `json:"patchNetworkingV1alpha1ClusterCIDR,omitempty"`
	// partially update the specified IPAddress
	//
	// Equivalent to PATCH /apis/networking.k8s.io/v1alpha1/ipaddresses/{name}
	PatchNetworkingV1alpha1IPAddress *IoK8sAPINetworkingV1alpha1IPAddress `json:"patchNetworkingV1alpha1IPAddress,omitempty"`
	// partially update the specified RuntimeClass
	//
	// Equivalent to PATCH /apis/node.k8s.io/v1/runtimeclasses/{name}
	PatchNodeV1RuntimeClass *IoK8sAPINodeV1RuntimeClass `json:"patchNodeV1RuntimeClass,omitempty"`
	// partially update the specified PodDisruptionBudget
	//
	// Equivalent to PATCH /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}
	PatchPolicyV1NamespacedPodDisruptionBudget *IoK8sAPIPolicyV1PodDisruptionBudget `json:"patchPolicyV1NamespacedPodDisruptionBudget,omitempty"`
	// partially update status of the specified PodDisruptionBudget
	//
	// Equivalent to PATCH /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status
	PatchPolicyV1NamespacedPodDisruptionBudgetStatus *IoK8sAPIPolicyV1PodDisruptionBudget `json:"patchPolicyV1NamespacedPodDisruptionBudgetStatus,omitempty"`
	// partially update the specified ClusterRole
	//
	// Equivalent to PATCH /apis/rbac.authorization.k8s.io/v1/clusterroles/{name}
	PatchRbacAuthorizationV1ClusterRole *IoK8sAPIRbacV1ClusterRole `json:"patchRbacAuthorizationV1ClusterRole,omitempty"`
	// partially update the specified ClusterRoleBinding
	//
	// Equivalent to PATCH /apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}
	PatchRbacAuthorizationV1ClusterRoleBinding *IoK8sAPIRbacV1ClusterRoleBinding `json:"patchRbacAuthorizationV1ClusterRoleBinding,omitempty"`
	// partially update the specified Role
	//
	// Equivalent to PATCH /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}
	PatchRbacAuthorizationV1NamespacedRole *IoK8sAPIRbacV1Role `json:"patchRbacAuthorizationV1NamespacedRole,omitempty"`
	// partially update the specified RoleBinding
	//
	// Equivalent to PATCH /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}
	PatchRbacAuthorizationV1NamespacedRoleBinding *IoK8sAPIRbacV1RoleBinding `json:"patchRbacAuthorizationV1NamespacedRoleBinding,omitempty"`
	// partially update the specified PodSchedulingContext
	//
	// Equivalent to PATCH /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}
	PatchResourceV1alpha2NamespacedPodSchedulingContext *IoK8sAPIResourceV1alpha2PodSchedulingContext `json:"patchResourceV1alpha2NamespacedPodSchedulingContext,omitempty"`
	// partially update status of the specified PodSchedulingContext
	//
	// Equivalent to PATCH /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}/status
	PatchResourceV1alpha2NamespacedPodSchedulingContextStatus *IoK8sAPIResourceV1alpha2PodSchedulingContext `json:"patchResourceV1alpha2NamespacedPodSchedulingContextStatus,omitempty"`
	// partially update the specified ResourceClaim
	//
	// Equivalent to PATCH /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}
	PatchResourceV1alpha2NamespacedResourceClaim *IoK8sAPIResourceV1alpha2ResourceClaim `json:"patchResourceV1alpha2NamespacedResourceClaim,omitempty"`
	// partially update status of the specified ResourceClaim
	//
	// Equivalent to PATCH /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}/status
	PatchResourceV1alpha2NamespacedResourceClaimStatus *IoK8sAPIResourceV1alpha2ResourceClaim `json:"patchResourceV1alpha2NamespacedResourceClaimStatus,omitempty"`
	// partially update the specified ResourceClaimTemplate
	//
	// Equivalent to PATCH /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}
	PatchResourceV1alpha2NamespacedResourceClaimTemplate *IoK8sAPIResourceV1alpha2ResourceClaimTemplate `json:"patchResourceV1alpha2NamespacedResourceClaimTemplate,omitempty"`
	// partially update the specified ResourceClass
	//
	// Equivalent to PATCH /apis/resource.k8s.io/v1alpha2/resourceclasses/{name}
	PatchResourceV1alpha2ResourceClass *IoK8sAPIResourceV1alpha2ResourceClass `json:"patchResourceV1alpha2ResourceClass,omitempty"`
	// partially update the specified PriorityClass
	//
	// Equivalent to PATCH /apis/scheduling.k8s.io/v1/priorityclasses/{name}
	PatchSchedulingV1PriorityClass *IoK8sAPISchedulingV1PriorityClass `json:"patchSchedulingV1PriorityClass,omitempty"`
	// partially update the specified CSIDriver
	//
	// Equivalent to PATCH /apis/storage.k8s.io/v1/csidrivers/{name}
	PatchStorageV1CSIDriver *IoK8sAPIStorageV1CSIDriver `json:"patchStorageV1CSIDriver,omitempty"`
	// partially update the specified CSINode
	//
	// Equivalent to PATCH /apis/storage.k8s.io/v1/csinodes/{name}
	PatchStorageV1CSINode *IoK8sAPIStorageV1CSINode `json:"patchStorageV1CSINode,omitempty"`
	// partially update the specified CSIStorageCapacity
	//
	// Equivalent to PATCH /apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities/{name}
	PatchStorageV1NamespacedCSIStorageCapacity *IoK8sAPIStorageV1CSIStorageCapacity `json:"patchStorageV1NamespacedCSIStorageCapacity,omitempty"`
	// partially update the specified StorageClass
	//
	// Equivalent to PATCH /apis/storage.k8s.io/v1/storageclasses/{name}
	PatchStorageV1StorageClass *IoK8sAPIStorageV1StorageClass `json:"patchStorageV1StorageClass,omitempty"`
	// partially update the specified VolumeAttachment
	//
	// Equivalent to PATCH /apis/storage.k8s.io/v1/volumeattachments/{name}
	PatchStorageV1VolumeAttachment *IoK8sAPIStorageV1VolumeAttachment `json:"patchStorageV1VolumeAttachment,omitempty"`
	// partially update status of the specified VolumeAttachment
	//
	// Equivalent to PATCH /apis/storage.k8s.io/v1/volumeattachments/{name}/status
	PatchStorageV1VolumeAttachmentStatus *IoK8sAPIStorageV1VolumeAttachment `json:"patchStorageV1VolumeAttachmentStatus,omitempty"`
	// replace the specified MutatingWebhookConfiguration
	//
	// Equivalent to PUT /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}
	ReplaceAdmissionregistrationV1MutatingWebhookConfiguration *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration `json:"replaceAdmissionregistrationV1MutatingWebhookConfiguration,omitempty"`
	// replace the specified ValidatingWebhookConfiguration
	//
	// Equivalent to PUT /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}
	ReplaceAdmissionregistrationV1ValidatingWebhookConfiguration *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration `json:"replaceAdmissionregistrationV1ValidatingWebhookConfiguration,omitempty"`
	// replace the specified ValidatingAdmissionPolicy
	//
	// Equivalent to PUT /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}
	ReplaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicy *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy `json:"replaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicy,omitempty"`
	// replace the specified ValidatingAdmissionPolicyBinding
	//
	// Equivalent to PUT /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}
	ReplaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding `json:"replaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding,omitempty"`
	// replace status of the specified ValidatingAdmissionPolicy
	//
	// Equivalent to PUT /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}/status
	ReplaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy `json:"replaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus,omitempty"`
	// replace the specified CustomResourceDefinition
	//
	// Equivalent to PUT /apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}
	ReplaceApiextensionsV1CustomResourceDefinition *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition `json:"replaceApiextensionsV1CustomResourceDefinition,omitempty"`
	// replace status of the specified CustomResourceDefinition
	//
	// Equivalent to PUT /apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status
	ReplaceApiextensionsV1CustomResourceDefinitionStatus *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition `json:"replaceApiextensionsV1CustomResourceDefinitionStatus,omitempty"`
	// replace the specified APIService
	//
	// Equivalent to PUT /apis/apiregistration.k8s.io/v1/apiservices/{name}
	ReplaceApiregistrationV1APIService *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService `json:"replaceApiregistrationV1APIService,omitempty"`
	// replace status of the specified APIService
	//
	// Equivalent to PUT /apis/apiregistration.k8s.io/v1/apiservices/{name}/status
	ReplaceApiregistrationV1APIServiceStatus *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService `json:"replaceApiregistrationV1APIServiceStatus,omitempty"`
	// replace the specified ControllerRevision
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}
	ReplaceAppsV1NamespacedControllerRevision *IoK8sAPIAppsV1ControllerRevision `json:"replaceAppsV1NamespacedControllerRevision,omitempty"`
	// replace the specified DaemonSet
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}
	ReplaceAppsV1NamespacedDaemonSet *IoK8sAPIAppsV1DaemonSet `json:"replaceAppsV1NamespacedDaemonSet,omitempty"`
	// replace status of the specified DaemonSet
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status
	ReplaceAppsV1NamespacedDaemonSetStatus *IoK8sAPIAppsV1DaemonSet `json:"replaceAppsV1NamespacedDaemonSetStatus,omitempty"`
	// replace the specified Deployment
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/deployments/{name}
	ReplaceAppsV1NamespacedDeployment *IoK8sAPIAppsV1Deployment `json:"replaceAppsV1NamespacedDeployment,omitempty"`
	// replace scale of the specified Deployment
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale
	ReplaceAppsV1NamespacedDeploymentScale *IoK8sAPIAutoscalingV1Scale `json:"replaceAppsV1NamespacedDeploymentScale,omitempty"`
	// replace status of the specified Deployment
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/deployments/{name}/status
	ReplaceAppsV1NamespacedDeploymentStatus *IoK8sAPIAppsV1Deployment `json:"replaceAppsV1NamespacedDeploymentStatus,omitempty"`
	// replace the specified ReplicaSet
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/replicasets/{name}
	ReplaceAppsV1NamespacedReplicaSet *IoK8sAPIAppsV1ReplicaSet `json:"replaceAppsV1NamespacedReplicaSet,omitempty"`
	// replace scale of the specified ReplicaSet
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale
	ReplaceAppsV1NamespacedReplicaSetScale *IoK8sAPIAutoscalingV1Scale `json:"replaceAppsV1NamespacedReplicaSetScale,omitempty"`
	// replace status of the specified ReplicaSet
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status
	ReplaceAppsV1NamespacedReplicaSetStatus *IoK8sAPIAppsV1ReplicaSet `json:"replaceAppsV1NamespacedReplicaSetStatus,omitempty"`
	// replace the specified StatefulSet
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}
	ReplaceAppsV1NamespacedStatefulSet *IoK8sAPIAppsV1StatefulSet `json:"replaceAppsV1NamespacedStatefulSet,omitempty"`
	// replace scale of the specified StatefulSet
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale
	ReplaceAppsV1NamespacedStatefulSetScale *IoK8sAPIAutoscalingV1Scale `json:"replaceAppsV1NamespacedStatefulSetScale,omitempty"`
	// replace status of the specified StatefulSet
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status
	ReplaceAppsV1NamespacedStatefulSetStatus *IoK8sAPIAppsV1StatefulSet `json:"replaceAppsV1NamespacedStatefulSetStatus,omitempty"`
	// replace the specified HorizontalPodAutoscaler
	//
	// Equivalent to PUT /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}
	ReplaceAutoscalingV1NamespacedHorizontalPodAutoscaler *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler `json:"replaceAutoscalingV1NamespacedHorizontalPodAutoscaler,omitempty"`
	// replace status of the specified HorizontalPodAutoscaler
	//
	// Equivalent to PUT /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
	ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler `json:"replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus,omitempty"`
	// replace the specified HorizontalPodAutoscaler
	//
	// Equivalent to PUT /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}
	ReplaceAutoscalingV2NamespacedHorizontalPodAutoscaler *IoK8sAPIAutoscalingV2HorizontalPodAutoscaler `json:"replaceAutoscalingV2NamespacedHorizontalPodAutoscaler,omitempty"`
	// replace status of the specified HorizontalPodAutoscaler
	//
	// Equivalent to PUT /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
	ReplaceAutoscalingV2NamespacedHorizontalPodAutoscalerStatus *IoK8sAPIAutoscalingV2HorizontalPodAutoscaler `json:"replaceAutoscalingV2NamespacedHorizontalPodAutoscalerStatus,omitempty"`
	// replace the specified CronJob
	//
	// Equivalent to PUT /apis/batch/v1/namespaces/{namespace}/cronjobs/{name}
	ReplaceBatchV1NamespacedCronJob *IoK8sAPIBatchV1CronJob `json:"replaceBatchV1NamespacedCronJob,omitempty"`
	// replace status of the specified CronJob
	//
	// Equivalent to PUT /apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status
	ReplaceBatchV1NamespacedCronJobStatus *IoK8sAPIBatchV1CronJob `json:"replaceBatchV1NamespacedCronJobStatus,omitempty"`
	// replace the specified Job
	//
	// Equivalent to PUT /apis/batch/v1/namespaces/{namespace}/jobs/{name}
	ReplaceBatchV1NamespacedJob *IoK8sAPIBatchV1Job `json:"replaceBatchV1NamespacedJob,omitempty"`
	// replace status of the specified Job
	//
	// Equivalent to PUT /apis/batch/v1/namespaces/{namespace}/jobs/{name}/status
	ReplaceBatchV1NamespacedJobStatus *IoK8sAPIBatchV1Job `json:"replaceBatchV1NamespacedJobStatus,omitempty"`
	// replace the specified CertificateSigningRequest
	//
	// Equivalent to PUT /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}
	ReplaceCertificatesV1CertificateSigningRequest *IoK8sAPICertificatesV1CertificateSigningRequest `json:"replaceCertificatesV1CertificateSigningRequest,omitempty"`
	// replace approval of the specified CertificateSigningRequest
	//
	// Equivalent to PUT /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval
	ReplaceCertificatesV1CertificateSigningRequestApproval *IoK8sAPICertificatesV1CertificateSigningRequest `json:"replaceCertificatesV1CertificateSigningRequestApproval,omitempty"`
	// replace status of the specified CertificateSigningRequest
	//
	// Equivalent to PUT /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status
	ReplaceCertificatesV1CertificateSigningRequestStatus *IoK8sAPICertificatesV1CertificateSigningRequest `json:"replaceCertificatesV1CertificateSigningRequestStatus,omitempty"`
	// replace the specified ClusterTrustBundle
	//
	// Equivalent to PUT /apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}
	ReplaceCertificatesV1alpha1ClusterTrustBundle *IoK8sAPICertificatesV1alpha1ClusterTrustBundle `json:"replaceCertificatesV1alpha1ClusterTrustBundle,omitempty"`
	// replace the specified Lease
	//
	// Equivalent to PUT /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}
	ReplaceCoordinationV1NamespacedLease *IoK8sAPICoordinationV1Lease `json:"replaceCoordinationV1NamespacedLease,omitempty"`
	// replace the specified Namespace
	//
	// Equivalent to PUT /api/v1/namespaces/{name}
	ReplaceCoreV1Namespace *IoK8sAPICoreV1Namespace `json:"replaceCoreV1Namespace,omitempty"`
	// replace finalize of the specified Namespace
	//
	// Equivalent to PUT /api/v1/namespaces/{name}/finalize
	ReplaceCoreV1NamespaceFinalize *IoK8sAPICoreV1Namespace `json:"replaceCoreV1NamespaceFinalize,omitempty"`
	// replace status of the specified Namespace
	//
	// Equivalent to PUT /api/v1/namespaces/{name}/status
	ReplaceCoreV1NamespaceStatus *IoK8sAPICoreV1Namespace `json:"replaceCoreV1NamespaceStatus,omitempty"`
	// replace the specified ConfigMap
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/configmaps/{name}
	ReplaceCoreV1NamespacedConfigMap *IoK8sAPICoreV1ConfigMap `json:"replaceCoreV1NamespacedConfigMap,omitempty"`
	// replace the specified Endpoints
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/endpoints/{name}
	ReplaceCoreV1NamespacedEndpoints *IoK8sAPICoreV1Endpoints `json:"replaceCoreV1NamespacedEndpoints,omitempty"`
	// replace the specified Event
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/events/{name}
	ReplaceCoreV1NamespacedEvent *IoK8sAPICoreV1Event `json:"replaceCoreV1NamespacedEvent,omitempty"`
	// replace the specified LimitRange
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/limitranges/{name}
	ReplaceCoreV1NamespacedLimitRange *IoK8sAPICoreV1LimitRange `json:"replaceCoreV1NamespacedLimitRange,omitempty"`
	// replace the specified PersistentVolumeClaim
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}
	ReplaceCoreV1NamespacedPersistentVolumeClaim *IoK8sAPICoreV1PersistentVolumeClaim `json:"replaceCoreV1NamespacedPersistentVolumeClaim,omitempty"`
	// replace status of the specified PersistentVolumeClaim
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status
	ReplaceCoreV1NamespacedPersistentVolumeClaimStatus *IoK8sAPICoreV1PersistentVolumeClaim `json:"replaceCoreV1NamespacedPersistentVolumeClaimStatus,omitempty"`
	// replace the specified Pod
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/pods/{name}
	ReplaceCoreV1NamespacedPod *IoK8sAPICoreV1Pod `json:"replaceCoreV1NamespacedPod,omitempty"`
	// replace ephemeralcontainers of the specified Pod
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers
	ReplaceCoreV1NamespacedPodEphemeralcontainers *IoK8sAPICoreV1Pod `json:"replaceCoreV1NamespacedPodEphemeralcontainers,omitempty"`
	// replace status of the specified Pod
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/pods/{name}/status
	ReplaceCoreV1NamespacedPodStatus *IoK8sAPICoreV1Pod `json:"replaceCoreV1NamespacedPodStatus,omitempty"`
	// replace the specified PodTemplate
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/podtemplates/{name}
	ReplaceCoreV1NamespacedPodTemplate *IoK8sAPICoreV1PodTemplate `json:"replaceCoreV1NamespacedPodTemplate,omitempty"`
	// replace the specified ReplicationController
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/replicationcontrollers/{name}
	ReplaceCoreV1NamespacedReplicationController *IoK8sAPICoreV1ReplicationController `json:"replaceCoreV1NamespacedReplicationController,omitempty"`
	// replace scale of the specified ReplicationController
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale
	ReplaceCoreV1NamespacedReplicationControllerScale *IoK8sAPIAutoscalingV1Scale `json:"replaceCoreV1NamespacedReplicationControllerScale,omitempty"`
	// replace status of the specified ReplicationController
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status
	ReplaceCoreV1NamespacedReplicationControllerStatus *IoK8sAPICoreV1ReplicationController `json:"replaceCoreV1NamespacedReplicationControllerStatus,omitempty"`
	// replace the specified ResourceQuota
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/resourcequotas/{name}
	ReplaceCoreV1NamespacedResourceQuota *IoK8sAPICoreV1ResourceQuota `json:"replaceCoreV1NamespacedResourceQuota,omitempty"`
	// replace status of the specified ResourceQuota
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/resourcequotas/{name}/status
	ReplaceCoreV1NamespacedResourceQuotaStatus *IoK8sAPICoreV1ResourceQuota `json:"replaceCoreV1NamespacedResourceQuotaStatus,omitempty"`
	// replace the specified Secret
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/secrets/{name}
	ReplaceCoreV1NamespacedSecret *IoK8sAPICoreV1Secret `json:"replaceCoreV1NamespacedSecret,omitempty"`
	// replace the specified Service
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/services/{name}
	ReplaceCoreV1NamespacedService *IoK8sAPICoreV1Service `json:"replaceCoreV1NamespacedService,omitempty"`
	// replace the specified ServiceAccount
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/serviceaccounts/{name}
	ReplaceCoreV1NamespacedServiceAccount *IoK8sAPICoreV1ServiceAccount `json:"replaceCoreV1NamespacedServiceAccount,omitempty"`
	// replace status of the specified Service
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/services/{name}/status
	ReplaceCoreV1NamespacedServiceStatus *IoK8sAPICoreV1Service `json:"replaceCoreV1NamespacedServiceStatus,omitempty"`
	// replace the specified Node
	//
	// Equivalent to PUT /api/v1/nodes/{name}
	ReplaceCoreV1Node *IoK8sAPICoreV1Node `json:"replaceCoreV1Node,omitempty"`
	// replace status of the specified Node
	//
	// Equivalent to PUT /api/v1/nodes/{name}/status
	ReplaceCoreV1NodeStatus *IoK8sAPICoreV1Node `json:"replaceCoreV1NodeStatus,omitempty"`
	// replace the specified PersistentVolume
	//
	// Equivalent to PUT /api/v1/persistentvolumes/{name}
	ReplaceCoreV1PersistentVolume *IoK8sAPICoreV1PersistentVolume `json:"replaceCoreV1PersistentVolume,omitempty"`
	// replace status of the specified PersistentVolume
	//
	// Equivalent to PUT /api/v1/persistentvolumes/{name}/status
	ReplaceCoreV1PersistentVolumeStatus *IoK8sAPICoreV1PersistentVolume `json:"replaceCoreV1PersistentVolumeStatus,omitempty"`
	// replace the specified EndpointSlice
	//
	// Equivalent to PUT /apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}
	ReplaceDiscoveryV1NamespacedEndpointSlice *IoK8sAPIDiscoveryV1EndpointSlice `json:"replaceDiscoveryV1NamespacedEndpointSlice,omitempty"`
	// replace the specified Event
	//
	// Equivalent to PUT /apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}
	ReplaceEventsV1NamespacedEvent *IoK8sAPIEventsV1Event `json:"replaceEventsV1NamespacedEvent,omitempty"`
	// replace the specified FlowSchema
	//
	// Equivalent to PUT /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}
	ReplaceFlowcontrolApiserverV1beta2FlowSchema *IoK8sAPIFlowcontrolV1beta2FlowSchema `json:"replaceFlowcontrolApiserverV1beta2FlowSchema,omitempty"`
	// replace status of the specified FlowSchema
	//
	// Equivalent to PUT /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}/status
	ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatus *IoK8sAPIFlowcontrolV1beta2FlowSchema `json:"replaceFlowcontrolApiserverV1beta2FlowSchemaStatus,omitempty"`
	// replace the specified PriorityLevelConfiguration
	//
	// Equivalent to PUT /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}
	ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration `json:"replaceFlowcontrolApiserverV1beta2PriorityLevelConfiguration,omitempty"`
	// replace status of the specified PriorityLevelConfiguration
	//
	// Equivalent to PUT /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}/status
	ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration `json:"replaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus,omitempty"`
	// replace the specified FlowSchema
	//
	// Equivalent to PUT /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}
	ReplaceFlowcontrolApiserverV1beta3FlowSchema *IoK8sAPIFlowcontrolV1beta3FlowSchema `json:"replaceFlowcontrolApiserverV1beta3FlowSchema,omitempty"`
	// replace status of the specified FlowSchema
	//
	// Equivalent to PUT /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}/status
	ReplaceFlowcontrolApiserverV1beta3FlowSchemaStatus *IoK8sAPIFlowcontrolV1beta3FlowSchema `json:"replaceFlowcontrolApiserverV1beta3FlowSchemaStatus,omitempty"`
	// replace the specified PriorityLevelConfiguration
	//
	// Equivalent to PUT /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}
	ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration `json:"replaceFlowcontrolApiserverV1beta3PriorityLevelConfiguration,omitempty"`
	// replace status of the specified PriorityLevelConfiguration
	//
	// Equivalent to PUT /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}/status
	ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration `json:"replaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus,omitempty"`
	// replace the specified StorageVersion
	//
	// Equivalent to PUT /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}
	ReplaceInternalApiserverV1alpha1StorageVersion *IoK8sAPIApiserverinternalV1alpha1StorageVersion `json:"replaceInternalApiserverV1alpha1StorageVersion,omitempty"`
	// replace status of the specified StorageVersion
	//
	// Equivalent to PUT /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}/status
	ReplaceInternalApiserverV1alpha1StorageVersionStatus *IoK8sAPIApiserverinternalV1alpha1StorageVersion `json:"replaceInternalApiserverV1alpha1StorageVersionStatus,omitempty"`
	// replace the specified IngressClass
	//
	// Equivalent to PUT /apis/networking.k8s.io/v1/ingressclasses/{name}
	ReplaceNetworkingV1IngressClass *IoK8sAPINetworkingV1IngressClass `json:"replaceNetworkingV1IngressClass,omitempty"`
	// replace the specified Ingress
	//
	// Equivalent to PUT /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}
	ReplaceNetworkingV1NamespacedIngress *IoK8sAPINetworkingV1Ingress `json:"replaceNetworkingV1NamespacedIngress,omitempty"`
	// replace status of the specified Ingress
	//
	// Equivalent to PUT /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status
	ReplaceNetworkingV1NamespacedIngressStatus *IoK8sAPINetworkingV1Ingress `json:"replaceNetworkingV1NamespacedIngressStatus,omitempty"`
	// replace the specified NetworkPolicy
	//
	// Equivalent to PUT /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}
	ReplaceNetworkingV1NamespacedNetworkPolicy *IoK8sAPINetworkingV1NetworkPolicy `json:"replaceNetworkingV1NamespacedNetworkPolicy,omitempty"`
	// replace status of the specified NetworkPolicy
	//
	// Equivalent to PUT /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}/status
	ReplaceNetworkingV1NamespacedNetworkPolicyStatus *IoK8sAPINetworkingV1NetworkPolicy `json:"replaceNetworkingV1NamespacedNetworkPolicyStatus,omitempty"`
	// replace the specified ClusterCIDR
	//
	// Equivalent to PUT /apis/networking.k8s.io/v1alpha1/clustercidrs/{name}
	ReplaceNetworkingV1alpha1ClusterCidr *IoK8sAPINetworkingV1alpha1ClusterCidr `json:"replaceNetworkingV1alpha1ClusterCIDR,omitempty"`
	// replace the specified IPAddress
	//
	// Equivalent to PUT /apis/networking.k8s.io/v1alpha1/ipaddresses/{name}
	ReplaceNetworkingV1alpha1IPAddress *IoK8sAPINetworkingV1alpha1IPAddress `json:"replaceNetworkingV1alpha1IPAddress,omitempty"`
	// replace the specified RuntimeClass
	//
	// Equivalent to PUT /apis/node.k8s.io/v1/runtimeclasses/{name}
	ReplaceNodeV1RuntimeClass *IoK8sAPINodeV1RuntimeClass `json:"replaceNodeV1RuntimeClass,omitempty"`
	// replace the specified PodDisruptionBudget
	//
	// Equivalent to PUT /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}
	ReplacePolicyV1NamespacedPodDisruptionBudget *IoK8sAPIPolicyV1PodDisruptionBudget `json:"replacePolicyV1NamespacedPodDisruptionBudget,omitempty"`
	// replace status of the specified PodDisruptionBudget
	//
	// Equivalent to PUT /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status
	ReplacePolicyV1NamespacedPodDisruptionBudgetStatus *IoK8sAPIPolicyV1PodDisruptionBudget `json:"replacePolicyV1NamespacedPodDisruptionBudgetStatus,omitempty"`
	// replace the specified ClusterRole
	//
	// Equivalent to PUT /apis/rbac.authorization.k8s.io/v1/clusterroles/{name}
	ReplaceRbacAuthorizationV1ClusterRole *IoK8sAPIRbacV1ClusterRole `json:"replaceRbacAuthorizationV1ClusterRole,omitempty"`
	// replace the specified ClusterRoleBinding
	//
	// Equivalent to PUT /apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}
	ReplaceRbacAuthorizationV1ClusterRoleBinding *IoK8sAPIRbacV1ClusterRoleBinding `json:"replaceRbacAuthorizationV1ClusterRoleBinding,omitempty"`
	// replace the specified Role
	//
	// Equivalent to PUT /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}
	ReplaceRbacAuthorizationV1NamespacedRole *IoK8sAPIRbacV1Role `json:"replaceRbacAuthorizationV1NamespacedRole,omitempty"`
	// replace the specified RoleBinding
	//
	// Equivalent to PUT /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}
	ReplaceRbacAuthorizationV1NamespacedRoleBinding *IoK8sAPIRbacV1RoleBinding `json:"replaceRbacAuthorizationV1NamespacedRoleBinding,omitempty"`
	// replace the specified PodSchedulingContext
	//
	// Equivalent to PUT /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}
	ReplaceResourceV1alpha2NamespacedPodSchedulingContext *IoK8sAPIResourceV1alpha2PodSchedulingContext `json:"replaceResourceV1alpha2NamespacedPodSchedulingContext,omitempty"`
	// replace status of the specified PodSchedulingContext
	//
	// Equivalent to PUT /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}/status
	ReplaceResourceV1alpha2NamespacedPodSchedulingContextStatus *IoK8sAPIResourceV1alpha2PodSchedulingContext `json:"replaceResourceV1alpha2NamespacedPodSchedulingContextStatus,omitempty"`
	// replace the specified ResourceClaim
	//
	// Equivalent to PUT /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}
	ReplaceResourceV1alpha2NamespacedResourceClaim *IoK8sAPIResourceV1alpha2ResourceClaim `json:"replaceResourceV1alpha2NamespacedResourceClaim,omitempty"`
	// replace status of the specified ResourceClaim
	//
	// Equivalent to PUT /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}/status
	ReplaceResourceV1alpha2NamespacedResourceClaimStatus *IoK8sAPIResourceV1alpha2ResourceClaim `json:"replaceResourceV1alpha2NamespacedResourceClaimStatus,omitempty"`
	// replace the specified ResourceClaimTemplate
	//
	// Equivalent to PUT /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}
	ReplaceResourceV1alpha2NamespacedResourceClaimTemplate *IoK8sAPIResourceV1alpha2ResourceClaimTemplate `json:"replaceResourceV1alpha2NamespacedResourceClaimTemplate,omitempty"`
	// replace the specified ResourceClass
	//
	// Equivalent to PUT /apis/resource.k8s.io/v1alpha2/resourceclasses/{name}
	ReplaceResourceV1alpha2ResourceClass *IoK8sAPIResourceV1alpha2ResourceClass `json:"replaceResourceV1alpha2ResourceClass,omitempty"`
	// replace the specified PriorityClass
	//
	// Equivalent to PUT /apis/scheduling.k8s.io/v1/priorityclasses/{name}
	ReplaceSchedulingV1PriorityClass *IoK8sAPISchedulingV1PriorityClass `json:"replaceSchedulingV1PriorityClass,omitempty"`
	// replace the specified CSIDriver
	//
	// Equivalent to PUT /apis/storage.k8s.io/v1/csidrivers/{name}
	ReplaceStorageV1CSIDriver *IoK8sAPIStorageV1CSIDriver `json:"replaceStorageV1CSIDriver,omitempty"`
	// replace the specified CSINode
	//
	// Equivalent to PUT /apis/storage.k8s.io/v1/csinodes/{name}
	ReplaceStorageV1CSINode *IoK8sAPIStorageV1CSINode `json:"replaceStorageV1CSINode,omitempty"`
	// replace the specified CSIStorageCapacity
	//
	// Equivalent to PUT /apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities/{name}
	ReplaceStorageV1NamespacedCSIStorageCapacity *IoK8sAPIStorageV1CSIStorageCapacity `json:"replaceStorageV1NamespacedCSIStorageCapacity,omitempty"`
	// replace the specified StorageClass
	//
	// Equivalent to PUT /apis/storage.k8s.io/v1/storageclasses/{name}
	ReplaceStorageV1StorageClass *IoK8sAPIStorageV1StorageClass `json:"replaceStorageV1StorageClass,omitempty"`
	// replace the specified VolumeAttachment
	//
	// Equivalent to PUT /apis/storage.k8s.io/v1/volumeattachments/{name}
	ReplaceStorageV1VolumeAttachment *IoK8sAPIStorageV1VolumeAttachment `json:"replaceStorageV1VolumeAttachment,omitempty"`
	// replace status of the specified VolumeAttachment
	//
	// Equivalent to PUT /apis/storage.k8s.io/v1/volumeattachments/{name}/status
	ReplaceStorageV1VolumeAttachmentStatus *IoK8sAPIStorageV1VolumeAttachment `json:"replaceStorageV1VolumeAttachmentStatus,omitempty"`
}

// A viewer for security scheme 'BearerToken'
type MutationViewerAPIKey struct {
	// connect DELETE requests to proxy of Pod
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/pods/{name}/proxy
	ConnectCoreV1DeleteNamespacedPodProxy *string `json:"connectCoreV1DeleteNamespacedPodProxy,omitempty"`
	// connect DELETE requests to proxy of Pod
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
	ConnectCoreV1DeleteNamespacedPodProxyWithPath *string `json:"connectCoreV1DeleteNamespacedPodProxyWithPath,omitempty"`
	// connect DELETE requests to proxy of Service
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/services/{name}/proxy
	ConnectCoreV1DeleteNamespacedServiceProxy *string `json:"connectCoreV1DeleteNamespacedServiceProxy,omitempty"`
	// connect DELETE requests to proxy of Service
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
	ConnectCoreV1DeleteNamespacedServiceProxyWithPath *string `json:"connectCoreV1DeleteNamespacedServiceProxyWithPath,omitempty"`
	// connect DELETE requests to proxy of Node
	//
	// Equivalent to DELETE /api/v1/nodes/{name}/proxy
	ConnectCoreV1DeleteNodeProxy *string `json:"connectCoreV1DeleteNodeProxy,omitempty"`
	// connect DELETE requests to proxy of Node
	//
	// Equivalent to DELETE /api/v1/nodes/{name}/proxy/{path}
	ConnectCoreV1DeleteNodeProxyWithPath *string `json:"connectCoreV1DeleteNodeProxyWithPath,omitempty"`
	// connect HEAD requests to proxy of Pod
	//
	// Equivalent to HEAD /api/v1/namespaces/{namespace}/pods/{name}/proxy
	ConnectCoreV1HeadNamespacedPodProxy *string `json:"connectCoreV1HeadNamespacedPodProxy,omitempty"`
	// connect HEAD requests to proxy of Pod
	//
	// Equivalent to HEAD /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
	ConnectCoreV1HeadNamespacedPodProxyWithPath *string `json:"connectCoreV1HeadNamespacedPodProxyWithPath,omitempty"`
	// connect HEAD requests to proxy of Service
	//
	// Equivalent to HEAD /api/v1/namespaces/{namespace}/services/{name}/proxy
	ConnectCoreV1HeadNamespacedServiceProxy *string `json:"connectCoreV1HeadNamespacedServiceProxy,omitempty"`
	// connect HEAD requests to proxy of Service
	//
	// Equivalent to HEAD /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
	ConnectCoreV1HeadNamespacedServiceProxyWithPath *string `json:"connectCoreV1HeadNamespacedServiceProxyWithPath,omitempty"`
	// connect HEAD requests to proxy of Node
	//
	// Equivalent to HEAD /api/v1/nodes/{name}/proxy
	ConnectCoreV1HeadNodeProxy *string `json:"connectCoreV1HeadNodeProxy,omitempty"`
	// connect HEAD requests to proxy of Node
	//
	// Equivalent to HEAD /api/v1/nodes/{name}/proxy/{path}
	ConnectCoreV1HeadNodeProxyWithPath *string `json:"connectCoreV1HeadNodeProxyWithPath,omitempty"`
	// connect OPTIONS requests to proxy of Pod
	//
	// Equivalent to OPTIONS /api/v1/namespaces/{namespace}/pods/{name}/proxy
	ConnectCoreV1OptionsNamespacedPodProxy *string `json:"connectCoreV1OptionsNamespacedPodProxy,omitempty"`
	// connect OPTIONS requests to proxy of Pod
	//
	// Equivalent to OPTIONS /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
	ConnectCoreV1OptionsNamespacedPodProxyWithPath *string `json:"connectCoreV1OptionsNamespacedPodProxyWithPath,omitempty"`
	// connect OPTIONS requests to proxy of Service
	//
	// Equivalent to OPTIONS /api/v1/namespaces/{namespace}/services/{name}/proxy
	ConnectCoreV1OptionsNamespacedServiceProxy *string `json:"connectCoreV1OptionsNamespacedServiceProxy,omitempty"`
	// connect OPTIONS requests to proxy of Service
	//
	// Equivalent to OPTIONS /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
	ConnectCoreV1OptionsNamespacedServiceProxyWithPath *string `json:"connectCoreV1OptionsNamespacedServiceProxyWithPath,omitempty"`
	// connect OPTIONS requests to proxy of Node
	//
	// Equivalent to OPTIONS /api/v1/nodes/{name}/proxy
	ConnectCoreV1OptionsNodeProxy *string `json:"connectCoreV1OptionsNodeProxy,omitempty"`
	// connect OPTIONS requests to proxy of Node
	//
	// Equivalent to OPTIONS /api/v1/nodes/{name}/proxy/{path}
	ConnectCoreV1OptionsNodeProxyWithPath *string `json:"connectCoreV1OptionsNodeProxyWithPath,omitempty"`
	// connect PATCH requests to proxy of Pod
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/pods/{name}/proxy
	ConnectCoreV1PatchNamespacedPodProxy *string `json:"connectCoreV1PatchNamespacedPodProxy,omitempty"`
	// connect PATCH requests to proxy of Pod
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
	ConnectCoreV1PatchNamespacedPodProxyWithPath *string `json:"connectCoreV1PatchNamespacedPodProxyWithPath,omitempty"`
	// connect PATCH requests to proxy of Service
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/services/{name}/proxy
	ConnectCoreV1PatchNamespacedServiceProxy *string `json:"connectCoreV1PatchNamespacedServiceProxy,omitempty"`
	// connect PATCH requests to proxy of Service
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
	ConnectCoreV1PatchNamespacedServiceProxyWithPath *string `json:"connectCoreV1PatchNamespacedServiceProxyWithPath,omitempty"`
	// connect PATCH requests to proxy of Node
	//
	// Equivalent to PATCH /api/v1/nodes/{name}/proxy
	ConnectCoreV1PatchNodeProxy *string `json:"connectCoreV1PatchNodeProxy,omitempty"`
	// connect PATCH requests to proxy of Node
	//
	// Equivalent to PATCH /api/v1/nodes/{name}/proxy/{path}
	ConnectCoreV1PatchNodeProxyWithPath *string `json:"connectCoreV1PatchNodeProxyWithPath,omitempty"`
	// connect POST requests to attach of Pod
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/attach
	ConnectCoreV1PostNamespacedPodAttach *string `json:"connectCoreV1PostNamespacedPodAttach,omitempty"`
	// connect POST requests to exec of Pod
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/exec
	ConnectCoreV1PostNamespacedPodExec *string `json:"connectCoreV1PostNamespacedPodExec,omitempty"`
	// connect POST requests to portforward of Pod
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/portforward
	ConnectCoreV1PostNamespacedPodPortforward *string `json:"connectCoreV1PostNamespacedPodPortforward,omitempty"`
	// connect POST requests to proxy of Pod
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/proxy
	ConnectCoreV1PostNamespacedPodProxy *string `json:"connectCoreV1PostNamespacedPodProxy,omitempty"`
	// connect POST requests to proxy of Pod
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
	ConnectCoreV1PostNamespacedPodProxyWithPath *string `json:"connectCoreV1PostNamespacedPodProxyWithPath,omitempty"`
	// connect POST requests to proxy of Service
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/services/{name}/proxy
	ConnectCoreV1PostNamespacedServiceProxy *string `json:"connectCoreV1PostNamespacedServiceProxy,omitempty"`
	// connect POST requests to proxy of Service
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
	ConnectCoreV1PostNamespacedServiceProxyWithPath *string `json:"connectCoreV1PostNamespacedServiceProxyWithPath,omitempty"`
	// connect POST requests to proxy of Node
	//
	// Equivalent to POST /api/v1/nodes/{name}/proxy
	ConnectCoreV1PostNodeProxy *string `json:"connectCoreV1PostNodeProxy,omitempty"`
	// connect POST requests to proxy of Node
	//
	// Equivalent to POST /api/v1/nodes/{name}/proxy/{path}
	ConnectCoreV1PostNodeProxyWithPath *string `json:"connectCoreV1PostNodeProxyWithPath,omitempty"`
	// connect PUT requests to proxy of Pod
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/pods/{name}/proxy
	ConnectCoreV1PutNamespacedPodProxy *string `json:"connectCoreV1PutNamespacedPodProxy,omitempty"`
	// connect PUT requests to proxy of Pod
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
	ConnectCoreV1PutNamespacedPodProxyWithPath *string `json:"connectCoreV1PutNamespacedPodProxyWithPath,omitempty"`
	// connect PUT requests to proxy of Service
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/services/{name}/proxy
	ConnectCoreV1PutNamespacedServiceProxy *string `json:"connectCoreV1PutNamespacedServiceProxy,omitempty"`
	// connect PUT requests to proxy of Service
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
	ConnectCoreV1PutNamespacedServiceProxyWithPath *string `json:"connectCoreV1PutNamespacedServiceProxyWithPath,omitempty"`
	// connect PUT requests to proxy of Node
	//
	// Equivalent to PUT /api/v1/nodes/{name}/proxy
	ConnectCoreV1PutNodeProxy *string `json:"connectCoreV1PutNodeProxy,omitempty"`
	// connect PUT requests to proxy of Node
	//
	// Equivalent to PUT /api/v1/nodes/{name}/proxy/{path}
	ConnectCoreV1PutNodeProxyWithPath *string `json:"connectCoreV1PutNodeProxyWithPath,omitempty"`
	// create a MutatingWebhookConfiguration
	//
	// Equivalent to POST /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations
	CreateAdmissionregistrationV1MutatingWebhookConfiguration *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration `json:"createAdmissionregistrationV1MutatingWebhookConfiguration,omitempty"`
	// create a ValidatingWebhookConfiguration
	//
	// Equivalent to POST /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations
	CreateAdmissionregistrationV1ValidatingWebhookConfiguration *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration `json:"createAdmissionregistrationV1ValidatingWebhookConfiguration,omitempty"`
	// create a ValidatingAdmissionPolicy
	//
	// Equivalent to POST /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies
	CreateAdmissionregistrationV1alpha1ValidatingAdmissionPolicy *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy `json:"createAdmissionregistrationV1alpha1ValidatingAdmissionPolicy,omitempty"`
	// create a ValidatingAdmissionPolicyBinding
	//
	// Equivalent to POST /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings
	CreateAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding `json:"createAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding,omitempty"`
	// create a CustomResourceDefinition
	//
	// Equivalent to POST /apis/apiextensions.k8s.io/v1/customresourcedefinitions
	CreateApiextensionsV1CustomResourceDefinition *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition `json:"createApiextensionsV1CustomResourceDefinition,omitempty"`
	// create an APIService
	//
	// Equivalent to POST /apis/apiregistration.k8s.io/v1/apiservices
	CreateApiregistrationV1APIService *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService `json:"createApiregistrationV1APIService,omitempty"`
	// create a ControllerRevision
	//
	// Equivalent to POST /apis/apps/v1/namespaces/{namespace}/controllerrevisions
	CreateAppsV1NamespacedControllerRevision *IoK8sAPIAppsV1ControllerRevision `json:"createAppsV1NamespacedControllerRevision,omitempty"`
	// create a DaemonSet
	//
	// Equivalent to POST /apis/apps/v1/namespaces/{namespace}/daemonsets
	CreateAppsV1NamespacedDaemonSet *IoK8sAPIAppsV1DaemonSet `json:"createAppsV1NamespacedDaemonSet,omitempty"`
	// create a Deployment
	//
	// Equivalent to POST /apis/apps/v1/namespaces/{namespace}/deployments
	CreateAppsV1NamespacedDeployment *IoK8sAPIAppsV1Deployment `json:"createAppsV1NamespacedDeployment,omitempty"`
	// create a ReplicaSet
	//
	// Equivalent to POST /apis/apps/v1/namespaces/{namespace}/replicasets
	CreateAppsV1NamespacedReplicaSet *IoK8sAPIAppsV1ReplicaSet `json:"createAppsV1NamespacedReplicaSet,omitempty"`
	// create a StatefulSet
	//
	// Equivalent to POST /apis/apps/v1/namespaces/{namespace}/statefulsets
	CreateAppsV1NamespacedStatefulSet *IoK8sAPIAppsV1StatefulSet `json:"createAppsV1NamespacedStatefulSet,omitempty"`
	// create a TokenReview
	//
	// Equivalent to POST /apis/authentication.k8s.io/v1/tokenreviews
	CreateAuthenticationV1TokenReview *IoK8sAPIAuthenticationV1TokenReview `json:"createAuthenticationV1TokenReview,omitempty"`
	// create a SelfSubjectReview
	//
	// Equivalent to POST /apis/authentication.k8s.io/v1alpha1/selfsubjectreviews
	CreateAuthenticationV1alpha1SelfSubjectReview *IoK8sAPIAuthenticationV1alpha1SelfSubjectReview `json:"createAuthenticationV1alpha1SelfSubjectReview,omitempty"`
	// create a SelfSubjectReview
	//
	// Equivalent to POST /apis/authentication.k8s.io/v1beta1/selfsubjectreviews
	CreateAuthenticationV1beta1SelfSubjectReview *IoK8sAPIAuthenticationV1beta1SelfSubjectReview `json:"createAuthenticationV1beta1SelfSubjectReview,omitempty"`
	// create a LocalSubjectAccessReview
	//
	// Equivalent to POST /apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews
	CreateAuthorizationV1NamespacedLocalSubjectAccessReview *IoK8sAPIAuthorizationV1LocalSubjectAccessReview `json:"createAuthorizationV1NamespacedLocalSubjectAccessReview,omitempty"`
	// create a SelfSubjectAccessReview
	//
	// Equivalent to POST /apis/authorization.k8s.io/v1/selfsubjectaccessreviews
	CreateAuthorizationV1SelfSubjectAccessReview *IoK8sAPIAuthorizationV1SelfSubjectAccessReview `json:"createAuthorizationV1SelfSubjectAccessReview,omitempty"`
	// create a SelfSubjectRulesReview
	//
	// Equivalent to POST /apis/authorization.k8s.io/v1/selfsubjectrulesreviews
	CreateAuthorizationV1SelfSubjectRulesReview *IoK8sAPIAuthorizationV1SelfSubjectRulesReview `json:"createAuthorizationV1SelfSubjectRulesReview,omitempty"`
	// create a SubjectAccessReview
	//
	// Equivalent to POST /apis/authorization.k8s.io/v1/subjectaccessreviews
	CreateAuthorizationV1SubjectAccessReview *IoK8sAPIAuthorizationV1SubjectAccessReview `json:"createAuthorizationV1SubjectAccessReview,omitempty"`
	// create a HorizontalPodAutoscaler
	//
	// Equivalent to POST /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers
	CreateAutoscalingV1NamespacedHorizontalPodAutoscaler *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler `json:"createAutoscalingV1NamespacedHorizontalPodAutoscaler,omitempty"`
	// create a HorizontalPodAutoscaler
	//
	// Equivalent to POST /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers
	CreateAutoscalingV2NamespacedHorizontalPodAutoscaler *IoK8sAPIAutoscalingV2HorizontalPodAutoscaler `json:"createAutoscalingV2NamespacedHorizontalPodAutoscaler,omitempty"`
	// create a CronJob
	//
	// Equivalent to POST /apis/batch/v1/namespaces/{namespace}/cronjobs
	CreateBatchV1NamespacedCronJob *IoK8sAPIBatchV1CronJob `json:"createBatchV1NamespacedCronJob,omitempty"`
	// create a Job
	//
	// Equivalent to POST /apis/batch/v1/namespaces/{namespace}/jobs
	CreateBatchV1NamespacedJob *IoK8sAPIBatchV1Job `json:"createBatchV1NamespacedJob,omitempty"`
	// create a CertificateSigningRequest
	//
	// Equivalent to POST /apis/certificates.k8s.io/v1/certificatesigningrequests
	CreateCertificatesV1CertificateSigningRequest *IoK8sAPICertificatesV1CertificateSigningRequest `json:"createCertificatesV1CertificateSigningRequest,omitempty"`
	// create a ClusterTrustBundle
	//
	// Equivalent to POST /apis/certificates.k8s.io/v1alpha1/clustertrustbundles
	CreateCertificatesV1alpha1ClusterTrustBundle *IoK8sAPICertificatesV1alpha1ClusterTrustBundle `json:"createCertificatesV1alpha1ClusterTrustBundle,omitempty"`
	// create a Lease
	//
	// Equivalent to POST /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases
	CreateCoordinationV1NamespacedLease *IoK8sAPICoordinationV1Lease `json:"createCoordinationV1NamespacedLease,omitempty"`
	// create a Namespace
	//
	// Equivalent to POST /api/v1/namespaces
	CreateCoreV1Namespace *IoK8sAPICoreV1Namespace `json:"createCoreV1Namespace,omitempty"`
	// create a Binding
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/bindings
	CreateCoreV1NamespacedBinding *IoK8sAPICoreV1Binding `json:"createCoreV1NamespacedBinding,omitempty"`
	// create a ConfigMap
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/configmaps
	CreateCoreV1NamespacedConfigMap *IoK8sAPICoreV1ConfigMap `json:"createCoreV1NamespacedConfigMap,omitempty"`
	// create Endpoints
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/endpoints
	CreateCoreV1NamespacedEndpoints *IoK8sAPICoreV1Endpoints `json:"createCoreV1NamespacedEndpoints,omitempty"`
	// create an Event
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/events
	CreateCoreV1NamespacedEvent *IoK8sAPICoreV1Event `json:"createCoreV1NamespacedEvent,omitempty"`
	// create a LimitRange
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/limitranges
	CreateCoreV1NamespacedLimitRange *IoK8sAPICoreV1LimitRange `json:"createCoreV1NamespacedLimitRange,omitempty"`
	// create a PersistentVolumeClaim
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/persistentvolumeclaims
	CreateCoreV1NamespacedPersistentVolumeClaim *IoK8sAPICoreV1PersistentVolumeClaim `json:"createCoreV1NamespacedPersistentVolumeClaim,omitempty"`
	// create a Pod
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/pods
	CreateCoreV1NamespacedPod *IoK8sAPICoreV1Pod `json:"createCoreV1NamespacedPod,omitempty"`
	// create binding of a Pod
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/binding
	CreateCoreV1NamespacedPodBinding *IoK8sAPICoreV1Binding `json:"createCoreV1NamespacedPodBinding,omitempty"`
	// create eviction of a Pod
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/eviction
	CreateCoreV1NamespacedPodEviction *IoK8sAPIPolicyV1Eviction `json:"createCoreV1NamespacedPodEviction,omitempty"`
	// create a PodTemplate
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/podtemplates
	CreateCoreV1NamespacedPodTemplate *IoK8sAPICoreV1PodTemplate `json:"createCoreV1NamespacedPodTemplate,omitempty"`
	// create a ReplicationController
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/replicationcontrollers
	CreateCoreV1NamespacedReplicationController *IoK8sAPICoreV1ReplicationController `json:"createCoreV1NamespacedReplicationController,omitempty"`
	// create a ResourceQuota
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/resourcequotas
	CreateCoreV1NamespacedResourceQuota *IoK8sAPICoreV1ResourceQuota `json:"createCoreV1NamespacedResourceQuota,omitempty"`
	// create a Secret
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/secrets
	CreateCoreV1NamespacedSecret *IoK8sAPICoreV1Secret `json:"createCoreV1NamespacedSecret,omitempty"`
	// create a Service
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/services
	CreateCoreV1NamespacedService *IoK8sAPICoreV1Service `json:"createCoreV1NamespacedService,omitempty"`
	// create a ServiceAccount
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/serviceaccounts
	CreateCoreV1NamespacedServiceAccount *IoK8sAPICoreV1ServiceAccount `json:"createCoreV1NamespacedServiceAccount,omitempty"`
	// create token of a ServiceAccount
	//
	// Equivalent to POST /api/v1/namespaces/{namespace}/serviceaccounts/{name}/token
	CreateCoreV1NamespacedServiceAccountToken *IoK8sAPIAuthenticationV1TokenRequest `json:"createCoreV1NamespacedServiceAccountToken,omitempty"`
	// create a Node
	//
	// Equivalent to POST /api/v1/nodes
	CreateCoreV1Node *IoK8sAPICoreV1Node `json:"createCoreV1Node,omitempty"`
	// create a PersistentVolume
	//
	// Equivalent to POST /api/v1/persistentvolumes
	CreateCoreV1PersistentVolume *IoK8sAPICoreV1PersistentVolume `json:"createCoreV1PersistentVolume,omitempty"`
	// create an EndpointSlice
	//
	// Equivalent to POST /apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices
	CreateDiscoveryV1NamespacedEndpointSlice *IoK8sAPIDiscoveryV1EndpointSlice `json:"createDiscoveryV1NamespacedEndpointSlice,omitempty"`
	// create an Event
	//
	// Equivalent to POST /apis/events.k8s.io/v1/namespaces/{namespace}/events
	CreateEventsV1NamespacedEvent *IoK8sAPIEventsV1Event `json:"createEventsV1NamespacedEvent,omitempty"`
	// create a FlowSchema
	//
	// Equivalent to POST /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas
	CreateFlowcontrolApiserverV1beta2FlowSchema *IoK8sAPIFlowcontrolV1beta2FlowSchema `json:"createFlowcontrolApiserverV1beta2FlowSchema,omitempty"`
	// create a PriorityLevelConfiguration
	//
	// Equivalent to POST /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations
	CreateFlowcontrolApiserverV1beta2PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration `json:"createFlowcontrolApiserverV1beta2PriorityLevelConfiguration,omitempty"`
	// create a FlowSchema
	//
	// Equivalent to POST /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas
	CreateFlowcontrolApiserverV1beta3FlowSchema *IoK8sAPIFlowcontrolV1beta3FlowSchema `json:"createFlowcontrolApiserverV1beta3FlowSchema,omitempty"`
	// create a PriorityLevelConfiguration
	//
	// Equivalent to POST /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations
	CreateFlowcontrolApiserverV1beta3PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration `json:"createFlowcontrolApiserverV1beta3PriorityLevelConfiguration,omitempty"`
	// create a StorageVersion
	//
	// Equivalent to POST /apis/internal.apiserver.k8s.io/v1alpha1/storageversions
	CreateInternalApiserverV1alpha1StorageVersion *IoK8sAPIApiserverinternalV1alpha1StorageVersion `json:"createInternalApiserverV1alpha1StorageVersion,omitempty"`
	// create an IngressClass
	//
	// Equivalent to POST /apis/networking.k8s.io/v1/ingressclasses
	CreateNetworkingV1IngressClass *IoK8sAPINetworkingV1IngressClass `json:"createNetworkingV1IngressClass,omitempty"`
	// create an Ingress
	//
	// Equivalent to POST /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses
	CreateNetworkingV1NamespacedIngress *IoK8sAPINetworkingV1Ingress `json:"createNetworkingV1NamespacedIngress,omitempty"`
	// create a NetworkPolicy
	//
	// Equivalent to POST /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies
	CreateNetworkingV1NamespacedNetworkPolicy *IoK8sAPINetworkingV1NetworkPolicy `json:"createNetworkingV1NamespacedNetworkPolicy,omitempty"`
	// create a ClusterCIDR
	//
	// Equivalent to POST /apis/networking.k8s.io/v1alpha1/clustercidrs
	CreateNetworkingV1alpha1ClusterCidr *IoK8sAPINetworkingV1alpha1ClusterCidr `json:"createNetworkingV1alpha1ClusterCIDR,omitempty"`
	// create an IPAddress
	//
	// Equivalent to POST /apis/networking.k8s.io/v1alpha1/ipaddresses
	CreateNetworkingV1alpha1IPAddress *IoK8sAPINetworkingV1alpha1IPAddress `json:"createNetworkingV1alpha1IPAddress,omitempty"`
	// create a RuntimeClass
	//
	// Equivalent to POST /apis/node.k8s.io/v1/runtimeclasses
	CreateNodeV1RuntimeClass *IoK8sAPINodeV1RuntimeClass `json:"createNodeV1RuntimeClass,omitempty"`
	// create a PodDisruptionBudget
	//
	// Equivalent to POST /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets
	CreatePolicyV1NamespacedPodDisruptionBudget *IoK8sAPIPolicyV1PodDisruptionBudget `json:"createPolicyV1NamespacedPodDisruptionBudget,omitempty"`
	// create a ClusterRole
	//
	// Equivalent to POST /apis/rbac.authorization.k8s.io/v1/clusterroles
	CreateRbacAuthorizationV1ClusterRole *IoK8sAPIRbacV1ClusterRole `json:"createRbacAuthorizationV1ClusterRole,omitempty"`
	// create a ClusterRoleBinding
	//
	// Equivalent to POST /apis/rbac.authorization.k8s.io/v1/clusterrolebindings
	CreateRbacAuthorizationV1ClusterRoleBinding *IoK8sAPIRbacV1ClusterRoleBinding `json:"createRbacAuthorizationV1ClusterRoleBinding,omitempty"`
	// create a Role
	//
	// Equivalent to POST /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles
	CreateRbacAuthorizationV1NamespacedRole *IoK8sAPIRbacV1Role `json:"createRbacAuthorizationV1NamespacedRole,omitempty"`
	// create a RoleBinding
	//
	// Equivalent to POST /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings
	CreateRbacAuthorizationV1NamespacedRoleBinding *IoK8sAPIRbacV1RoleBinding `json:"createRbacAuthorizationV1NamespacedRoleBinding,omitempty"`
	// create a PodSchedulingContext
	//
	// Equivalent to POST /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts
	CreateResourceV1alpha2NamespacedPodSchedulingContext *IoK8sAPIResourceV1alpha2PodSchedulingContext `json:"createResourceV1alpha2NamespacedPodSchedulingContext,omitempty"`
	// create a ResourceClaim
	//
	// Equivalent to POST /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims
	CreateResourceV1alpha2NamespacedResourceClaim *IoK8sAPIResourceV1alpha2ResourceClaim `json:"createResourceV1alpha2NamespacedResourceClaim,omitempty"`
	// create a ResourceClaimTemplate
	//
	// Equivalent to POST /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates
	CreateResourceV1alpha2NamespacedResourceClaimTemplate *IoK8sAPIResourceV1alpha2ResourceClaimTemplate `json:"createResourceV1alpha2NamespacedResourceClaimTemplate,omitempty"`
	// create a ResourceClass
	//
	// Equivalent to POST /apis/resource.k8s.io/v1alpha2/resourceclasses
	CreateResourceV1alpha2ResourceClass *IoK8sAPIResourceV1alpha2ResourceClass `json:"createResourceV1alpha2ResourceClass,omitempty"`
	// create a PriorityClass
	//
	// Equivalent to POST /apis/scheduling.k8s.io/v1/priorityclasses
	CreateSchedulingV1PriorityClass *IoK8sAPISchedulingV1PriorityClass `json:"createSchedulingV1PriorityClass,omitempty"`
	// create a CSIDriver
	//
	// Equivalent to POST /apis/storage.k8s.io/v1/csidrivers
	CreateStorageV1CSIDriver *IoK8sAPIStorageV1CSIDriver `json:"createStorageV1CSIDriver,omitempty"`
	// create a CSINode
	//
	// Equivalent to POST /apis/storage.k8s.io/v1/csinodes
	CreateStorageV1CSINode *IoK8sAPIStorageV1CSINode `json:"createStorageV1CSINode,omitempty"`
	// create a CSIStorageCapacity
	//
	// Equivalent to POST /apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities
	CreateStorageV1NamespacedCSIStorageCapacity *IoK8sAPIStorageV1CSIStorageCapacity `json:"createStorageV1NamespacedCSIStorageCapacity,omitempty"`
	// create a StorageClass
	//
	// Equivalent to POST /apis/storage.k8s.io/v1/storageclasses
	CreateStorageV1StorageClass *IoK8sAPIStorageV1StorageClass `json:"createStorageV1StorageClass,omitempty"`
	// create a VolumeAttachment
	//
	// Equivalent to POST /apis/storage.k8s.io/v1/volumeattachments
	CreateStorageV1VolumeAttachment *IoK8sAPIStorageV1VolumeAttachment `json:"createStorageV1VolumeAttachment,omitempty"`
	// delete collection of MutatingWebhookConfiguration
	//
	// Equivalent to DELETE /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations
	DeleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration,omitempty"`
	// delete collection of ValidatingWebhookConfiguration
	//
	// Equivalent to DELETE /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations
	DeleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration,omitempty"`
	// delete a MutatingWebhookConfiguration
	//
	// Equivalent to DELETE /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}
	DeleteAdmissionregistrationV1MutatingWebhookConfiguration *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAdmissionregistrationV1MutatingWebhookConfiguration,omitempty"`
	// delete a ValidatingWebhookConfiguration
	//
	// Equivalent to DELETE /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}
	DeleteAdmissionregistrationV1ValidatingWebhookConfiguration *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAdmissionregistrationV1ValidatingWebhookConfiguration,omitempty"`
	// delete collection of ValidatingAdmissionPolicy
	//
	// Equivalent to DELETE /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies
	DeleteAdmissionregistrationV1alpha1CollectionValidatingAdmissionPolicy *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAdmissionregistrationV1alpha1CollectionValidatingAdmissionPolicy,omitempty"`
	// delete collection of ValidatingAdmissionPolicyBinding
	//
	// Equivalent to DELETE /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings
	DeleteAdmissionregistrationV1alpha1CollectionValidatingAdmissionPolicyBinding *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAdmissionregistrationV1alpha1CollectionValidatingAdmissionPolicyBinding,omitempty"`
	// delete a ValidatingAdmissionPolicy
	//
	// Equivalent to DELETE /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}
	DeleteAdmissionregistrationV1alpha1ValidatingAdmissionPolicy *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAdmissionregistrationV1alpha1ValidatingAdmissionPolicy,omitempty"`
	// delete a ValidatingAdmissionPolicyBinding
	//
	// Equivalent to DELETE /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}
	DeleteAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding,omitempty"`
	// delete collection of CustomResourceDefinition
	//
	// Equivalent to DELETE /apis/apiextensions.k8s.io/v1/customresourcedefinitions
	DeleteApiextensionsV1CollectionCustomResourceDefinition *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteApiextensionsV1CollectionCustomResourceDefinition,omitempty"`
	// delete a CustomResourceDefinition
	//
	// Equivalent to DELETE /apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}
	DeleteApiextensionsV1CustomResourceDefinition *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteApiextensionsV1CustomResourceDefinition,omitempty"`
	// delete an APIService
	//
	// Equivalent to DELETE /apis/apiregistration.k8s.io/v1/apiservices/{name}
	DeleteApiregistrationV1APIService *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteApiregistrationV1APIService,omitempty"`
	// delete collection of APIService
	//
	// Equivalent to DELETE /apis/apiregistration.k8s.io/v1/apiservices
	DeleteApiregistrationV1CollectionAPIService *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteApiregistrationV1CollectionAPIService,omitempty"`
	// delete collection of ControllerRevision
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/controllerrevisions
	DeleteAppsV1CollectionNamespacedControllerRevision *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1CollectionNamespacedControllerRevision,omitempty"`
	// delete collection of DaemonSet
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/daemonsets
	DeleteAppsV1CollectionNamespacedDaemonSet *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1CollectionNamespacedDaemonSet,omitempty"`
	// delete collection of Deployment
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/deployments
	DeleteAppsV1CollectionNamespacedDeployment *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1CollectionNamespacedDeployment,omitempty"`
	// delete collection of ReplicaSet
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/replicasets
	DeleteAppsV1CollectionNamespacedReplicaSet *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1CollectionNamespacedReplicaSet,omitempty"`
	// delete collection of StatefulSet
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/statefulsets
	DeleteAppsV1CollectionNamespacedStatefulSet *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1CollectionNamespacedStatefulSet,omitempty"`
	// delete a ControllerRevision
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}
	DeleteAppsV1NamespacedControllerRevision *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1NamespacedControllerRevision,omitempty"`
	// delete a DaemonSet
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}
	DeleteAppsV1NamespacedDaemonSet *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1NamespacedDaemonSet,omitempty"`
	// delete a Deployment
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/deployments/{name}
	DeleteAppsV1NamespacedDeployment *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1NamespacedDeployment,omitempty"`
	// delete a ReplicaSet
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/replicasets/{name}
	DeleteAppsV1NamespacedReplicaSet *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1NamespacedReplicaSet,omitempty"`
	// delete a StatefulSet
	//
	// Equivalent to DELETE /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}
	DeleteAppsV1NamespacedStatefulSet *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAppsV1NamespacedStatefulSet,omitempty"`
	// delete collection of HorizontalPodAutoscaler
	//
	// Equivalent to DELETE /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers
	DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler,omitempty"`
	// delete a HorizontalPodAutoscaler
	//
	// Equivalent to DELETE /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}
	DeleteAutoscalingV1NamespacedHorizontalPodAutoscaler *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAutoscalingV1NamespacedHorizontalPodAutoscaler,omitempty"`
	// delete collection of HorizontalPodAutoscaler
	//
	// Equivalent to DELETE /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers
	DeleteAutoscalingV2CollectionNamespacedHorizontalPodAutoscaler *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAutoscalingV2CollectionNamespacedHorizontalPodAutoscaler,omitempty"`
	// delete a HorizontalPodAutoscaler
	//
	// Equivalent to DELETE /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}
	DeleteAutoscalingV2NamespacedHorizontalPodAutoscaler *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteAutoscalingV2NamespacedHorizontalPodAutoscaler,omitempty"`
	// delete collection of CronJob
	//
	// Equivalent to DELETE /apis/batch/v1/namespaces/{namespace}/cronjobs
	DeleteBatchV1CollectionNamespacedCronJob *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteBatchV1CollectionNamespacedCronJob,omitempty"`
	// delete collection of Job
	//
	// Equivalent to DELETE /apis/batch/v1/namespaces/{namespace}/jobs
	DeleteBatchV1CollectionNamespacedJob *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteBatchV1CollectionNamespacedJob,omitempty"`
	// delete a CronJob
	//
	// Equivalent to DELETE /apis/batch/v1/namespaces/{namespace}/cronjobs/{name}
	DeleteBatchV1NamespacedCronJob *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteBatchV1NamespacedCronJob,omitempty"`
	// delete a Job
	//
	// Equivalent to DELETE /apis/batch/v1/namespaces/{namespace}/jobs/{name}
	DeleteBatchV1NamespacedJob *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteBatchV1NamespacedJob,omitempty"`
	// delete a CertificateSigningRequest
	//
	// Equivalent to DELETE /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}
	DeleteCertificatesV1CertificateSigningRequest *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCertificatesV1CertificateSigningRequest,omitempty"`
	// delete collection of CertificateSigningRequest
	//
	// Equivalent to DELETE /apis/certificates.k8s.io/v1/certificatesigningrequests
	DeleteCertificatesV1CollectionCertificateSigningRequest *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCertificatesV1CollectionCertificateSigningRequest,omitempty"`
	// delete a ClusterTrustBundle
	//
	// Equivalent to DELETE /apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}
	DeleteCertificatesV1alpha1ClusterTrustBundle *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCertificatesV1alpha1ClusterTrustBundle,omitempty"`
	// delete collection of ClusterTrustBundle
	//
	// Equivalent to DELETE /apis/certificates.k8s.io/v1alpha1/clustertrustbundles
	DeleteCertificatesV1alpha1CollectionClusterTrustBundle *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCertificatesV1alpha1CollectionClusterTrustBundle,omitempty"`
	// delete collection of Lease
	//
	// Equivalent to DELETE /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases
	DeleteCoordinationV1CollectionNamespacedLease *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoordinationV1CollectionNamespacedLease,omitempty"`
	// delete a Lease
	//
	// Equivalent to DELETE /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}
	DeleteCoordinationV1NamespacedLease *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoordinationV1NamespacedLease,omitempty"`
	// delete collection of ConfigMap
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/configmaps
	DeleteCoreV1CollectionNamespacedConfigMap *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedConfigMap,omitempty"`
	// delete collection of Endpoints
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/endpoints
	DeleteCoreV1CollectionNamespacedEndpoints *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedEndpoints,omitempty"`
	// delete collection of Event
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/events
	DeleteCoreV1CollectionNamespacedEvent *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedEvent,omitempty"`
	// delete collection of LimitRange
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/limitranges
	DeleteCoreV1CollectionNamespacedLimitRange *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedLimitRange,omitempty"`
	// delete collection of PersistentVolumeClaim
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/persistentvolumeclaims
	DeleteCoreV1CollectionNamespacedPersistentVolumeClaim *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedPersistentVolumeClaim,omitempty"`
	// delete collection of Pod
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/pods
	DeleteCoreV1CollectionNamespacedPod *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedPod,omitempty"`
	// delete collection of PodTemplate
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/podtemplates
	DeleteCoreV1CollectionNamespacedPodTemplate *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedPodTemplate,omitempty"`
	// delete collection of ReplicationController
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/replicationcontrollers
	DeleteCoreV1CollectionNamespacedReplicationController *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedReplicationController,omitempty"`
	// delete collection of ResourceQuota
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/resourcequotas
	DeleteCoreV1CollectionNamespacedResourceQuota *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedResourceQuota,omitempty"`
	// delete collection of Secret
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/secrets
	DeleteCoreV1CollectionNamespacedSecret *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedSecret,omitempty"`
	// delete collection of Service
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/services
	DeleteCoreV1CollectionNamespacedService *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedService,omitempty"`
	// delete collection of ServiceAccount
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/serviceaccounts
	DeleteCoreV1CollectionNamespacedServiceAccount *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNamespacedServiceAccount,omitempty"`
	// delete collection of Node
	//
	// Equivalent to DELETE /api/v1/nodes
	DeleteCoreV1CollectionNode *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionNode,omitempty"`
	// delete collection of PersistentVolume
	//
	// Equivalent to DELETE /api/v1/persistentvolumes
	DeleteCoreV1CollectionPersistentVolume *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1CollectionPersistentVolume,omitempty"`
	// delete a Namespace
	//
	// Equivalent to DELETE /api/v1/namespaces/{name}
	DeleteCoreV1Namespace *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1Namespace,omitempty"`
	// delete a ConfigMap
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/configmaps/{name}
	DeleteCoreV1NamespacedConfigMap *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1NamespacedConfigMap,omitempty"`
	// delete Endpoints
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/endpoints/{name}
	DeleteCoreV1NamespacedEndpoints *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1NamespacedEndpoints,omitempty"`
	// delete an Event
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/events/{name}
	DeleteCoreV1NamespacedEvent *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1NamespacedEvent,omitempty"`
	// delete a LimitRange
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/limitranges/{name}
	DeleteCoreV1NamespacedLimitRange *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1NamespacedLimitRange,omitempty"`
	// delete a PersistentVolumeClaim
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}
	DeleteCoreV1NamespacedPersistentVolumeClaim *IoK8sAPICoreV1PersistentVolumeClaim `json:"deleteCoreV1NamespacedPersistentVolumeClaim,omitempty"`
	// delete a Pod
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/pods/{name}
	DeleteCoreV1NamespacedPod *IoK8sAPICoreV1Pod `json:"deleteCoreV1NamespacedPod,omitempty"`
	// delete a PodTemplate
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/podtemplates/{name}
	DeleteCoreV1NamespacedPodTemplate *IoK8sAPICoreV1PodTemplate `json:"deleteCoreV1NamespacedPodTemplate,omitempty"`
	// delete a ReplicationController
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/replicationcontrollers/{name}
	DeleteCoreV1NamespacedReplicationController *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1NamespacedReplicationController,omitempty"`
	// delete a ResourceQuota
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/resourcequotas/{name}
	DeleteCoreV1NamespacedResourceQuota *IoK8sAPICoreV1ResourceQuota `json:"deleteCoreV1NamespacedResourceQuota,omitempty"`
	// delete a Secret
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/secrets/{name}
	DeleteCoreV1NamespacedSecret *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1NamespacedSecret,omitempty"`
	// delete a Service
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/services/{name}
	DeleteCoreV1NamespacedService *IoK8sAPICoreV1Service `json:"deleteCoreV1NamespacedService,omitempty"`
	// delete a ServiceAccount
	//
	// Equivalent to DELETE /api/v1/namespaces/{namespace}/serviceaccounts/{name}
	DeleteCoreV1NamespacedServiceAccount *IoK8sAPICoreV1ServiceAccount `json:"deleteCoreV1NamespacedServiceAccount,omitempty"`
	// delete a Node
	//
	// Equivalent to DELETE /api/v1/nodes/{name}
	DeleteCoreV1Node *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteCoreV1Node,omitempty"`
	// delete a PersistentVolume
	//
	// Equivalent to DELETE /api/v1/persistentvolumes/{name}
	DeleteCoreV1PersistentVolume *IoK8sAPICoreV1PersistentVolume `json:"deleteCoreV1PersistentVolume,omitempty"`
	// delete collection of EndpointSlice
	//
	// Equivalent to DELETE /apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices
	DeleteDiscoveryV1CollectionNamespacedEndpointSlice *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteDiscoveryV1CollectionNamespacedEndpointSlice,omitempty"`
	// delete an EndpointSlice
	//
	// Equivalent to DELETE /apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}
	DeleteDiscoveryV1NamespacedEndpointSlice *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteDiscoveryV1NamespacedEndpointSlice,omitempty"`
	// delete collection of Event
	//
	// Equivalent to DELETE /apis/events.k8s.io/v1/namespaces/{namespace}/events
	DeleteEventsV1CollectionNamespacedEvent *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteEventsV1CollectionNamespacedEvent,omitempty"`
	// delete an Event
	//
	// Equivalent to DELETE /apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}
	DeleteEventsV1NamespacedEvent *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteEventsV1NamespacedEvent,omitempty"`
	// delete collection of FlowSchema
	//
	// Equivalent to DELETE /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas
	DeleteFlowcontrolApiserverV1beta2CollectionFlowSchema *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteFlowcontrolApiserverV1beta2CollectionFlowSchema,omitempty"`
	// delete collection of PriorityLevelConfiguration
	//
	// Equivalent to DELETE /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations
	DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfiguration *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfiguration,omitempty"`
	// delete a FlowSchema
	//
	// Equivalent to DELETE /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}
	DeleteFlowcontrolApiserverV1beta2FlowSchema *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteFlowcontrolApiserverV1beta2FlowSchema,omitempty"`
	// delete a PriorityLevelConfiguration
	//
	// Equivalent to DELETE /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}
	DeleteFlowcontrolApiserverV1beta2PriorityLevelConfiguration *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteFlowcontrolApiserverV1beta2PriorityLevelConfiguration,omitempty"`
	// delete collection of FlowSchema
	//
	// Equivalent to DELETE /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas
	DeleteFlowcontrolApiserverV1beta3CollectionFlowSchema *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteFlowcontrolApiserverV1beta3CollectionFlowSchema,omitempty"`
	// delete collection of PriorityLevelConfiguration
	//
	// Equivalent to DELETE /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations
	DeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfiguration *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfiguration,omitempty"`
	// delete a FlowSchema
	//
	// Equivalent to DELETE /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}
	DeleteFlowcontrolApiserverV1beta3FlowSchema *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteFlowcontrolApiserverV1beta3FlowSchema,omitempty"`
	// delete a PriorityLevelConfiguration
	//
	// Equivalent to DELETE /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}
	DeleteFlowcontrolApiserverV1beta3PriorityLevelConfiguration *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteFlowcontrolApiserverV1beta3PriorityLevelConfiguration,omitempty"`
	// delete collection of StorageVersion
	//
	// Equivalent to DELETE /apis/internal.apiserver.k8s.io/v1alpha1/storageversions
	DeleteInternalApiserverV1alpha1CollectionStorageVersion *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteInternalApiserverV1alpha1CollectionStorageVersion,omitempty"`
	// delete a StorageVersion
	//
	// Equivalent to DELETE /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}
	DeleteInternalApiserverV1alpha1StorageVersion *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteInternalApiserverV1alpha1StorageVersion,omitempty"`
	// delete collection of IngressClass
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1/ingressclasses
	DeleteNetworkingV1CollectionIngressClass *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1CollectionIngressClass,omitempty"`
	// delete collection of Ingress
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses
	DeleteNetworkingV1CollectionNamespacedIngress *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1CollectionNamespacedIngress,omitempty"`
	// delete collection of NetworkPolicy
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies
	DeleteNetworkingV1CollectionNamespacedNetworkPolicy *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1CollectionNamespacedNetworkPolicy,omitempty"`
	// delete an IngressClass
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1/ingressclasses/{name}
	DeleteNetworkingV1IngressClass *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1IngressClass,omitempty"`
	// delete an Ingress
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}
	DeleteNetworkingV1NamespacedIngress *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1NamespacedIngress,omitempty"`
	// delete a NetworkPolicy
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}
	DeleteNetworkingV1NamespacedNetworkPolicy *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1NamespacedNetworkPolicy,omitempty"`
	// delete a ClusterCIDR
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1alpha1/clustercidrs/{name}
	DeleteNetworkingV1alpha1ClusterCidr *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1alpha1ClusterCIDR,omitempty"`
	// delete collection of ClusterCIDR
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1alpha1/clustercidrs
	DeleteNetworkingV1alpha1CollectionClusterCidr *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1alpha1CollectionClusterCIDR,omitempty"`
	// delete collection of IPAddress
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1alpha1/ipaddresses
	DeleteNetworkingV1alpha1CollectionIPAddress *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1alpha1CollectionIPAddress,omitempty"`
	// delete an IPAddress
	//
	// Equivalent to DELETE /apis/networking.k8s.io/v1alpha1/ipaddresses/{name}
	DeleteNetworkingV1alpha1IPAddress *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNetworkingV1alpha1IPAddress,omitempty"`
	// delete collection of RuntimeClass
	//
	// Equivalent to DELETE /apis/node.k8s.io/v1/runtimeclasses
	DeleteNodeV1CollectionRuntimeClass *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNodeV1CollectionRuntimeClass,omitempty"`
	// delete a RuntimeClass
	//
	// Equivalent to DELETE /apis/node.k8s.io/v1/runtimeclasses/{name}
	DeleteNodeV1RuntimeClass *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteNodeV1RuntimeClass,omitempty"`
	// delete collection of PodDisruptionBudget
	//
	// Equivalent to DELETE /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets
	DeletePolicyV1CollectionNamespacedPodDisruptionBudget *IoK8sApimachineryPkgApisMetaV1Status `json:"deletePolicyV1CollectionNamespacedPodDisruptionBudget,omitempty"`
	// delete a PodDisruptionBudget
	//
	// Equivalent to DELETE /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}
	DeletePolicyV1NamespacedPodDisruptionBudget *IoK8sApimachineryPkgApisMetaV1Status `json:"deletePolicyV1NamespacedPodDisruptionBudget,omitempty"`
	// delete a ClusterRole
	//
	// Equivalent to DELETE /apis/rbac.authorization.k8s.io/v1/clusterroles/{name}
	DeleteRbacAuthorizationV1ClusterRole *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteRbacAuthorizationV1ClusterRole,omitempty"`
	// delete a ClusterRoleBinding
	//
	// Equivalent to DELETE /apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}
	DeleteRbacAuthorizationV1ClusterRoleBinding *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteRbacAuthorizationV1ClusterRoleBinding,omitempty"`
	// delete collection of ClusterRole
	//
	// Equivalent to DELETE /apis/rbac.authorization.k8s.io/v1/clusterroles
	DeleteRbacAuthorizationV1CollectionClusterRole *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteRbacAuthorizationV1CollectionClusterRole,omitempty"`
	// delete collection of ClusterRoleBinding
	//
	// Equivalent to DELETE /apis/rbac.authorization.k8s.io/v1/clusterrolebindings
	DeleteRbacAuthorizationV1CollectionClusterRoleBinding *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteRbacAuthorizationV1CollectionClusterRoleBinding,omitempty"`
	// delete collection of Role
	//
	// Equivalent to DELETE /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles
	DeleteRbacAuthorizationV1CollectionNamespacedRole *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteRbacAuthorizationV1CollectionNamespacedRole,omitempty"`
	// delete collection of RoleBinding
	//
	// Equivalent to DELETE /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings
	DeleteRbacAuthorizationV1CollectionNamespacedRoleBinding *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteRbacAuthorizationV1CollectionNamespacedRoleBinding,omitempty"`
	// delete a Role
	//
	// Equivalent to DELETE /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}
	DeleteRbacAuthorizationV1NamespacedRole *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteRbacAuthorizationV1NamespacedRole,omitempty"`
	// delete a RoleBinding
	//
	// Equivalent to DELETE /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}
	DeleteRbacAuthorizationV1NamespacedRoleBinding *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteRbacAuthorizationV1NamespacedRoleBinding,omitempty"`
	// delete collection of PodSchedulingContext
	//
	// Equivalent to DELETE /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts
	DeleteResourceV1alpha2CollectionNamespacedPodSchedulingContext *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteResourceV1alpha2CollectionNamespacedPodSchedulingContext,omitempty"`
	// delete collection of ResourceClaim
	//
	// Equivalent to DELETE /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims
	DeleteResourceV1alpha2CollectionNamespacedResourceClaim *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteResourceV1alpha2CollectionNamespacedResourceClaim,omitempty"`
	// delete collection of ResourceClaimTemplate
	//
	// Equivalent to DELETE /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates
	DeleteResourceV1alpha2CollectionNamespacedResourceClaimTemplate *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteResourceV1alpha2CollectionNamespacedResourceClaimTemplate,omitempty"`
	// delete collection of ResourceClass
	//
	// Equivalent to DELETE /apis/resource.k8s.io/v1alpha2/resourceclasses
	DeleteResourceV1alpha2CollectionResourceClass *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteResourceV1alpha2CollectionResourceClass,omitempty"`
	// delete a PodSchedulingContext
	//
	// Equivalent to DELETE /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}
	DeleteResourceV1alpha2NamespacedPodSchedulingContext *IoK8sAPIResourceV1alpha2PodSchedulingContext `json:"deleteResourceV1alpha2NamespacedPodSchedulingContext,omitempty"`
	// delete a ResourceClaim
	//
	// Equivalent to DELETE /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}
	DeleteResourceV1alpha2NamespacedResourceClaim *IoK8sAPIResourceV1alpha2ResourceClaim `json:"deleteResourceV1alpha2NamespacedResourceClaim,omitempty"`
	// delete a ResourceClaimTemplate
	//
	// Equivalent to DELETE /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}
	DeleteResourceV1alpha2NamespacedResourceClaimTemplate *IoK8sAPIResourceV1alpha2ResourceClaimTemplate `json:"deleteResourceV1alpha2NamespacedResourceClaimTemplate,omitempty"`
	// delete a ResourceClass
	//
	// Equivalent to DELETE /apis/resource.k8s.io/v1alpha2/resourceclasses/{name}
	DeleteResourceV1alpha2ResourceClass *IoK8sAPIResourceV1alpha2ResourceClass `json:"deleteResourceV1alpha2ResourceClass,omitempty"`
	// delete collection of PriorityClass
	//
	// Equivalent to DELETE /apis/scheduling.k8s.io/v1/priorityclasses
	DeleteSchedulingV1CollectionPriorityClass *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteSchedulingV1CollectionPriorityClass,omitempty"`
	// delete a PriorityClass
	//
	// Equivalent to DELETE /apis/scheduling.k8s.io/v1/priorityclasses/{name}
	DeleteSchedulingV1PriorityClass *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteSchedulingV1PriorityClass,omitempty"`
	// delete a CSIDriver
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/csidrivers/{name}
	DeleteStorageV1CSIDriver *IoK8sAPIStorageV1CSIDriver `json:"deleteStorageV1CSIDriver,omitempty"`
	// delete a CSINode
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/csinodes/{name}
	DeleteStorageV1CSINode *IoK8sAPIStorageV1CSINode `json:"deleteStorageV1CSINode,omitempty"`
	// delete collection of CSIDriver
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/csidrivers
	DeleteStorageV1CollectionCSIDriver *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteStorageV1CollectionCSIDriver,omitempty"`
	// delete collection of CSINode
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/csinodes
	DeleteStorageV1CollectionCSINode *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteStorageV1CollectionCSINode,omitempty"`
	// delete collection of CSIStorageCapacity
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities
	DeleteStorageV1CollectionNamespacedCSIStorageCapacity *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteStorageV1CollectionNamespacedCSIStorageCapacity,omitempty"`
	// delete collection of StorageClass
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/storageclasses
	DeleteStorageV1CollectionStorageClass *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteStorageV1CollectionStorageClass,omitempty"`
	// delete collection of VolumeAttachment
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/volumeattachments
	DeleteStorageV1CollectionVolumeAttachment *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteStorageV1CollectionVolumeAttachment,omitempty"`
	// delete a CSIStorageCapacity
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities/{name}
	DeleteStorageV1NamespacedCSIStorageCapacity *IoK8sApimachineryPkgApisMetaV1Status `json:"deleteStorageV1NamespacedCSIStorageCapacity,omitempty"`
	// delete a StorageClass
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/storageclasses/{name}
	DeleteStorageV1StorageClass *IoK8sAPIStorageV1StorageClass `json:"deleteStorageV1StorageClass,omitempty"`
	// delete a VolumeAttachment
	//
	// Equivalent to DELETE /apis/storage.k8s.io/v1/volumeattachments/{name}
	DeleteStorageV1VolumeAttachment *IoK8sAPIStorageV1VolumeAttachment `json:"deleteStorageV1VolumeAttachment,omitempty"`
	// partially update the specified MutatingWebhookConfiguration
	//
	// Equivalent to PATCH /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}
	PatchAdmissionregistrationV1MutatingWebhookConfiguration *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration `json:"patchAdmissionregistrationV1MutatingWebhookConfiguration,omitempty"`
	// partially update the specified ValidatingWebhookConfiguration
	//
	// Equivalent to PATCH /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}
	PatchAdmissionregistrationV1ValidatingWebhookConfiguration *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration `json:"patchAdmissionregistrationV1ValidatingWebhookConfiguration,omitempty"`
	// partially update the specified ValidatingAdmissionPolicy
	//
	// Equivalent to PATCH /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}
	PatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicy *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy `json:"patchAdmissionregistrationV1alpha1ValidatingAdmissionPolicy,omitempty"`
	// partially update the specified ValidatingAdmissionPolicyBinding
	//
	// Equivalent to PATCH /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}
	PatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding `json:"patchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding,omitempty"`
	// partially update status of the specified ValidatingAdmissionPolicy
	//
	// Equivalent to PATCH /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}/status
	PatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy `json:"patchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus,omitempty"`
	// partially update the specified CustomResourceDefinition
	//
	// Equivalent to PATCH /apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}
	PatchApiextensionsV1CustomResourceDefinition *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition `json:"patchApiextensionsV1CustomResourceDefinition,omitempty"`
	// partially update status of the specified CustomResourceDefinition
	//
	// Equivalent to PATCH /apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status
	PatchApiextensionsV1CustomResourceDefinitionStatus *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition `json:"patchApiextensionsV1CustomResourceDefinitionStatus,omitempty"`
	// partially update the specified APIService
	//
	// Equivalent to PATCH /apis/apiregistration.k8s.io/v1/apiservices/{name}
	PatchApiregistrationV1APIService *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService `json:"patchApiregistrationV1APIService,omitempty"`
	// partially update status of the specified APIService
	//
	// Equivalent to PATCH /apis/apiregistration.k8s.io/v1/apiservices/{name}/status
	PatchApiregistrationV1APIServiceStatus *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService `json:"patchApiregistrationV1APIServiceStatus,omitempty"`
	// partially update the specified ControllerRevision
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}
	PatchAppsV1NamespacedControllerRevision *IoK8sAPIAppsV1ControllerRevision `json:"patchAppsV1NamespacedControllerRevision,omitempty"`
	// partially update the specified DaemonSet
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}
	PatchAppsV1NamespacedDaemonSet *IoK8sAPIAppsV1DaemonSet `json:"patchAppsV1NamespacedDaemonSet,omitempty"`
	// partially update status of the specified DaemonSet
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status
	PatchAppsV1NamespacedDaemonSetStatus *IoK8sAPIAppsV1DaemonSet `json:"patchAppsV1NamespacedDaemonSetStatus,omitempty"`
	// partially update the specified Deployment
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/deployments/{name}
	PatchAppsV1NamespacedDeployment *IoK8sAPIAppsV1Deployment `json:"patchAppsV1NamespacedDeployment,omitempty"`
	// partially update scale of the specified Deployment
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale
	PatchAppsV1NamespacedDeploymentScale *IoK8sAPIAutoscalingV1Scale `json:"patchAppsV1NamespacedDeploymentScale,omitempty"`
	// partially update status of the specified Deployment
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/deployments/{name}/status
	PatchAppsV1NamespacedDeploymentStatus *IoK8sAPIAppsV1Deployment `json:"patchAppsV1NamespacedDeploymentStatus,omitempty"`
	// partially update the specified ReplicaSet
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/replicasets/{name}
	PatchAppsV1NamespacedReplicaSet *IoK8sAPIAppsV1ReplicaSet `json:"patchAppsV1NamespacedReplicaSet,omitempty"`
	// partially update scale of the specified ReplicaSet
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale
	PatchAppsV1NamespacedReplicaSetScale *IoK8sAPIAutoscalingV1Scale `json:"patchAppsV1NamespacedReplicaSetScale,omitempty"`
	// partially update status of the specified ReplicaSet
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status
	PatchAppsV1NamespacedReplicaSetStatus *IoK8sAPIAppsV1ReplicaSet `json:"patchAppsV1NamespacedReplicaSetStatus,omitempty"`
	// partially update the specified StatefulSet
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}
	PatchAppsV1NamespacedStatefulSet *IoK8sAPIAppsV1StatefulSet `json:"patchAppsV1NamespacedStatefulSet,omitempty"`
	// partially update scale of the specified StatefulSet
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale
	PatchAppsV1NamespacedStatefulSetScale *IoK8sAPIAutoscalingV1Scale `json:"patchAppsV1NamespacedStatefulSetScale,omitempty"`
	// partially update status of the specified StatefulSet
	//
	// Equivalent to PATCH /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status
	PatchAppsV1NamespacedStatefulSetStatus *IoK8sAPIAppsV1StatefulSet `json:"patchAppsV1NamespacedStatefulSetStatus,omitempty"`
	// partially update the specified HorizontalPodAutoscaler
	//
	// Equivalent to PATCH /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}
	PatchAutoscalingV1NamespacedHorizontalPodAutoscaler *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler `json:"patchAutoscalingV1NamespacedHorizontalPodAutoscaler,omitempty"`
	// partially update status of the specified HorizontalPodAutoscaler
	//
	// Equivalent to PATCH /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
	PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler `json:"patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus,omitempty"`
	// partially update the specified HorizontalPodAutoscaler
	//
	// Equivalent to PATCH /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}
	PatchAutoscalingV2NamespacedHorizontalPodAutoscaler *IoK8sAPIAutoscalingV2HorizontalPodAutoscaler `json:"patchAutoscalingV2NamespacedHorizontalPodAutoscaler,omitempty"`
	// partially update status of the specified HorizontalPodAutoscaler
	//
	// Equivalent to PATCH /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
	PatchAutoscalingV2NamespacedHorizontalPodAutoscalerStatus *IoK8sAPIAutoscalingV2HorizontalPodAutoscaler `json:"patchAutoscalingV2NamespacedHorizontalPodAutoscalerStatus,omitempty"`
	// partially update the specified CronJob
	//
	// Equivalent to PATCH /apis/batch/v1/namespaces/{namespace}/cronjobs/{name}
	PatchBatchV1NamespacedCronJob *IoK8sAPIBatchV1CronJob `json:"patchBatchV1NamespacedCronJob,omitempty"`
	// partially update status of the specified CronJob
	//
	// Equivalent to PATCH /apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status
	PatchBatchV1NamespacedCronJobStatus *IoK8sAPIBatchV1CronJob `json:"patchBatchV1NamespacedCronJobStatus,omitempty"`
	// partially update the specified Job
	//
	// Equivalent to PATCH /apis/batch/v1/namespaces/{namespace}/jobs/{name}
	PatchBatchV1NamespacedJob *IoK8sAPIBatchV1Job `json:"patchBatchV1NamespacedJob,omitempty"`
	// partially update status of the specified Job
	//
	// Equivalent to PATCH /apis/batch/v1/namespaces/{namespace}/jobs/{name}/status
	PatchBatchV1NamespacedJobStatus *IoK8sAPIBatchV1Job `json:"patchBatchV1NamespacedJobStatus,omitempty"`
	// partially update the specified CertificateSigningRequest
	//
	// Equivalent to PATCH /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}
	PatchCertificatesV1CertificateSigningRequest *IoK8sAPICertificatesV1CertificateSigningRequest `json:"patchCertificatesV1CertificateSigningRequest,omitempty"`
	// partially update approval of the specified CertificateSigningRequest
	//
	// Equivalent to PATCH /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval
	PatchCertificatesV1CertificateSigningRequestApproval *IoK8sAPICertificatesV1CertificateSigningRequest `json:"patchCertificatesV1CertificateSigningRequestApproval,omitempty"`
	// partially update status of the specified CertificateSigningRequest
	//
	// Equivalent to PATCH /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status
	PatchCertificatesV1CertificateSigningRequestStatus *IoK8sAPICertificatesV1CertificateSigningRequest `json:"patchCertificatesV1CertificateSigningRequestStatus,omitempty"`
	// partially update the specified ClusterTrustBundle
	//
	// Equivalent to PATCH /apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}
	PatchCertificatesV1alpha1ClusterTrustBundle *IoK8sAPICertificatesV1alpha1ClusterTrustBundle `json:"patchCertificatesV1alpha1ClusterTrustBundle,omitempty"`
	// partially update the specified Lease
	//
	// Equivalent to PATCH /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}
	PatchCoordinationV1NamespacedLease *IoK8sAPICoordinationV1Lease `json:"patchCoordinationV1NamespacedLease,omitempty"`
	// partially update the specified Namespace
	//
	// Equivalent to PATCH /api/v1/namespaces/{name}
	PatchCoreV1Namespace *IoK8sAPICoreV1Namespace `json:"patchCoreV1Namespace,omitempty"`
	// partially update status of the specified Namespace
	//
	// Equivalent to PATCH /api/v1/namespaces/{name}/status
	PatchCoreV1NamespaceStatus *IoK8sAPICoreV1Namespace `json:"patchCoreV1NamespaceStatus,omitempty"`
	// partially update the specified ConfigMap
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/configmaps/{name}
	PatchCoreV1NamespacedConfigMap *IoK8sAPICoreV1ConfigMap `json:"patchCoreV1NamespacedConfigMap,omitempty"`
	// partially update the specified Endpoints
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/endpoints/{name}
	PatchCoreV1NamespacedEndpoints *IoK8sAPICoreV1Endpoints `json:"patchCoreV1NamespacedEndpoints,omitempty"`
	// partially update the specified Event
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/events/{name}
	PatchCoreV1NamespacedEvent *IoK8sAPICoreV1Event `json:"patchCoreV1NamespacedEvent,omitempty"`
	// partially update the specified LimitRange
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/limitranges/{name}
	PatchCoreV1NamespacedLimitRange *IoK8sAPICoreV1LimitRange `json:"patchCoreV1NamespacedLimitRange,omitempty"`
	// partially update the specified PersistentVolumeClaim
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}
	PatchCoreV1NamespacedPersistentVolumeClaim *IoK8sAPICoreV1PersistentVolumeClaim `json:"patchCoreV1NamespacedPersistentVolumeClaim,omitempty"`
	// partially update status of the specified PersistentVolumeClaim
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status
	PatchCoreV1NamespacedPersistentVolumeClaimStatus *IoK8sAPICoreV1PersistentVolumeClaim `json:"patchCoreV1NamespacedPersistentVolumeClaimStatus,omitempty"`
	// partially update the specified Pod
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/pods/{name}
	PatchCoreV1NamespacedPod *IoK8sAPICoreV1Pod `json:"patchCoreV1NamespacedPod,omitempty"`
	// partially update ephemeralcontainers of the specified Pod
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers
	PatchCoreV1NamespacedPodEphemeralcontainers *IoK8sAPICoreV1Pod `json:"patchCoreV1NamespacedPodEphemeralcontainers,omitempty"`
	// partially update status of the specified Pod
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/pods/{name}/status
	PatchCoreV1NamespacedPodStatus *IoK8sAPICoreV1Pod `json:"patchCoreV1NamespacedPodStatus,omitempty"`
	// partially update the specified PodTemplate
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/podtemplates/{name}
	PatchCoreV1NamespacedPodTemplate *IoK8sAPICoreV1PodTemplate `json:"patchCoreV1NamespacedPodTemplate,omitempty"`
	// partially update the specified ReplicationController
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/replicationcontrollers/{name}
	PatchCoreV1NamespacedReplicationController *IoK8sAPICoreV1ReplicationController `json:"patchCoreV1NamespacedReplicationController,omitempty"`
	// partially update scale of the specified ReplicationController
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale
	PatchCoreV1NamespacedReplicationControllerScale *IoK8sAPIAutoscalingV1Scale `json:"patchCoreV1NamespacedReplicationControllerScale,omitempty"`
	// partially update status of the specified ReplicationController
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status
	PatchCoreV1NamespacedReplicationControllerStatus *IoK8sAPICoreV1ReplicationController `json:"patchCoreV1NamespacedReplicationControllerStatus,omitempty"`
	// partially update the specified ResourceQuota
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/resourcequotas/{name}
	PatchCoreV1NamespacedResourceQuota *IoK8sAPICoreV1ResourceQuota `json:"patchCoreV1NamespacedResourceQuota,omitempty"`
	// partially update status of the specified ResourceQuota
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/resourcequotas/{name}/status
	PatchCoreV1NamespacedResourceQuotaStatus *IoK8sAPICoreV1ResourceQuota `json:"patchCoreV1NamespacedResourceQuotaStatus,omitempty"`
	// partially update the specified Secret
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/secrets/{name}
	PatchCoreV1NamespacedSecret *IoK8sAPICoreV1Secret `json:"patchCoreV1NamespacedSecret,omitempty"`
	// partially update the specified Service
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/services/{name}
	PatchCoreV1NamespacedService *IoK8sAPICoreV1Service `json:"patchCoreV1NamespacedService,omitempty"`
	// partially update the specified ServiceAccount
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/serviceaccounts/{name}
	PatchCoreV1NamespacedServiceAccount *IoK8sAPICoreV1ServiceAccount `json:"patchCoreV1NamespacedServiceAccount,omitempty"`
	// partially update status of the specified Service
	//
	// Equivalent to PATCH /api/v1/namespaces/{namespace}/services/{name}/status
	PatchCoreV1NamespacedServiceStatus *IoK8sAPICoreV1Service `json:"patchCoreV1NamespacedServiceStatus,omitempty"`
	// partially update the specified Node
	//
	// Equivalent to PATCH /api/v1/nodes/{name}
	PatchCoreV1Node *IoK8sAPICoreV1Node `json:"patchCoreV1Node,omitempty"`
	// partially update status of the specified Node
	//
	// Equivalent to PATCH /api/v1/nodes/{name}/status
	PatchCoreV1NodeStatus *IoK8sAPICoreV1Node `json:"patchCoreV1NodeStatus,omitempty"`
	// partially update the specified PersistentVolume
	//
	// Equivalent to PATCH /api/v1/persistentvolumes/{name}
	PatchCoreV1PersistentVolume *IoK8sAPICoreV1PersistentVolume `json:"patchCoreV1PersistentVolume,omitempty"`
	// partially update status of the specified PersistentVolume
	//
	// Equivalent to PATCH /api/v1/persistentvolumes/{name}/status
	PatchCoreV1PersistentVolumeStatus *IoK8sAPICoreV1PersistentVolume `json:"patchCoreV1PersistentVolumeStatus,omitempty"`
	// partially update the specified EndpointSlice
	//
	// Equivalent to PATCH /apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}
	PatchDiscoveryV1NamespacedEndpointSlice *IoK8sAPIDiscoveryV1EndpointSlice `json:"patchDiscoveryV1NamespacedEndpointSlice,omitempty"`
	// partially update the specified Event
	//
	// Equivalent to PATCH /apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}
	PatchEventsV1NamespacedEvent *IoK8sAPIEventsV1Event `json:"patchEventsV1NamespacedEvent,omitempty"`
	// partially update the specified FlowSchema
	//
	// Equivalent to PATCH /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}
	PatchFlowcontrolApiserverV1beta2FlowSchema *IoK8sAPIFlowcontrolV1beta2FlowSchema `json:"patchFlowcontrolApiserverV1beta2FlowSchema,omitempty"`
	// partially update status of the specified FlowSchema
	//
	// Equivalent to PATCH /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}/status
	PatchFlowcontrolApiserverV1beta2FlowSchemaStatus *IoK8sAPIFlowcontrolV1beta2FlowSchema `json:"patchFlowcontrolApiserverV1beta2FlowSchemaStatus,omitempty"`
	// partially update the specified PriorityLevelConfiguration
	//
	// Equivalent to PATCH /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}
	PatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration `json:"patchFlowcontrolApiserverV1beta2PriorityLevelConfiguration,omitempty"`
	// partially update status of the specified PriorityLevelConfiguration
	//
	// Equivalent to PATCH /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}/status
	PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration `json:"patchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus,omitempty"`
	// partially update the specified FlowSchema
	//
	// Equivalent to PATCH /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}
	PatchFlowcontrolApiserverV1beta3FlowSchema *IoK8sAPIFlowcontrolV1beta3FlowSchema `json:"patchFlowcontrolApiserverV1beta3FlowSchema,omitempty"`
	// partially update status of the specified FlowSchema
	//
	// Equivalent to PATCH /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}/status
	PatchFlowcontrolApiserverV1beta3FlowSchemaStatus *IoK8sAPIFlowcontrolV1beta3FlowSchema `json:"patchFlowcontrolApiserverV1beta3FlowSchemaStatus,omitempty"`
	// partially update the specified PriorityLevelConfiguration
	//
	// Equivalent to PATCH /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}
	PatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration `json:"patchFlowcontrolApiserverV1beta3PriorityLevelConfiguration,omitempty"`
	// partially update status of the specified PriorityLevelConfiguration
	//
	// Equivalent to PATCH /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}/status
	PatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration `json:"patchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus,omitempty"`
	// partially update the specified StorageVersion
	//
	// Equivalent to PATCH /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}
	PatchInternalApiserverV1alpha1StorageVersion *IoK8sAPIApiserverinternalV1alpha1StorageVersion `json:"patchInternalApiserverV1alpha1StorageVersion,omitempty"`
	// partially update status of the specified StorageVersion
	//
	// Equivalent to PATCH /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}/status
	PatchInternalApiserverV1alpha1StorageVersionStatus *IoK8sAPIApiserverinternalV1alpha1StorageVersion `json:"patchInternalApiserverV1alpha1StorageVersionStatus,omitempty"`
	// partially update the specified IngressClass
	//
	// Equivalent to PATCH /apis/networking.k8s.io/v1/ingressclasses/{name}
	PatchNetworkingV1IngressClass *IoK8sAPINetworkingV1IngressClass `json:"patchNetworkingV1IngressClass,omitempty"`
	// partially update the specified Ingress
	//
	// Equivalent to PATCH /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}
	PatchNetworkingV1NamespacedIngress *IoK8sAPINetworkingV1Ingress `json:"patchNetworkingV1NamespacedIngress,omitempty"`
	// partially update status of the specified Ingress
	//
	// Equivalent to PATCH /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status
	PatchNetworkingV1NamespacedIngressStatus *IoK8sAPINetworkingV1Ingress `json:"patchNetworkingV1NamespacedIngressStatus,omitempty"`
	// partially update the specified NetworkPolicy
	//
	// Equivalent to PATCH /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}
	PatchNetworkingV1NamespacedNetworkPolicy *IoK8sAPINetworkingV1NetworkPolicy `json:"patchNetworkingV1NamespacedNetworkPolicy,omitempty"`
	// partially update status of the specified NetworkPolicy
	//
	// Equivalent to PATCH /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}/status
	PatchNetworkingV1NamespacedNetworkPolicyStatus *IoK8sAPINetworkingV1NetworkPolicy `json:"patchNetworkingV1NamespacedNetworkPolicyStatus,omitempty"`
	// partially update the specified ClusterCIDR
	//
	// Equivalent to PATCH /apis/networking.k8s.io/v1alpha1/clustercidrs/{name}
	PatchNetworkingV1alpha1ClusterCidr *IoK8sAPINetworkingV1alpha1ClusterCidr `json:"patchNetworkingV1alpha1ClusterCIDR,omitempty"`
	// partially update the specified IPAddress
	//
	// Equivalent to PATCH /apis/networking.k8s.io/v1alpha1/ipaddresses/{name}
	PatchNetworkingV1alpha1IPAddress *IoK8sAPINetworkingV1alpha1IPAddress `json:"patchNetworkingV1alpha1IPAddress,omitempty"`
	// partially update the specified RuntimeClass
	//
	// Equivalent to PATCH /apis/node.k8s.io/v1/runtimeclasses/{name}
	PatchNodeV1RuntimeClass *IoK8sAPINodeV1RuntimeClass `json:"patchNodeV1RuntimeClass,omitempty"`
	// partially update the specified PodDisruptionBudget
	//
	// Equivalent to PATCH /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}
	PatchPolicyV1NamespacedPodDisruptionBudget *IoK8sAPIPolicyV1PodDisruptionBudget `json:"patchPolicyV1NamespacedPodDisruptionBudget,omitempty"`
	// partially update status of the specified PodDisruptionBudget
	//
	// Equivalent to PATCH /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status
	PatchPolicyV1NamespacedPodDisruptionBudgetStatus *IoK8sAPIPolicyV1PodDisruptionBudget `json:"patchPolicyV1NamespacedPodDisruptionBudgetStatus,omitempty"`
	// partially update the specified ClusterRole
	//
	// Equivalent to PATCH /apis/rbac.authorization.k8s.io/v1/clusterroles/{name}
	PatchRbacAuthorizationV1ClusterRole *IoK8sAPIRbacV1ClusterRole `json:"patchRbacAuthorizationV1ClusterRole,omitempty"`
	// partially update the specified ClusterRoleBinding
	//
	// Equivalent to PATCH /apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}
	PatchRbacAuthorizationV1ClusterRoleBinding *IoK8sAPIRbacV1ClusterRoleBinding `json:"patchRbacAuthorizationV1ClusterRoleBinding,omitempty"`
	// partially update the specified Role
	//
	// Equivalent to PATCH /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}
	PatchRbacAuthorizationV1NamespacedRole *IoK8sAPIRbacV1Role `json:"patchRbacAuthorizationV1NamespacedRole,omitempty"`
	// partially update the specified RoleBinding
	//
	// Equivalent to PATCH /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}
	PatchRbacAuthorizationV1NamespacedRoleBinding *IoK8sAPIRbacV1RoleBinding `json:"patchRbacAuthorizationV1NamespacedRoleBinding,omitempty"`
	// partially update the specified PodSchedulingContext
	//
	// Equivalent to PATCH /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}
	PatchResourceV1alpha2NamespacedPodSchedulingContext *IoK8sAPIResourceV1alpha2PodSchedulingContext `json:"patchResourceV1alpha2NamespacedPodSchedulingContext,omitempty"`
	// partially update status of the specified PodSchedulingContext
	//
	// Equivalent to PATCH /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}/status
	PatchResourceV1alpha2NamespacedPodSchedulingContextStatus *IoK8sAPIResourceV1alpha2PodSchedulingContext `json:"patchResourceV1alpha2NamespacedPodSchedulingContextStatus,omitempty"`
	// partially update the specified ResourceClaim
	//
	// Equivalent to PATCH /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}
	PatchResourceV1alpha2NamespacedResourceClaim *IoK8sAPIResourceV1alpha2ResourceClaim `json:"patchResourceV1alpha2NamespacedResourceClaim,omitempty"`
	// partially update status of the specified ResourceClaim
	//
	// Equivalent to PATCH /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}/status
	PatchResourceV1alpha2NamespacedResourceClaimStatus *IoK8sAPIResourceV1alpha2ResourceClaim `json:"patchResourceV1alpha2NamespacedResourceClaimStatus,omitempty"`
	// partially update the specified ResourceClaimTemplate
	//
	// Equivalent to PATCH /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}
	PatchResourceV1alpha2NamespacedResourceClaimTemplate *IoK8sAPIResourceV1alpha2ResourceClaimTemplate `json:"patchResourceV1alpha2NamespacedResourceClaimTemplate,omitempty"`
	// partially update the specified ResourceClass
	//
	// Equivalent to PATCH /apis/resource.k8s.io/v1alpha2/resourceclasses/{name}
	PatchResourceV1alpha2ResourceClass *IoK8sAPIResourceV1alpha2ResourceClass `json:"patchResourceV1alpha2ResourceClass,omitempty"`
	// partially update the specified PriorityClass
	//
	// Equivalent to PATCH /apis/scheduling.k8s.io/v1/priorityclasses/{name}
	PatchSchedulingV1PriorityClass *IoK8sAPISchedulingV1PriorityClass `json:"patchSchedulingV1PriorityClass,omitempty"`
	// partially update the specified CSIDriver
	//
	// Equivalent to PATCH /apis/storage.k8s.io/v1/csidrivers/{name}
	PatchStorageV1CSIDriver *IoK8sAPIStorageV1CSIDriver `json:"patchStorageV1CSIDriver,omitempty"`
	// partially update the specified CSINode
	//
	// Equivalent to PATCH /apis/storage.k8s.io/v1/csinodes/{name}
	PatchStorageV1CSINode *IoK8sAPIStorageV1CSINode `json:"patchStorageV1CSINode,omitempty"`
	// partially update the specified CSIStorageCapacity
	//
	// Equivalent to PATCH /apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities/{name}
	PatchStorageV1NamespacedCSIStorageCapacity *IoK8sAPIStorageV1CSIStorageCapacity `json:"patchStorageV1NamespacedCSIStorageCapacity,omitempty"`
	// partially update the specified StorageClass
	//
	// Equivalent to PATCH /apis/storage.k8s.io/v1/storageclasses/{name}
	PatchStorageV1StorageClass *IoK8sAPIStorageV1StorageClass `json:"patchStorageV1StorageClass,omitempty"`
	// partially update the specified VolumeAttachment
	//
	// Equivalent to PATCH /apis/storage.k8s.io/v1/volumeattachments/{name}
	PatchStorageV1VolumeAttachment *IoK8sAPIStorageV1VolumeAttachment `json:"patchStorageV1VolumeAttachment,omitempty"`
	// partially update status of the specified VolumeAttachment
	//
	// Equivalent to PATCH /apis/storage.k8s.io/v1/volumeattachments/{name}/status
	PatchStorageV1VolumeAttachmentStatus *IoK8sAPIStorageV1VolumeAttachment `json:"patchStorageV1VolumeAttachmentStatus,omitempty"`
	// replace the specified MutatingWebhookConfiguration
	//
	// Equivalent to PUT /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}
	ReplaceAdmissionregistrationV1MutatingWebhookConfiguration *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration `json:"replaceAdmissionregistrationV1MutatingWebhookConfiguration,omitempty"`
	// replace the specified ValidatingWebhookConfiguration
	//
	// Equivalent to PUT /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}
	ReplaceAdmissionregistrationV1ValidatingWebhookConfiguration *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration `json:"replaceAdmissionregistrationV1ValidatingWebhookConfiguration,omitempty"`
	// replace the specified ValidatingAdmissionPolicy
	//
	// Equivalent to PUT /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}
	ReplaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicy *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy `json:"replaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicy,omitempty"`
	// replace the specified ValidatingAdmissionPolicyBinding
	//
	// Equivalent to PUT /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}
	ReplaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding `json:"replaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding,omitempty"`
	// replace status of the specified ValidatingAdmissionPolicy
	//
	// Equivalent to PUT /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}/status
	ReplaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy `json:"replaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus,omitempty"`
	// replace the specified CustomResourceDefinition
	//
	// Equivalent to PUT /apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}
	ReplaceApiextensionsV1CustomResourceDefinition *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition `json:"replaceApiextensionsV1CustomResourceDefinition,omitempty"`
	// replace status of the specified CustomResourceDefinition
	//
	// Equivalent to PUT /apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status
	ReplaceApiextensionsV1CustomResourceDefinitionStatus *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition `json:"replaceApiextensionsV1CustomResourceDefinitionStatus,omitempty"`
	// replace the specified APIService
	//
	// Equivalent to PUT /apis/apiregistration.k8s.io/v1/apiservices/{name}
	ReplaceApiregistrationV1APIService *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService `json:"replaceApiregistrationV1APIService,omitempty"`
	// replace status of the specified APIService
	//
	// Equivalent to PUT /apis/apiregistration.k8s.io/v1/apiservices/{name}/status
	ReplaceApiregistrationV1APIServiceStatus *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService `json:"replaceApiregistrationV1APIServiceStatus,omitempty"`
	// replace the specified ControllerRevision
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}
	ReplaceAppsV1NamespacedControllerRevision *IoK8sAPIAppsV1ControllerRevision `json:"replaceAppsV1NamespacedControllerRevision,omitempty"`
	// replace the specified DaemonSet
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}
	ReplaceAppsV1NamespacedDaemonSet *IoK8sAPIAppsV1DaemonSet `json:"replaceAppsV1NamespacedDaemonSet,omitempty"`
	// replace status of the specified DaemonSet
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status
	ReplaceAppsV1NamespacedDaemonSetStatus *IoK8sAPIAppsV1DaemonSet `json:"replaceAppsV1NamespacedDaemonSetStatus,omitempty"`
	// replace the specified Deployment
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/deployments/{name}
	ReplaceAppsV1NamespacedDeployment *IoK8sAPIAppsV1Deployment `json:"replaceAppsV1NamespacedDeployment,omitempty"`
	// replace scale of the specified Deployment
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale
	ReplaceAppsV1NamespacedDeploymentScale *IoK8sAPIAutoscalingV1Scale `json:"replaceAppsV1NamespacedDeploymentScale,omitempty"`
	// replace status of the specified Deployment
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/deployments/{name}/status
	ReplaceAppsV1NamespacedDeploymentStatus *IoK8sAPIAppsV1Deployment `json:"replaceAppsV1NamespacedDeploymentStatus,omitempty"`
	// replace the specified ReplicaSet
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/replicasets/{name}
	ReplaceAppsV1NamespacedReplicaSet *IoK8sAPIAppsV1ReplicaSet `json:"replaceAppsV1NamespacedReplicaSet,omitempty"`
	// replace scale of the specified ReplicaSet
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale
	ReplaceAppsV1NamespacedReplicaSetScale *IoK8sAPIAutoscalingV1Scale `json:"replaceAppsV1NamespacedReplicaSetScale,omitempty"`
	// replace status of the specified ReplicaSet
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status
	ReplaceAppsV1NamespacedReplicaSetStatus *IoK8sAPIAppsV1ReplicaSet `json:"replaceAppsV1NamespacedReplicaSetStatus,omitempty"`
	// replace the specified StatefulSet
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}
	ReplaceAppsV1NamespacedStatefulSet *IoK8sAPIAppsV1StatefulSet `json:"replaceAppsV1NamespacedStatefulSet,omitempty"`
	// replace scale of the specified StatefulSet
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale
	ReplaceAppsV1NamespacedStatefulSetScale *IoK8sAPIAutoscalingV1Scale `json:"replaceAppsV1NamespacedStatefulSetScale,omitempty"`
	// replace status of the specified StatefulSet
	//
	// Equivalent to PUT /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status
	ReplaceAppsV1NamespacedStatefulSetStatus *IoK8sAPIAppsV1StatefulSet `json:"replaceAppsV1NamespacedStatefulSetStatus,omitempty"`
	// replace the specified HorizontalPodAutoscaler
	//
	// Equivalent to PUT /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}
	ReplaceAutoscalingV1NamespacedHorizontalPodAutoscaler *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler `json:"replaceAutoscalingV1NamespacedHorizontalPodAutoscaler,omitempty"`
	// replace status of the specified HorizontalPodAutoscaler
	//
	// Equivalent to PUT /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
	ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler `json:"replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus,omitempty"`
	// replace the specified HorizontalPodAutoscaler
	//
	// Equivalent to PUT /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}
	ReplaceAutoscalingV2NamespacedHorizontalPodAutoscaler *IoK8sAPIAutoscalingV2HorizontalPodAutoscaler `json:"replaceAutoscalingV2NamespacedHorizontalPodAutoscaler,omitempty"`
	// replace status of the specified HorizontalPodAutoscaler
	//
	// Equivalent to PUT /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
	ReplaceAutoscalingV2NamespacedHorizontalPodAutoscalerStatus *IoK8sAPIAutoscalingV2HorizontalPodAutoscaler `json:"replaceAutoscalingV2NamespacedHorizontalPodAutoscalerStatus,omitempty"`
	// replace the specified CronJob
	//
	// Equivalent to PUT /apis/batch/v1/namespaces/{namespace}/cronjobs/{name}
	ReplaceBatchV1NamespacedCronJob *IoK8sAPIBatchV1CronJob `json:"replaceBatchV1NamespacedCronJob,omitempty"`
	// replace status of the specified CronJob
	//
	// Equivalent to PUT /apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status
	ReplaceBatchV1NamespacedCronJobStatus *IoK8sAPIBatchV1CronJob `json:"replaceBatchV1NamespacedCronJobStatus,omitempty"`
	// replace the specified Job
	//
	// Equivalent to PUT /apis/batch/v1/namespaces/{namespace}/jobs/{name}
	ReplaceBatchV1NamespacedJob *IoK8sAPIBatchV1Job `json:"replaceBatchV1NamespacedJob,omitempty"`
	// replace status of the specified Job
	//
	// Equivalent to PUT /apis/batch/v1/namespaces/{namespace}/jobs/{name}/status
	ReplaceBatchV1NamespacedJobStatus *IoK8sAPIBatchV1Job `json:"replaceBatchV1NamespacedJobStatus,omitempty"`
	// replace the specified CertificateSigningRequest
	//
	// Equivalent to PUT /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}
	ReplaceCertificatesV1CertificateSigningRequest *IoK8sAPICertificatesV1CertificateSigningRequest `json:"replaceCertificatesV1CertificateSigningRequest,omitempty"`
	// replace approval of the specified CertificateSigningRequest
	//
	// Equivalent to PUT /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval
	ReplaceCertificatesV1CertificateSigningRequestApproval *IoK8sAPICertificatesV1CertificateSigningRequest `json:"replaceCertificatesV1CertificateSigningRequestApproval,omitempty"`
	// replace status of the specified CertificateSigningRequest
	//
	// Equivalent to PUT /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status
	ReplaceCertificatesV1CertificateSigningRequestStatus *IoK8sAPICertificatesV1CertificateSigningRequest `json:"replaceCertificatesV1CertificateSigningRequestStatus,omitempty"`
	// replace the specified ClusterTrustBundle
	//
	// Equivalent to PUT /apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}
	ReplaceCertificatesV1alpha1ClusterTrustBundle *IoK8sAPICertificatesV1alpha1ClusterTrustBundle `json:"replaceCertificatesV1alpha1ClusterTrustBundle,omitempty"`
	// replace the specified Lease
	//
	// Equivalent to PUT /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}
	ReplaceCoordinationV1NamespacedLease *IoK8sAPICoordinationV1Lease `json:"replaceCoordinationV1NamespacedLease,omitempty"`
	// replace the specified Namespace
	//
	// Equivalent to PUT /api/v1/namespaces/{name}
	ReplaceCoreV1Namespace *IoK8sAPICoreV1Namespace `json:"replaceCoreV1Namespace,omitempty"`
	// replace finalize of the specified Namespace
	//
	// Equivalent to PUT /api/v1/namespaces/{name}/finalize
	ReplaceCoreV1NamespaceFinalize *IoK8sAPICoreV1Namespace `json:"replaceCoreV1NamespaceFinalize,omitempty"`
	// replace status of the specified Namespace
	//
	// Equivalent to PUT /api/v1/namespaces/{name}/status
	ReplaceCoreV1NamespaceStatus *IoK8sAPICoreV1Namespace `json:"replaceCoreV1NamespaceStatus,omitempty"`
	// replace the specified ConfigMap
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/configmaps/{name}
	ReplaceCoreV1NamespacedConfigMap *IoK8sAPICoreV1ConfigMap `json:"replaceCoreV1NamespacedConfigMap,omitempty"`
	// replace the specified Endpoints
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/endpoints/{name}
	ReplaceCoreV1NamespacedEndpoints *IoK8sAPICoreV1Endpoints `json:"replaceCoreV1NamespacedEndpoints,omitempty"`
	// replace the specified Event
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/events/{name}
	ReplaceCoreV1NamespacedEvent *IoK8sAPICoreV1Event `json:"replaceCoreV1NamespacedEvent,omitempty"`
	// replace the specified LimitRange
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/limitranges/{name}
	ReplaceCoreV1NamespacedLimitRange *IoK8sAPICoreV1LimitRange `json:"replaceCoreV1NamespacedLimitRange,omitempty"`
	// replace the specified PersistentVolumeClaim
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}
	ReplaceCoreV1NamespacedPersistentVolumeClaim *IoK8sAPICoreV1PersistentVolumeClaim `json:"replaceCoreV1NamespacedPersistentVolumeClaim,omitempty"`
	// replace status of the specified PersistentVolumeClaim
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status
	ReplaceCoreV1NamespacedPersistentVolumeClaimStatus *IoK8sAPICoreV1PersistentVolumeClaim `json:"replaceCoreV1NamespacedPersistentVolumeClaimStatus,omitempty"`
	// replace the specified Pod
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/pods/{name}
	ReplaceCoreV1NamespacedPod *IoK8sAPICoreV1Pod `json:"replaceCoreV1NamespacedPod,omitempty"`
	// replace ephemeralcontainers of the specified Pod
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers
	ReplaceCoreV1NamespacedPodEphemeralcontainers *IoK8sAPICoreV1Pod `json:"replaceCoreV1NamespacedPodEphemeralcontainers,omitempty"`
	// replace status of the specified Pod
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/pods/{name}/status
	ReplaceCoreV1NamespacedPodStatus *IoK8sAPICoreV1Pod `json:"replaceCoreV1NamespacedPodStatus,omitempty"`
	// replace the specified PodTemplate
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/podtemplates/{name}
	ReplaceCoreV1NamespacedPodTemplate *IoK8sAPICoreV1PodTemplate `json:"replaceCoreV1NamespacedPodTemplate,omitempty"`
	// replace the specified ReplicationController
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/replicationcontrollers/{name}
	ReplaceCoreV1NamespacedReplicationController *IoK8sAPICoreV1ReplicationController `json:"replaceCoreV1NamespacedReplicationController,omitempty"`
	// replace scale of the specified ReplicationController
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale
	ReplaceCoreV1NamespacedReplicationControllerScale *IoK8sAPIAutoscalingV1Scale `json:"replaceCoreV1NamespacedReplicationControllerScale,omitempty"`
	// replace status of the specified ReplicationController
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status
	ReplaceCoreV1NamespacedReplicationControllerStatus *IoK8sAPICoreV1ReplicationController `json:"replaceCoreV1NamespacedReplicationControllerStatus,omitempty"`
	// replace the specified ResourceQuota
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/resourcequotas/{name}
	ReplaceCoreV1NamespacedResourceQuota *IoK8sAPICoreV1ResourceQuota `json:"replaceCoreV1NamespacedResourceQuota,omitempty"`
	// replace status of the specified ResourceQuota
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/resourcequotas/{name}/status
	ReplaceCoreV1NamespacedResourceQuotaStatus *IoK8sAPICoreV1ResourceQuota `json:"replaceCoreV1NamespacedResourceQuotaStatus,omitempty"`
	// replace the specified Secret
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/secrets/{name}
	ReplaceCoreV1NamespacedSecret *IoK8sAPICoreV1Secret `json:"replaceCoreV1NamespacedSecret,omitempty"`
	// replace the specified Service
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/services/{name}
	ReplaceCoreV1NamespacedService *IoK8sAPICoreV1Service `json:"replaceCoreV1NamespacedService,omitempty"`
	// replace the specified ServiceAccount
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/serviceaccounts/{name}
	ReplaceCoreV1NamespacedServiceAccount *IoK8sAPICoreV1ServiceAccount `json:"replaceCoreV1NamespacedServiceAccount,omitempty"`
	// replace status of the specified Service
	//
	// Equivalent to PUT /api/v1/namespaces/{namespace}/services/{name}/status
	ReplaceCoreV1NamespacedServiceStatus *IoK8sAPICoreV1Service `json:"replaceCoreV1NamespacedServiceStatus,omitempty"`
	// replace the specified Node
	//
	// Equivalent to PUT /api/v1/nodes/{name}
	ReplaceCoreV1Node *IoK8sAPICoreV1Node `json:"replaceCoreV1Node,omitempty"`
	// replace status of the specified Node
	//
	// Equivalent to PUT /api/v1/nodes/{name}/status
	ReplaceCoreV1NodeStatus *IoK8sAPICoreV1Node `json:"replaceCoreV1NodeStatus,omitempty"`
	// replace the specified PersistentVolume
	//
	// Equivalent to PUT /api/v1/persistentvolumes/{name}
	ReplaceCoreV1PersistentVolume *IoK8sAPICoreV1PersistentVolume `json:"replaceCoreV1PersistentVolume,omitempty"`
	// replace status of the specified PersistentVolume
	//
	// Equivalent to PUT /api/v1/persistentvolumes/{name}/status
	ReplaceCoreV1PersistentVolumeStatus *IoK8sAPICoreV1PersistentVolume `json:"replaceCoreV1PersistentVolumeStatus,omitempty"`
	// replace the specified EndpointSlice
	//
	// Equivalent to PUT /apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}
	ReplaceDiscoveryV1NamespacedEndpointSlice *IoK8sAPIDiscoveryV1EndpointSlice `json:"replaceDiscoveryV1NamespacedEndpointSlice,omitempty"`
	// replace the specified Event
	//
	// Equivalent to PUT /apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}
	ReplaceEventsV1NamespacedEvent *IoK8sAPIEventsV1Event `json:"replaceEventsV1NamespacedEvent,omitempty"`
	// replace the specified FlowSchema
	//
	// Equivalent to PUT /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}
	ReplaceFlowcontrolApiserverV1beta2FlowSchema *IoK8sAPIFlowcontrolV1beta2FlowSchema `json:"replaceFlowcontrolApiserverV1beta2FlowSchema,omitempty"`
	// replace status of the specified FlowSchema
	//
	// Equivalent to PUT /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}/status
	ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatus *IoK8sAPIFlowcontrolV1beta2FlowSchema `json:"replaceFlowcontrolApiserverV1beta2FlowSchemaStatus,omitempty"`
	// replace the specified PriorityLevelConfiguration
	//
	// Equivalent to PUT /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}
	ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration `json:"replaceFlowcontrolApiserverV1beta2PriorityLevelConfiguration,omitempty"`
	// replace status of the specified PriorityLevelConfiguration
	//
	// Equivalent to PUT /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}/status
	ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration `json:"replaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus,omitempty"`
	// replace the specified FlowSchema
	//
	// Equivalent to PUT /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}
	ReplaceFlowcontrolApiserverV1beta3FlowSchema *IoK8sAPIFlowcontrolV1beta3FlowSchema `json:"replaceFlowcontrolApiserverV1beta3FlowSchema,omitempty"`
	// replace status of the specified FlowSchema
	//
	// Equivalent to PUT /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}/status
	ReplaceFlowcontrolApiserverV1beta3FlowSchemaStatus *IoK8sAPIFlowcontrolV1beta3FlowSchema `json:"replaceFlowcontrolApiserverV1beta3FlowSchemaStatus,omitempty"`
	// replace the specified PriorityLevelConfiguration
	//
	// Equivalent to PUT /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}
	ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration `json:"replaceFlowcontrolApiserverV1beta3PriorityLevelConfiguration,omitempty"`
	// replace status of the specified PriorityLevelConfiguration
	//
	// Equivalent to PUT /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}/status
	ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration `json:"replaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus,omitempty"`
	// replace the specified StorageVersion
	//
	// Equivalent to PUT /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}
	ReplaceInternalApiserverV1alpha1StorageVersion *IoK8sAPIApiserverinternalV1alpha1StorageVersion `json:"replaceInternalApiserverV1alpha1StorageVersion,omitempty"`
	// replace status of the specified StorageVersion
	//
	// Equivalent to PUT /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}/status
	ReplaceInternalApiserverV1alpha1StorageVersionStatus *IoK8sAPIApiserverinternalV1alpha1StorageVersion `json:"replaceInternalApiserverV1alpha1StorageVersionStatus,omitempty"`
	// replace the specified IngressClass
	//
	// Equivalent to PUT /apis/networking.k8s.io/v1/ingressclasses/{name}
	ReplaceNetworkingV1IngressClass *IoK8sAPINetworkingV1IngressClass `json:"replaceNetworkingV1IngressClass,omitempty"`
	// replace the specified Ingress
	//
	// Equivalent to PUT /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}
	ReplaceNetworkingV1NamespacedIngress *IoK8sAPINetworkingV1Ingress `json:"replaceNetworkingV1NamespacedIngress,omitempty"`
	// replace status of the specified Ingress
	//
	// Equivalent to PUT /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status
	ReplaceNetworkingV1NamespacedIngressStatus *IoK8sAPINetworkingV1Ingress `json:"replaceNetworkingV1NamespacedIngressStatus,omitempty"`
	// replace the specified NetworkPolicy
	//
	// Equivalent to PUT /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}
	ReplaceNetworkingV1NamespacedNetworkPolicy *IoK8sAPINetworkingV1NetworkPolicy `json:"replaceNetworkingV1NamespacedNetworkPolicy,omitempty"`
	// replace status of the specified NetworkPolicy
	//
	// Equivalent to PUT /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}/status
	ReplaceNetworkingV1NamespacedNetworkPolicyStatus *IoK8sAPINetworkingV1NetworkPolicy `json:"replaceNetworkingV1NamespacedNetworkPolicyStatus,omitempty"`
	// replace the specified ClusterCIDR
	//
	// Equivalent to PUT /apis/networking.k8s.io/v1alpha1/clustercidrs/{name}
	ReplaceNetworkingV1alpha1ClusterCidr *IoK8sAPINetworkingV1alpha1ClusterCidr `json:"replaceNetworkingV1alpha1ClusterCIDR,omitempty"`
	// replace the specified IPAddress
	//
	// Equivalent to PUT /apis/networking.k8s.io/v1alpha1/ipaddresses/{name}
	ReplaceNetworkingV1alpha1IPAddress *IoK8sAPINetworkingV1alpha1IPAddress `json:"replaceNetworkingV1alpha1IPAddress,omitempty"`
	// replace the specified RuntimeClass
	//
	// Equivalent to PUT /apis/node.k8s.io/v1/runtimeclasses/{name}
	ReplaceNodeV1RuntimeClass *IoK8sAPINodeV1RuntimeClass `json:"replaceNodeV1RuntimeClass,omitempty"`
	// replace the specified PodDisruptionBudget
	//
	// Equivalent to PUT /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}
	ReplacePolicyV1NamespacedPodDisruptionBudget *IoK8sAPIPolicyV1PodDisruptionBudget `json:"replacePolicyV1NamespacedPodDisruptionBudget,omitempty"`
	// replace status of the specified PodDisruptionBudget
	//
	// Equivalent to PUT /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status
	ReplacePolicyV1NamespacedPodDisruptionBudgetStatus *IoK8sAPIPolicyV1PodDisruptionBudget `json:"replacePolicyV1NamespacedPodDisruptionBudgetStatus,omitempty"`
	// replace the specified ClusterRole
	//
	// Equivalent to PUT /apis/rbac.authorization.k8s.io/v1/clusterroles/{name}
	ReplaceRbacAuthorizationV1ClusterRole *IoK8sAPIRbacV1ClusterRole `json:"replaceRbacAuthorizationV1ClusterRole,omitempty"`
	// replace the specified ClusterRoleBinding
	//
	// Equivalent to PUT /apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}
	ReplaceRbacAuthorizationV1ClusterRoleBinding *IoK8sAPIRbacV1ClusterRoleBinding `json:"replaceRbacAuthorizationV1ClusterRoleBinding,omitempty"`
	// replace the specified Role
	//
	// Equivalent to PUT /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}
	ReplaceRbacAuthorizationV1NamespacedRole *IoK8sAPIRbacV1Role `json:"replaceRbacAuthorizationV1NamespacedRole,omitempty"`
	// replace the specified RoleBinding
	//
	// Equivalent to PUT /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}
	ReplaceRbacAuthorizationV1NamespacedRoleBinding *IoK8sAPIRbacV1RoleBinding `json:"replaceRbacAuthorizationV1NamespacedRoleBinding,omitempty"`
	// replace the specified PodSchedulingContext
	//
	// Equivalent to PUT /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}
	ReplaceResourceV1alpha2NamespacedPodSchedulingContext *IoK8sAPIResourceV1alpha2PodSchedulingContext `json:"replaceResourceV1alpha2NamespacedPodSchedulingContext,omitempty"`
	// replace status of the specified PodSchedulingContext
	//
	// Equivalent to PUT /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}/status
	ReplaceResourceV1alpha2NamespacedPodSchedulingContextStatus *IoK8sAPIResourceV1alpha2PodSchedulingContext `json:"replaceResourceV1alpha2NamespacedPodSchedulingContextStatus,omitempty"`
	// replace the specified ResourceClaim
	//
	// Equivalent to PUT /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}
	ReplaceResourceV1alpha2NamespacedResourceClaim *IoK8sAPIResourceV1alpha2ResourceClaim `json:"replaceResourceV1alpha2NamespacedResourceClaim,omitempty"`
	// replace status of the specified ResourceClaim
	//
	// Equivalent to PUT /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}/status
	ReplaceResourceV1alpha2NamespacedResourceClaimStatus *IoK8sAPIResourceV1alpha2ResourceClaim `json:"replaceResourceV1alpha2NamespacedResourceClaimStatus,omitempty"`
	// replace the specified ResourceClaimTemplate
	//
	// Equivalent to PUT /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}
	ReplaceResourceV1alpha2NamespacedResourceClaimTemplate *IoK8sAPIResourceV1alpha2ResourceClaimTemplate `json:"replaceResourceV1alpha2NamespacedResourceClaimTemplate,omitempty"`
	// replace the specified ResourceClass
	//
	// Equivalent to PUT /apis/resource.k8s.io/v1alpha2/resourceclasses/{name}
	ReplaceResourceV1alpha2ResourceClass *IoK8sAPIResourceV1alpha2ResourceClass `json:"replaceResourceV1alpha2ResourceClass,omitempty"`
	// replace the specified PriorityClass
	//
	// Equivalent to PUT /apis/scheduling.k8s.io/v1/priorityclasses/{name}
	ReplaceSchedulingV1PriorityClass *IoK8sAPISchedulingV1PriorityClass `json:"replaceSchedulingV1PriorityClass,omitempty"`
	// replace the specified CSIDriver
	//
	// Equivalent to PUT /apis/storage.k8s.io/v1/csidrivers/{name}
	ReplaceStorageV1CSIDriver *IoK8sAPIStorageV1CSIDriver `json:"replaceStorageV1CSIDriver,omitempty"`
	// replace the specified CSINode
	//
	// Equivalent to PUT /apis/storage.k8s.io/v1/csinodes/{name}
	ReplaceStorageV1CSINode *IoK8sAPIStorageV1CSINode `json:"replaceStorageV1CSINode,omitempty"`
	// replace the specified CSIStorageCapacity
	//
	// Equivalent to PUT /apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities/{name}
	ReplaceStorageV1NamespacedCSIStorageCapacity *IoK8sAPIStorageV1CSIStorageCapacity `json:"replaceStorageV1NamespacedCSIStorageCapacity,omitempty"`
	// replace the specified StorageClass
	//
	// Equivalent to PUT /apis/storage.k8s.io/v1/storageclasses/{name}
	ReplaceStorageV1StorageClass *IoK8sAPIStorageV1StorageClass `json:"replaceStorageV1StorageClass,omitempty"`
	// replace the specified VolumeAttachment
	//
	// Equivalent to PUT /apis/storage.k8s.io/v1/volumeattachments/{name}
	ReplaceStorageV1VolumeAttachment *IoK8sAPIStorageV1VolumeAttachment `json:"replaceStorageV1VolumeAttachment,omitempty"`
	// replace status of the specified VolumeAttachment
	//
	// Equivalent to PUT /apis/storage.k8s.io/v1/volumeattachments/{name}/status
	ReplaceStorageV1VolumeAttachmentStatus *IoK8sAPIStorageV1VolumeAttachment `json:"replaceStorageV1VolumeAttachmentStatus,omitempty"`
}

// Warning: Not every request will work with this viewer type
type ViewerAnyAuth struct {
	// connect GET requests to attach of Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/attach
	APIV1NamespacePodAttach *string `json:"apiV1NamespacePodAttach,omitempty"`
	// connect GET requests to exec of Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/exec
	APIV1NamespacePodExec *string `json:"apiV1NamespacePodExec,omitempty"`
	// read log of the specified Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/log
	APIV1NamespacePodLog *string `json:"apiV1NamespacePodLog,omitempty"`
	// connect GET requests to portforward of Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/portforward
	APIV1NamespacePodPortforward *string `json:"apiV1NamespacePodPortforward,omitempty"`
	// connect GET requests to proxy of Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/proxy
	APIV1NamespacePodProxy *string `json:"apiV1NamespacePodProxy,omitempty"`
	// connect GET requests to proxy of Service
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/services/{name}/proxy
	APIV1NamespaceServiceProxy *string `json:"apiV1NamespaceServiceProxy,omitempty"`
	// connect GET requests to proxy of Node
	//
	// Equivalent to GET /api/v1/nodes/{name}/proxy
	APIV1NodeProxy *string `json:"apiV1NodeProxy,omitempty"`
	// connect GET requests to proxy of Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
	ConnectCoreV1GetNamespacedPodProxyWithPath *string `json:"connectCoreV1GetNamespacedPodProxyWithPath,omitempty"`
	// connect GET requests to proxy of Service
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
	ConnectCoreV1GetNamespacedServiceProxyWithPath *string `json:"connectCoreV1GetNamespacedServiceProxyWithPath,omitempty"`
	// connect GET requests to proxy of Node
	//
	// Equivalent to GET /api/v1/nodes/{name}/proxy/{path}
	ConnectCoreV1GetNodeProxyWithPath *string `json:"connectCoreV1GetNodeProxyWithPath,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/
	GetAdmissionregistrationV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAdmissionregistrationV1APIResources,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/
	GetAdmissionregistrationV1alpha1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAdmissionregistrationV1alpha1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/apiextensions.k8s.io/
	GetApiextensionsAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getApiextensionsAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/apiextensions.k8s.io/v1/
	GetApiextensionsV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getApiextensionsV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/apiregistration.k8s.io/
	GetApiregistrationAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getApiregistrationAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/apiregistration.k8s.io/v1/
	GetApiregistrationV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getApiregistrationV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/apps/
	GetAppsAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getAppsAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/apps/v1/
	GetAppsV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAppsV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/authentication.k8s.io/
	GetAuthenticationAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getAuthenticationAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/authentication.k8s.io/v1/
	GetAuthenticationV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAuthenticationV1APIResources,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/authentication.k8s.io/v1alpha1/
	GetAuthenticationV1alpha1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAuthenticationV1alpha1APIResources,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/authentication.k8s.io/v1beta1/
	GetAuthenticationV1beta1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAuthenticationV1beta1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/authorization.k8s.io/
	GetAuthorizationAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getAuthorizationAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/authorization.k8s.io/v1/
	GetAuthorizationV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAuthorizationV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/autoscaling/
	GetAutoscalingAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getAutoscalingAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/autoscaling/v1/
	GetAutoscalingV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAutoscalingV1APIResources,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/autoscaling/v2/
	GetAutoscalingV2APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAutoscalingV2APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/batch/
	GetBatchAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getBatchAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/batch/v1/
	GetBatchV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getBatchV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/certificates.k8s.io/
	GetCertificatesAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getCertificatesAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1/
	GetCertificatesV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getCertificatesV1APIResources,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1alpha1/
	GetCertificatesV1alpha1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getCertificatesV1alpha1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/coordination.k8s.io/
	GetCoordinationAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getCoordinationAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/coordination.k8s.io/v1/
	GetCoordinationV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getCoordinationV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/discovery.k8s.io/
	GetDiscoveryAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getDiscoveryAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/discovery.k8s.io/v1/
	GetDiscoveryV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getDiscoveryV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/events.k8s.io/
	GetEventsAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getEventsAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/events.k8s.io/v1/
	GetEventsV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getEventsV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/
	GetFlowcontrolApiserverAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getFlowcontrolApiserverAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/
	GetFlowcontrolApiserverV1beta2APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getFlowcontrolApiserverV1beta2APIResources,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/
	GetFlowcontrolApiserverV1beta3APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getFlowcontrolApiserverV1beta3APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/internal.apiserver.k8s.io/
	GetInternalApiserverAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getInternalApiserverAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/internal.apiserver.k8s.io/v1alpha1/
	GetInternalApiserverV1alpha1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getInternalApiserverV1alpha1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/networking.k8s.io/
	GetNetworkingAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getNetworkingAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/
	GetNetworkingV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getNetworkingV1APIResources,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/
	GetNetworkingV1alpha1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getNetworkingV1alpha1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/node.k8s.io/
	GetNodeAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getNodeAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/node.k8s.io/v1/
	GetNodeV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getNodeV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/policy/
	GetPolicyAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getPolicyAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/policy/v1/
	GetPolicyV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getPolicyV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/
	GetRbacAuthorizationAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getRbacAuthorizationAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/
	GetRbacAuthorizationV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getRbacAuthorizationV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/resource.k8s.io/
	GetResourceAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getResourceAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/
	GetResourceV1alpha2APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getResourceV1alpha2APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/scheduling.k8s.io/
	GetSchedulingAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getSchedulingAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/scheduling.k8s.io/v1/
	GetSchedulingV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getSchedulingV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/storage.k8s.io/
	GetStorageAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getStorageAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/
	GetStorageV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getStorageV1APIResources,omitempty"`
	// read the specified MutatingWebhookConfiguration
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}
	IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration `json:"ioK8sApiAdmissionregistrationV1MutatingWebhookConfiguration,omitempty"`
	// list or watch objects of kind MutatingWebhookConfiguration
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations
	IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList `json:"ioK8sApiAdmissionregistrationV1MutatingWebhookConfigurationList,omitempty"`
	// read the specified ValidatingWebhookConfiguration
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}
	IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration `json:"ioK8sApiAdmissionregistrationV1ValidatingWebhookConfiguration,omitempty"`
	// list or watch objects of kind ValidatingWebhookConfiguration
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations
	IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList `json:"ioK8sApiAdmissionregistrationV1ValidatingWebhookConfigurationList,omitempty"`
	// read the specified ValidatingAdmissionPolicy
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}
	IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy `json:"ioK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicy,omitempty"`
	// read the specified ValidatingAdmissionPolicyBinding
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}
	IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding `json:"ioK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding,omitempty"`
	// list or watch objects of kind ValidatingAdmissionPolicyBinding
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings
	IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingList *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingList `json:"ioK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingList,omitempty"`
	// list or watch objects of kind ValidatingAdmissionPolicy
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies
	IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyList *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyList `json:"ioK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyList,omitempty"`
	// read the specified StorageVersion
	//
	// Equivalent to GET /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}
	IoK8sAPIApiserverinternalV1alpha1StorageVersion *IoK8sAPIApiserverinternalV1alpha1StorageVersion `json:"ioK8sApiApiserverinternalV1alpha1StorageVersion,omitempty"`
	// list or watch objects of kind StorageVersion
	//
	// Equivalent to GET /apis/internal.apiserver.k8s.io/v1alpha1/storageversions
	IoK8sAPIApiserverinternalV1alpha1StorageVersionList *IoK8sAPIApiserverinternalV1alpha1StorageVersionList `json:"ioK8sApiApiserverinternalV1alpha1StorageVersionList,omitempty"`
	// read the specified ControllerRevision
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}
	IoK8sAPIAppsV1ControllerRevision *IoK8sAPIAppsV1ControllerRevision `json:"ioK8sApiAppsV1ControllerRevision,omitempty"`
	// list or watch objects of kind ControllerRevision
	//
	// Equivalent to GET /apis/apps/v1/controllerrevisions
	IoK8sAPIAppsV1ControllerRevisionList *IoK8sAPIAppsV1ControllerRevisionList `json:"ioK8sApiAppsV1ControllerRevisionList,omitempty"`
	// read the specified DaemonSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}
	IoK8sAPIAppsV1DaemonSet *IoK8sAPIAppsV1DaemonSet `json:"ioK8sApiAppsV1DaemonSet,omitempty"`
	// list or watch objects of kind DaemonSet
	//
	// Equivalent to GET /apis/apps/v1/daemonsets
	IoK8sAPIAppsV1DaemonSetList *IoK8sAPIAppsV1DaemonSetList `json:"ioK8sApiAppsV1DaemonSetList,omitempty"`
	// read the specified Deployment
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/deployments/{name}
	IoK8sAPIAppsV1Deployment *IoK8sAPIAppsV1Deployment `json:"ioK8sApiAppsV1Deployment,omitempty"`
	// list or watch objects of kind Deployment
	//
	// Equivalent to GET /apis/apps/v1/deployments
	IoK8sAPIAppsV1DeploymentList *IoK8sAPIAppsV1DeploymentList `json:"ioK8sApiAppsV1DeploymentList,omitempty"`
	// read the specified ReplicaSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/replicasets/{name}
	IoK8sAPIAppsV1ReplicaSet *IoK8sAPIAppsV1ReplicaSet `json:"ioK8sApiAppsV1ReplicaSet,omitempty"`
	// list or watch objects of kind ReplicaSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/replicasets
	IoK8sAPIAppsV1ReplicaSetList *IoK8sAPIAppsV1ReplicaSetList `json:"ioK8sApiAppsV1ReplicaSetList,omitempty"`
	// read the specified StatefulSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}
	IoK8sAPIAppsV1StatefulSet *IoK8sAPIAppsV1StatefulSet `json:"ioK8sApiAppsV1StatefulSet,omitempty"`
	// list or watch objects of kind StatefulSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/statefulsets
	IoK8sAPIAppsV1StatefulSetList *IoK8sAPIAppsV1StatefulSetList `json:"ioK8sApiAppsV1StatefulSetList,omitempty"`
	// read the specified HorizontalPodAutoscaler
	//
	// Equivalent to GET /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}
	IoK8sAPIAutoscalingV1HorizontalPodAutoscaler *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler `json:"ioK8sApiAutoscalingV1HorizontalPodAutoscaler,omitempty"`
	// list or watch objects of kind HorizontalPodAutoscaler
	//
	// Equivalent to GET /apis/autoscaling/v1/horizontalpodautoscalers
	IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList `json:"ioK8sApiAutoscalingV1HorizontalPodAutoscalerList,omitempty"`
	// read scale of the specified ReplicationController
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale
	IoK8sAPIAutoscalingV1Scale *IoK8sAPIAutoscalingV1Scale `json:"ioK8sApiAutoscalingV1Scale,omitempty"`
	// read the specified HorizontalPodAutoscaler
	//
	// Equivalent to GET /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}
	IoK8sAPIAutoscalingV2HorizontalPodAutoscaler *IoK8sAPIAutoscalingV2HorizontalPodAutoscaler `json:"ioK8sApiAutoscalingV2HorizontalPodAutoscaler,omitempty"`
	// list or watch objects of kind HorizontalPodAutoscaler
	//
	// Equivalent to GET /apis/autoscaling/v2/horizontalpodautoscalers
	IoK8sAPIAutoscalingV2HorizontalPodAutoscalerList *IoK8sAPIAutoscalingV2HorizontalPodAutoscalerList `json:"ioK8sApiAutoscalingV2HorizontalPodAutoscalerList,omitempty"`
	// read the specified CronJob
	//
	// Equivalent to GET /apis/batch/v1/namespaces/{namespace}/cronjobs/{name}
	IoK8sAPIBatchV1CronJob *IoK8sAPIBatchV1CronJob `json:"ioK8sApiBatchV1CronJob,omitempty"`
	// list or watch objects of kind CronJob
	//
	// Equivalent to GET /apis/batch/v1/cronjobs
	IoK8sAPIBatchV1CronJobList *IoK8sAPIBatchV1CronJobList `json:"ioK8sApiBatchV1CronJobList,omitempty"`
	// read the specified Job
	//
	// Equivalent to GET /apis/batch/v1/namespaces/{namespace}/jobs/{name}
	IoK8sAPIBatchV1Job *IoK8sAPIBatchV1Job `json:"ioK8sApiBatchV1Job,omitempty"`
	// list or watch objects of kind Job
	//
	// Equivalent to GET /apis/batch/v1/jobs
	IoK8sAPIBatchV1JobList *IoK8sAPIBatchV1JobList `json:"ioK8sApiBatchV1JobList,omitempty"`
	// read the specified CertificateSigningRequest
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}
	IoK8sAPICertificatesV1CertificateSigningRequest *IoK8sAPICertificatesV1CertificateSigningRequest `json:"ioK8sApiCertificatesV1CertificateSigningRequest,omitempty"`
	// list or watch objects of kind CertificateSigningRequest
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1/certificatesigningrequests
	IoK8sAPICertificatesV1CertificateSigningRequestList *IoK8sAPICertificatesV1CertificateSigningRequestList `json:"ioK8sApiCertificatesV1CertificateSigningRequestList,omitempty"`
	// read the specified ClusterTrustBundle
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}
	IoK8sAPICertificatesV1alpha1ClusterTrustBundle *IoK8sAPICertificatesV1alpha1ClusterTrustBundle `json:"ioK8sApiCertificatesV1alpha1ClusterTrustBundle,omitempty"`
	// list or watch objects of kind ClusterTrustBundle
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1alpha1/clustertrustbundles
	IoK8sAPICertificatesV1alpha1ClusterTrustBundleList *IoK8sAPICertificatesV1alpha1ClusterTrustBundleList `json:"ioK8sApiCertificatesV1alpha1ClusterTrustBundleList,omitempty"`
	// read the specified Lease
	//
	// Equivalent to GET /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}
	IoK8sAPICoordinationV1Lease *IoK8sAPICoordinationV1Lease `json:"ioK8sApiCoordinationV1Lease,omitempty"`
	// list or watch objects of kind Lease
	//
	// Equivalent to GET /apis/coordination.k8s.io/v1/leases
	IoK8sAPICoordinationV1LeaseList *IoK8sAPICoordinationV1LeaseList `json:"ioK8sApiCoordinationV1LeaseList,omitempty"`
	// read the specified ComponentStatus
	//
	// Equivalent to GET /api/v1/componentstatuses/{name}
	IoK8sAPICoreV1ComponentStatus *IoK8sAPICoreV1ComponentStatus `json:"ioK8sApiCoreV1ComponentStatus,omitempty"`
	// list objects of kind ComponentStatus
	//
	// Equivalent to GET /api/v1/componentstatuses
	IoK8sAPICoreV1ComponentStatusList *IoK8sAPICoreV1ComponentStatusList `json:"ioK8sApiCoreV1ComponentStatusList,omitempty"`
	// read the specified ConfigMap
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/configmaps/{name}
	IoK8sAPICoreV1ConfigMap *IoK8sAPICoreV1ConfigMap `json:"ioK8sApiCoreV1ConfigMap,omitempty"`
	// list or watch objects of kind ConfigMap
	//
	// Equivalent to GET /api/v1/configmaps
	IoK8sAPICoreV1ConfigMapList *IoK8sAPICoreV1ConfigMapList `json:"ioK8sApiCoreV1ConfigMapList,omitempty"`
	// read the specified Endpoints
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/endpoints/{name}
	IoK8sAPICoreV1Endpoints *IoK8sAPICoreV1Endpoints `json:"ioK8sApiCoreV1Endpoints,omitempty"`
	// list or watch objects of kind Endpoints
	//
	// Equivalent to GET /api/v1/endpoints
	IoK8sAPICoreV1EndpointsList *IoK8sAPICoreV1EndpointsList `json:"ioK8sApiCoreV1EndpointsList,omitempty"`
	// read the specified Event
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/events/{name}
	IoK8sAPICoreV1Event *IoK8sAPICoreV1Event `json:"ioK8sApiCoreV1Event,omitempty"`
	// list or watch objects of kind Event
	//
	// Equivalent to GET /api/v1/events
	IoK8sAPICoreV1EventList *IoK8sAPICoreV1EventList `json:"ioK8sApiCoreV1EventList,omitempty"`
	// read the specified LimitRange
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/limitranges/{name}
	IoK8sAPICoreV1LimitRange *IoK8sAPICoreV1LimitRange `json:"ioK8sApiCoreV1LimitRange,omitempty"`
	// list or watch objects of kind LimitRange
	//
	// Equivalent to GET /api/v1/limitranges
	IoK8sAPICoreV1LimitRangeList *IoK8sAPICoreV1LimitRangeList `json:"ioK8sApiCoreV1LimitRangeList,omitempty"`
	// read the specified Namespace
	//
	// Equivalent to GET /api/v1/namespaces/{name}
	IoK8sAPICoreV1Namespace *IoK8sAPICoreV1Namespace `json:"ioK8sApiCoreV1Namespace,omitempty"`
	// list or watch objects of kind Namespace
	//
	// Equivalent to GET /api/v1/namespaces
	IoK8sAPICoreV1NamespaceList *IoK8sAPICoreV1NamespaceList `json:"ioK8sApiCoreV1NamespaceList,omitempty"`
	// read the specified Node
	//
	// Equivalent to GET /api/v1/nodes/{name}
	IoK8sAPICoreV1Node *IoK8sAPICoreV1Node `json:"ioK8sApiCoreV1Node,omitempty"`
	// list or watch objects of kind Node
	//
	// Equivalent to GET /api/v1/nodes
	IoK8sAPICoreV1NodeList *IoK8sAPICoreV1NodeList `json:"ioK8sApiCoreV1NodeList,omitempty"`
	// read the specified PersistentVolume
	//
	// Equivalent to GET /api/v1/persistentvolumes/{name}
	IoK8sAPICoreV1PersistentVolume *IoK8sAPICoreV1PersistentVolume `json:"ioK8sApiCoreV1PersistentVolume,omitempty"`
	// read the specified PersistentVolumeClaim
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}
	IoK8sAPICoreV1PersistentVolumeClaim *IoK8sAPICoreV1PersistentVolumeClaim `json:"ioK8sApiCoreV1PersistentVolumeClaim,omitempty"`
	// list or watch objects of kind PersistentVolumeClaim
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/persistentvolumeclaims
	IoK8sAPICoreV1PersistentVolumeClaimList *IoK8sAPICoreV1PersistentVolumeClaimList `json:"ioK8sApiCoreV1PersistentVolumeClaimList,omitempty"`
	// list or watch objects of kind PersistentVolume
	//
	// Equivalent to GET /api/v1/persistentvolumes
	IoK8sAPICoreV1PersistentVolumeList *IoK8sAPICoreV1PersistentVolumeList `json:"ioK8sApiCoreV1PersistentVolumeList,omitempty"`
	// read the specified Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}
	IoK8sAPICoreV1Pod *IoK8sAPICoreV1Pod `json:"ioK8sApiCoreV1Pod,omitempty"`
	// list or watch objects of kind Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods
	IoK8sAPICoreV1PodList *IoK8sAPICoreV1PodList `json:"ioK8sApiCoreV1PodList,omitempty"`
	// read the specified PodTemplate
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/podtemplates/{name}
	IoK8sAPICoreV1PodTemplate *IoK8sAPICoreV1PodTemplate `json:"ioK8sApiCoreV1PodTemplate,omitempty"`
	// list or watch objects of kind PodTemplate
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/podtemplates
	IoK8sAPICoreV1PodTemplateList *IoK8sAPICoreV1PodTemplateList `json:"ioK8sApiCoreV1PodTemplateList,omitempty"`
	// read the specified ReplicationController
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/replicationcontrollers/{name}
	IoK8sAPICoreV1ReplicationController *IoK8sAPICoreV1ReplicationController `json:"ioK8sApiCoreV1ReplicationController,omitempty"`
	// list or watch objects of kind ReplicationController
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/replicationcontrollers
	IoK8sAPICoreV1ReplicationControllerList *IoK8sAPICoreV1ReplicationControllerList `json:"ioK8sApiCoreV1ReplicationControllerList,omitempty"`
	// read the specified ResourceQuota
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/resourcequotas/{name}
	IoK8sAPICoreV1ResourceQuota *IoK8sAPICoreV1ResourceQuota `json:"ioK8sApiCoreV1ResourceQuota,omitempty"`
	// list or watch objects of kind ResourceQuota
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/resourcequotas
	IoK8sAPICoreV1ResourceQuotaList *IoK8sAPICoreV1ResourceQuotaList `json:"ioK8sApiCoreV1ResourceQuotaList,omitempty"`
	// read the specified Secret
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/secrets/{name}
	IoK8sAPICoreV1Secret *IoK8sAPICoreV1Secret `json:"ioK8sApiCoreV1Secret,omitempty"`
	// list or watch objects of kind Secret
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/secrets
	IoK8sAPICoreV1SecretList *IoK8sAPICoreV1SecretList `json:"ioK8sApiCoreV1SecretList,omitempty"`
	// read the specified Service
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/services/{name}
	IoK8sAPICoreV1Service *IoK8sAPICoreV1Service `json:"ioK8sApiCoreV1Service,omitempty"`
	// read the specified ServiceAccount
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/serviceaccounts/{name}
	IoK8sAPICoreV1ServiceAccount *IoK8sAPICoreV1ServiceAccount `json:"ioK8sApiCoreV1ServiceAccount,omitempty"`
	// list or watch objects of kind ServiceAccount
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/serviceaccounts
	IoK8sAPICoreV1ServiceAccountList *IoK8sAPICoreV1ServiceAccountList `json:"ioK8sApiCoreV1ServiceAccountList,omitempty"`
	// list or watch objects of kind Service
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/services
	IoK8sAPICoreV1ServiceList *IoK8sAPICoreV1ServiceList `json:"ioK8sApiCoreV1ServiceList,omitempty"`
	// read the specified EndpointSlice
	//
	// Equivalent to GET /apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}
	IoK8sAPIDiscoveryV1EndpointSlice *IoK8sAPIDiscoveryV1EndpointSlice `json:"ioK8sApiDiscoveryV1EndpointSlice,omitempty"`
	// list or watch objects of kind EndpointSlice
	//
	// Equivalent to GET /apis/discovery.k8s.io/v1/endpointslices
	IoK8sAPIDiscoveryV1EndpointSliceList *IoK8sAPIDiscoveryV1EndpointSliceList `json:"ioK8sApiDiscoveryV1EndpointSliceList,omitempty"`
	// read the specified Event
	//
	// Equivalent to GET /apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}
	IoK8sAPIEventsV1Event *IoK8sAPIEventsV1Event `json:"ioK8sApiEventsV1Event,omitempty"`
	// list or watch objects of kind Event
	//
	// Equivalent to GET /apis/events.k8s.io/v1/events
	IoK8sAPIEventsV1EventList *IoK8sAPIEventsV1EventList `json:"ioK8sApiEventsV1EventList,omitempty"`
	// read the specified FlowSchema
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}
	IoK8sAPIFlowcontrolV1beta2FlowSchema *IoK8sAPIFlowcontrolV1beta2FlowSchema `json:"ioK8sApiFlowcontrolV1beta2FlowSchema,omitempty"`
	// list or watch objects of kind FlowSchema
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas
	IoK8sAPIFlowcontrolV1beta2FlowSchemaList *IoK8sAPIFlowcontrolV1beta2FlowSchemaList `json:"ioK8sApiFlowcontrolV1beta2FlowSchemaList,omitempty"`
	// read the specified PriorityLevelConfiguration
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}
	IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration `json:"ioK8sApiFlowcontrolV1beta2PriorityLevelConfiguration,omitempty"`
	// list or watch objects of kind PriorityLevelConfiguration
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations
	IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList `json:"ioK8sApiFlowcontrolV1beta2PriorityLevelConfigurationList,omitempty"`
	// read the specified FlowSchema
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}
	IoK8sAPIFlowcontrolV1beta3FlowSchema *IoK8sAPIFlowcontrolV1beta3FlowSchema `json:"ioK8sApiFlowcontrolV1beta3FlowSchema,omitempty"`
	// list or watch objects of kind FlowSchema
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas
	IoK8sAPIFlowcontrolV1beta3FlowSchemaList *IoK8sAPIFlowcontrolV1beta3FlowSchemaList `json:"ioK8sApiFlowcontrolV1beta3FlowSchemaList,omitempty"`
	// read the specified PriorityLevelConfiguration
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}
	IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration `json:"ioK8sApiFlowcontrolV1beta3PriorityLevelConfiguration,omitempty"`
	// list or watch objects of kind PriorityLevelConfiguration
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations
	IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationList *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationList `json:"ioK8sApiFlowcontrolV1beta3PriorityLevelConfigurationList,omitempty"`
	// read the specified Ingress
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}
	IoK8sAPINetworkingV1Ingress *IoK8sAPINetworkingV1Ingress `json:"ioK8sApiNetworkingV1Ingress,omitempty"`
	// read the specified IngressClass
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/ingressclasses/{name}
	IoK8sAPINetworkingV1IngressClass *IoK8sAPINetworkingV1IngressClass `json:"ioK8sApiNetworkingV1IngressClass,omitempty"`
	// list or watch objects of kind IngressClass
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/ingressclasses
	IoK8sAPINetworkingV1IngressClassList *IoK8sAPINetworkingV1IngressClassList `json:"ioK8sApiNetworkingV1IngressClassList,omitempty"`
	// list or watch objects of kind Ingress
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/ingresses
	IoK8sAPINetworkingV1IngressList *IoK8sAPINetworkingV1IngressList `json:"ioK8sApiNetworkingV1IngressList,omitempty"`
	// read the specified NetworkPolicy
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}
	IoK8sAPINetworkingV1NetworkPolicy *IoK8sAPINetworkingV1NetworkPolicy `json:"ioK8sApiNetworkingV1NetworkPolicy,omitempty"`
	// list or watch objects of kind NetworkPolicy
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies
	IoK8sAPINetworkingV1NetworkPolicyList *IoK8sAPINetworkingV1NetworkPolicyList `json:"ioK8sApiNetworkingV1NetworkPolicyList,omitempty"`
	// read the specified ClusterCIDR
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/clustercidrs/{name}
	IoK8sAPINetworkingV1alpha1ClusterCidr *IoK8sAPINetworkingV1alpha1ClusterCidr `json:"ioK8sApiNetworkingV1alpha1ClusterCIDR,omitempty"`
	// list or watch objects of kind ClusterCIDR
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/clustercidrs
	IoK8sAPINetworkingV1alpha1ClusterCIDRList *IoK8sAPINetworkingV1alpha1ClusterCIDRList `json:"ioK8sApiNetworkingV1alpha1ClusterCIDRList,omitempty"`
	// read the specified IPAddress
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/ipaddresses/{name}
	IoK8sAPINetworkingV1alpha1IPAddress *IoK8sAPINetworkingV1alpha1IPAddress `json:"ioK8sApiNetworkingV1alpha1IPAddress,omitempty"`
	// list or watch objects of kind IPAddress
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/ipaddresses
	IoK8sAPINetworkingV1alpha1IPAddressList *IoK8sAPINetworkingV1alpha1IPAddressList `json:"ioK8sApiNetworkingV1alpha1IPAddressList,omitempty"`
	// read the specified RuntimeClass
	//
	// Equivalent to GET /apis/node.k8s.io/v1/runtimeclasses/{name}
	IoK8sAPINodeV1RuntimeClass *IoK8sAPINodeV1RuntimeClass `json:"ioK8sApiNodeV1RuntimeClass,omitempty"`
	// list or watch objects of kind RuntimeClass
	//
	// Equivalent to GET /apis/node.k8s.io/v1/runtimeclasses
	IoK8sAPINodeV1RuntimeClassList *IoK8sAPINodeV1RuntimeClassList `json:"ioK8sApiNodeV1RuntimeClassList,omitempty"`
	// read the specified PodDisruptionBudget
	//
	// Equivalent to GET /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}
	IoK8sAPIPolicyV1PodDisruptionBudget *IoK8sAPIPolicyV1PodDisruptionBudget `json:"ioK8sApiPolicyV1PodDisruptionBudget,omitempty"`
	// list or watch objects of kind PodDisruptionBudget
	//
	// Equivalent to GET /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets
	IoK8sAPIPolicyV1PodDisruptionBudgetList *IoK8sAPIPolicyV1PodDisruptionBudgetList `json:"ioK8sApiPolicyV1PodDisruptionBudgetList,omitempty"`
	// read the specified ClusterRole
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/clusterroles/{name}
	IoK8sAPIRbacV1ClusterRole *IoK8sAPIRbacV1ClusterRole `json:"ioK8sApiRbacV1ClusterRole,omitempty"`
	// read the specified ClusterRoleBinding
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}
	IoK8sAPIRbacV1ClusterRoleBinding *IoK8sAPIRbacV1ClusterRoleBinding `json:"ioK8sApiRbacV1ClusterRoleBinding,omitempty"`
	// list or watch objects of kind ClusterRoleBinding
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/clusterrolebindings
	IoK8sAPIRbacV1ClusterRoleBindingList *IoK8sAPIRbacV1ClusterRoleBindingList `json:"ioK8sApiRbacV1ClusterRoleBindingList,omitempty"`
	// list or watch objects of kind ClusterRole
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/clusterroles
	IoK8sAPIRbacV1ClusterRoleList *IoK8sAPIRbacV1ClusterRoleList `json:"ioK8sApiRbacV1ClusterRoleList,omitempty"`
	// read the specified Role
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}
	IoK8sAPIRbacV1Role *IoK8sAPIRbacV1Role `json:"ioK8sApiRbacV1Role,omitempty"`
	// read the specified RoleBinding
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}
	IoK8sAPIRbacV1RoleBinding *IoK8sAPIRbacV1RoleBinding `json:"ioK8sApiRbacV1RoleBinding,omitempty"`
	// list or watch objects of kind RoleBinding
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings
	IoK8sAPIRbacV1RoleBindingList *IoK8sAPIRbacV1RoleBindingList `json:"ioK8sApiRbacV1RoleBindingList,omitempty"`
	// list or watch objects of kind Role
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles
	IoK8sAPIRbacV1RoleList *IoK8sAPIRbacV1RoleList `json:"ioK8sApiRbacV1RoleList,omitempty"`
	// read the specified PodSchedulingContext
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}
	IoK8sAPIResourceV1alpha2PodSchedulingContext *IoK8sAPIResourceV1alpha2PodSchedulingContext `json:"ioK8sApiResourceV1alpha2PodSchedulingContext,omitempty"`
	// list or watch objects of kind PodSchedulingContext
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts
	IoK8sAPIResourceV1alpha2PodSchedulingContextList *IoK8sAPIResourceV1alpha2PodSchedulingContextList `json:"ioK8sApiResourceV1alpha2PodSchedulingContextList,omitempty"`
	// read the specified ResourceClaim
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}
	IoK8sAPIResourceV1alpha2ResourceClaim *IoK8sAPIResourceV1alpha2ResourceClaim `json:"ioK8sApiResourceV1alpha2ResourceClaim,omitempty"`
	// list or watch objects of kind ResourceClaim
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims
	IoK8sAPIResourceV1alpha2ResourceClaimList *IoK8sAPIResourceV1alpha2ResourceClaimList `json:"ioK8sApiResourceV1alpha2ResourceClaimList,omitempty"`
	// read the specified ResourceClaimTemplate
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}
	IoK8sAPIResourceV1alpha2ResourceClaimTemplate *IoK8sAPIResourceV1alpha2ResourceClaimTemplate `json:"ioK8sApiResourceV1alpha2ResourceClaimTemplate,omitempty"`
	// list or watch objects of kind ResourceClaimTemplate
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates
	IoK8sAPIResourceV1alpha2ResourceClaimTemplateList *IoK8sAPIResourceV1alpha2ResourceClaimTemplateList `json:"ioK8sApiResourceV1alpha2ResourceClaimTemplateList,omitempty"`
	// read the specified ResourceClass
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/resourceclasses/{name}
	IoK8sAPIResourceV1alpha2ResourceClass *IoK8sAPIResourceV1alpha2ResourceClass `json:"ioK8sApiResourceV1alpha2ResourceClass,omitempty"`
	// list or watch objects of kind ResourceClass
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/resourceclasses
	IoK8sAPIResourceV1alpha2ResourceClassList *IoK8sAPIResourceV1alpha2ResourceClassList `json:"ioK8sApiResourceV1alpha2ResourceClassList,omitempty"`
	// read the specified PriorityClass
	//
	// Equivalent to GET /apis/scheduling.k8s.io/v1/priorityclasses/{name}
	IoK8sAPISchedulingV1PriorityClass *IoK8sAPISchedulingV1PriorityClass `json:"ioK8sApiSchedulingV1PriorityClass,omitempty"`
	// list or watch objects of kind PriorityClass
	//
	// Equivalent to GET /apis/scheduling.k8s.io/v1/priorityclasses
	IoK8sAPISchedulingV1PriorityClassList *IoK8sAPISchedulingV1PriorityClassList `json:"ioK8sApiSchedulingV1PriorityClassList,omitempty"`
	// read the specified CSIDriver
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/csidrivers/{name}
	IoK8sAPIStorageV1CSIDriver *IoK8sAPIStorageV1CSIDriver `json:"ioK8sApiStorageV1CSIDriver,omitempty"`
	// list or watch objects of kind CSIDriver
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/csidrivers
	IoK8sAPIStorageV1CSIDriverList *IoK8sAPIStorageV1CSIDriverList `json:"ioK8sApiStorageV1CSIDriverList,omitempty"`
	// read the specified CSINode
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/csinodes/{name}
	IoK8sAPIStorageV1CSINode *IoK8sAPIStorageV1CSINode `json:"ioK8sApiStorageV1CSINode,omitempty"`
	// list or watch objects of kind CSINode
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/csinodes
	IoK8sAPIStorageV1CSINodeList *IoK8sAPIStorageV1CSINodeList `json:"ioK8sApiStorageV1CSINodeList,omitempty"`
	// read the specified CSIStorageCapacity
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities/{name}
	IoK8sAPIStorageV1CSIStorageCapacity *IoK8sAPIStorageV1CSIStorageCapacity `json:"ioK8sApiStorageV1CSIStorageCapacity,omitempty"`
	// list or watch objects of kind CSIStorageCapacity
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/csistoragecapacities
	IoK8sAPIStorageV1CSIStorageCapacityList *IoK8sAPIStorageV1CSIStorageCapacityList `json:"ioK8sApiStorageV1CSIStorageCapacityList,omitempty"`
	// read the specified StorageClass
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/storageclasses/{name}
	IoK8sAPIStorageV1StorageClass *IoK8sAPIStorageV1StorageClass `json:"ioK8sApiStorageV1StorageClass,omitempty"`
	// list or watch objects of kind StorageClass
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/storageclasses
	IoK8sAPIStorageV1StorageClassList *IoK8sAPIStorageV1StorageClassList `json:"ioK8sApiStorageV1StorageClassList,omitempty"`
	// read the specified VolumeAttachment
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/volumeattachments/{name}
	IoK8sAPIStorageV1VolumeAttachment *IoK8sAPIStorageV1VolumeAttachment `json:"ioK8sApiStorageV1VolumeAttachment,omitempty"`
	// list or watch objects of kind VolumeAttachment
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/volumeattachments
	IoK8sAPIStorageV1VolumeAttachmentList *IoK8sAPIStorageV1VolumeAttachmentList `json:"ioK8sApiStorageV1VolumeAttachmentList,omitempty"`
	// read the specified CustomResourceDefinition
	//
	// Equivalent to GET /apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}
	IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition `json:"ioK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition,omitempty"`
	// list or watch objects of kind CustomResourceDefinition
	//
	// Equivalent to GET /apis/apiextensions.k8s.io/v1/customresourcedefinitions
	IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList `json:"ioK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/
	IoK8sApimachineryPkgApisMetaV1APIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"ioK8sApimachineryPkgApisMetaV1APIGroup,omitempty"`
	// get available API versions
	//
	// Equivalent to GET /apis/
	IoK8sApimachineryPkgApisMetaV1APIGroupList *IoK8sApimachineryPkgApisMetaV1APIGroupList `json:"ioK8sApimachineryPkgApisMetaV1APIGroupList,omitempty"`
	// get available resources
	//
	// Equivalent to GET /api/v1/
	IoK8sApimachineryPkgApisMetaV1APIResourceList *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"ioK8sApimachineryPkgApisMetaV1APIResourceList,omitempty"`
	// get available API versions
	//
	// Equivalent to GET /api/
	IoK8sApimachineryPkgApisMetaV1APIVersions *IoK8sApimachineryPkgApisMetaV1APIVersions `json:"ioK8sApimachineryPkgApisMetaV1APIVersions,omitempty"`
	// watch individual changes to a list of ConfigMap. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/configmaps
	IoK8sApimachineryPkgApisMetaV1WatchEvent *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"ioK8sApimachineryPkgApisMetaV1WatchEvent,omitempty"`
	// get the code version
	//
	// Equivalent to GET /version/
	IoK8sApimachineryPkgVersionInfo *IoK8sApimachineryPkgVersionInfo `json:"ioK8sApimachineryPkgVersionInfo,omitempty"`
	// read the specified APIService
	//
	// Equivalent to GET /apis/apiregistration.k8s.io/v1/apiservices/{name}
	IoK8sKubeAggregatorPkgApisApiregistrationV1APIService *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService `json:"ioK8sKubeAggregatorPkgApisApiregistrationV1APIService,omitempty"`
	// list or watch objects of kind APIService
	//
	// Equivalent to GET /apis/apiregistration.k8s.io/v1/apiservices
	IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList `json:"ioK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList,omitempty"`
	// list or watch objects of kind ControllerRevision
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/controllerrevisions
	ListAppsV1NamespacedControllerRevision *IoK8sAPIAppsV1ControllerRevisionList `json:"listAppsV1NamespacedControllerRevision,omitempty"`
	// list or watch objects of kind DaemonSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/daemonsets
	ListAppsV1NamespacedDaemonSet *IoK8sAPIAppsV1DaemonSetList `json:"listAppsV1NamespacedDaemonSet,omitempty"`
	// list or watch objects of kind Deployment
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/deployments
	ListAppsV1NamespacedDeployment *IoK8sAPIAppsV1DeploymentList `json:"listAppsV1NamespacedDeployment,omitempty"`
	// list or watch objects of kind ReplicaSet
	//
	// Equivalent to GET /apis/apps/v1/replicasets
	ListAppsV1ReplicaSetForAllNamespaces *IoK8sAPIAppsV1ReplicaSetList `json:"listAppsV1ReplicaSetForAllNamespaces,omitempty"`
	// list or watch objects of kind StatefulSet
	//
	// Equivalent to GET /apis/apps/v1/statefulsets
	ListAppsV1StatefulSetForAllNamespaces *IoK8sAPIAppsV1StatefulSetList `json:"listAppsV1StatefulSetForAllNamespaces,omitempty"`
	// list or watch objects of kind HorizontalPodAutoscaler
	//
	// Equivalent to GET /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers
	ListAutoscalingV1NamespacedHorizontalPodAutoscaler *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList `json:"listAutoscalingV1NamespacedHorizontalPodAutoscaler,omitempty"`
	// list or watch objects of kind HorizontalPodAutoscaler
	//
	// Equivalent to GET /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers
	ListAutoscalingV2NamespacedHorizontalPodAutoscaler *IoK8sAPIAutoscalingV2HorizontalPodAutoscalerList `json:"listAutoscalingV2NamespacedHorizontalPodAutoscaler,omitempty"`
	// list or watch objects of kind CronJob
	//
	// Equivalent to GET /apis/batch/v1/namespaces/{namespace}/cronjobs
	ListBatchV1NamespacedCronJob *IoK8sAPIBatchV1CronJobList `json:"listBatchV1NamespacedCronJob,omitempty"`
	// list or watch objects of kind Job
	//
	// Equivalent to GET /apis/batch/v1/namespaces/{namespace}/jobs
	ListBatchV1NamespacedJob *IoK8sAPIBatchV1JobList `json:"listBatchV1NamespacedJob,omitempty"`
	// list or watch objects of kind Lease
	//
	// Equivalent to GET /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases
	ListCoordinationV1NamespacedLease *IoK8sAPICoordinationV1LeaseList `json:"listCoordinationV1NamespacedLease,omitempty"`
	// list or watch objects of kind ConfigMap
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/configmaps
	ListCoreV1NamespacedConfigMap *IoK8sAPICoreV1ConfigMapList `json:"listCoreV1NamespacedConfigMap,omitempty"`
	// list or watch objects of kind Endpoints
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/endpoints
	ListCoreV1NamespacedEndpoints *IoK8sAPICoreV1EndpointsList `json:"listCoreV1NamespacedEndpoints,omitempty"`
	// list or watch objects of kind Event
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/events
	ListCoreV1NamespacedEvent *IoK8sAPICoreV1EventList `json:"listCoreV1NamespacedEvent,omitempty"`
	// list or watch objects of kind LimitRange
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/limitranges
	ListCoreV1NamespacedLimitRange *IoK8sAPICoreV1LimitRangeList `json:"listCoreV1NamespacedLimitRange,omitempty"`
	// list or watch objects of kind PersistentVolumeClaim
	//
	// Equivalent to GET /api/v1/persistentvolumeclaims
	ListCoreV1PersistentVolumeClaimForAllNamespaces *IoK8sAPICoreV1PersistentVolumeClaimList `json:"listCoreV1PersistentVolumeClaimForAllNamespaces,omitempty"`
	// list or watch objects of kind Pod
	//
	// Equivalent to GET /api/v1/pods
	ListCoreV1PodForAllNamespaces *IoK8sAPICoreV1PodList `json:"listCoreV1PodForAllNamespaces,omitempty"`
	// list or watch objects of kind PodTemplate
	//
	// Equivalent to GET /api/v1/podtemplates
	ListCoreV1PodTemplateForAllNamespaces *IoK8sAPICoreV1PodTemplateList `json:"listCoreV1PodTemplateForAllNamespaces,omitempty"`
	// list or watch objects of kind ReplicationController
	//
	// Equivalent to GET /api/v1/replicationcontrollers
	ListCoreV1ReplicationControllerForAllNamespaces *IoK8sAPICoreV1ReplicationControllerList `json:"listCoreV1ReplicationControllerForAllNamespaces,omitempty"`
	// list or watch objects of kind ResourceQuota
	//
	// Equivalent to GET /api/v1/resourcequotas
	ListCoreV1ResourceQuotaForAllNamespaces *IoK8sAPICoreV1ResourceQuotaList `json:"listCoreV1ResourceQuotaForAllNamespaces,omitempty"`
	// list or watch objects of kind Secret
	//
	// Equivalent to GET /api/v1/secrets
	ListCoreV1SecretForAllNamespaces *IoK8sAPICoreV1SecretList `json:"listCoreV1SecretForAllNamespaces,omitempty"`
	// list or watch objects of kind ServiceAccount
	//
	// Equivalent to GET /api/v1/serviceaccounts
	ListCoreV1ServiceAccountForAllNamespaces *IoK8sAPICoreV1ServiceAccountList `json:"listCoreV1ServiceAccountForAllNamespaces,omitempty"`
	// list or watch objects of kind Service
	//
	// Equivalent to GET /api/v1/services
	ListCoreV1ServiceForAllNamespaces *IoK8sAPICoreV1ServiceList `json:"listCoreV1ServiceForAllNamespaces,omitempty"`
	// list or watch objects of kind EndpointSlice
	//
	// Equivalent to GET /apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices
	ListDiscoveryV1NamespacedEndpointSlice *IoK8sAPIDiscoveryV1EndpointSliceList `json:"listDiscoveryV1NamespacedEndpointSlice,omitempty"`
	// list or watch objects of kind Event
	//
	// Equivalent to GET /apis/events.k8s.io/v1/namespaces/{namespace}/events
	ListEventsV1NamespacedEvent *IoK8sAPIEventsV1EventList `json:"listEventsV1NamespacedEvent,omitempty"`
	// list or watch objects of kind Ingress
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses
	ListNetworkingV1NamespacedIngress *IoK8sAPINetworkingV1IngressList `json:"listNetworkingV1NamespacedIngress,omitempty"`
	// list or watch objects of kind NetworkPolicy
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/networkpolicies
	ListNetworkingV1NetworkPolicyForAllNamespaces *IoK8sAPINetworkingV1NetworkPolicyList `json:"listNetworkingV1NetworkPolicyForAllNamespaces,omitempty"`
	// list or watch objects of kind PodDisruptionBudget
	//
	// Equivalent to GET /apis/policy/v1/poddisruptionbudgets
	ListPolicyV1PodDisruptionBudgetForAllNamespaces *IoK8sAPIPolicyV1PodDisruptionBudgetList `json:"listPolicyV1PodDisruptionBudgetForAllNamespaces,omitempty"`
	// list or watch objects of kind RoleBinding
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/rolebindings
	ListRbacAuthorizationV1RoleBindingForAllNamespaces *IoK8sAPIRbacV1RoleBindingList `json:"listRbacAuthorizationV1RoleBindingForAllNamespaces,omitempty"`
	// list or watch objects of kind Role
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/roles
	ListRbacAuthorizationV1RoleForAllNamespaces *IoK8sAPIRbacV1RoleList `json:"listRbacAuthorizationV1RoleForAllNamespaces,omitempty"`
	// list or watch objects of kind PodSchedulingContext
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/podschedulingcontexts
	ListResourceV1alpha2PodSchedulingContextForAllNamespaces *IoK8sAPIResourceV1alpha2PodSchedulingContextList `json:"listResourceV1alpha2PodSchedulingContextForAllNamespaces,omitempty"`
	// list or watch objects of kind ResourceClaim
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/resourceclaims
	ListResourceV1alpha2ResourceClaimForAllNamespaces *IoK8sAPIResourceV1alpha2ResourceClaimList `json:"listResourceV1alpha2ResourceClaimForAllNamespaces,omitempty"`
	// list or watch objects of kind ResourceClaimTemplate
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/resourceclaimtemplates
	ListResourceV1alpha2ResourceClaimTemplateForAllNamespaces *IoK8sAPIResourceV1alpha2ResourceClaimTemplateList `json:"listResourceV1alpha2ResourceClaimTemplateForAllNamespaces,omitempty"`
	// list or watch objects of kind CSIStorageCapacity
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities
	ListStorageV1NamespacedCSIStorageCapacity *IoK8sAPIStorageV1CSIStorageCapacityList `json:"listStorageV1NamespacedCSIStorageCapacity,omitempty"`
	// get service account issuer OpenID JSON Web Key Set (contains public token verification keys)
	//
	// Equivalent to GET /openid/v1/jwks/
	OpenidV1Jwks *string `json:"openidV1Jwks,omitempty"`
	// read status of the specified ValidatingAdmissionPolicy
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}/status
	ReadAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy `json:"readAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus,omitempty"`
	// read status of the specified CustomResourceDefinition
	//
	// Equivalent to GET /apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status
	ReadApiextensionsV1CustomResourceDefinitionStatus *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition `json:"readApiextensionsV1CustomResourceDefinitionStatus,omitempty"`
	// read status of the specified APIService
	//
	// Equivalent to GET /apis/apiregistration.k8s.io/v1/apiservices/{name}/status
	ReadApiregistrationV1APIServiceStatus *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService `json:"readApiregistrationV1APIServiceStatus,omitempty"`
	// read status of the specified DaemonSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status
	ReadAppsV1NamespacedDaemonSetStatus *IoK8sAPIAppsV1DaemonSet `json:"readAppsV1NamespacedDaemonSetStatus,omitempty"`
	// read scale of the specified Deployment
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale
	ReadAppsV1NamespacedDeploymentScale *IoK8sAPIAutoscalingV1Scale `json:"readAppsV1NamespacedDeploymentScale,omitempty"`
	// read status of the specified Deployment
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/deployments/{name}/status
	ReadAppsV1NamespacedDeploymentStatus *IoK8sAPIAppsV1Deployment `json:"readAppsV1NamespacedDeploymentStatus,omitempty"`
	// read scale of the specified ReplicaSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale
	ReadAppsV1NamespacedReplicaSetScale *IoK8sAPIAutoscalingV1Scale `json:"readAppsV1NamespacedReplicaSetScale,omitempty"`
	// read status of the specified ReplicaSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status
	ReadAppsV1NamespacedReplicaSetStatus *IoK8sAPIAppsV1ReplicaSet `json:"readAppsV1NamespacedReplicaSetStatus,omitempty"`
	// read scale of the specified StatefulSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale
	ReadAppsV1NamespacedStatefulSetScale *IoK8sAPIAutoscalingV1Scale `json:"readAppsV1NamespacedStatefulSetScale,omitempty"`
	// read status of the specified StatefulSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status
	ReadAppsV1NamespacedStatefulSetStatus *IoK8sAPIAppsV1StatefulSet `json:"readAppsV1NamespacedStatefulSetStatus,omitempty"`
	// read status of the specified HorizontalPodAutoscaler
	//
	// Equivalent to GET /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
	ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler `json:"readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus,omitempty"`
	// read status of the specified HorizontalPodAutoscaler
	//
	// Equivalent to GET /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
	ReadAutoscalingV2NamespacedHorizontalPodAutoscalerStatus *IoK8sAPIAutoscalingV2HorizontalPodAutoscaler `json:"readAutoscalingV2NamespacedHorizontalPodAutoscalerStatus,omitempty"`
	// read status of the specified CronJob
	//
	// Equivalent to GET /apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status
	ReadBatchV1NamespacedCronJobStatus *IoK8sAPIBatchV1CronJob `json:"readBatchV1NamespacedCronJobStatus,omitempty"`
	// read status of the specified Job
	//
	// Equivalent to GET /apis/batch/v1/namespaces/{namespace}/jobs/{name}/status
	ReadBatchV1NamespacedJobStatus *IoK8sAPIBatchV1Job `json:"readBatchV1NamespacedJobStatus,omitempty"`
	// read approval of the specified CertificateSigningRequest
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval
	ReadCertificatesV1CertificateSigningRequestApproval *IoK8sAPICertificatesV1CertificateSigningRequest `json:"readCertificatesV1CertificateSigningRequestApproval,omitempty"`
	// read status of the specified CertificateSigningRequest
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status
	ReadCertificatesV1CertificateSigningRequestStatus *IoK8sAPICertificatesV1CertificateSigningRequest `json:"readCertificatesV1CertificateSigningRequestStatus,omitempty"`
	// read status of the specified Namespace
	//
	// Equivalent to GET /api/v1/namespaces/{name}/status
	ReadCoreV1NamespaceStatus *IoK8sAPICoreV1Namespace `json:"readCoreV1NamespaceStatus,omitempty"`
	// read status of the specified PersistentVolumeClaim
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status
	ReadCoreV1NamespacedPersistentVolumeClaimStatus *IoK8sAPICoreV1PersistentVolumeClaim `json:"readCoreV1NamespacedPersistentVolumeClaimStatus,omitempty"`
	// read ephemeralcontainers of the specified Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers
	ReadCoreV1NamespacedPodEphemeralcontainers *IoK8sAPICoreV1Pod `json:"readCoreV1NamespacedPodEphemeralcontainers,omitempty"`
	// read status of the specified Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/status
	ReadCoreV1NamespacedPodStatus *IoK8sAPICoreV1Pod `json:"readCoreV1NamespacedPodStatus,omitempty"`
	// read status of the specified ReplicationController
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status
	ReadCoreV1NamespacedReplicationControllerStatus *IoK8sAPICoreV1ReplicationController `json:"readCoreV1NamespacedReplicationControllerStatus,omitempty"`
	// read status of the specified ResourceQuota
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/resourcequotas/{name}/status
	ReadCoreV1NamespacedResourceQuotaStatus *IoK8sAPICoreV1ResourceQuota `json:"readCoreV1NamespacedResourceQuotaStatus,omitempty"`
	// read status of the specified Service
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/services/{name}/status
	ReadCoreV1NamespacedServiceStatus *IoK8sAPICoreV1Service `json:"readCoreV1NamespacedServiceStatus,omitempty"`
	// read status of the specified Node
	//
	// Equivalent to GET /api/v1/nodes/{name}/status
	ReadCoreV1NodeStatus *IoK8sAPICoreV1Node `json:"readCoreV1NodeStatus,omitempty"`
	// read status of the specified PersistentVolume
	//
	// Equivalent to GET /api/v1/persistentvolumes/{name}/status
	ReadCoreV1PersistentVolumeStatus *IoK8sAPICoreV1PersistentVolume `json:"readCoreV1PersistentVolumeStatus,omitempty"`
	// read status of the specified FlowSchema
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}/status
	ReadFlowcontrolApiserverV1beta2FlowSchemaStatus *IoK8sAPIFlowcontrolV1beta2FlowSchema `json:"readFlowcontrolApiserverV1beta2FlowSchemaStatus,omitempty"`
	// read status of the specified PriorityLevelConfiguration
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}/status
	ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration `json:"readFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus,omitempty"`
	// read status of the specified FlowSchema
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}/status
	ReadFlowcontrolApiserverV1beta3FlowSchemaStatus *IoK8sAPIFlowcontrolV1beta3FlowSchema `json:"readFlowcontrolApiserverV1beta3FlowSchemaStatus,omitempty"`
	// read status of the specified PriorityLevelConfiguration
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}/status
	ReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration `json:"readFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus,omitempty"`
	// read status of the specified StorageVersion
	//
	// Equivalent to GET /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}/status
	ReadInternalApiserverV1alpha1StorageVersionStatus *IoK8sAPIApiserverinternalV1alpha1StorageVersion `json:"readInternalApiserverV1alpha1StorageVersionStatus,omitempty"`
	// read status of the specified Ingress
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status
	ReadNetworkingV1NamespacedIngressStatus *IoK8sAPINetworkingV1Ingress `json:"readNetworkingV1NamespacedIngressStatus,omitempty"`
	// read status of the specified NetworkPolicy
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}/status
	ReadNetworkingV1NamespacedNetworkPolicyStatus *IoK8sAPINetworkingV1NetworkPolicy `json:"readNetworkingV1NamespacedNetworkPolicyStatus,omitempty"`
	// read status of the specified PodDisruptionBudget
	//
	// Equivalent to GET /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status
	ReadPolicyV1NamespacedPodDisruptionBudgetStatus *IoK8sAPIPolicyV1PodDisruptionBudget `json:"readPolicyV1NamespacedPodDisruptionBudgetStatus,omitempty"`
	// read status of the specified PodSchedulingContext
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}/status
	ReadResourceV1alpha2NamespacedPodSchedulingContextStatus *IoK8sAPIResourceV1alpha2PodSchedulingContext `json:"readResourceV1alpha2NamespacedPodSchedulingContextStatus,omitempty"`
	// read status of the specified ResourceClaim
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}/status
	ReadResourceV1alpha2NamespacedResourceClaimStatus *IoK8sAPIResourceV1alpha2ResourceClaim `json:"readResourceV1alpha2NamespacedResourceClaimStatus,omitempty"`
	// read status of the specified VolumeAttachment
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/volumeattachments/{name}/status
	ReadStorageV1VolumeAttachmentStatus *IoK8sAPIStorageV1VolumeAttachment `json:"readStorageV1VolumeAttachmentStatus,omitempty"`
	// watch changes to an object of kind MutatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations/{name}
	WatchAdmissionregistrationV1MutatingWebhookConfiguration *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAdmissionregistrationV1MutatingWebhookConfiguration,omitempty"`
	// watch individual changes to a list of MutatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations
	WatchAdmissionregistrationV1MutatingWebhookConfigurationList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAdmissionregistrationV1MutatingWebhookConfigurationList,omitempty"`
	// watch changes to an object of kind ValidatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations/{name}
	WatchAdmissionregistrationV1ValidatingWebhookConfiguration *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAdmissionregistrationV1ValidatingWebhookConfiguration,omitempty"`
	// watch individual changes to a list of ValidatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations
	WatchAdmissionregistrationV1ValidatingWebhookConfigurationList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAdmissionregistrationV1ValidatingWebhookConfigurationList,omitempty"`
	// watch changes to an object of kind ValidatingAdmissionPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/watch/validatingadmissionpolicies/{name}
	WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicy *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAdmissionregistrationV1alpha1ValidatingAdmissionPolicy,omitempty"`
	// watch changes to an object of kind ValidatingAdmissionPolicyBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/watch/validatingadmissionpolicybindings/{name}
	WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding,omitempty"`
	// watch individual changes to a list of ValidatingAdmissionPolicyBinding. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/watch/validatingadmissionpolicybindings
	WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingList,omitempty"`
	// watch individual changes to a list of ValidatingAdmissionPolicy. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/watch/validatingadmissionpolicies
	WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyList,omitempty"`
	// watch changes to an object of kind CustomResourceDefinition. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions/{name}
	WatchApiextensionsV1CustomResourceDefinition *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchApiextensionsV1CustomResourceDefinition,omitempty"`
	// watch individual changes to a list of CustomResourceDefinition. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions
	WatchApiextensionsV1CustomResourceDefinitionList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchApiextensionsV1CustomResourceDefinitionList,omitempty"`
	// watch changes to an object of kind APIService. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/apiregistration.k8s.io/v1/watch/apiservices/{name}
	WatchApiregistrationV1APIService *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchApiregistrationV1APIService,omitempty"`
	// watch individual changes to a list of APIService. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apiregistration.k8s.io/v1/watch/apiservices
	WatchApiregistrationV1APIServiceList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchApiregistrationV1APIServiceList,omitempty"`
	// watch individual changes to a list of ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/controllerrevisions
	WatchAppsV1ControllerRevisionListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1ControllerRevisionListForAllNamespaces,omitempty"`
	// watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/daemonsets
	WatchAppsV1DaemonSetListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1DaemonSetListForAllNamespaces,omitempty"`
	// watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/deployments
	WatchAppsV1DeploymentListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1DeploymentListForAllNamespaces,omitempty"`
	// watch changes to an object of kind ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions/{name}
	WatchAppsV1NamespacedControllerRevision *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedControllerRevision,omitempty"`
	// watch individual changes to a list of ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions
	WatchAppsV1NamespacedControllerRevisionList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedControllerRevisionList,omitempty"`
	// watch changes to an object of kind DaemonSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/daemonsets/{name}
	WatchAppsV1NamespacedDaemonSet *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedDaemonSet,omitempty"`
	// watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/daemonsets
	WatchAppsV1NamespacedDaemonSetList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedDaemonSetList,omitempty"`
	// watch changes to an object of kind Deployment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/deployments/{name}
	WatchAppsV1NamespacedDeployment *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedDeployment,omitempty"`
	// watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/deployments
	WatchAppsV1NamespacedDeploymentList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedDeploymentList,omitempty"`
	// watch changes to an object of kind ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/replicasets/{name}
	WatchAppsV1NamespacedReplicaSet *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedReplicaSet,omitempty"`
	// watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/replicasets
	WatchAppsV1NamespacedReplicaSetList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedReplicaSetList,omitempty"`
	// watch changes to an object of kind StatefulSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/statefulsets/{name}
	WatchAppsV1NamespacedStatefulSet *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedStatefulSet,omitempty"`
	// watch individual changes to a list of StatefulSet. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/statefulsets
	WatchAppsV1NamespacedStatefulSetList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedStatefulSetList,omitempty"`
	// watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/replicasets
	WatchAppsV1ReplicaSetListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1ReplicaSetListForAllNamespaces,omitempty"`
	// watch individual changes to a list of StatefulSet. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/statefulsets
	WatchAppsV1StatefulSetListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1StatefulSetListForAllNamespaces,omitempty"`
	// watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/autoscaling/v1/watch/horizontalpodautoscalers
	WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces,omitempty"`
	// watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}
	WatchAutoscalingV1NamespacedHorizontalPodAutoscaler *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAutoscalingV1NamespacedHorizontalPodAutoscaler,omitempty"`
	// watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers
	WatchAutoscalingV1NamespacedHorizontalPodAutoscalerList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAutoscalingV1NamespacedHorizontalPodAutoscalerList,omitempty"`
	// watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/autoscaling/v2/watch/horizontalpodautoscalers
	WatchAutoscalingV2HorizontalPodAutoscalerListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAutoscalingV2HorizontalPodAutoscalerListForAllNamespaces,omitempty"`
	// watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/autoscaling/v2/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}
	WatchAutoscalingV2NamespacedHorizontalPodAutoscaler *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAutoscalingV2NamespacedHorizontalPodAutoscaler,omitempty"`
	// watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/autoscaling/v2/watch/namespaces/{namespace}/horizontalpodautoscalers
	WatchAutoscalingV2NamespacedHorizontalPodAutoscalerList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAutoscalingV2NamespacedHorizontalPodAutoscalerList,omitempty"`
	// watch individual changes to a list of CronJob. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/batch/v1/watch/cronjobs
	WatchBatchV1CronJobListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchBatchV1CronJobListForAllNamespaces,omitempty"`
	// watch individual changes to a list of Job. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/batch/v1/watch/jobs
	WatchBatchV1JobListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchBatchV1JobListForAllNamespaces,omitempty"`
	// watch changes to an object of kind CronJob. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/batch/v1/watch/namespaces/{namespace}/cronjobs/{name}
	WatchBatchV1NamespacedCronJob *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchBatchV1NamespacedCronJob,omitempty"`
	// watch individual changes to a list of CronJob. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/batch/v1/watch/namespaces/{namespace}/cronjobs
	WatchBatchV1NamespacedCronJobList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchBatchV1NamespacedCronJobList,omitempty"`
	// watch changes to an object of kind Job. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}
	WatchBatchV1NamespacedJob *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchBatchV1NamespacedJob,omitempty"`
	// watch individual changes to a list of Job. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/batch/v1/watch/namespaces/{namespace}/jobs
	WatchBatchV1NamespacedJobList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchBatchV1NamespacedJobList,omitempty"`
	// watch changes to an object of kind CertificateSigningRequest. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1/watch/certificatesigningrequests/{name}
	WatchCertificatesV1CertificateSigningRequest *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCertificatesV1CertificateSigningRequest,omitempty"`
	// watch individual changes to a list of CertificateSigningRequest. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1/watch/certificatesigningrequests
	WatchCertificatesV1CertificateSigningRequestList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCertificatesV1CertificateSigningRequestList,omitempty"`
	// watch changes to an object of kind ClusterTrustBundle. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1alpha1/watch/clustertrustbundles/{name}
	WatchCertificatesV1alpha1ClusterTrustBundle *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCertificatesV1alpha1ClusterTrustBundle,omitempty"`
	// watch individual changes to a list of ClusterTrustBundle. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1alpha1/watch/clustertrustbundles
	WatchCertificatesV1alpha1ClusterTrustBundleList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCertificatesV1alpha1ClusterTrustBundleList,omitempty"`
	// watch individual changes to a list of Lease. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/coordination.k8s.io/v1/watch/leases
	WatchCoordinationV1LeaseListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoordinationV1LeaseListForAllNamespaces,omitempty"`
	// watch changes to an object of kind Lease. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases/{name}
	WatchCoordinationV1NamespacedLease *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoordinationV1NamespacedLease,omitempty"`
	// watch individual changes to a list of Lease. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases
	WatchCoordinationV1NamespacedLeaseList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoordinationV1NamespacedLeaseList,omitempty"`
	// watch individual changes to a list of Endpoints. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/endpoints
	WatchCoreV1EndpointsListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1EndpointsListForAllNamespaces,omitempty"`
	// watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/events
	WatchCoreV1EventListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1EventListForAllNamespaces,omitempty"`
	// watch individual changes to a list of LimitRange. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/limitranges
	WatchCoreV1LimitRangeListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1LimitRangeListForAllNamespaces,omitempty"`
	// watch changes to an object of kind Namespace. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{name}
	WatchCoreV1Namespace *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1Namespace,omitempty"`
	// watch individual changes to a list of Namespace. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces
	WatchCoreV1NamespaceList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespaceList,omitempty"`
	// watch changes to an object of kind ConfigMap. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/configmaps/{name}
	WatchCoreV1NamespacedConfigMap *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedConfigMap,omitempty"`
	// watch individual changes to a list of ConfigMap. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/configmaps
	WatchCoreV1NamespacedConfigMapList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedConfigMapList,omitempty"`
	// watch changes to an object of kind Endpoints. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/endpoints/{name}
	WatchCoreV1NamespacedEndpoints *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedEndpoints,omitempty"`
	// watch individual changes to a list of Endpoints. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/endpoints
	WatchCoreV1NamespacedEndpointsList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedEndpointsList,omitempty"`
	// watch changes to an object of kind Event. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/events/{name}
	WatchCoreV1NamespacedEvent *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedEvent,omitempty"`
	// watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/events
	WatchCoreV1NamespacedEventList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedEventList,omitempty"`
	// watch changes to an object of kind LimitRange. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/limitranges/{name}
	WatchCoreV1NamespacedLimitRange *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedLimitRange,omitempty"`
	// watch individual changes to a list of LimitRange. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/limitranges
	WatchCoreV1NamespacedLimitRangeList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedLimitRangeList,omitempty"`
	// watch changes to an object of kind PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}
	WatchCoreV1NamespacedPersistentVolumeClaim *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedPersistentVolumeClaim,omitempty"`
	// watch individual changes to a list of PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/persistentvolumeclaims
	WatchCoreV1NamespacedPersistentVolumeClaimList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedPersistentVolumeClaimList,omitempty"`
	// watch changes to an object of kind Pod. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/pods/{name}
	WatchCoreV1NamespacedPod *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedPod,omitempty"`
	// watch individual changes to a list of Pod. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/pods
	WatchCoreV1NamespacedPodList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedPodList,omitempty"`
	// watch changes to an object of kind PodTemplate. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/podtemplates/{name}
	WatchCoreV1NamespacedPodTemplate *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedPodTemplate,omitempty"`
	// watch individual changes to a list of PodTemplate. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/podtemplates
	WatchCoreV1NamespacedPodTemplateList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedPodTemplateList,omitempty"`
	// watch changes to an object of kind ReplicationController. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}
	WatchCoreV1NamespacedReplicationController *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedReplicationController,omitempty"`
	// watch individual changes to a list of ReplicationController. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/replicationcontrollers
	WatchCoreV1NamespacedReplicationControllerList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedReplicationControllerList,omitempty"`
	// watch changes to an object of kind ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/resourcequotas/{name}
	WatchCoreV1NamespacedResourceQuota *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedResourceQuota,omitempty"`
	// watch individual changes to a list of ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/resourcequotas
	WatchCoreV1NamespacedResourceQuotaList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedResourceQuotaList,omitempty"`
	// watch changes to an object of kind Secret. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/secrets/{name}
	WatchCoreV1NamespacedSecret *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedSecret,omitempty"`
	// watch individual changes to a list of Secret. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/secrets
	WatchCoreV1NamespacedSecretList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedSecretList,omitempty"`
	// watch changes to an object of kind Service. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/services/{name}
	WatchCoreV1NamespacedService *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedService,omitempty"`
	// watch changes to an object of kind ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}
	WatchCoreV1NamespacedServiceAccount *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedServiceAccount,omitempty"`
	// watch individual changes to a list of ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/serviceaccounts
	WatchCoreV1NamespacedServiceAccountList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedServiceAccountList,omitempty"`
	// watch individual changes to a list of Service. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/services
	WatchCoreV1NamespacedServiceList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedServiceList,omitempty"`
	// watch changes to an object of kind Node. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/nodes/{name}
	WatchCoreV1Node *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1Node,omitempty"`
	// watch individual changes to a list of Node. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/nodes
	WatchCoreV1NodeList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NodeList,omitempty"`
	// watch changes to an object of kind PersistentVolume. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/persistentvolumes/{name}
	WatchCoreV1PersistentVolume *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1PersistentVolume,omitempty"`
	// watch individual changes to a list of PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/persistentvolumeclaims
	WatchCoreV1PersistentVolumeClaimListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1PersistentVolumeClaimListForAllNamespaces,omitempty"`
	// watch individual changes to a list of PersistentVolume. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/persistentvolumes
	WatchCoreV1PersistentVolumeList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1PersistentVolumeList,omitempty"`
	// watch individual changes to a list of Pod. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/pods
	WatchCoreV1PodListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1PodListForAllNamespaces,omitempty"`
	// watch individual changes to a list of PodTemplate. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/podtemplates
	WatchCoreV1PodTemplateListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1PodTemplateListForAllNamespaces,omitempty"`
	// watch individual changes to a list of ReplicationController. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/replicationcontrollers
	WatchCoreV1ReplicationControllerListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1ReplicationControllerListForAllNamespaces,omitempty"`
	// watch individual changes to a list of ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/resourcequotas
	WatchCoreV1ResourceQuotaListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1ResourceQuotaListForAllNamespaces,omitempty"`
	// watch individual changes to a list of Secret. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/secrets
	WatchCoreV1SecretListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1SecretListForAllNamespaces,omitempty"`
	// watch individual changes to a list of ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/serviceaccounts
	WatchCoreV1ServiceAccountListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1ServiceAccountListForAllNamespaces,omitempty"`
	// watch individual changes to a list of Service. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/services
	WatchCoreV1ServiceListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1ServiceListForAllNamespaces,omitempty"`
	// watch individual changes to a list of EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/discovery.k8s.io/v1/watch/endpointslices
	WatchDiscoveryV1EndpointSliceListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchDiscoveryV1EndpointSliceListForAllNamespaces,omitempty"`
	// watch changes to an object of kind EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/discovery.k8s.io/v1/watch/namespaces/{namespace}/endpointslices/{name}
	WatchDiscoveryV1NamespacedEndpointSlice *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchDiscoveryV1NamespacedEndpointSlice,omitempty"`
	// watch individual changes to a list of EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/discovery.k8s.io/v1/watch/namespaces/{namespace}/endpointslices
	WatchDiscoveryV1NamespacedEndpointSliceList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchDiscoveryV1NamespacedEndpointSliceList,omitempty"`
	// watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/events.k8s.io/v1/watch/events
	WatchEventsV1EventListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchEventsV1EventListForAllNamespaces,omitempty"`
	// watch changes to an object of kind Event. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/events.k8s.io/v1/watch/namespaces/{namespace}/events/{name}
	WatchEventsV1NamespacedEvent *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchEventsV1NamespacedEvent,omitempty"`
	// watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/events.k8s.io/v1/watch/namespaces/{namespace}/events
	WatchEventsV1NamespacedEventList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchEventsV1NamespacedEventList,omitempty"`
	// watch changes to an object of kind FlowSchema. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas/{name}
	WatchFlowcontrolApiserverV1beta2FlowSchema *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchFlowcontrolApiserverV1beta2FlowSchema,omitempty"`
	// watch individual changes to a list of FlowSchema. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas
	WatchFlowcontrolApiserverV1beta2FlowSchemaList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchFlowcontrolApiserverV1beta2FlowSchemaList,omitempty"`
	// watch changes to an object of kind PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations/{name}
	WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchFlowcontrolApiserverV1beta2PriorityLevelConfiguration,omitempty"`
	// watch individual changes to a list of PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations
	WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList,omitempty"`
	// watch changes to an object of kind FlowSchema. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/watch/flowschemas/{name}
	WatchFlowcontrolApiserverV1beta3FlowSchema *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchFlowcontrolApiserverV1beta3FlowSchema,omitempty"`
	// watch individual changes to a list of FlowSchema. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/watch/flowschemas
	WatchFlowcontrolApiserverV1beta3FlowSchemaList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchFlowcontrolApiserverV1beta3FlowSchemaList,omitempty"`
	// watch changes to an object of kind PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/watch/prioritylevelconfigurations/{name}
	WatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchFlowcontrolApiserverV1beta3PriorityLevelConfiguration,omitempty"`
	// watch individual changes to a list of PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/watch/prioritylevelconfigurations
	WatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchFlowcontrolApiserverV1beta3PriorityLevelConfigurationList,omitempty"`
	// watch changes to an object of kind StorageVersion. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/internal.apiserver.k8s.io/v1alpha1/watch/storageversions/{name}
	WatchInternalApiserverV1alpha1StorageVersion *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchInternalApiserverV1alpha1StorageVersion,omitempty"`
	// watch individual changes to a list of StorageVersion. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/internal.apiserver.k8s.io/v1alpha1/watch/storageversions
	WatchInternalApiserverV1alpha1StorageVersionList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchInternalApiserverV1alpha1StorageVersionList,omitempty"`
	// watch changes to an object of kind IngressClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/watch/ingressclasses/{name}
	WatchNetworkingV1IngressClass *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1IngressClass,omitempty"`
	// watch individual changes to a list of IngressClass. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/watch/ingressclasses
	WatchNetworkingV1IngressClassList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1IngressClassList,omitempty"`
	// watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/watch/ingresses
	WatchNetworkingV1IngressListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1IngressListForAllNamespaces,omitempty"`
	// watch changes to an object of kind Ingress. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses/{name}
	WatchNetworkingV1NamespacedIngress *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1NamespacedIngress,omitempty"`
	// watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses
	WatchNetworkingV1NamespacedIngressList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1NamespacedIngressList,omitempty"`
	// watch changes to an object of kind NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies/{name}
	WatchNetworkingV1NamespacedNetworkPolicy *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1NamespacedNetworkPolicy,omitempty"`
	// watch individual changes to a list of NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies
	WatchNetworkingV1NamespacedNetworkPolicyList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1NamespacedNetworkPolicyList,omitempty"`
	// watch individual changes to a list of NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/watch/networkpolicies
	WatchNetworkingV1NetworkPolicyListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1NetworkPolicyListForAllNamespaces,omitempty"`
	// watch changes to an object of kind ClusterCIDR. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/watch/clustercidrs/{name}
	WatchNetworkingV1alpha1ClusterCidr *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1alpha1ClusterCIDR,omitempty"`
	// watch individual changes to a list of ClusterCIDR. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/watch/clustercidrs
	WatchNetworkingV1alpha1ClusterCIDRList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1alpha1ClusterCIDRList,omitempty"`
	// watch changes to an object of kind IPAddress. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/watch/ipaddresses/{name}
	WatchNetworkingV1alpha1IPAddress *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1alpha1IPAddress,omitempty"`
	// watch individual changes to a list of IPAddress. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/watch/ipaddresses
	WatchNetworkingV1alpha1IPAddressList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1alpha1IPAddressList,omitempty"`
	// watch changes to an object of kind RuntimeClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/node.k8s.io/v1/watch/runtimeclasses/{name}
	WatchNodeV1RuntimeClass *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNodeV1RuntimeClass,omitempty"`
	// watch individual changes to a list of RuntimeClass. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/node.k8s.io/v1/watch/runtimeclasses
	WatchNodeV1RuntimeClassList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNodeV1RuntimeClassList,omitempty"`
	// watch changes to an object of kind PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/policy/v1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}
	WatchPolicyV1NamespacedPodDisruptionBudget *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchPolicyV1NamespacedPodDisruptionBudget,omitempty"`
	// watch individual changes to a list of PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/policy/v1/watch/namespaces/{namespace}/poddisruptionbudgets
	WatchPolicyV1NamespacedPodDisruptionBudgetList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchPolicyV1NamespacedPodDisruptionBudgetList,omitempty"`
	// watch individual changes to a list of PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/policy/v1/watch/poddisruptionbudgets
	WatchPolicyV1PodDisruptionBudgetListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchPolicyV1PodDisruptionBudgetListForAllNamespaces,omitempty"`
	// watch changes to an object of kind ClusterRole. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/clusterroles/{name}
	WatchRbacAuthorizationV1ClusterRole *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1ClusterRole,omitempty"`
	// watch changes to an object of kind ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings/{name}
	WatchRbacAuthorizationV1ClusterRoleBinding *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1ClusterRoleBinding,omitempty"`
	// watch individual changes to a list of ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings
	WatchRbacAuthorizationV1ClusterRoleBindingList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1ClusterRoleBindingList,omitempty"`
	// watch individual changes to a list of ClusterRole. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/clusterroles
	WatchRbacAuthorizationV1ClusterRoleList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1ClusterRoleList,omitempty"`
	// watch changes to an object of kind Role. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles/{name}
	WatchRbacAuthorizationV1NamespacedRole *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1NamespacedRole,omitempty"`
	// watch changes to an object of kind RoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings/{name}
	WatchRbacAuthorizationV1NamespacedRoleBinding *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1NamespacedRoleBinding,omitempty"`
	// watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings
	WatchRbacAuthorizationV1NamespacedRoleBindingList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1NamespacedRoleBindingList,omitempty"`
	// watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles
	WatchRbacAuthorizationV1NamespacedRoleList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1NamespacedRoleList,omitempty"`
	// watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/rolebindings
	WatchRbacAuthorizationV1RoleBindingListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1RoleBindingListForAllNamespaces,omitempty"`
	// watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/roles
	WatchRbacAuthorizationV1RoleListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1RoleListForAllNamespaces,omitempty"`
	// watch changes to an object of kind PodSchedulingContext. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/podschedulingcontexts/{name}
	WatchResourceV1alpha2NamespacedPodSchedulingContext *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2NamespacedPodSchedulingContext,omitempty"`
	// watch individual changes to a list of PodSchedulingContext. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/podschedulingcontexts
	WatchResourceV1alpha2NamespacedPodSchedulingContextList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2NamespacedPodSchedulingContextList,omitempty"`
	// watch changes to an object of kind ResourceClaim. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/resourceclaims/{name}
	WatchResourceV1alpha2NamespacedResourceClaim *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2NamespacedResourceClaim,omitempty"`
	// watch individual changes to a list of ResourceClaim. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/resourceclaims
	WatchResourceV1alpha2NamespacedResourceClaimList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2NamespacedResourceClaimList,omitempty"`
	// watch changes to an object of kind ResourceClaimTemplate. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/resourceclaimtemplates/{name}
	WatchResourceV1alpha2NamespacedResourceClaimTemplate *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2NamespacedResourceClaimTemplate,omitempty"`
	// watch individual changes to a list of ResourceClaimTemplate. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/resourceclaimtemplates
	WatchResourceV1alpha2NamespacedResourceClaimTemplateList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2NamespacedResourceClaimTemplateList,omitempty"`
	// watch individual changes to a list of PodSchedulingContext. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/podschedulingcontexts
	WatchResourceV1alpha2PodSchedulingContextListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2PodSchedulingContextListForAllNamespaces,omitempty"`
	// watch individual changes to a list of ResourceClaim. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/resourceclaims
	WatchResourceV1alpha2ResourceClaimListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2ResourceClaimListForAllNamespaces,omitempty"`
	// watch individual changes to a list of ResourceClaimTemplate. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/resourceclaimtemplates
	WatchResourceV1alpha2ResourceClaimTemplateListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2ResourceClaimTemplateListForAllNamespaces,omitempty"`
	// watch changes to an object of kind ResourceClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/resourceclasses/{name}
	WatchResourceV1alpha2ResourceClass *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2ResourceClass,omitempty"`
	// watch individual changes to a list of ResourceClass. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/resourceclasses
	WatchResourceV1alpha2ResourceClassList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2ResourceClassList,omitempty"`
	// watch changes to an object of kind PriorityClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/scheduling.k8s.io/v1/watch/priorityclasses/{name}
	WatchSchedulingV1PriorityClass *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchSchedulingV1PriorityClass,omitempty"`
	// watch individual changes to a list of PriorityClass. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/scheduling.k8s.io/v1/watch/priorityclasses
	WatchSchedulingV1PriorityClassList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchSchedulingV1PriorityClassList,omitempty"`
	// watch changes to an object of kind CSIDriver. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/csidrivers/{name}
	WatchStorageV1CSIDriver *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1CSIDriver,omitempty"`
	// watch individual changes to a list of CSIDriver. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/csidrivers
	WatchStorageV1CSIDriverList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1CSIDriverList,omitempty"`
	// watch changes to an object of kind CSINode. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/csinodes/{name}
	WatchStorageV1CSINode *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1CSINode,omitempty"`
	// watch individual changes to a list of CSINode. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/csinodes
	WatchStorageV1CSINodeList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1CSINodeList,omitempty"`
	// watch individual changes to a list of CSIStorageCapacity. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/csistoragecapacities
	WatchStorageV1CSIStorageCapacityListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1CSIStorageCapacityListForAllNamespaces,omitempty"`
	// watch changes to an object of kind CSIStorageCapacity. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/namespaces/{namespace}/csistoragecapacities/{name}
	WatchStorageV1NamespacedCSIStorageCapacity *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1NamespacedCSIStorageCapacity,omitempty"`
	// watch individual changes to a list of CSIStorageCapacity. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/namespaces/{namespace}/csistoragecapacities
	WatchStorageV1NamespacedCSIStorageCapacityList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1NamespacedCSIStorageCapacityList,omitempty"`
	// watch changes to an object of kind StorageClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/storageclasses/{name}
	WatchStorageV1StorageClass *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1StorageClass,omitempty"`
	// watch individual changes to a list of StorageClass. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/storageclasses
	WatchStorageV1StorageClassList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1StorageClassList,omitempty"`
	// watch changes to an object of kind VolumeAttachment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/volumeattachments/{name}
	WatchStorageV1VolumeAttachment *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1VolumeAttachment,omitempty"`
	// watch individual changes to a list of VolumeAttachment. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/volumeattachments
	WatchStorageV1VolumeAttachmentList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1VolumeAttachmentList,omitempty"`
	// get service account issuer OpenID configuration, also known as the 'OIDC discovery doc'
	//
	// Equivalent to GET /.well-known/openid-configuration/
	WellKnownOpenidConfiguration *string `json:"wellKnownOpenidConfiguration,omitempty"`
}

// A viewer for security scheme 'BearerToken'
type ViewerAPIKey struct {
	// connect GET requests to attach of Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/attach
	APIV1NamespacePodAttach *string `json:"apiV1NamespacePodAttach,omitempty"`
	// connect GET requests to exec of Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/exec
	APIV1NamespacePodExec *string `json:"apiV1NamespacePodExec,omitempty"`
	// read log of the specified Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/log
	APIV1NamespacePodLog *string `json:"apiV1NamespacePodLog,omitempty"`
	// connect GET requests to portforward of Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/portforward
	APIV1NamespacePodPortforward *string `json:"apiV1NamespacePodPortforward,omitempty"`
	// connect GET requests to proxy of Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/proxy
	APIV1NamespacePodProxy *string `json:"apiV1NamespacePodProxy,omitempty"`
	// connect GET requests to proxy of Service
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/services/{name}/proxy
	APIV1NamespaceServiceProxy *string `json:"apiV1NamespaceServiceProxy,omitempty"`
	// connect GET requests to proxy of Node
	//
	// Equivalent to GET /api/v1/nodes/{name}/proxy
	APIV1NodeProxy *string `json:"apiV1NodeProxy,omitempty"`
	// connect GET requests to proxy of Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
	ConnectCoreV1GetNamespacedPodProxyWithPath *string `json:"connectCoreV1GetNamespacedPodProxyWithPath,omitempty"`
	// connect GET requests to proxy of Service
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
	ConnectCoreV1GetNamespacedServiceProxyWithPath *string `json:"connectCoreV1GetNamespacedServiceProxyWithPath,omitempty"`
	// connect GET requests to proxy of Node
	//
	// Equivalent to GET /api/v1/nodes/{name}/proxy/{path}
	ConnectCoreV1GetNodeProxyWithPath *string `json:"connectCoreV1GetNodeProxyWithPath,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/
	GetAdmissionregistrationV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAdmissionregistrationV1APIResources,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/
	GetAdmissionregistrationV1alpha1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAdmissionregistrationV1alpha1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/apiextensions.k8s.io/
	GetApiextensionsAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getApiextensionsAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/apiextensions.k8s.io/v1/
	GetApiextensionsV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getApiextensionsV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/apiregistration.k8s.io/
	GetApiregistrationAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getApiregistrationAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/apiregistration.k8s.io/v1/
	GetApiregistrationV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getApiregistrationV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/apps/
	GetAppsAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getAppsAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/apps/v1/
	GetAppsV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAppsV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/authentication.k8s.io/
	GetAuthenticationAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getAuthenticationAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/authentication.k8s.io/v1/
	GetAuthenticationV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAuthenticationV1APIResources,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/authentication.k8s.io/v1alpha1/
	GetAuthenticationV1alpha1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAuthenticationV1alpha1APIResources,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/authentication.k8s.io/v1beta1/
	GetAuthenticationV1beta1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAuthenticationV1beta1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/authorization.k8s.io/
	GetAuthorizationAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getAuthorizationAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/authorization.k8s.io/v1/
	GetAuthorizationV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAuthorizationV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/autoscaling/
	GetAutoscalingAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getAutoscalingAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/autoscaling/v1/
	GetAutoscalingV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAutoscalingV1APIResources,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/autoscaling/v2/
	GetAutoscalingV2APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getAutoscalingV2APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/batch/
	GetBatchAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getBatchAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/batch/v1/
	GetBatchV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getBatchV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/certificates.k8s.io/
	GetCertificatesAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getCertificatesAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1/
	GetCertificatesV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getCertificatesV1APIResources,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1alpha1/
	GetCertificatesV1alpha1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getCertificatesV1alpha1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/coordination.k8s.io/
	GetCoordinationAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getCoordinationAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/coordination.k8s.io/v1/
	GetCoordinationV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getCoordinationV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/discovery.k8s.io/
	GetDiscoveryAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getDiscoveryAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/discovery.k8s.io/v1/
	GetDiscoveryV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getDiscoveryV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/events.k8s.io/
	GetEventsAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getEventsAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/events.k8s.io/v1/
	GetEventsV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getEventsV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/
	GetFlowcontrolApiserverAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getFlowcontrolApiserverAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/
	GetFlowcontrolApiserverV1beta2APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getFlowcontrolApiserverV1beta2APIResources,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/
	GetFlowcontrolApiserverV1beta3APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getFlowcontrolApiserverV1beta3APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/internal.apiserver.k8s.io/
	GetInternalApiserverAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getInternalApiserverAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/internal.apiserver.k8s.io/v1alpha1/
	GetInternalApiserverV1alpha1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getInternalApiserverV1alpha1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/networking.k8s.io/
	GetNetworkingAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getNetworkingAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/
	GetNetworkingV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getNetworkingV1APIResources,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/
	GetNetworkingV1alpha1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getNetworkingV1alpha1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/node.k8s.io/
	GetNodeAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getNodeAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/node.k8s.io/v1/
	GetNodeV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getNodeV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/policy/
	GetPolicyAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getPolicyAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/policy/v1/
	GetPolicyV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getPolicyV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/
	GetRbacAuthorizationAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getRbacAuthorizationAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/
	GetRbacAuthorizationV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getRbacAuthorizationV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/resource.k8s.io/
	GetResourceAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getResourceAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/
	GetResourceV1alpha2APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getResourceV1alpha2APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/scheduling.k8s.io/
	GetSchedulingAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getSchedulingAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/scheduling.k8s.io/v1/
	GetSchedulingV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getSchedulingV1APIResources,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/storage.k8s.io/
	GetStorageAPIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"getStorageAPIGroup,omitempty"`
	// get available resources
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/
	GetStorageV1APIResources *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"getStorageV1APIResources,omitempty"`
	// read the specified MutatingWebhookConfiguration
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}
	IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration `json:"ioK8sApiAdmissionregistrationV1MutatingWebhookConfiguration,omitempty"`
	// list or watch objects of kind MutatingWebhookConfiguration
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations
	IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList `json:"ioK8sApiAdmissionregistrationV1MutatingWebhookConfigurationList,omitempty"`
	// read the specified ValidatingWebhookConfiguration
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}
	IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration `json:"ioK8sApiAdmissionregistrationV1ValidatingWebhookConfiguration,omitempty"`
	// list or watch objects of kind ValidatingWebhookConfiguration
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations
	IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList `json:"ioK8sApiAdmissionregistrationV1ValidatingWebhookConfigurationList,omitempty"`
	// read the specified ValidatingAdmissionPolicy
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}
	IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy `json:"ioK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicy,omitempty"`
	// read the specified ValidatingAdmissionPolicyBinding
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}
	IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding `json:"ioK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding,omitempty"`
	// list or watch objects of kind ValidatingAdmissionPolicyBinding
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings
	IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingList *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingList `json:"ioK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingList,omitempty"`
	// list or watch objects of kind ValidatingAdmissionPolicy
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies
	IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyList *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicyList `json:"ioK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyList,omitempty"`
	// read the specified StorageVersion
	//
	// Equivalent to GET /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}
	IoK8sAPIApiserverinternalV1alpha1StorageVersion *IoK8sAPIApiserverinternalV1alpha1StorageVersion `json:"ioK8sApiApiserverinternalV1alpha1StorageVersion,omitempty"`
	// list or watch objects of kind StorageVersion
	//
	// Equivalent to GET /apis/internal.apiserver.k8s.io/v1alpha1/storageversions
	IoK8sAPIApiserverinternalV1alpha1StorageVersionList *IoK8sAPIApiserverinternalV1alpha1StorageVersionList `json:"ioK8sApiApiserverinternalV1alpha1StorageVersionList,omitempty"`
	// read the specified ControllerRevision
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}
	IoK8sAPIAppsV1ControllerRevision *IoK8sAPIAppsV1ControllerRevision `json:"ioK8sApiAppsV1ControllerRevision,omitempty"`
	// list or watch objects of kind ControllerRevision
	//
	// Equivalent to GET /apis/apps/v1/controllerrevisions
	IoK8sAPIAppsV1ControllerRevisionList *IoK8sAPIAppsV1ControllerRevisionList `json:"ioK8sApiAppsV1ControllerRevisionList,omitempty"`
	// read the specified DaemonSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}
	IoK8sAPIAppsV1DaemonSet *IoK8sAPIAppsV1DaemonSet `json:"ioK8sApiAppsV1DaemonSet,omitempty"`
	// list or watch objects of kind DaemonSet
	//
	// Equivalent to GET /apis/apps/v1/daemonsets
	IoK8sAPIAppsV1DaemonSetList *IoK8sAPIAppsV1DaemonSetList `json:"ioK8sApiAppsV1DaemonSetList,omitempty"`
	// read the specified Deployment
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/deployments/{name}
	IoK8sAPIAppsV1Deployment *IoK8sAPIAppsV1Deployment `json:"ioK8sApiAppsV1Deployment,omitempty"`
	// list or watch objects of kind Deployment
	//
	// Equivalent to GET /apis/apps/v1/deployments
	IoK8sAPIAppsV1DeploymentList *IoK8sAPIAppsV1DeploymentList `json:"ioK8sApiAppsV1DeploymentList,omitempty"`
	// read the specified ReplicaSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/replicasets/{name}
	IoK8sAPIAppsV1ReplicaSet *IoK8sAPIAppsV1ReplicaSet `json:"ioK8sApiAppsV1ReplicaSet,omitempty"`
	// list or watch objects of kind ReplicaSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/replicasets
	IoK8sAPIAppsV1ReplicaSetList *IoK8sAPIAppsV1ReplicaSetList `json:"ioK8sApiAppsV1ReplicaSetList,omitempty"`
	// read the specified StatefulSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}
	IoK8sAPIAppsV1StatefulSet *IoK8sAPIAppsV1StatefulSet `json:"ioK8sApiAppsV1StatefulSet,omitempty"`
	// list or watch objects of kind StatefulSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/statefulsets
	IoK8sAPIAppsV1StatefulSetList *IoK8sAPIAppsV1StatefulSetList `json:"ioK8sApiAppsV1StatefulSetList,omitempty"`
	// read the specified HorizontalPodAutoscaler
	//
	// Equivalent to GET /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}
	IoK8sAPIAutoscalingV1HorizontalPodAutoscaler *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler `json:"ioK8sApiAutoscalingV1HorizontalPodAutoscaler,omitempty"`
	// list or watch objects of kind HorizontalPodAutoscaler
	//
	// Equivalent to GET /apis/autoscaling/v1/horizontalpodautoscalers
	IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList `json:"ioK8sApiAutoscalingV1HorizontalPodAutoscalerList,omitempty"`
	// read scale of the specified ReplicationController
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale
	IoK8sAPIAutoscalingV1Scale *IoK8sAPIAutoscalingV1Scale `json:"ioK8sApiAutoscalingV1Scale,omitempty"`
	// read the specified HorizontalPodAutoscaler
	//
	// Equivalent to GET /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}
	IoK8sAPIAutoscalingV2HorizontalPodAutoscaler *IoK8sAPIAutoscalingV2HorizontalPodAutoscaler `json:"ioK8sApiAutoscalingV2HorizontalPodAutoscaler,omitempty"`
	// list or watch objects of kind HorizontalPodAutoscaler
	//
	// Equivalent to GET /apis/autoscaling/v2/horizontalpodautoscalers
	IoK8sAPIAutoscalingV2HorizontalPodAutoscalerList *IoK8sAPIAutoscalingV2HorizontalPodAutoscalerList `json:"ioK8sApiAutoscalingV2HorizontalPodAutoscalerList,omitempty"`
	// read the specified CronJob
	//
	// Equivalent to GET /apis/batch/v1/namespaces/{namespace}/cronjobs/{name}
	IoK8sAPIBatchV1CronJob *IoK8sAPIBatchV1CronJob `json:"ioK8sApiBatchV1CronJob,omitempty"`
	// list or watch objects of kind CronJob
	//
	// Equivalent to GET /apis/batch/v1/cronjobs
	IoK8sAPIBatchV1CronJobList *IoK8sAPIBatchV1CronJobList `json:"ioK8sApiBatchV1CronJobList,omitempty"`
	// read the specified Job
	//
	// Equivalent to GET /apis/batch/v1/namespaces/{namespace}/jobs/{name}
	IoK8sAPIBatchV1Job *IoK8sAPIBatchV1Job `json:"ioK8sApiBatchV1Job,omitempty"`
	// list or watch objects of kind Job
	//
	// Equivalent to GET /apis/batch/v1/jobs
	IoK8sAPIBatchV1JobList *IoK8sAPIBatchV1JobList `json:"ioK8sApiBatchV1JobList,omitempty"`
	// read the specified CertificateSigningRequest
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}
	IoK8sAPICertificatesV1CertificateSigningRequest *IoK8sAPICertificatesV1CertificateSigningRequest `json:"ioK8sApiCertificatesV1CertificateSigningRequest,omitempty"`
	// list or watch objects of kind CertificateSigningRequest
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1/certificatesigningrequests
	IoK8sAPICertificatesV1CertificateSigningRequestList *IoK8sAPICertificatesV1CertificateSigningRequestList `json:"ioK8sApiCertificatesV1CertificateSigningRequestList,omitempty"`
	// read the specified ClusterTrustBundle
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}
	IoK8sAPICertificatesV1alpha1ClusterTrustBundle *IoK8sAPICertificatesV1alpha1ClusterTrustBundle `json:"ioK8sApiCertificatesV1alpha1ClusterTrustBundle,omitempty"`
	// list or watch objects of kind ClusterTrustBundle
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1alpha1/clustertrustbundles
	IoK8sAPICertificatesV1alpha1ClusterTrustBundleList *IoK8sAPICertificatesV1alpha1ClusterTrustBundleList `json:"ioK8sApiCertificatesV1alpha1ClusterTrustBundleList,omitempty"`
	// read the specified Lease
	//
	// Equivalent to GET /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}
	IoK8sAPICoordinationV1Lease *IoK8sAPICoordinationV1Lease `json:"ioK8sApiCoordinationV1Lease,omitempty"`
	// list or watch objects of kind Lease
	//
	// Equivalent to GET /apis/coordination.k8s.io/v1/leases
	IoK8sAPICoordinationV1LeaseList *IoK8sAPICoordinationV1LeaseList `json:"ioK8sApiCoordinationV1LeaseList,omitempty"`
	// read the specified ComponentStatus
	//
	// Equivalent to GET /api/v1/componentstatuses/{name}
	IoK8sAPICoreV1ComponentStatus *IoK8sAPICoreV1ComponentStatus `json:"ioK8sApiCoreV1ComponentStatus,omitempty"`
	// list objects of kind ComponentStatus
	//
	// Equivalent to GET /api/v1/componentstatuses
	IoK8sAPICoreV1ComponentStatusList *IoK8sAPICoreV1ComponentStatusList `json:"ioK8sApiCoreV1ComponentStatusList,omitempty"`
	// read the specified ConfigMap
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/configmaps/{name}
	IoK8sAPICoreV1ConfigMap *IoK8sAPICoreV1ConfigMap `json:"ioK8sApiCoreV1ConfigMap,omitempty"`
	// list or watch objects of kind ConfigMap
	//
	// Equivalent to GET /api/v1/configmaps
	IoK8sAPICoreV1ConfigMapList *IoK8sAPICoreV1ConfigMapList `json:"ioK8sApiCoreV1ConfigMapList,omitempty"`
	// read the specified Endpoints
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/endpoints/{name}
	IoK8sAPICoreV1Endpoints *IoK8sAPICoreV1Endpoints `json:"ioK8sApiCoreV1Endpoints,omitempty"`
	// list or watch objects of kind Endpoints
	//
	// Equivalent to GET /api/v1/endpoints
	IoK8sAPICoreV1EndpointsList *IoK8sAPICoreV1EndpointsList `json:"ioK8sApiCoreV1EndpointsList,omitempty"`
	// read the specified Event
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/events/{name}
	IoK8sAPICoreV1Event *IoK8sAPICoreV1Event `json:"ioK8sApiCoreV1Event,omitempty"`
	// list or watch objects of kind Event
	//
	// Equivalent to GET /api/v1/events
	IoK8sAPICoreV1EventList *IoK8sAPICoreV1EventList `json:"ioK8sApiCoreV1EventList,omitempty"`
	// read the specified LimitRange
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/limitranges/{name}
	IoK8sAPICoreV1LimitRange *IoK8sAPICoreV1LimitRange `json:"ioK8sApiCoreV1LimitRange,omitempty"`
	// list or watch objects of kind LimitRange
	//
	// Equivalent to GET /api/v1/limitranges
	IoK8sAPICoreV1LimitRangeList *IoK8sAPICoreV1LimitRangeList `json:"ioK8sApiCoreV1LimitRangeList,omitempty"`
	// read the specified Namespace
	//
	// Equivalent to GET /api/v1/namespaces/{name}
	IoK8sAPICoreV1Namespace *IoK8sAPICoreV1Namespace `json:"ioK8sApiCoreV1Namespace,omitempty"`
	// list or watch objects of kind Namespace
	//
	// Equivalent to GET /api/v1/namespaces
	IoK8sAPICoreV1NamespaceList *IoK8sAPICoreV1NamespaceList `json:"ioK8sApiCoreV1NamespaceList,omitempty"`
	// read the specified Node
	//
	// Equivalent to GET /api/v1/nodes/{name}
	IoK8sAPICoreV1Node *IoK8sAPICoreV1Node `json:"ioK8sApiCoreV1Node,omitempty"`
	// list or watch objects of kind Node
	//
	// Equivalent to GET /api/v1/nodes
	IoK8sAPICoreV1NodeList *IoK8sAPICoreV1NodeList `json:"ioK8sApiCoreV1NodeList,omitempty"`
	// read the specified PersistentVolume
	//
	// Equivalent to GET /api/v1/persistentvolumes/{name}
	IoK8sAPICoreV1PersistentVolume *IoK8sAPICoreV1PersistentVolume `json:"ioK8sApiCoreV1PersistentVolume,omitempty"`
	// read the specified PersistentVolumeClaim
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}
	IoK8sAPICoreV1PersistentVolumeClaim *IoK8sAPICoreV1PersistentVolumeClaim `json:"ioK8sApiCoreV1PersistentVolumeClaim,omitempty"`
	// list or watch objects of kind PersistentVolumeClaim
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/persistentvolumeclaims
	IoK8sAPICoreV1PersistentVolumeClaimList *IoK8sAPICoreV1PersistentVolumeClaimList `json:"ioK8sApiCoreV1PersistentVolumeClaimList,omitempty"`
	// list or watch objects of kind PersistentVolume
	//
	// Equivalent to GET /api/v1/persistentvolumes
	IoK8sAPICoreV1PersistentVolumeList *IoK8sAPICoreV1PersistentVolumeList `json:"ioK8sApiCoreV1PersistentVolumeList,omitempty"`
	// read the specified Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}
	IoK8sAPICoreV1Pod *IoK8sAPICoreV1Pod `json:"ioK8sApiCoreV1Pod,omitempty"`
	// list or watch objects of kind Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods
	IoK8sAPICoreV1PodList *IoK8sAPICoreV1PodList `json:"ioK8sApiCoreV1PodList,omitempty"`
	// read the specified PodTemplate
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/podtemplates/{name}
	IoK8sAPICoreV1PodTemplate *IoK8sAPICoreV1PodTemplate `json:"ioK8sApiCoreV1PodTemplate,omitempty"`
	// list or watch objects of kind PodTemplate
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/podtemplates
	IoK8sAPICoreV1PodTemplateList *IoK8sAPICoreV1PodTemplateList `json:"ioK8sApiCoreV1PodTemplateList,omitempty"`
	// read the specified ReplicationController
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/replicationcontrollers/{name}
	IoK8sAPICoreV1ReplicationController *IoK8sAPICoreV1ReplicationController `json:"ioK8sApiCoreV1ReplicationController,omitempty"`
	// list or watch objects of kind ReplicationController
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/replicationcontrollers
	IoK8sAPICoreV1ReplicationControllerList *IoK8sAPICoreV1ReplicationControllerList `json:"ioK8sApiCoreV1ReplicationControllerList,omitempty"`
	// read the specified ResourceQuota
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/resourcequotas/{name}
	IoK8sAPICoreV1ResourceQuota *IoK8sAPICoreV1ResourceQuota `json:"ioK8sApiCoreV1ResourceQuota,omitempty"`
	// list or watch objects of kind ResourceQuota
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/resourcequotas
	IoK8sAPICoreV1ResourceQuotaList *IoK8sAPICoreV1ResourceQuotaList `json:"ioK8sApiCoreV1ResourceQuotaList,omitempty"`
	// read the specified Secret
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/secrets/{name}
	IoK8sAPICoreV1Secret *IoK8sAPICoreV1Secret `json:"ioK8sApiCoreV1Secret,omitempty"`
	// list or watch objects of kind Secret
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/secrets
	IoK8sAPICoreV1SecretList *IoK8sAPICoreV1SecretList `json:"ioK8sApiCoreV1SecretList,omitempty"`
	// read the specified Service
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/services/{name}
	IoK8sAPICoreV1Service *IoK8sAPICoreV1Service `json:"ioK8sApiCoreV1Service,omitempty"`
	// read the specified ServiceAccount
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/serviceaccounts/{name}
	IoK8sAPICoreV1ServiceAccount *IoK8sAPICoreV1ServiceAccount `json:"ioK8sApiCoreV1ServiceAccount,omitempty"`
	// list or watch objects of kind ServiceAccount
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/serviceaccounts
	IoK8sAPICoreV1ServiceAccountList *IoK8sAPICoreV1ServiceAccountList `json:"ioK8sApiCoreV1ServiceAccountList,omitempty"`
	// list or watch objects of kind Service
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/services
	IoK8sAPICoreV1ServiceList *IoK8sAPICoreV1ServiceList `json:"ioK8sApiCoreV1ServiceList,omitempty"`
	// read the specified EndpointSlice
	//
	// Equivalent to GET /apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}
	IoK8sAPIDiscoveryV1EndpointSlice *IoK8sAPIDiscoveryV1EndpointSlice `json:"ioK8sApiDiscoveryV1EndpointSlice,omitempty"`
	// list or watch objects of kind EndpointSlice
	//
	// Equivalent to GET /apis/discovery.k8s.io/v1/endpointslices
	IoK8sAPIDiscoveryV1EndpointSliceList *IoK8sAPIDiscoveryV1EndpointSliceList `json:"ioK8sApiDiscoveryV1EndpointSliceList,omitempty"`
	// read the specified Event
	//
	// Equivalent to GET /apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}
	IoK8sAPIEventsV1Event *IoK8sAPIEventsV1Event `json:"ioK8sApiEventsV1Event,omitempty"`
	// list or watch objects of kind Event
	//
	// Equivalent to GET /apis/events.k8s.io/v1/events
	IoK8sAPIEventsV1EventList *IoK8sAPIEventsV1EventList `json:"ioK8sApiEventsV1EventList,omitempty"`
	// read the specified FlowSchema
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}
	IoK8sAPIFlowcontrolV1beta2FlowSchema *IoK8sAPIFlowcontrolV1beta2FlowSchema `json:"ioK8sApiFlowcontrolV1beta2FlowSchema,omitempty"`
	// list or watch objects of kind FlowSchema
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas
	IoK8sAPIFlowcontrolV1beta2FlowSchemaList *IoK8sAPIFlowcontrolV1beta2FlowSchemaList `json:"ioK8sApiFlowcontrolV1beta2FlowSchemaList,omitempty"`
	// read the specified PriorityLevelConfiguration
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}
	IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration `json:"ioK8sApiFlowcontrolV1beta2PriorityLevelConfiguration,omitempty"`
	// list or watch objects of kind PriorityLevelConfiguration
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations
	IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList `json:"ioK8sApiFlowcontrolV1beta2PriorityLevelConfigurationList,omitempty"`
	// read the specified FlowSchema
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}
	IoK8sAPIFlowcontrolV1beta3FlowSchema *IoK8sAPIFlowcontrolV1beta3FlowSchema `json:"ioK8sApiFlowcontrolV1beta3FlowSchema,omitempty"`
	// list or watch objects of kind FlowSchema
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas
	IoK8sAPIFlowcontrolV1beta3FlowSchemaList *IoK8sAPIFlowcontrolV1beta3FlowSchemaList `json:"ioK8sApiFlowcontrolV1beta3FlowSchemaList,omitempty"`
	// read the specified PriorityLevelConfiguration
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}
	IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration `json:"ioK8sApiFlowcontrolV1beta3PriorityLevelConfiguration,omitempty"`
	// list or watch objects of kind PriorityLevelConfiguration
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations
	IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationList *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfigurationList `json:"ioK8sApiFlowcontrolV1beta3PriorityLevelConfigurationList,omitempty"`
	// read the specified Ingress
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}
	IoK8sAPINetworkingV1Ingress *IoK8sAPINetworkingV1Ingress `json:"ioK8sApiNetworkingV1Ingress,omitempty"`
	// read the specified IngressClass
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/ingressclasses/{name}
	IoK8sAPINetworkingV1IngressClass *IoK8sAPINetworkingV1IngressClass `json:"ioK8sApiNetworkingV1IngressClass,omitempty"`
	// list or watch objects of kind IngressClass
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/ingressclasses
	IoK8sAPINetworkingV1IngressClassList *IoK8sAPINetworkingV1IngressClassList `json:"ioK8sApiNetworkingV1IngressClassList,omitempty"`
	// list or watch objects of kind Ingress
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/ingresses
	IoK8sAPINetworkingV1IngressList *IoK8sAPINetworkingV1IngressList `json:"ioK8sApiNetworkingV1IngressList,omitempty"`
	// read the specified NetworkPolicy
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}
	IoK8sAPINetworkingV1NetworkPolicy *IoK8sAPINetworkingV1NetworkPolicy `json:"ioK8sApiNetworkingV1NetworkPolicy,omitempty"`
	// list or watch objects of kind NetworkPolicy
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies
	IoK8sAPINetworkingV1NetworkPolicyList *IoK8sAPINetworkingV1NetworkPolicyList `json:"ioK8sApiNetworkingV1NetworkPolicyList,omitempty"`
	// read the specified ClusterCIDR
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/clustercidrs/{name}
	IoK8sAPINetworkingV1alpha1ClusterCidr *IoK8sAPINetworkingV1alpha1ClusterCidr `json:"ioK8sApiNetworkingV1alpha1ClusterCIDR,omitempty"`
	// list or watch objects of kind ClusterCIDR
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/clustercidrs
	IoK8sAPINetworkingV1alpha1ClusterCIDRList *IoK8sAPINetworkingV1alpha1ClusterCIDRList `json:"ioK8sApiNetworkingV1alpha1ClusterCIDRList,omitempty"`
	// read the specified IPAddress
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/ipaddresses/{name}
	IoK8sAPINetworkingV1alpha1IPAddress *IoK8sAPINetworkingV1alpha1IPAddress `json:"ioK8sApiNetworkingV1alpha1IPAddress,omitempty"`
	// list or watch objects of kind IPAddress
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/ipaddresses
	IoK8sAPINetworkingV1alpha1IPAddressList *IoK8sAPINetworkingV1alpha1IPAddressList `json:"ioK8sApiNetworkingV1alpha1IPAddressList,omitempty"`
	// read the specified RuntimeClass
	//
	// Equivalent to GET /apis/node.k8s.io/v1/runtimeclasses/{name}
	IoK8sAPINodeV1RuntimeClass *IoK8sAPINodeV1RuntimeClass `json:"ioK8sApiNodeV1RuntimeClass,omitempty"`
	// list or watch objects of kind RuntimeClass
	//
	// Equivalent to GET /apis/node.k8s.io/v1/runtimeclasses
	IoK8sAPINodeV1RuntimeClassList *IoK8sAPINodeV1RuntimeClassList `json:"ioK8sApiNodeV1RuntimeClassList,omitempty"`
	// read the specified PodDisruptionBudget
	//
	// Equivalent to GET /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}
	IoK8sAPIPolicyV1PodDisruptionBudget *IoK8sAPIPolicyV1PodDisruptionBudget `json:"ioK8sApiPolicyV1PodDisruptionBudget,omitempty"`
	// list or watch objects of kind PodDisruptionBudget
	//
	// Equivalent to GET /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets
	IoK8sAPIPolicyV1PodDisruptionBudgetList *IoK8sAPIPolicyV1PodDisruptionBudgetList `json:"ioK8sApiPolicyV1PodDisruptionBudgetList,omitempty"`
	// read the specified ClusterRole
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/clusterroles/{name}
	IoK8sAPIRbacV1ClusterRole *IoK8sAPIRbacV1ClusterRole `json:"ioK8sApiRbacV1ClusterRole,omitempty"`
	// read the specified ClusterRoleBinding
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}
	IoK8sAPIRbacV1ClusterRoleBinding *IoK8sAPIRbacV1ClusterRoleBinding `json:"ioK8sApiRbacV1ClusterRoleBinding,omitempty"`
	// list or watch objects of kind ClusterRoleBinding
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/clusterrolebindings
	IoK8sAPIRbacV1ClusterRoleBindingList *IoK8sAPIRbacV1ClusterRoleBindingList `json:"ioK8sApiRbacV1ClusterRoleBindingList,omitempty"`
	// list or watch objects of kind ClusterRole
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/clusterroles
	IoK8sAPIRbacV1ClusterRoleList *IoK8sAPIRbacV1ClusterRoleList `json:"ioK8sApiRbacV1ClusterRoleList,omitempty"`
	// read the specified Role
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}
	IoK8sAPIRbacV1Role *IoK8sAPIRbacV1Role `json:"ioK8sApiRbacV1Role,omitempty"`
	// read the specified RoleBinding
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}
	IoK8sAPIRbacV1RoleBinding *IoK8sAPIRbacV1RoleBinding `json:"ioK8sApiRbacV1RoleBinding,omitempty"`
	// list or watch objects of kind RoleBinding
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings
	IoK8sAPIRbacV1RoleBindingList *IoK8sAPIRbacV1RoleBindingList `json:"ioK8sApiRbacV1RoleBindingList,omitempty"`
	// list or watch objects of kind Role
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles
	IoK8sAPIRbacV1RoleList *IoK8sAPIRbacV1RoleList `json:"ioK8sApiRbacV1RoleList,omitempty"`
	// read the specified PodSchedulingContext
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}
	IoK8sAPIResourceV1alpha2PodSchedulingContext *IoK8sAPIResourceV1alpha2PodSchedulingContext `json:"ioK8sApiResourceV1alpha2PodSchedulingContext,omitempty"`
	// list or watch objects of kind PodSchedulingContext
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts
	IoK8sAPIResourceV1alpha2PodSchedulingContextList *IoK8sAPIResourceV1alpha2PodSchedulingContextList `json:"ioK8sApiResourceV1alpha2PodSchedulingContextList,omitempty"`
	// read the specified ResourceClaim
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}
	IoK8sAPIResourceV1alpha2ResourceClaim *IoK8sAPIResourceV1alpha2ResourceClaim `json:"ioK8sApiResourceV1alpha2ResourceClaim,omitempty"`
	// list or watch objects of kind ResourceClaim
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims
	IoK8sAPIResourceV1alpha2ResourceClaimList *IoK8sAPIResourceV1alpha2ResourceClaimList `json:"ioK8sApiResourceV1alpha2ResourceClaimList,omitempty"`
	// read the specified ResourceClaimTemplate
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}
	IoK8sAPIResourceV1alpha2ResourceClaimTemplate *IoK8sAPIResourceV1alpha2ResourceClaimTemplate `json:"ioK8sApiResourceV1alpha2ResourceClaimTemplate,omitempty"`
	// list or watch objects of kind ResourceClaimTemplate
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates
	IoK8sAPIResourceV1alpha2ResourceClaimTemplateList *IoK8sAPIResourceV1alpha2ResourceClaimTemplateList `json:"ioK8sApiResourceV1alpha2ResourceClaimTemplateList,omitempty"`
	// read the specified ResourceClass
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/resourceclasses/{name}
	IoK8sAPIResourceV1alpha2ResourceClass *IoK8sAPIResourceV1alpha2ResourceClass `json:"ioK8sApiResourceV1alpha2ResourceClass,omitempty"`
	// list or watch objects of kind ResourceClass
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/resourceclasses
	IoK8sAPIResourceV1alpha2ResourceClassList *IoK8sAPIResourceV1alpha2ResourceClassList `json:"ioK8sApiResourceV1alpha2ResourceClassList,omitempty"`
	// read the specified PriorityClass
	//
	// Equivalent to GET /apis/scheduling.k8s.io/v1/priorityclasses/{name}
	IoK8sAPISchedulingV1PriorityClass *IoK8sAPISchedulingV1PriorityClass `json:"ioK8sApiSchedulingV1PriorityClass,omitempty"`
	// list or watch objects of kind PriorityClass
	//
	// Equivalent to GET /apis/scheduling.k8s.io/v1/priorityclasses
	IoK8sAPISchedulingV1PriorityClassList *IoK8sAPISchedulingV1PriorityClassList `json:"ioK8sApiSchedulingV1PriorityClassList,omitempty"`
	// read the specified CSIDriver
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/csidrivers/{name}
	IoK8sAPIStorageV1CSIDriver *IoK8sAPIStorageV1CSIDriver `json:"ioK8sApiStorageV1CSIDriver,omitempty"`
	// list or watch objects of kind CSIDriver
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/csidrivers
	IoK8sAPIStorageV1CSIDriverList *IoK8sAPIStorageV1CSIDriverList `json:"ioK8sApiStorageV1CSIDriverList,omitempty"`
	// read the specified CSINode
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/csinodes/{name}
	IoK8sAPIStorageV1CSINode *IoK8sAPIStorageV1CSINode `json:"ioK8sApiStorageV1CSINode,omitempty"`
	// list or watch objects of kind CSINode
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/csinodes
	IoK8sAPIStorageV1CSINodeList *IoK8sAPIStorageV1CSINodeList `json:"ioK8sApiStorageV1CSINodeList,omitempty"`
	// read the specified CSIStorageCapacity
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities/{name}
	IoK8sAPIStorageV1CSIStorageCapacity *IoK8sAPIStorageV1CSIStorageCapacity `json:"ioK8sApiStorageV1CSIStorageCapacity,omitempty"`
	// list or watch objects of kind CSIStorageCapacity
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/csistoragecapacities
	IoK8sAPIStorageV1CSIStorageCapacityList *IoK8sAPIStorageV1CSIStorageCapacityList `json:"ioK8sApiStorageV1CSIStorageCapacityList,omitempty"`
	// read the specified StorageClass
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/storageclasses/{name}
	IoK8sAPIStorageV1StorageClass *IoK8sAPIStorageV1StorageClass `json:"ioK8sApiStorageV1StorageClass,omitempty"`
	// list or watch objects of kind StorageClass
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/storageclasses
	IoK8sAPIStorageV1StorageClassList *IoK8sAPIStorageV1StorageClassList `json:"ioK8sApiStorageV1StorageClassList,omitempty"`
	// read the specified VolumeAttachment
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/volumeattachments/{name}
	IoK8sAPIStorageV1VolumeAttachment *IoK8sAPIStorageV1VolumeAttachment `json:"ioK8sApiStorageV1VolumeAttachment,omitempty"`
	// list or watch objects of kind VolumeAttachment
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/volumeattachments
	IoK8sAPIStorageV1VolumeAttachmentList *IoK8sAPIStorageV1VolumeAttachmentList `json:"ioK8sApiStorageV1VolumeAttachmentList,omitempty"`
	// read the specified CustomResourceDefinition
	//
	// Equivalent to GET /apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}
	IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition `json:"ioK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition,omitempty"`
	// list or watch objects of kind CustomResourceDefinition
	//
	// Equivalent to GET /apis/apiextensions.k8s.io/v1/customresourcedefinitions
	IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList `json:"ioK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList,omitempty"`
	// get information of a group
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/
	IoK8sApimachineryPkgApisMetaV1APIGroup *IoK8sApimachineryPkgApisMetaV1APIGroup `json:"ioK8sApimachineryPkgApisMetaV1APIGroup,omitempty"`
	// get available API versions
	//
	// Equivalent to GET /apis/
	IoK8sApimachineryPkgApisMetaV1APIGroupList *IoK8sApimachineryPkgApisMetaV1APIGroupList `json:"ioK8sApimachineryPkgApisMetaV1APIGroupList,omitempty"`
	// get available resources
	//
	// Equivalent to GET /api/v1/
	IoK8sApimachineryPkgApisMetaV1APIResourceList *IoK8sApimachineryPkgApisMetaV1APIResourceList `json:"ioK8sApimachineryPkgApisMetaV1APIResourceList,omitempty"`
	// get available API versions
	//
	// Equivalent to GET /api/
	IoK8sApimachineryPkgApisMetaV1APIVersions *IoK8sApimachineryPkgApisMetaV1APIVersions `json:"ioK8sApimachineryPkgApisMetaV1APIVersions,omitempty"`
	// watch individual changes to a list of ConfigMap. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/configmaps
	IoK8sApimachineryPkgApisMetaV1WatchEvent *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"ioK8sApimachineryPkgApisMetaV1WatchEvent,omitempty"`
	// get the code version
	//
	// Equivalent to GET /version/
	IoK8sApimachineryPkgVersionInfo *IoK8sApimachineryPkgVersionInfo `json:"ioK8sApimachineryPkgVersionInfo,omitempty"`
	// read the specified APIService
	//
	// Equivalent to GET /apis/apiregistration.k8s.io/v1/apiservices/{name}
	IoK8sKubeAggregatorPkgApisApiregistrationV1APIService *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService `json:"ioK8sKubeAggregatorPkgApisApiregistrationV1APIService,omitempty"`
	// list or watch objects of kind APIService
	//
	// Equivalent to GET /apis/apiregistration.k8s.io/v1/apiservices
	IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList `json:"ioK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList,omitempty"`
	// list or watch objects of kind ControllerRevision
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/controllerrevisions
	ListAppsV1NamespacedControllerRevision *IoK8sAPIAppsV1ControllerRevisionList `json:"listAppsV1NamespacedControllerRevision,omitempty"`
	// list or watch objects of kind DaemonSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/daemonsets
	ListAppsV1NamespacedDaemonSet *IoK8sAPIAppsV1DaemonSetList `json:"listAppsV1NamespacedDaemonSet,omitempty"`
	// list or watch objects of kind Deployment
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/deployments
	ListAppsV1NamespacedDeployment *IoK8sAPIAppsV1DeploymentList `json:"listAppsV1NamespacedDeployment,omitempty"`
	// list or watch objects of kind ReplicaSet
	//
	// Equivalent to GET /apis/apps/v1/replicasets
	ListAppsV1ReplicaSetForAllNamespaces *IoK8sAPIAppsV1ReplicaSetList `json:"listAppsV1ReplicaSetForAllNamespaces,omitempty"`
	// list or watch objects of kind StatefulSet
	//
	// Equivalent to GET /apis/apps/v1/statefulsets
	ListAppsV1StatefulSetForAllNamespaces *IoK8sAPIAppsV1StatefulSetList `json:"listAppsV1StatefulSetForAllNamespaces,omitempty"`
	// list or watch objects of kind HorizontalPodAutoscaler
	//
	// Equivalent to GET /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers
	ListAutoscalingV1NamespacedHorizontalPodAutoscaler *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList `json:"listAutoscalingV1NamespacedHorizontalPodAutoscaler,omitempty"`
	// list or watch objects of kind HorizontalPodAutoscaler
	//
	// Equivalent to GET /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers
	ListAutoscalingV2NamespacedHorizontalPodAutoscaler *IoK8sAPIAutoscalingV2HorizontalPodAutoscalerList `json:"listAutoscalingV2NamespacedHorizontalPodAutoscaler,omitempty"`
	// list or watch objects of kind CronJob
	//
	// Equivalent to GET /apis/batch/v1/namespaces/{namespace}/cronjobs
	ListBatchV1NamespacedCronJob *IoK8sAPIBatchV1CronJobList `json:"listBatchV1NamespacedCronJob,omitempty"`
	// list or watch objects of kind Job
	//
	// Equivalent to GET /apis/batch/v1/namespaces/{namespace}/jobs
	ListBatchV1NamespacedJob *IoK8sAPIBatchV1JobList `json:"listBatchV1NamespacedJob,omitempty"`
	// list or watch objects of kind Lease
	//
	// Equivalent to GET /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases
	ListCoordinationV1NamespacedLease *IoK8sAPICoordinationV1LeaseList `json:"listCoordinationV1NamespacedLease,omitempty"`
	// list or watch objects of kind ConfigMap
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/configmaps
	ListCoreV1NamespacedConfigMap *IoK8sAPICoreV1ConfigMapList `json:"listCoreV1NamespacedConfigMap,omitempty"`
	// list or watch objects of kind Endpoints
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/endpoints
	ListCoreV1NamespacedEndpoints *IoK8sAPICoreV1EndpointsList `json:"listCoreV1NamespacedEndpoints,omitempty"`
	// list or watch objects of kind Event
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/events
	ListCoreV1NamespacedEvent *IoK8sAPICoreV1EventList `json:"listCoreV1NamespacedEvent,omitempty"`
	// list or watch objects of kind LimitRange
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/limitranges
	ListCoreV1NamespacedLimitRange *IoK8sAPICoreV1LimitRangeList `json:"listCoreV1NamespacedLimitRange,omitempty"`
	// list or watch objects of kind PersistentVolumeClaim
	//
	// Equivalent to GET /api/v1/persistentvolumeclaims
	ListCoreV1PersistentVolumeClaimForAllNamespaces *IoK8sAPICoreV1PersistentVolumeClaimList `json:"listCoreV1PersistentVolumeClaimForAllNamespaces,omitempty"`
	// list or watch objects of kind Pod
	//
	// Equivalent to GET /api/v1/pods
	ListCoreV1PodForAllNamespaces *IoK8sAPICoreV1PodList `json:"listCoreV1PodForAllNamespaces,omitempty"`
	// list or watch objects of kind PodTemplate
	//
	// Equivalent to GET /api/v1/podtemplates
	ListCoreV1PodTemplateForAllNamespaces *IoK8sAPICoreV1PodTemplateList `json:"listCoreV1PodTemplateForAllNamespaces,omitempty"`
	// list or watch objects of kind ReplicationController
	//
	// Equivalent to GET /api/v1/replicationcontrollers
	ListCoreV1ReplicationControllerForAllNamespaces *IoK8sAPICoreV1ReplicationControllerList `json:"listCoreV1ReplicationControllerForAllNamespaces,omitempty"`
	// list or watch objects of kind ResourceQuota
	//
	// Equivalent to GET /api/v1/resourcequotas
	ListCoreV1ResourceQuotaForAllNamespaces *IoK8sAPICoreV1ResourceQuotaList `json:"listCoreV1ResourceQuotaForAllNamespaces,omitempty"`
	// list or watch objects of kind Secret
	//
	// Equivalent to GET /api/v1/secrets
	ListCoreV1SecretForAllNamespaces *IoK8sAPICoreV1SecretList `json:"listCoreV1SecretForAllNamespaces,omitempty"`
	// list or watch objects of kind ServiceAccount
	//
	// Equivalent to GET /api/v1/serviceaccounts
	ListCoreV1ServiceAccountForAllNamespaces *IoK8sAPICoreV1ServiceAccountList `json:"listCoreV1ServiceAccountForAllNamespaces,omitempty"`
	// list or watch objects of kind Service
	//
	// Equivalent to GET /api/v1/services
	ListCoreV1ServiceForAllNamespaces *IoK8sAPICoreV1ServiceList `json:"listCoreV1ServiceForAllNamespaces,omitempty"`
	// list or watch objects of kind EndpointSlice
	//
	// Equivalent to GET /apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices
	ListDiscoveryV1NamespacedEndpointSlice *IoK8sAPIDiscoveryV1EndpointSliceList `json:"listDiscoveryV1NamespacedEndpointSlice,omitempty"`
	// list or watch objects of kind Event
	//
	// Equivalent to GET /apis/events.k8s.io/v1/namespaces/{namespace}/events
	ListEventsV1NamespacedEvent *IoK8sAPIEventsV1EventList `json:"listEventsV1NamespacedEvent,omitempty"`
	// list or watch objects of kind Ingress
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses
	ListNetworkingV1NamespacedIngress *IoK8sAPINetworkingV1IngressList `json:"listNetworkingV1NamespacedIngress,omitempty"`
	// list or watch objects of kind NetworkPolicy
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/networkpolicies
	ListNetworkingV1NetworkPolicyForAllNamespaces *IoK8sAPINetworkingV1NetworkPolicyList `json:"listNetworkingV1NetworkPolicyForAllNamespaces,omitempty"`
	// list or watch objects of kind PodDisruptionBudget
	//
	// Equivalent to GET /apis/policy/v1/poddisruptionbudgets
	ListPolicyV1PodDisruptionBudgetForAllNamespaces *IoK8sAPIPolicyV1PodDisruptionBudgetList `json:"listPolicyV1PodDisruptionBudgetForAllNamespaces,omitempty"`
	// list or watch objects of kind RoleBinding
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/rolebindings
	ListRbacAuthorizationV1RoleBindingForAllNamespaces *IoK8sAPIRbacV1RoleBindingList `json:"listRbacAuthorizationV1RoleBindingForAllNamespaces,omitempty"`
	// list or watch objects of kind Role
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/roles
	ListRbacAuthorizationV1RoleForAllNamespaces *IoK8sAPIRbacV1RoleList `json:"listRbacAuthorizationV1RoleForAllNamespaces,omitempty"`
	// list or watch objects of kind PodSchedulingContext
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/podschedulingcontexts
	ListResourceV1alpha2PodSchedulingContextForAllNamespaces *IoK8sAPIResourceV1alpha2PodSchedulingContextList `json:"listResourceV1alpha2PodSchedulingContextForAllNamespaces,omitempty"`
	// list or watch objects of kind ResourceClaim
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/resourceclaims
	ListResourceV1alpha2ResourceClaimForAllNamespaces *IoK8sAPIResourceV1alpha2ResourceClaimList `json:"listResourceV1alpha2ResourceClaimForAllNamespaces,omitempty"`
	// list or watch objects of kind ResourceClaimTemplate
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/resourceclaimtemplates
	ListResourceV1alpha2ResourceClaimTemplateForAllNamespaces *IoK8sAPIResourceV1alpha2ResourceClaimTemplateList `json:"listResourceV1alpha2ResourceClaimTemplateForAllNamespaces,omitempty"`
	// list or watch objects of kind CSIStorageCapacity
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities
	ListStorageV1NamespacedCSIStorageCapacity *IoK8sAPIStorageV1CSIStorageCapacityList `json:"listStorageV1NamespacedCSIStorageCapacity,omitempty"`
	// get service account issuer OpenID JSON Web Key Set (contains public token verification keys)
	//
	// Equivalent to GET /openid/v1/jwks/
	OpenidV1Jwks *string `json:"openidV1Jwks,omitempty"`
	// read status of the specified ValidatingAdmissionPolicy
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}/status
	ReadAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus *IoK8sAPIAdmissionregistrationV1alpha1ValidatingAdmissionPolicy `json:"readAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus,omitempty"`
	// read status of the specified CustomResourceDefinition
	//
	// Equivalent to GET /apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status
	ReadApiextensionsV1CustomResourceDefinitionStatus *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition `json:"readApiextensionsV1CustomResourceDefinitionStatus,omitempty"`
	// read status of the specified APIService
	//
	// Equivalent to GET /apis/apiregistration.k8s.io/v1/apiservices/{name}/status
	ReadApiregistrationV1APIServiceStatus *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService `json:"readApiregistrationV1APIServiceStatus,omitempty"`
	// read status of the specified DaemonSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status
	ReadAppsV1NamespacedDaemonSetStatus *IoK8sAPIAppsV1DaemonSet `json:"readAppsV1NamespacedDaemonSetStatus,omitempty"`
	// read scale of the specified Deployment
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale
	ReadAppsV1NamespacedDeploymentScale *IoK8sAPIAutoscalingV1Scale `json:"readAppsV1NamespacedDeploymentScale,omitempty"`
	// read status of the specified Deployment
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/deployments/{name}/status
	ReadAppsV1NamespacedDeploymentStatus *IoK8sAPIAppsV1Deployment `json:"readAppsV1NamespacedDeploymentStatus,omitempty"`
	// read scale of the specified ReplicaSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale
	ReadAppsV1NamespacedReplicaSetScale *IoK8sAPIAutoscalingV1Scale `json:"readAppsV1NamespacedReplicaSetScale,omitempty"`
	// read status of the specified ReplicaSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status
	ReadAppsV1NamespacedReplicaSetStatus *IoK8sAPIAppsV1ReplicaSet `json:"readAppsV1NamespacedReplicaSetStatus,omitempty"`
	// read scale of the specified StatefulSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale
	ReadAppsV1NamespacedStatefulSetScale *IoK8sAPIAutoscalingV1Scale `json:"readAppsV1NamespacedStatefulSetScale,omitempty"`
	// read status of the specified StatefulSet
	//
	// Equivalent to GET /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status
	ReadAppsV1NamespacedStatefulSetStatus *IoK8sAPIAppsV1StatefulSet `json:"readAppsV1NamespacedStatefulSetStatus,omitempty"`
	// read status of the specified HorizontalPodAutoscaler
	//
	// Equivalent to GET /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
	ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler `json:"readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus,omitempty"`
	// read status of the specified HorizontalPodAutoscaler
	//
	// Equivalent to GET /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
	ReadAutoscalingV2NamespacedHorizontalPodAutoscalerStatus *IoK8sAPIAutoscalingV2HorizontalPodAutoscaler `json:"readAutoscalingV2NamespacedHorizontalPodAutoscalerStatus,omitempty"`
	// read status of the specified CronJob
	//
	// Equivalent to GET /apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status
	ReadBatchV1NamespacedCronJobStatus *IoK8sAPIBatchV1CronJob `json:"readBatchV1NamespacedCronJobStatus,omitempty"`
	// read status of the specified Job
	//
	// Equivalent to GET /apis/batch/v1/namespaces/{namespace}/jobs/{name}/status
	ReadBatchV1NamespacedJobStatus *IoK8sAPIBatchV1Job `json:"readBatchV1NamespacedJobStatus,omitempty"`
	// read approval of the specified CertificateSigningRequest
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval
	ReadCertificatesV1CertificateSigningRequestApproval *IoK8sAPICertificatesV1CertificateSigningRequest `json:"readCertificatesV1CertificateSigningRequestApproval,omitempty"`
	// read status of the specified CertificateSigningRequest
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status
	ReadCertificatesV1CertificateSigningRequestStatus *IoK8sAPICertificatesV1CertificateSigningRequest `json:"readCertificatesV1CertificateSigningRequestStatus,omitempty"`
	// read status of the specified Namespace
	//
	// Equivalent to GET /api/v1/namespaces/{name}/status
	ReadCoreV1NamespaceStatus *IoK8sAPICoreV1Namespace `json:"readCoreV1NamespaceStatus,omitempty"`
	// read status of the specified PersistentVolumeClaim
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status
	ReadCoreV1NamespacedPersistentVolumeClaimStatus *IoK8sAPICoreV1PersistentVolumeClaim `json:"readCoreV1NamespacedPersistentVolumeClaimStatus,omitempty"`
	// read ephemeralcontainers of the specified Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers
	ReadCoreV1NamespacedPodEphemeralcontainers *IoK8sAPICoreV1Pod `json:"readCoreV1NamespacedPodEphemeralcontainers,omitempty"`
	// read status of the specified Pod
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/status
	ReadCoreV1NamespacedPodStatus *IoK8sAPICoreV1Pod `json:"readCoreV1NamespacedPodStatus,omitempty"`
	// read status of the specified ReplicationController
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status
	ReadCoreV1NamespacedReplicationControllerStatus *IoK8sAPICoreV1ReplicationController `json:"readCoreV1NamespacedReplicationControllerStatus,omitempty"`
	// read status of the specified ResourceQuota
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/resourcequotas/{name}/status
	ReadCoreV1NamespacedResourceQuotaStatus *IoK8sAPICoreV1ResourceQuota `json:"readCoreV1NamespacedResourceQuotaStatus,omitempty"`
	// read status of the specified Service
	//
	// Equivalent to GET /api/v1/namespaces/{namespace}/services/{name}/status
	ReadCoreV1NamespacedServiceStatus *IoK8sAPICoreV1Service `json:"readCoreV1NamespacedServiceStatus,omitempty"`
	// read status of the specified Node
	//
	// Equivalent to GET /api/v1/nodes/{name}/status
	ReadCoreV1NodeStatus *IoK8sAPICoreV1Node `json:"readCoreV1NodeStatus,omitempty"`
	// read status of the specified PersistentVolume
	//
	// Equivalent to GET /api/v1/persistentvolumes/{name}/status
	ReadCoreV1PersistentVolumeStatus *IoK8sAPICoreV1PersistentVolume `json:"readCoreV1PersistentVolumeStatus,omitempty"`
	// read status of the specified FlowSchema
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}/status
	ReadFlowcontrolApiserverV1beta2FlowSchemaStatus *IoK8sAPIFlowcontrolV1beta2FlowSchema `json:"readFlowcontrolApiserverV1beta2FlowSchemaStatus,omitempty"`
	// read status of the specified PriorityLevelConfiguration
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}/status
	ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration `json:"readFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus,omitempty"`
	// read status of the specified FlowSchema
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}/status
	ReadFlowcontrolApiserverV1beta3FlowSchemaStatus *IoK8sAPIFlowcontrolV1beta3FlowSchema `json:"readFlowcontrolApiserverV1beta3FlowSchemaStatus,omitempty"`
	// read status of the specified PriorityLevelConfiguration
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}/status
	ReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus *IoK8sAPIFlowcontrolV1beta3PriorityLevelConfiguration `json:"readFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus,omitempty"`
	// read status of the specified StorageVersion
	//
	// Equivalent to GET /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}/status
	ReadInternalApiserverV1alpha1StorageVersionStatus *IoK8sAPIApiserverinternalV1alpha1StorageVersion `json:"readInternalApiserverV1alpha1StorageVersionStatus,omitempty"`
	// read status of the specified Ingress
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status
	ReadNetworkingV1NamespacedIngressStatus *IoK8sAPINetworkingV1Ingress `json:"readNetworkingV1NamespacedIngressStatus,omitempty"`
	// read status of the specified NetworkPolicy
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}/status
	ReadNetworkingV1NamespacedNetworkPolicyStatus *IoK8sAPINetworkingV1NetworkPolicy `json:"readNetworkingV1NamespacedNetworkPolicyStatus,omitempty"`
	// read status of the specified PodDisruptionBudget
	//
	// Equivalent to GET /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status
	ReadPolicyV1NamespacedPodDisruptionBudgetStatus *IoK8sAPIPolicyV1PodDisruptionBudget `json:"readPolicyV1NamespacedPodDisruptionBudgetStatus,omitempty"`
	// read status of the specified PodSchedulingContext
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}/status
	ReadResourceV1alpha2NamespacedPodSchedulingContextStatus *IoK8sAPIResourceV1alpha2PodSchedulingContext `json:"readResourceV1alpha2NamespacedPodSchedulingContextStatus,omitempty"`
	// read status of the specified ResourceClaim
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}/status
	ReadResourceV1alpha2NamespacedResourceClaimStatus *IoK8sAPIResourceV1alpha2ResourceClaim `json:"readResourceV1alpha2NamespacedResourceClaimStatus,omitempty"`
	// read status of the specified VolumeAttachment
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/volumeattachments/{name}/status
	ReadStorageV1VolumeAttachmentStatus *IoK8sAPIStorageV1VolumeAttachment `json:"readStorageV1VolumeAttachmentStatus,omitempty"`
	// watch changes to an object of kind MutatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations/{name}
	WatchAdmissionregistrationV1MutatingWebhookConfiguration *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAdmissionregistrationV1MutatingWebhookConfiguration,omitempty"`
	// watch individual changes to a list of MutatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations
	WatchAdmissionregistrationV1MutatingWebhookConfigurationList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAdmissionregistrationV1MutatingWebhookConfigurationList,omitempty"`
	// watch changes to an object of kind ValidatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations/{name}
	WatchAdmissionregistrationV1ValidatingWebhookConfiguration *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAdmissionregistrationV1ValidatingWebhookConfiguration,omitempty"`
	// watch individual changes to a list of ValidatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations
	WatchAdmissionregistrationV1ValidatingWebhookConfigurationList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAdmissionregistrationV1ValidatingWebhookConfigurationList,omitempty"`
	// watch changes to an object of kind ValidatingAdmissionPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/watch/validatingadmissionpolicies/{name}
	WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicy *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAdmissionregistrationV1alpha1ValidatingAdmissionPolicy,omitempty"`
	// watch changes to an object of kind ValidatingAdmissionPolicyBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/watch/validatingadmissionpolicybindings/{name}
	WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding,omitempty"`
	// watch individual changes to a list of ValidatingAdmissionPolicyBinding. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/watch/validatingadmissionpolicybindings
	WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingList,omitempty"`
	// watch individual changes to a list of ValidatingAdmissionPolicy. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/admissionregistration.k8s.io/v1alpha1/watch/validatingadmissionpolicies
	WatchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyList,omitempty"`
	// watch changes to an object of kind CustomResourceDefinition. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions/{name}
	WatchApiextensionsV1CustomResourceDefinition *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchApiextensionsV1CustomResourceDefinition,omitempty"`
	// watch individual changes to a list of CustomResourceDefinition. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions
	WatchApiextensionsV1CustomResourceDefinitionList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchApiextensionsV1CustomResourceDefinitionList,omitempty"`
	// watch changes to an object of kind APIService. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/apiregistration.k8s.io/v1/watch/apiservices/{name}
	WatchApiregistrationV1APIService *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchApiregistrationV1APIService,omitempty"`
	// watch individual changes to a list of APIService. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apiregistration.k8s.io/v1/watch/apiservices
	WatchApiregistrationV1APIServiceList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchApiregistrationV1APIServiceList,omitempty"`
	// watch individual changes to a list of ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/controllerrevisions
	WatchAppsV1ControllerRevisionListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1ControllerRevisionListForAllNamespaces,omitempty"`
	// watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/daemonsets
	WatchAppsV1DaemonSetListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1DaemonSetListForAllNamespaces,omitempty"`
	// watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/deployments
	WatchAppsV1DeploymentListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1DeploymentListForAllNamespaces,omitempty"`
	// watch changes to an object of kind ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions/{name}
	WatchAppsV1NamespacedControllerRevision *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedControllerRevision,omitempty"`
	// watch individual changes to a list of ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions
	WatchAppsV1NamespacedControllerRevisionList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedControllerRevisionList,omitempty"`
	// watch changes to an object of kind DaemonSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/daemonsets/{name}
	WatchAppsV1NamespacedDaemonSet *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedDaemonSet,omitempty"`
	// watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/daemonsets
	WatchAppsV1NamespacedDaemonSetList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedDaemonSetList,omitempty"`
	// watch changes to an object of kind Deployment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/deployments/{name}
	WatchAppsV1NamespacedDeployment *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedDeployment,omitempty"`
	// watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/deployments
	WatchAppsV1NamespacedDeploymentList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedDeploymentList,omitempty"`
	// watch changes to an object of kind ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/replicasets/{name}
	WatchAppsV1NamespacedReplicaSet *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedReplicaSet,omitempty"`
	// watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/replicasets
	WatchAppsV1NamespacedReplicaSetList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedReplicaSetList,omitempty"`
	// watch changes to an object of kind StatefulSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/statefulsets/{name}
	WatchAppsV1NamespacedStatefulSet *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedStatefulSet,omitempty"`
	// watch individual changes to a list of StatefulSet. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/namespaces/{namespace}/statefulsets
	WatchAppsV1NamespacedStatefulSetList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1NamespacedStatefulSetList,omitempty"`
	// watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/replicasets
	WatchAppsV1ReplicaSetListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1ReplicaSetListForAllNamespaces,omitempty"`
	// watch individual changes to a list of StatefulSet. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/apps/v1/watch/statefulsets
	WatchAppsV1StatefulSetListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAppsV1StatefulSetListForAllNamespaces,omitempty"`
	// watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/autoscaling/v1/watch/horizontalpodautoscalers
	WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces,omitempty"`
	// watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}
	WatchAutoscalingV1NamespacedHorizontalPodAutoscaler *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAutoscalingV1NamespacedHorizontalPodAutoscaler,omitempty"`
	// watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers
	WatchAutoscalingV1NamespacedHorizontalPodAutoscalerList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAutoscalingV1NamespacedHorizontalPodAutoscalerList,omitempty"`
	// watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/autoscaling/v2/watch/horizontalpodautoscalers
	WatchAutoscalingV2HorizontalPodAutoscalerListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAutoscalingV2HorizontalPodAutoscalerListForAllNamespaces,omitempty"`
	// watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/autoscaling/v2/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}
	WatchAutoscalingV2NamespacedHorizontalPodAutoscaler *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAutoscalingV2NamespacedHorizontalPodAutoscaler,omitempty"`
	// watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/autoscaling/v2/watch/namespaces/{namespace}/horizontalpodautoscalers
	WatchAutoscalingV2NamespacedHorizontalPodAutoscalerList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchAutoscalingV2NamespacedHorizontalPodAutoscalerList,omitempty"`
	// watch individual changes to a list of CronJob. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/batch/v1/watch/cronjobs
	WatchBatchV1CronJobListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchBatchV1CronJobListForAllNamespaces,omitempty"`
	// watch individual changes to a list of Job. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/batch/v1/watch/jobs
	WatchBatchV1JobListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchBatchV1JobListForAllNamespaces,omitempty"`
	// watch changes to an object of kind CronJob. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/batch/v1/watch/namespaces/{namespace}/cronjobs/{name}
	WatchBatchV1NamespacedCronJob *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchBatchV1NamespacedCronJob,omitempty"`
	// watch individual changes to a list of CronJob. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/batch/v1/watch/namespaces/{namespace}/cronjobs
	WatchBatchV1NamespacedCronJobList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchBatchV1NamespacedCronJobList,omitempty"`
	// watch changes to an object of kind Job. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}
	WatchBatchV1NamespacedJob *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchBatchV1NamespacedJob,omitempty"`
	// watch individual changes to a list of Job. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/batch/v1/watch/namespaces/{namespace}/jobs
	WatchBatchV1NamespacedJobList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchBatchV1NamespacedJobList,omitempty"`
	// watch changes to an object of kind CertificateSigningRequest. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1/watch/certificatesigningrequests/{name}
	WatchCertificatesV1CertificateSigningRequest *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCertificatesV1CertificateSigningRequest,omitempty"`
	// watch individual changes to a list of CertificateSigningRequest. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1/watch/certificatesigningrequests
	WatchCertificatesV1CertificateSigningRequestList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCertificatesV1CertificateSigningRequestList,omitempty"`
	// watch changes to an object of kind ClusterTrustBundle. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1alpha1/watch/clustertrustbundles/{name}
	WatchCertificatesV1alpha1ClusterTrustBundle *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCertificatesV1alpha1ClusterTrustBundle,omitempty"`
	// watch individual changes to a list of ClusterTrustBundle. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/certificates.k8s.io/v1alpha1/watch/clustertrustbundles
	WatchCertificatesV1alpha1ClusterTrustBundleList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCertificatesV1alpha1ClusterTrustBundleList,omitempty"`
	// watch individual changes to a list of Lease. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/coordination.k8s.io/v1/watch/leases
	WatchCoordinationV1LeaseListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoordinationV1LeaseListForAllNamespaces,omitempty"`
	// watch changes to an object of kind Lease. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases/{name}
	WatchCoordinationV1NamespacedLease *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoordinationV1NamespacedLease,omitempty"`
	// watch individual changes to a list of Lease. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases
	WatchCoordinationV1NamespacedLeaseList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoordinationV1NamespacedLeaseList,omitempty"`
	// watch individual changes to a list of Endpoints. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/endpoints
	WatchCoreV1EndpointsListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1EndpointsListForAllNamespaces,omitempty"`
	// watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/events
	WatchCoreV1EventListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1EventListForAllNamespaces,omitempty"`
	// watch individual changes to a list of LimitRange. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/limitranges
	WatchCoreV1LimitRangeListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1LimitRangeListForAllNamespaces,omitempty"`
	// watch changes to an object of kind Namespace. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{name}
	WatchCoreV1Namespace *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1Namespace,omitempty"`
	// watch individual changes to a list of Namespace. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces
	WatchCoreV1NamespaceList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespaceList,omitempty"`
	// watch changes to an object of kind ConfigMap. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/configmaps/{name}
	WatchCoreV1NamespacedConfigMap *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedConfigMap,omitempty"`
	// watch individual changes to a list of ConfigMap. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/configmaps
	WatchCoreV1NamespacedConfigMapList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedConfigMapList,omitempty"`
	// watch changes to an object of kind Endpoints. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/endpoints/{name}
	WatchCoreV1NamespacedEndpoints *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedEndpoints,omitempty"`
	// watch individual changes to a list of Endpoints. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/endpoints
	WatchCoreV1NamespacedEndpointsList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedEndpointsList,omitempty"`
	// watch changes to an object of kind Event. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/events/{name}
	WatchCoreV1NamespacedEvent *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedEvent,omitempty"`
	// watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/events
	WatchCoreV1NamespacedEventList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedEventList,omitempty"`
	// watch changes to an object of kind LimitRange. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/limitranges/{name}
	WatchCoreV1NamespacedLimitRange *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedLimitRange,omitempty"`
	// watch individual changes to a list of LimitRange. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/limitranges
	WatchCoreV1NamespacedLimitRangeList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedLimitRangeList,omitempty"`
	// watch changes to an object of kind PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}
	WatchCoreV1NamespacedPersistentVolumeClaim *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedPersistentVolumeClaim,omitempty"`
	// watch individual changes to a list of PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/persistentvolumeclaims
	WatchCoreV1NamespacedPersistentVolumeClaimList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedPersistentVolumeClaimList,omitempty"`
	// watch changes to an object of kind Pod. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/pods/{name}
	WatchCoreV1NamespacedPod *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedPod,omitempty"`
	// watch individual changes to a list of Pod. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/pods
	WatchCoreV1NamespacedPodList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedPodList,omitempty"`
	// watch changes to an object of kind PodTemplate. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/podtemplates/{name}
	WatchCoreV1NamespacedPodTemplate *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedPodTemplate,omitempty"`
	// watch individual changes to a list of PodTemplate. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/podtemplates
	WatchCoreV1NamespacedPodTemplateList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedPodTemplateList,omitempty"`
	// watch changes to an object of kind ReplicationController. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}
	WatchCoreV1NamespacedReplicationController *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedReplicationController,omitempty"`
	// watch individual changes to a list of ReplicationController. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/replicationcontrollers
	WatchCoreV1NamespacedReplicationControllerList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedReplicationControllerList,omitempty"`
	// watch changes to an object of kind ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/resourcequotas/{name}
	WatchCoreV1NamespacedResourceQuota *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedResourceQuota,omitempty"`
	// watch individual changes to a list of ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/resourcequotas
	WatchCoreV1NamespacedResourceQuotaList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedResourceQuotaList,omitempty"`
	// watch changes to an object of kind Secret. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/secrets/{name}
	WatchCoreV1NamespacedSecret *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedSecret,omitempty"`
	// watch individual changes to a list of Secret. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/secrets
	WatchCoreV1NamespacedSecretList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedSecretList,omitempty"`
	// watch changes to an object of kind Service. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/services/{name}
	WatchCoreV1NamespacedService *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedService,omitempty"`
	// watch changes to an object of kind ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}
	WatchCoreV1NamespacedServiceAccount *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedServiceAccount,omitempty"`
	// watch individual changes to a list of ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/serviceaccounts
	WatchCoreV1NamespacedServiceAccountList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedServiceAccountList,omitempty"`
	// watch individual changes to a list of Service. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/namespaces/{namespace}/services
	WatchCoreV1NamespacedServiceList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NamespacedServiceList,omitempty"`
	// watch changes to an object of kind Node. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/nodes/{name}
	WatchCoreV1Node *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1Node,omitempty"`
	// watch individual changes to a list of Node. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/nodes
	WatchCoreV1NodeList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1NodeList,omitempty"`
	// watch changes to an object of kind PersistentVolume. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /api/v1/watch/persistentvolumes/{name}
	WatchCoreV1PersistentVolume *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1PersistentVolume,omitempty"`
	// watch individual changes to a list of PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/persistentvolumeclaims
	WatchCoreV1PersistentVolumeClaimListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1PersistentVolumeClaimListForAllNamespaces,omitempty"`
	// watch individual changes to a list of PersistentVolume. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/persistentvolumes
	WatchCoreV1PersistentVolumeList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1PersistentVolumeList,omitempty"`
	// watch individual changes to a list of Pod. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/pods
	WatchCoreV1PodListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1PodListForAllNamespaces,omitempty"`
	// watch individual changes to a list of PodTemplate. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/podtemplates
	WatchCoreV1PodTemplateListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1PodTemplateListForAllNamespaces,omitempty"`
	// watch individual changes to a list of ReplicationController. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/replicationcontrollers
	WatchCoreV1ReplicationControllerListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1ReplicationControllerListForAllNamespaces,omitempty"`
	// watch individual changes to a list of ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/resourcequotas
	WatchCoreV1ResourceQuotaListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1ResourceQuotaListForAllNamespaces,omitempty"`
	// watch individual changes to a list of Secret. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/secrets
	WatchCoreV1SecretListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1SecretListForAllNamespaces,omitempty"`
	// watch individual changes to a list of ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/serviceaccounts
	WatchCoreV1ServiceAccountListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1ServiceAccountListForAllNamespaces,omitempty"`
	// watch individual changes to a list of Service. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /api/v1/watch/services
	WatchCoreV1ServiceListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchCoreV1ServiceListForAllNamespaces,omitempty"`
	// watch individual changes to a list of EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/discovery.k8s.io/v1/watch/endpointslices
	WatchDiscoveryV1EndpointSliceListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchDiscoveryV1EndpointSliceListForAllNamespaces,omitempty"`
	// watch changes to an object of kind EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/discovery.k8s.io/v1/watch/namespaces/{namespace}/endpointslices/{name}
	WatchDiscoveryV1NamespacedEndpointSlice *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchDiscoveryV1NamespacedEndpointSlice,omitempty"`
	// watch individual changes to a list of EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/discovery.k8s.io/v1/watch/namespaces/{namespace}/endpointslices
	WatchDiscoveryV1NamespacedEndpointSliceList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchDiscoveryV1NamespacedEndpointSliceList,omitempty"`
	// watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/events.k8s.io/v1/watch/events
	WatchEventsV1EventListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchEventsV1EventListForAllNamespaces,omitempty"`
	// watch changes to an object of kind Event. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/events.k8s.io/v1/watch/namespaces/{namespace}/events/{name}
	WatchEventsV1NamespacedEvent *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchEventsV1NamespacedEvent,omitempty"`
	// watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/events.k8s.io/v1/watch/namespaces/{namespace}/events
	WatchEventsV1NamespacedEventList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchEventsV1NamespacedEventList,omitempty"`
	// watch changes to an object of kind FlowSchema. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas/{name}
	WatchFlowcontrolApiserverV1beta2FlowSchema *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchFlowcontrolApiserverV1beta2FlowSchema,omitempty"`
	// watch individual changes to a list of FlowSchema. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas
	WatchFlowcontrolApiserverV1beta2FlowSchemaList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchFlowcontrolApiserverV1beta2FlowSchemaList,omitempty"`
	// watch changes to an object of kind PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations/{name}
	WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchFlowcontrolApiserverV1beta2PriorityLevelConfiguration,omitempty"`
	// watch individual changes to a list of PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations
	WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList,omitempty"`
	// watch changes to an object of kind FlowSchema. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/watch/flowschemas/{name}
	WatchFlowcontrolApiserverV1beta3FlowSchema *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchFlowcontrolApiserverV1beta3FlowSchema,omitempty"`
	// watch individual changes to a list of FlowSchema. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/watch/flowschemas
	WatchFlowcontrolApiserverV1beta3FlowSchemaList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchFlowcontrolApiserverV1beta3FlowSchemaList,omitempty"`
	// watch changes to an object of kind PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/watch/prioritylevelconfigurations/{name}
	WatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchFlowcontrolApiserverV1beta3PriorityLevelConfiguration,omitempty"`
	// watch individual changes to a list of PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/flowcontrol.apiserver.k8s.io/v1beta3/watch/prioritylevelconfigurations
	WatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchFlowcontrolApiserverV1beta3PriorityLevelConfigurationList,omitempty"`
	// watch changes to an object of kind StorageVersion. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/internal.apiserver.k8s.io/v1alpha1/watch/storageversions/{name}
	WatchInternalApiserverV1alpha1StorageVersion *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchInternalApiserverV1alpha1StorageVersion,omitempty"`
	// watch individual changes to a list of StorageVersion. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/internal.apiserver.k8s.io/v1alpha1/watch/storageversions
	WatchInternalApiserverV1alpha1StorageVersionList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchInternalApiserverV1alpha1StorageVersionList,omitempty"`
	// watch changes to an object of kind IngressClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/watch/ingressclasses/{name}
	WatchNetworkingV1IngressClass *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1IngressClass,omitempty"`
	// watch individual changes to a list of IngressClass. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/watch/ingressclasses
	WatchNetworkingV1IngressClassList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1IngressClassList,omitempty"`
	// watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/watch/ingresses
	WatchNetworkingV1IngressListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1IngressListForAllNamespaces,omitempty"`
	// watch changes to an object of kind Ingress. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses/{name}
	WatchNetworkingV1NamespacedIngress *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1NamespacedIngress,omitempty"`
	// watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses
	WatchNetworkingV1NamespacedIngressList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1NamespacedIngressList,omitempty"`
	// watch changes to an object of kind NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies/{name}
	WatchNetworkingV1NamespacedNetworkPolicy *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1NamespacedNetworkPolicy,omitempty"`
	// watch individual changes to a list of NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies
	WatchNetworkingV1NamespacedNetworkPolicyList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1NamespacedNetworkPolicyList,omitempty"`
	// watch individual changes to a list of NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1/watch/networkpolicies
	WatchNetworkingV1NetworkPolicyListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1NetworkPolicyListForAllNamespaces,omitempty"`
	// watch changes to an object of kind ClusterCIDR. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/watch/clustercidrs/{name}
	WatchNetworkingV1alpha1ClusterCidr *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1alpha1ClusterCIDR,omitempty"`
	// watch individual changes to a list of ClusterCIDR. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/watch/clustercidrs
	WatchNetworkingV1alpha1ClusterCIDRList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1alpha1ClusterCIDRList,omitempty"`
	// watch changes to an object of kind IPAddress. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/watch/ipaddresses/{name}
	WatchNetworkingV1alpha1IPAddress *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1alpha1IPAddress,omitempty"`
	// watch individual changes to a list of IPAddress. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/networking.k8s.io/v1alpha1/watch/ipaddresses
	WatchNetworkingV1alpha1IPAddressList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNetworkingV1alpha1IPAddressList,omitempty"`
	// watch changes to an object of kind RuntimeClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/node.k8s.io/v1/watch/runtimeclasses/{name}
	WatchNodeV1RuntimeClass *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNodeV1RuntimeClass,omitempty"`
	// watch individual changes to a list of RuntimeClass. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/node.k8s.io/v1/watch/runtimeclasses
	WatchNodeV1RuntimeClassList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchNodeV1RuntimeClassList,omitempty"`
	// watch changes to an object of kind PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/policy/v1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}
	WatchPolicyV1NamespacedPodDisruptionBudget *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchPolicyV1NamespacedPodDisruptionBudget,omitempty"`
	// watch individual changes to a list of PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/policy/v1/watch/namespaces/{namespace}/poddisruptionbudgets
	WatchPolicyV1NamespacedPodDisruptionBudgetList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchPolicyV1NamespacedPodDisruptionBudgetList,omitempty"`
	// watch individual changes to a list of PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/policy/v1/watch/poddisruptionbudgets
	WatchPolicyV1PodDisruptionBudgetListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchPolicyV1PodDisruptionBudgetListForAllNamespaces,omitempty"`
	// watch changes to an object of kind ClusterRole. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/clusterroles/{name}
	WatchRbacAuthorizationV1ClusterRole *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1ClusterRole,omitempty"`
	// watch changes to an object of kind ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings/{name}
	WatchRbacAuthorizationV1ClusterRoleBinding *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1ClusterRoleBinding,omitempty"`
	// watch individual changes to a list of ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings
	WatchRbacAuthorizationV1ClusterRoleBindingList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1ClusterRoleBindingList,omitempty"`
	// watch individual changes to a list of ClusterRole. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/clusterroles
	WatchRbacAuthorizationV1ClusterRoleList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1ClusterRoleList,omitempty"`
	// watch changes to an object of kind Role. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles/{name}
	WatchRbacAuthorizationV1NamespacedRole *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1NamespacedRole,omitempty"`
	// watch changes to an object of kind RoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings/{name}
	WatchRbacAuthorizationV1NamespacedRoleBinding *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1NamespacedRoleBinding,omitempty"`
	// watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings
	WatchRbacAuthorizationV1NamespacedRoleBindingList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1NamespacedRoleBindingList,omitempty"`
	// watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles
	WatchRbacAuthorizationV1NamespacedRoleList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1NamespacedRoleList,omitempty"`
	// watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/rolebindings
	WatchRbacAuthorizationV1RoleBindingListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1RoleBindingListForAllNamespaces,omitempty"`
	// watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/rbac.authorization.k8s.io/v1/watch/roles
	WatchRbacAuthorizationV1RoleListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchRbacAuthorizationV1RoleListForAllNamespaces,omitempty"`
	// watch changes to an object of kind PodSchedulingContext. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/podschedulingcontexts/{name}
	WatchResourceV1alpha2NamespacedPodSchedulingContext *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2NamespacedPodSchedulingContext,omitempty"`
	// watch individual changes to a list of PodSchedulingContext. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/podschedulingcontexts
	WatchResourceV1alpha2NamespacedPodSchedulingContextList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2NamespacedPodSchedulingContextList,omitempty"`
	// watch changes to an object of kind ResourceClaim. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/resourceclaims/{name}
	WatchResourceV1alpha2NamespacedResourceClaim *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2NamespacedResourceClaim,omitempty"`
	// watch individual changes to a list of ResourceClaim. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/resourceclaims
	WatchResourceV1alpha2NamespacedResourceClaimList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2NamespacedResourceClaimList,omitempty"`
	// watch changes to an object of kind ResourceClaimTemplate. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/resourceclaimtemplates/{name}
	WatchResourceV1alpha2NamespacedResourceClaimTemplate *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2NamespacedResourceClaimTemplate,omitempty"`
	// watch individual changes to a list of ResourceClaimTemplate. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/resourceclaimtemplates
	WatchResourceV1alpha2NamespacedResourceClaimTemplateList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2NamespacedResourceClaimTemplateList,omitempty"`
	// watch individual changes to a list of PodSchedulingContext. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/podschedulingcontexts
	WatchResourceV1alpha2PodSchedulingContextListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2PodSchedulingContextListForAllNamespaces,omitempty"`
	// watch individual changes to a list of ResourceClaim. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/resourceclaims
	WatchResourceV1alpha2ResourceClaimListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2ResourceClaimListForAllNamespaces,omitempty"`
	// watch individual changes to a list of ResourceClaimTemplate. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/resourceclaimtemplates
	WatchResourceV1alpha2ResourceClaimTemplateListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2ResourceClaimTemplateListForAllNamespaces,omitempty"`
	// watch changes to an object of kind ResourceClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/resourceclasses/{name}
	WatchResourceV1alpha2ResourceClass *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2ResourceClass,omitempty"`
	// watch individual changes to a list of ResourceClass. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/resource.k8s.io/v1alpha2/watch/resourceclasses
	WatchResourceV1alpha2ResourceClassList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchResourceV1alpha2ResourceClassList,omitempty"`
	// watch changes to an object of kind PriorityClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/scheduling.k8s.io/v1/watch/priorityclasses/{name}
	WatchSchedulingV1PriorityClass *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchSchedulingV1PriorityClass,omitempty"`
	// watch individual changes to a list of PriorityClass. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/scheduling.k8s.io/v1/watch/priorityclasses
	WatchSchedulingV1PriorityClassList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchSchedulingV1PriorityClassList,omitempty"`
	// watch changes to an object of kind CSIDriver. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/csidrivers/{name}
	WatchStorageV1CSIDriver *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1CSIDriver,omitempty"`
	// watch individual changes to a list of CSIDriver. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/csidrivers
	WatchStorageV1CSIDriverList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1CSIDriverList,omitempty"`
	// watch changes to an object of kind CSINode. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/csinodes/{name}
	WatchStorageV1CSINode *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1CSINode,omitempty"`
	// watch individual changes to a list of CSINode. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/csinodes
	WatchStorageV1CSINodeList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1CSINodeList,omitempty"`
	// watch individual changes to a list of CSIStorageCapacity. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/csistoragecapacities
	WatchStorageV1CSIStorageCapacityListForAllNamespaces *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1CSIStorageCapacityListForAllNamespaces,omitempty"`
	// watch changes to an object of kind CSIStorageCapacity. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/namespaces/{namespace}/csistoragecapacities/{name}
	WatchStorageV1NamespacedCSIStorageCapacity *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1NamespacedCSIStorageCapacity,omitempty"`
	// watch individual changes to a list of CSIStorageCapacity. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/namespaces/{namespace}/csistoragecapacities
	WatchStorageV1NamespacedCSIStorageCapacityList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1NamespacedCSIStorageCapacityList,omitempty"`
	// watch changes to an object of kind StorageClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/storageclasses/{name}
	WatchStorageV1StorageClass *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1StorageClass,omitempty"`
	// watch individual changes to a list of StorageClass. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/storageclasses
	WatchStorageV1StorageClassList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1StorageClassList,omitempty"`
	// watch changes to an object of kind VolumeAttachment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/volumeattachments/{name}
	WatchStorageV1VolumeAttachment *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1VolumeAttachment,omitempty"`
	// watch individual changes to a list of VolumeAttachment. deprecated: use the 'watch' parameter with a list operation instead.
	//
	// Equivalent to GET /apis/storage.k8s.io/v1/watch/volumeattachments
	WatchStorageV1VolumeAttachmentList *IoK8sApimachineryPkgApisMetaV1WatchEvent `json:"watchStorageV1VolumeAttachmentList,omitempty"`
	// get service account issuer OpenID configuration, also known as the 'OIDC discovery doc'
	//
	// Equivalent to GET /.well-known/openid-configuration/
	WellKnownOpenidConfiguration *string `json:"wellKnownOpenidConfiguration,omitempty"`
}
