type Query {
  """
  connect GET requests to attach of Pod
  
  Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/attach
  """
  apiV1NamespacePodAttach(
    """
    The container in which to execute the command. Defaults to only container if there is only one container in the pod.
    """
    container: String

    """name of the PodAttachOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
    """
    stderr: Boolean

    """
    Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
    """
    stdin: Boolean

    """
    Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
    """
    stdout: Boolean

    """
    TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
    """
    tty: Boolean
  ): String

  """
  connect GET requests to exec of Pod
  
  Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/exec
  """
  apiV1NamespacePodExec(
    """
    Command is the remote command to execute. argv array. Not executed within a shell.
    """
    command: String

    """
    Container in which to execute the command. Defaults to only container if there is only one container in the pod.
    """
    container: String

    """name of the PodExecOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """Redirect the standard error stream of the pod for this call."""
    stderr: Boolean

    """
    Redirect the standard input stream of the pod for this call. Defaults to false.
    """
    stdin: Boolean

    """Redirect the standard output stream of the pod for this call."""
    stdout: Boolean

    """
    TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
    """
    tty: Boolean
  ): String

  """
  read log of the specified Pod
  
  Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/log
  """
  apiV1NamespacePodLog(
    """
    The container for which to stream logs. Defaults to only container if there is one container in the pod.
    """
    container: String

    """Follow the log stream of the pod. Defaults to false."""
    follow: Boolean

    """
    insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver's TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet).
    """
    insecureSkipTLSVerifyBackend: Boolean

    """
    If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.
    """
    limitBytes: Int

    """name of the Pod"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """Return previous terminated container logs. Defaults to false."""
    previous: Boolean

    """
    A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
    """
    sinceSeconds: Int

    """
    If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime
    """
    tailLines: Int

    """
    If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.
    """
    timestamps: Boolean
  ): String

  """
  connect GET requests to portforward of Pod
  
  Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/portforward
  """
  apiV1NamespacePodPortforward(
    """name of the PodPortForwardOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """List of ports to forward Required when using WebSockets"""
    ports: Int
  ): String

  """
  connect GET requests to proxy of Pod
  
  Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/proxy
  """
  apiV1NamespacePodProxy(
    """name of the PodProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """Path is the URL path to use for the current proxy request to pod."""
    path: String
  ): String

  """
  read the specified Secret
  
  Equivalent to GET /api/v1/namespaces/{namespace}/secrets/{name}
  """
  apiV1NamespaceSecrets(
    """name of the Secret"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ApiV1NamespaceSecrets

  """
  connect GET requests to proxy of Service
  
  Equivalent to GET /api/v1/namespaces/{namespace}/services/{name}/proxy
  """
  apiV1NamespaceServiceProxy(
    """name of the ServiceProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    """
    path: String
  ): String

  """
  connect GET requests to proxy of Node
  
  Equivalent to GET /api/v1/nodes/{name}/proxy
  """
  apiV1NodeProxy(
    """name of the NodeProxyOptions"""
    name: String!

    """Path is the URL path to use for the current proxy request to node."""
    path: String
  ): String

  """
  read the specified ComponentStatus
  
  Equivalent to GET /api/v1/componentstatuses/{name}
  """
  componentStatus(
    """name of the ComponentStatus"""
    name: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ComponentStatus

  """
  list objects of kind ComponentStatus
  
  Equivalent to GET /api/v1/componentstatuses
  """
  componentStatusList(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): ComponentStatusList

  """
  read the specified ConfigMap
  
  Equivalent to GET /api/v1/namespaces/{namespace}/configmaps/{name}
  """
  configMap(
    """name of the ConfigMap"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ConfigMap

  """
  list or watch objects of kind ConfigMap
  
  Equivalent to GET /api/v1/configmaps
  """
  configMapList(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): ConfigMapList

  """
  connect GET requests to proxy of Pod
  
  Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
  """
  connectCoreV1GetNamespacedPodProxyWithPath(
    """name of the PodProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """Path is the URL path to use for the current proxy request to pod."""
    path: String
  ): String

  """
  connect GET requests to proxy of Service
  
  Equivalent to GET /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
  """
  connectCoreV1GetNamespacedServiceProxyWithPath(
    """name of the ServiceProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    """
    path: String
  ): String

  """
  connect GET requests to proxy of Node
  
  Equivalent to GET /api/v1/nodes/{name}/proxy/{path}
  """
  connectCoreV1GetNodeProxyWithPath(
    """name of the NodeProxyOptions"""
    name: String!

    """Path is the URL path to use for the current proxy request to node."""
    path: String
  ): String

  """
  read the specified Endpoints
  
  Equivalent to GET /api/v1/namespaces/{namespace}/endpoints/{name}
  """
  endpoints(
    """name of the Endpoints"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Endpoints

  """
  list or watch objects of kind Endpoints
  
  Equivalent to GET /api/v1/endpoints
  """
  endpointsList(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): EndpointsList

  """
  read the specified Event
  
  Equivalent to GET /api/v1/namespaces/{namespace}/events/{name}
  """
  event(
    """name of the Event"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Event

  """
  list or watch objects of kind Event
  
  Equivalent to GET /api/v1/events
  """
  eventList(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): EventList

  """
  read scale of the specified ReplicationController
  
  Equivalent to GET /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale
  """
  ioK8sApiAutoscalingV1Scale(
    """name of the Scale"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): IoK8sApiAutoscalingV1Scale

  """
  get available resources
  
  Equivalent to GET /api/v1/
  """
  ioK8sApimachineryPkgApisMetaV1APIResourceList: IoK8sApimachineryPkgApisMetaV1APIResourceList

  """
  read the specified LimitRange
  
  Equivalent to GET /api/v1/namespaces/{namespace}/limitranges/{name}
  """
  limitRange(
    """name of the LimitRange"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): LimitRange

  """
  list or watch objects of kind LimitRange
  
  Equivalent to GET /api/v1/limitranges
  """
  limitRangeList(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): LimitRangeList

  """
  list or watch objects of kind ConfigMap
  
  Equivalent to GET /api/v1/namespaces/{namespace}/configmaps
  """
  listCoreV1NamespacedConfigMap(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): ConfigMapList

  """
  list or watch objects of kind Endpoints
  
  Equivalent to GET /api/v1/namespaces/{namespace}/endpoints
  """
  listCoreV1NamespacedEndpoints(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): EndpointsList

  """
  list or watch objects of kind Event
  
  Equivalent to GET /api/v1/namespaces/{namespace}/events
  """
  listCoreV1NamespacedEvent(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): EventList

  """
  list or watch objects of kind LimitRange
  
  Equivalent to GET /api/v1/namespaces/{namespace}/limitranges
  """
  listCoreV1NamespacedLimitRange(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): LimitRangeList

  """
  list or watch objects of kind PersistentVolumeClaim
  
  Equivalent to GET /api/v1/persistentvolumeclaims
  """
  listCoreV1PersistentVolumeClaimForAllNamespaces(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): PersistentVolumeClaimList

  """
  list or watch objects of kind Pod
  
  Equivalent to GET /api/v1/pods
  """
  listCoreV1PodForAllNamespaces(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): PodList

  """
  list or watch objects of kind PodTemplate
  
  Equivalent to GET /api/v1/podtemplates
  """
  listCoreV1PodTemplateForAllNamespaces(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): PodTemplateList

  """
  list or watch objects of kind ReplicationController
  
  Equivalent to GET /api/v1/replicationcontrollers
  """
  listCoreV1ReplicationControllerForAllNamespaces(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): ReplicationControllerList

  """
  list or watch objects of kind ResourceQuota
  
  Equivalent to GET /api/v1/resourcequotas
  """
  listCoreV1ResourceQuotaForAllNamespaces(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): ResourceQuotaList

  """
  list or watch objects of kind Secret
  
  Equivalent to GET /api/v1/secrets
  """
  listCoreV1SecretForAllNamespaces(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): SecretList

  """
  list or watch objects of kind ServiceAccount
  
  Equivalent to GET /api/v1/serviceaccounts
  """
  listCoreV1ServiceAccountForAllNamespaces(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): ServiceAccountList

  """
  list or watch objects of kind Service
  
  Equivalent to GET /api/v1/services
  """
  listCoreV1ServiceForAllNamespaces(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): ServiceList

  """
  read the specified Namespace
  
  Equivalent to GET /api/v1/namespaces/{name}
  """
  namespace(
    """name of the Namespace"""
    name: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Namespace

  """
  list or watch objects of kind Namespace
  
  Equivalent to GET /api/v1/namespaces
  """
  namespaceList(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): NamespaceList

  """
  read the specified Node
  
  Equivalent to GET /api/v1/nodes/{name}
  """
  node(
    """name of the Node"""
    name: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Node

  """
  list or watch objects of kind Node
  
  Equivalent to GET /api/v1/nodes
  """
  nodeList(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): NodeList

  """
  read the specified PersistentVolume
  
  Equivalent to GET /api/v1/persistentvolumes/{name}
  """
  persistentVolume(
    """name of the PersistentVolume"""
    name: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PersistentVolume

  """
  read the specified PersistentVolumeClaim
  
  Equivalent to GET /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}
  """
  persistentVolumeClaim(
    """name of the PersistentVolumeClaim"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PersistentVolumeClaim

  """
  list or watch objects of kind PersistentVolumeClaim
  
  Equivalent to GET /api/v1/namespaces/{namespace}/persistentvolumeclaims
  """
  persistentVolumeClaimList(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): PersistentVolumeClaimList

  """
  list or watch objects of kind PersistentVolume
  
  Equivalent to GET /api/v1/persistentvolumes
  """
  persistentVolumeList(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): PersistentVolumeList

  """
  read the specified Pod
  
  Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}
  """
  pod(
    """name of the Pod"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Pod

  """
  list or watch objects of kind Pod
  
  Equivalent to GET /api/v1/namespaces/{namespace}/pods
  """
  podList(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): PodList

  """
  read the specified PodTemplate
  
  Equivalent to GET /api/v1/namespaces/{namespace}/podtemplates/{name}
  """
  podTemplate(
    """name of the PodTemplate"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PodTemplate

  """
  list or watch objects of kind PodTemplate
  
  Equivalent to GET /api/v1/namespaces/{namespace}/podtemplates
  """
  podTemplateList(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): PodTemplateList

  """
  read status of the specified Namespace
  
  Equivalent to GET /api/v1/namespaces/{name}/status
  """
  readCoreV1NamespaceStatus(
    """name of the Namespace"""
    name: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Namespace

  """
  read status of the specified PersistentVolumeClaim
  
  Equivalent to GET /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status
  """
  readCoreV1NamespacedPersistentVolumeClaimStatus(
    """name of the PersistentVolumeClaim"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PersistentVolumeClaim

  """
  read ephemeralcontainers of the specified Pod
  
  Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers
  """
  readCoreV1NamespacedPodEphemeralcontainers(
    """name of the Pod"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Pod

  """
  read status of the specified Pod
  
  Equivalent to GET /api/v1/namespaces/{namespace}/pods/{name}/status
  """
  readCoreV1NamespacedPodStatus(
    """name of the Pod"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Pod

  """
  read status of the specified ReplicationController
  
  Equivalent to GET /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status
  """
  readCoreV1NamespacedReplicationControllerStatus(
    """name of the ReplicationController"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ReplicationController

  """
  read status of the specified ResourceQuota
  
  Equivalent to GET /api/v1/namespaces/{namespace}/resourcequotas/{name}/status
  """
  readCoreV1NamespacedResourceQuotaStatus(
    """name of the ResourceQuota"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ResourceQuota

  """
  read status of the specified Service
  
  Equivalent to GET /api/v1/namespaces/{namespace}/services/{name}/status
  """
  readCoreV1NamespacedServiceStatus(
    """name of the Service"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Service

  """
  read status of the specified Node
  
  Equivalent to GET /api/v1/nodes/{name}/status
  """
  readCoreV1NodeStatus(
    """name of the Node"""
    name: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Node

  """
  read status of the specified PersistentVolume
  
  Equivalent to GET /api/v1/persistentvolumes/{name}/status
  """
  readCoreV1PersistentVolumeStatus(
    """name of the PersistentVolume"""
    name: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PersistentVolume

  """
  read the specified ReplicationController
  
  Equivalent to GET /api/v1/namespaces/{namespace}/replicationcontrollers/{name}
  """
  replicationController(
    """name of the ReplicationController"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ReplicationController

  """
  list or watch objects of kind ReplicationController
  
  Equivalent to GET /api/v1/namespaces/{namespace}/replicationcontrollers
  """
  replicationControllerList(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): ReplicationControllerList

  """
  read the specified ResourceQuota
  
  Equivalent to GET /api/v1/namespaces/{namespace}/resourcequotas/{name}
  """
  resourceQuota(
    """name of the ResourceQuota"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ResourceQuota

  """
  list or watch objects of kind ResourceQuota
  
  Equivalent to GET /api/v1/namespaces/{namespace}/resourcequotas
  """
  resourceQuotaList(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): ResourceQuotaList

  """
  list or watch objects of kind Secret
  
  Equivalent to GET /api/v1/namespaces/{namespace}/secrets
  """
  secretList(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): SecretList

  """
  read the specified Service
  
  Equivalent to GET /api/v1/namespaces/{namespace}/services/{name}
  """
  service(
    """name of the Service"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Service

  """
  read the specified ServiceAccount
  
  Equivalent to GET /api/v1/namespaces/{namespace}/serviceaccounts/{name}
  """
  serviceAccount(
    """name of the ServiceAccount"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ServiceAccount

  """
  list or watch objects of kind ServiceAccount
  
  Equivalent to GET /api/v1/namespaces/{namespace}/serviceaccounts
  """
  serviceAccountList(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): ServiceAccountList

  """
  list or watch objects of kind Service
  
  Equivalent to GET /api/v1/namespaces/{namespace}/services
  """
  serviceList(
    """
    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
    """
    allowWatchBookmarks: Boolean

    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int

    """
    Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    """
    watch: Boolean
  ): ServiceList
}

"""
Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
"""
type ApiV1NamespaceSecrets {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
  """
  data: JSON

  """
  Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
  """
  immutable: Boolean

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
  """
  stringData: JSON

  """
  Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
  """
  type: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
"""
type Metadata {
  """
  Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
  """
  annotations: JSON

  """
  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
  
  Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  creationTimestamp: JSON

  """
  Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  """
  deletionGracePeriodSeconds: BigInt

  """
  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
  
  Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  deletionTimestamp: JSON

  """
  Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
  """
  finalizers: [String]

  """
  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
  
  If this field is specified and the generated name exists, the server will return a 409.
  
  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
  """
  generateName: String

  """
  A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  """
  generation: BigInt

  """
  Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
  """
  labels: JSON

  """
  ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
  """
  managedFields: [ManagedFieldsListItem]

  """
  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
  """
  name: String

  """
  Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
  
  Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
  """
  namespace: String

  """
  List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  """
  ownerReferences: [OwnerReferencesListItem]

  """
  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
  
  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
  """
  selfLink: String

  """
  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
  
  Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
  """
  uid: String
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type ManagedFieldsListItem {
  """
  APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
  """
  apiVersion: String

  """
  FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
  """
  fieldsType: String

  """
  FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
  """
  fieldsV1: JSON

  """Manager is an identifier of the workflow managing these fields."""
  manager: String

  """
  Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
  """
  operation: String

  """
  Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
  """
  subresource: String

  """
  Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
  """
  time: JSON
}

type OwnerReferencesListItem {
  """API version of the referent."""
  apiVersion: String!

  """
  If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
  """
  blockOwnerDeletion: Boolean

  """If true, this reference points to the managing controller."""
  controller: Boolean

  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String!

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
  """
  name: String!

  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
  """
  uid: String!
}

"""
ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+
"""
type ComponentStatus {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """List of component conditions observed"""
  conditions: [ConditionsListItem]

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata
}

type ConditionsListItem {
  """
  Condition error code for a component. For example, a health check error code.
  """
  error: String

  """
  Message about the condition for a component. For example, information about a health check.
  """
  message: String

  """
  Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
  """
  status: String!

  """
  Type of condition for a component. Valid value: "Healthy"
  """
  type: String!
}

"""
Status of all the conditions for the component as a list of ComponentStatus objects. Deprecated: This API is deprecated in v1.19+
"""
type ComponentStatusList {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """List of ComponentStatus objects."""
  items: [ItemsListItem]!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  metadata: Metadata2
}

type ItemsListItem {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """List of component conditions observed"""
  conditions: [ConditionsListItem]

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata
}

"""
Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
"""
type Metadata2 {
  """
  continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
  """
  continue: String

  """
  remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
  """
  remainingItemCount: BigInt

  """
  String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
  """
  selfLink: String
}

"""ConfigMap holds configuration data for pods to consume."""
type ConfigMap {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
  """
  binaryData: JSON

  """
  Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
  """
  data: JSON

  """
  Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
  """
  immutable: Boolean

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata
}

"""ConfigMapList is a resource containing a list of ConfigMap objects."""
type ConfigMapList {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """Items is the list of ConfigMaps."""
  items: [Items2ListItem]!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata3
}

type Items2ListItem {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
  """
  binaryData: JSON

  """
  Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
  """
  data: JSON

  """
  Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
  """
  immutable: Boolean

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata
}

"""
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
"""
type Metadata3 {
  """
  continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
  """
  continue: String

  """
  remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
  """
  remainingItemCount: BigInt

  """
  String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
  """
  selfLink: String
}

"""
Endpoints is a collection of endpoints that implement the actual service. Example:

	 Name: "mysvc",
	 Subsets: [
	   {
	     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
	     Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
	   },
	   {
	     Addresses: [{"ip": "10.10.3.3"}],
	     Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
	   },
	]
"""
type Endpoints {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
  """
  subsets: [SubsetsListItem]
}

type SubsetsListItem {
  """
  IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
  """
  addresses: [AddressesListItem]

  """
  IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
  """
  notReadyAddresses: [NotReadyAddressesListItem]

  """Port numbers available on the related IP addresses."""
  ports: [PortsListItem]
}

type AddressesListItem {
  """The Hostname of this endpoint"""
  hostname: String

  """
  The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or ff02::/16).
  """
  ip: String!

  """
  Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
  """
  nodeName: String

  """Reference to object providing the endpoint."""
  targetRef: TargetRef
}

"""Reference to object providing the endpoint."""
type TargetRef {
  """API version of the referent."""
  apiVersion: String

  """
  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  """
  fieldPath: String

  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """
  Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  """
  namespace: String

  """
  Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  """
  uid: String
}

type NotReadyAddressesListItem {
  """The Hostname of this endpoint"""
  hostname: String

  """
  The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or ff02::/16).
  """
  ip: String!

  """
  Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
  """
  nodeName: String

  """Reference to object providing the endpoint."""
  targetRef: TargetRef
}

type PortsListItem {
  """
  The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
  
  * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
  
  * Kubernetes-defined prefixed names:
    * 'kubernetes.io/h2c' - HTTP/2 over cleartext as described in https://www.rfc-editor.org/rfc/rfc7540
  
  * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
  """
  appProtocol: String

  """
  The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
  """
  name: String

  """The port number of the endpoint."""
  port: Int!

  """
  The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
  """
  protocol: String
}

"""EndpointsList is a list of endpoints."""
type EndpointsList {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """List of endpoints."""
  items: [Items3ListItem]!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  metadata: Metadata2
}

type Items3ListItem {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
  """
  subsets: [SubsetsListItem]
}

"""
Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
"""
type Event {
  """What action was taken/failed regarding to the Regarding object."""
  action: String

  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """The number of times this event has occurred."""
  count: Int

  """Time when this Event was first observed."""
  eventTime: JSON

  """
  The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
  """
  firstTimestamp: JSON

  """The object that this event is about."""
  involvedObject: InvolvedObject!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  The time at which the most recent occurrence of this event was recorded.
  """
  lastTimestamp: JSON

  """A human-readable description of the status of this operation."""
  message: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata!

  """
  This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
  """
  reason: String

  """Optional secondary object for more complex actions."""
  related: Related

  """
  Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
  """
  reportingComponent: String

  """ID of the controller instance, e.g. `kubelet-xyzf`."""
  reportingInstance: String

  """
  Data about the Event series this event represents or nil if it's a singleton Event.
  """
  series: Series

  """
  The component reporting this event. Should be a short machine understandable string.
  """
  source: Source

  """
  Type of this event (Normal, Warning), new types could be added in the future
  """
  type: String
}

"""The object that this event is about."""
type InvolvedObject {
  """API version of the referent."""
  apiVersion: String

  """
  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  """
  fieldPath: String

  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """
  Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  """
  namespace: String

  """
  Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  """
  uid: String
}

"""Optional secondary object for more complex actions."""
type Related {
  """API version of the referent."""
  apiVersion: String

  """
  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  """
  fieldPath: String

  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """
  Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  """
  namespace: String

  """
  Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  """
  uid: String
}

"""
Data about the Event series this event represents or nil if it's a singleton Event.
"""
type Series {
  """Number of occurrences in this series up to the last heartbeat time"""
  count: Int

  """Time of the last occurrence observed"""
  lastObservedTime: JSON
}

"""
The component reporting this event. Should be a short machine understandable string.
"""
type Source {
  """Component from which the event is generated."""
  component: String

  """Node name on which the event is generated."""
  host: String
}

"""EventList is a list of events."""
type EventList {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """List of events"""
  items: [Items4ListItem]!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  metadata: Metadata2
}

type Items4ListItem {
  """What action was taken/failed regarding to the Regarding object."""
  action: String

  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """The number of times this event has occurred."""
  count: Int

  """Time when this Event was first observed."""
  eventTime: JSON

  """
  The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
  """
  firstTimestamp: JSON

  """The object that this event is about."""
  involvedObject: InvolvedObject!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  The time at which the most recent occurrence of this event was recorded.
  """
  lastTimestamp: JSON

  """A human-readable description of the status of this operation."""
  message: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata!

  """
  This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
  """
  reason: String

  """Optional secondary object for more complex actions."""
  related: Related

  """
  Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
  """
  reportingComponent: String

  """ID of the controller instance, e.g. `kubelet-xyzf`."""
  reportingInstance: String

  """
  Data about the Event series this event represents or nil if it's a singleton Event.
  """
  series: Series

  """
  The component reporting this event. Should be a short machine understandable string.
  """
  source: Source

  """
  Type of this event (Normal, Warning), new types could be added in the future
  """
  type: String
}

"""Scale represents a scaling request for a resource."""
type IoK8sApiAutoscalingV1Scale {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
  """
  metadata: Metadata7

  """
  spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
  """
  spec: Spec7

  """
  status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
  """
  status: Status5
}

"""
Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
"""
type Metadata7 {
  """
  Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
  """
  annotations: JSON

  """
  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
  
  Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  creationTimestamp: JSON

  """
  Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  """
  deletionGracePeriodSeconds: BigInt

  """
  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
  
  Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  deletionTimestamp: JSON

  """
  Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
  """
  finalizers: [String]

  """
  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
  
  If this field is specified and the generated name exists, the server will return a 409.
  
  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
  """
  generateName: String

  """
  A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  """
  generation: BigInt

  """
  Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
  """
  labels: JSON

  """
  ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
  """
  managedFields: [ManagedFieldsListItem]

  """
  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
  """
  name: String

  """
  Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
  
  Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
  """
  namespace: String

  """
  List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  """
  ownerReferences: [OwnerReferencesListItem]

  """
  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
  
  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
  """
  selfLink: String

  """
  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
  
  Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
  """
  uid: String
}

"""
spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
"""
type Spec7 {
  """replicas is the desired number of instances for the scaled object."""
  replicas: Int
}

"""
status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
"""
type Status5 {
  """
  replicas is the actual number of observed instances of the scaled object.
  """
  replicas: Int!

  """
  selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  """
  selector: String
}

"""
APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.
"""
type IoK8sApimachineryPkgApisMetaV1APIResourceList {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """groupVersion is the group and version this APIResourceList is for."""
  groupVersion: String!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  resources contains the name of the resources and if they are namespaced.
  """
  resources: [ResourcesListItem]!
}

type ResourcesListItem {
  """
  categories is a list of the grouped resources this resource belongs to (e.g. 'all')
  """
  categories: [String]

  """
  group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale".
  """
  group: String

  """
  kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
  """
  kind: String!

  """name is the plural name of the resource."""
  name: String!

  """namespaced indicates if a resource is namespaced or not."""
  namespaced: Boolean!

  """shortNames is a list of suggested short names of the resource."""
  shortNames: [String]

  """
  singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.
  """
  singularName: String!

  """
  The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.
  """
  storageVersionHash: String

  """
  verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)
  """
  verbs: [String]!

  """
  version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)".
  """
  version: String
}

"""
LimitRange sets resource usage limits for each kind of resource in a Namespace.
"""
type LimitRange {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec
}

"""
Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
type Spec {
  """Limits is the list of LimitRangeItem objects that are enforced."""
  limits: [LimitsListItem]!
}

type LimitsListItem {
  """
  Default resource requirement limit value by resource name if resource limit is omitted.
  """
  default: JSON

  """
  DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
  """
  defaultRequest: JSON

  """Max usage constraints on this kind by resource name."""
  max: JSON

  """
  MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
  """
  maxLimitRequestRatio: JSON

  """Min usage constraints on this kind by resource name."""
  min: JSON

  """Type of resource that this limit applies to."""
  type: String!
}

"""LimitRangeList is a list of LimitRange items."""
type LimitRangeList {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  items: [Items5ListItem]!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  metadata: Metadata2
}

type Items5ListItem {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec
}

"""PersistentVolumeClaimList is a list of PersistentVolumeClaim items."""
type PersistentVolumeClaimList {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  items is a list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
  """
  items: [Items7ListItem]!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  metadata: Metadata2
}

type Items7ListItem {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
  """
  spec: Spec3

  """
  status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
  """
  status: Status2
}

"""
spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
"""
type Spec3 {
  """
  accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
  """
  accessModes: [String]

  """
  dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
  """
  dataSource: DataSource

  """
  dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef
    allows any non-core object, as well as PersistentVolumeClaim objects.
  * While dataSource ignores disallowed values (dropping them), dataSourceRef
    preserves all values, and generates an error if a disallowed value is
    specified.
  * While dataSource only allows local objects, dataSourceRef allows objects
    in any namespaces.
  (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
  """
  dataSourceRef: DataSourceRef

  """
  resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
  """
  resources: Resources2

  """selector is a label query over volumes to consider for binding."""
  selector: Selector

  """
  storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
  """
  storageClassName: String

  """
  volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
  """
  volumeMode: String

  """
  volumeName is the binding reference to the PersistentVolume backing this claim.
  """
  volumeName: String
}

"""
dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
"""
type DataSource {
  """
  APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
  """
  apiGroup: String

  """Kind is the type of resource being referenced"""
  kind: String!

  """Name is the name of resource being referenced"""
  name: String!
}

"""
dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef
  allows any non-core object, as well as PersistentVolumeClaim objects.
* While dataSource ignores disallowed values (dropping them), dataSourceRef
  preserves all values, and generates an error if a disallowed value is
  specified.
* While dataSource only allows local objects, dataSourceRef allows objects
  in any namespaces.
(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
"""
type DataSourceRef {
  """
  APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
  """
  apiGroup: String

  """Kind is the type of resource being referenced"""
  kind: String!

  """Name is the name of resource being referenced"""
  name: String!

  """
  Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
  """
  namespace: String
}

"""
resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
"""
type Resources2 {
  """
  Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
  
  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
  
  This field is immutable. It can only be set for containers.
  """
  claims: [ClaimsListItem]

  """
  Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  limits: JSON

  """
  Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  requests: JSON
}

type ClaimsListItem {
  """
  Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
  """
  name: String!
}

"""selector is a label query over volumes to consider for binding."""
type Selector {
  """
  matchExpressions is a list of label selector requirements. The requirements are ANDed.
  """
  matchExpressions: [MatchExpressionsListItem]

  """
  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
  """
  matchLabels: JSON
}

type MatchExpressionsListItem {
  """key is the label key that the selector applies to."""
  key: String!

  """
  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
  """
  operator: String!

  """
  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
  """
  values: [String]
}

"""
status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
"""
type Status2 {
  """
  accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
  """
  accessModes: [String]

  """
  allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
  """
  allocatedResources: JSON

  """capacity represents the actual resources of the underlying volume."""
  capacity: JSON

  """
  conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
  """
  conditions: [Conditions3ListItem]

  """phase represents the current phase of PersistentVolumeClaim."""
  phase: String

  """
  resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
  """
  resizeStatus: String
}

type Conditions3ListItem {
  """lastProbeTime is the time we probed the condition."""
  lastProbeTime: JSON

  """
  lastTransitionTime is the time the condition transitioned from one status to another.
  """
  lastTransitionTime: JSON

  """
  message is the human-readable message indicating details about last transition.
  """
  message: String

  """
  reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
  """
  reason: String
  status: String!
  type: String!
}

"""PodList is a list of Pods."""
type PodList {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  List of pods. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
  """
  items: [Items8ListItem]!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  metadata: Metadata2
}

type Items8ListItem {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec4

  """
  Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: Status3
}

"""
Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
type Spec4 {
  """
  Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
  """
  activeDeadlineSeconds: BigInt

  """If specified, the pod's scheduling constraints"""
  affinity: Affinity

  """
  AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
  """
  automountServiceAccountToken: Boolean

  """
  List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
  """
  containers: [ContainersListItem]!

  """
  Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
  """
  dnsConfig: DnsConfig

  """
  Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
  """
  dnsPolicy: String

  """
  EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
  """
  enableServiceLinks: Boolean

  """
  List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
  """
  ephemeralContainers: [EphemeralContainersListItem]

  """
  HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
  """
  hostAliases: [HostAliasesListItem]

  """Use the host's ipc namespace. Optional: Default to false."""
  hostIPC: Boolean

  """
  Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
  """
  hostNetwork: Boolean

  """Use the host's pid namespace. Optional: Default to false."""
  hostPID: Boolean

  """
  Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
  """
  hostUsers: Boolean

  """
  Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
  """
  hostname: String

  """
  ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
  """
  imagePullSecrets: [ImagePullSecretsListItem]

  """
  List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  """
  initContainers: [InitContainersListItem]

  """
  NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
  """
  nodeName: String

  """
  NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  """
  nodeSelector: JSON

  """
  Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
  
  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
  
  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
  """
  os: Os

  """
  Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
  """
  overhead: JSON

  """
  PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
  """
  preemptionPolicy: String

  """
  The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
  """
  priority: Int

  """
  If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
  """
  priorityClassName: String

  """
  If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
  """
  readinessGates: [ReadinessGatesListItem]

  """
  ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
  
  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
  
  This field is immutable.
  """
  resourceClaims: [ResourceClaimsListItem]

  """
  Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
  """
  restartPolicy: String

  """
  RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
  """
  runtimeClassName: String

  """
  If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
  """
  schedulerName: String

  """
  SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.
  
  SchedulingGates can only be set at pod creation time, and be removed only afterwards.
  
  This is a beta feature enabled by the PodSchedulingReadiness feature gate.
  """
  schedulingGates: [SchedulingGatesListItem]

  """
  SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
  """
  securityContext: SecurityContext3

  """
  DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
  """
  serviceAccount: String

  """
  ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  """
  serviceAccountName: String

  """
  If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
  """
  setHostnameAsFQDN: Boolean

  """
  Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
  """
  shareProcessNamespace: Boolean

  """
  If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
  """
  subdomain: String

  """
  Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
  """
  terminationGracePeriodSeconds: BigInt

  """If specified, the pod's tolerations."""
  tolerations: [TolerationsListItem]

  """
  TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
  """
  topologySpreadConstraints: [TopologySpreadConstraintsListItem]

  """
  List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
  """
  volumes: [VolumesListItem]
}

"""If specified, the pod's scheduling constraints"""
type Affinity {
  """Describes node affinity scheduling rules for the pod."""
  nodeAffinity: NodeAffinity

  """
  Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
  """
  podAffinity: PodAffinity

  """
  Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
  """
  podAntiAffinity: PodAntiAffinity
}

"""Describes node affinity scheduling rules for the pod."""
type NodeAffinity {
  """
  The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
  """
  preferredDuringSchedulingIgnoredDuringExecution: [PreferredDuringSchedulingIgnoredDuringExecutionListItem]

  """
  If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
  """
  requiredDuringSchedulingIgnoredDuringExecution: RequiredDuringSchedulingIgnoredDuringExecution
}

type PreferredDuringSchedulingIgnoredDuringExecutionListItem {
  """A node selector term, associated with the corresponding weight."""
  preference: Preference!

  """
  Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
  """
  weight: Int!
}

"""A node selector term, associated with the corresponding weight."""
type Preference {
  """A list of node selector requirements by node's labels."""
  matchExpressions: [MatchExpressions2ListItem]

  """A list of node selector requirements by node's fields."""
  matchFields: [MatchFieldsListItem]
}

type MatchExpressions2ListItem {
  """The label key that the selector applies to."""
  key: String!

  """
  Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
  """
  operator: String!

  """
  An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
  """
  values: [String]
}

type MatchFieldsListItem {
  """The label key that the selector applies to."""
  key: String!

  """
  Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
  """
  operator: String!

  """
  An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
  """
  values: [String]
}

"""
If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
"""
type RequiredDuringSchedulingIgnoredDuringExecution {
  """Required. A list of node selector terms. The terms are ORed."""
  nodeSelectorTerms: [NodeSelectorTermsListItem]!
}

type NodeSelectorTermsListItem {
  """A list of node selector requirements by node's labels."""
  matchExpressions: [MatchExpressions2ListItem]

  """A list of node selector requirements by node's fields."""
  matchFields: [MatchFieldsListItem]
}

"""
Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
"""
type PodAffinity {
  """
  The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
  """
  preferredDuringSchedulingIgnoredDuringExecution: [PreferredDuringSchedulingIgnoredDuringExecution2ListItem]

  """
  If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
  """
  requiredDuringSchedulingIgnoredDuringExecution: [RequiredDuringSchedulingIgnoredDuringExecution2ListItem]
}

type PreferredDuringSchedulingIgnoredDuringExecution2ListItem {
  """
  Required. A pod affinity term, associated with the corresponding weight.
  """
  podAffinityTerm: PodAffinityTerm!

  """
  weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
  """
  weight: Int!
}

"""
Required. A pod affinity term, associated with the corresponding weight.
"""
type PodAffinityTerm {
  """A label query over a set of resources, in this case pods."""
  labelSelector: LabelSelector

  """
  A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
  """
  namespaceSelector: NamespaceSelector

  """
  namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
  """
  namespaces: [String]

  """
  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
  """
  topologyKey: String!
}

"""A label query over a set of resources, in this case pods."""
type LabelSelector {
  """
  matchExpressions is a list of label selector requirements. The requirements are ANDed.
  """
  matchExpressions: [MatchExpressionsListItem]

  """
  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
  """
  matchLabels: JSON
}

"""
A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
"""
type NamespaceSelector {
  """
  matchExpressions is a list of label selector requirements. The requirements are ANDed.
  """
  matchExpressions: [MatchExpressionsListItem]

  """
  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
  """
  matchLabels: JSON
}

type RequiredDuringSchedulingIgnoredDuringExecution2ListItem {
  """A label query over a set of resources, in this case pods."""
  labelSelector: LabelSelector

  """
  A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
  """
  namespaceSelector: NamespaceSelector

  """
  namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
  """
  namespaces: [String]

  """
  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
  """
  topologyKey: String!
}

"""
Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
"""
type PodAntiAffinity {
  """
  The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
  """
  preferredDuringSchedulingIgnoredDuringExecution: [PreferredDuringSchedulingIgnoredDuringExecution3ListItem]

  """
  If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
  """
  requiredDuringSchedulingIgnoredDuringExecution: [RequiredDuringSchedulingIgnoredDuringExecution3ListItem]
}

type PreferredDuringSchedulingIgnoredDuringExecution3ListItem {
  """
  Required. A pod affinity term, associated with the corresponding weight.
  """
  podAffinityTerm: PodAffinityTerm!

  """
  weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
  """
  weight: Int!
}

type RequiredDuringSchedulingIgnoredDuringExecution3ListItem {
  """A label query over a set of resources, in this case pods."""
  labelSelector: LabelSelector

  """
  A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
  """
  namespaceSelector: NamespaceSelector

  """
  namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
  """
  namespaces: [String]

  """
  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
  """
  topologyKey: String!
}

type ContainersListItem {
  """
  Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
  """
  args: [String]

  """
  Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
  """
  command: [String]

  """
  List of environment variables to set in the container. Cannot be updated.
  """
  env: [EnvListItem]

  """
  List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
  """
  envFrom: [EnvFromListItem]

  """
  Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
  """
  image: String

  """
  Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
  """
  imagePullPolicy: String

  """
  Actions that the management system should take in response to container lifecycle events. Cannot be updated.
  """
  lifecycle: Lifecycle

  """
  Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  livenessProbe: LivenessProbe

  """
  Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
  """
  name: String!

  """
  List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
  """
  ports: [Ports2ListItem]

  """
  Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  readinessProbe: ReadinessProbe

  """Resources resize policy for the container."""
  resizePolicy: [ResizePolicyListItem]

  """
  Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  resources: Resources3

  """
  SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  """
  securityContext: SecurityContext

  """
  StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  startupProbe: StartupProbe

  """
  Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
  """
  stdin: Boolean

  """
  Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
  """
  stdinOnce: Boolean

  """
  Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
  """
  terminationMessagePath: String

  """
  Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
  """
  terminationMessagePolicy: String

  """
  Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
  """
  tty: Boolean

  """
  volumeDevices is the list of block devices to be used by the container.
  """
  volumeDevices: [VolumeDevicesListItem]

  """
  Pod volumes to mount into the container's filesystem. Cannot be updated.
  """
  volumeMounts: [VolumeMountsListItem]

  """
  Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
  """
  workingDir: String
}

type EnvListItem {
  """Name of the environment variable. Must be a C_IDENTIFIER."""
  name: String!

  """
  Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
  """
  value: String

  """
  Source for the environment variable's value. Cannot be used if value is not empty.
  """
  valueFrom: ValueFrom
}

"""
Source for the environment variable's value. Cannot be used if value is not empty.
"""
type ValueFrom {
  """Selects a key of a ConfigMap."""
  configMapKeyRef: ConfigMapKeyRef

  """
  Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
  """
  fieldRef: FieldRef

  """
  Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
  """
  resourceFieldRef: ResourceFieldRef

  """Selects a key of a secret in the pod's namespace"""
  secretKeyRef: SecretKeyRef
}

"""Selects a key of a ConfigMap."""
type ConfigMapKeyRef {
  """The key to select."""
  key: String!

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """Specify whether the ConfigMap or its key must be defined"""
  optional: Boolean
}

"""
Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
"""
type FieldRef {
  """
  Version of the schema the FieldPath is written in terms of, defaults to "v1".
  """
  apiVersion: String

  """Path of the field to select in the specified API version."""
  fieldPath: String!
}

"""
Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
"""
type ResourceFieldRef {
  """Container name: required for volumes, optional for env vars"""
  containerName: String

  """
  Specifies the output format of the exposed resources, defaults to "1"
  """
  divisor: JSON

  """Required: resource to select"""
  resource: String!
}

"""Selects a key of a secret in the pod's namespace"""
type SecretKeyRef {
  """The key of the secret to select from.  Must be a valid secret key."""
  key: String!

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """Specify whether the Secret or its key must be defined"""
  optional: Boolean
}

type EnvFromListItem {
  """The ConfigMap to select from"""
  configMapRef: ConfigMapRef

  """
  An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
  """
  prefix: String

  """The Secret to select from"""
  secretRef: SecretRef
}

"""The ConfigMap to select from"""
type ConfigMapRef {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """Specify whether the ConfigMap must be defined"""
  optional: Boolean
}

"""The Secret to select from"""
type SecretRef {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """Specify whether the Secret must be defined"""
  optional: Boolean
}

"""
Actions that the management system should take in response to container lifecycle events. Cannot be updated.
"""
type Lifecycle {
  """
  PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
  """
  postStart: PostStart

  """
  PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
  """
  preStop: PreStop
}

"""
PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
"""
type PostStart {
  """Exec specifies the action to take."""
  exec: Exec

  """HTTPGet specifies the http request to perform."""
  httpGet: HttpGet

  """
  Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
  """
  tcpSocket: TcpSocket
}

"""Exec specifies the action to take."""
type Exec {
  """
  Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
  """
  command: [String]
}

"""HTTPGet specifies the http request to perform."""
type HttpGet {
  """
  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
  """
  host: String

  """Custom headers to set in the request. HTTP allows repeated headers."""
  httpHeaders: [HttpHeadersListItem]

  """Path to access on the HTTP server."""
  path: String

  """
  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
  """
  port: JSON!

  """Scheme to use for connecting to the host. Defaults to HTTP."""
  scheme: String
}

type HttpHeadersListItem {
  """The header field name"""
  name: String!

  """The header field value"""
  value: String!
}

"""
Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
"""
type TcpSocket {
  """Optional: Host name to connect to, defaults to the pod IP."""
  host: String

  """
  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
  """
  port: JSON!
}

"""
PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
"""
type PreStop {
  """Exec specifies the action to take."""
  exec: Exec

  """HTTPGet specifies the http request to perform."""
  httpGet: HttpGet

  """
  Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
  """
  tcpSocket: TcpSocket
}

"""
Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
"""
type LivenessProbe {
  """Exec specifies the action to take."""
  exec: Exec

  """
  Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  """
  failureThreshold: Int

  """GRPC specifies an action involving a GRPC port."""
  grpc: Grpc

  """HTTPGet specifies the http request to perform."""
  httpGet: HttpGet

  """
  Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  initialDelaySeconds: Int

  """
  How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  """
  periodSeconds: Int

  """
  Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
  """
  successThreshold: Int

  """TCPSocket specifies an action involving a TCP port."""
  tcpSocket: TcpSocket2

  """
  Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
  """
  terminationGracePeriodSeconds: BigInt

  """
  Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  timeoutSeconds: Int
}

"""GRPC specifies an action involving a GRPC port."""
type Grpc {
  """
  Port number of the gRPC service. Number must be in the range 1 to 65535.
  """
  port: Int!

  """
  Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
  
  If this is not specified, the default behavior is defined by gRPC.
  """
  service: String
}

"""TCPSocket specifies an action involving a TCP port."""
type TcpSocket2 {
  """Optional: Host name to connect to, defaults to the pod IP."""
  host: String

  """
  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
  """
  port: JSON!
}

type Ports2ListItem {
  """
  Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
  """
  containerPort: Int!

  """What host IP to bind the external port to."""
  hostIP: String

  """
  Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
  """
  hostPort: Int

  """
  If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
  """
  name: String

  """Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP"."""
  protocol: String
}

"""
Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
"""
type ReadinessProbe {
  """Exec specifies the action to take."""
  exec: Exec

  """
  Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  """
  failureThreshold: Int

  """GRPC specifies an action involving a GRPC port."""
  grpc: Grpc

  """HTTPGet specifies the http request to perform."""
  httpGet: HttpGet

  """
  Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  initialDelaySeconds: Int

  """
  How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  """
  periodSeconds: Int

  """
  Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
  """
  successThreshold: Int

  """TCPSocket specifies an action involving a TCP port."""
  tcpSocket: TcpSocket2

  """
  Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
  """
  terminationGracePeriodSeconds: BigInt

  """
  Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  timeoutSeconds: Int
}

type ResizePolicyListItem {
  """
  Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
  """
  resourceName: String!

  """
  Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
  """
  restartPolicy: String!
}

"""
Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
"""
type Resources3 {
  """
  Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
  
  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
  
  This field is immutable. It can only be set for containers.
  """
  claims: [ClaimsListItem]

  """
  Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  limits: JSON

  """
  Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  requests: JSON
}

"""
SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
"""
type SecurityContext {
  """
  AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
  """
  allowPrivilegeEscalation: Boolean

  """
  The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
  """
  capabilities: Capabilities

  """
  Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
  """
  privileged: Boolean

  """
  procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
  """
  procMount: String

  """
  Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
  """
  readOnlyRootFilesystem: Boolean

  """
  The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
  """
  runAsGroup: BigInt

  """
  Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
  """
  runAsNonRoot: Boolean

  """
  The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
  """
  runAsUser: BigInt

  """
  The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
  """
  seLinuxOptions: SeLinuxOptions

  """
  The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
  """
  seccompProfile: SeccompProfile

  """
  The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
  """
  windowsOptions: WindowsOptions
}

"""
The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
"""
type Capabilities {
  """Added capabilities"""
  add: [String]

  """Removed capabilities"""
  drop: [String]
}

"""
The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
"""
type SeLinuxOptions {
  """Level is SELinux level label that applies to the container."""
  level: String

  """Role is a SELinux role label that applies to the container."""
  role: String

  """Type is a SELinux type label that applies to the container."""
  type: String

  """User is a SELinux user label that applies to the container."""
  user: String
}

"""
The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
"""
type SeccompProfile {
  """
  localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
  """
  localhostProfile: String

  """
  type indicates which kind of seccomp profile will be applied. Valid options are:
  
  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
  """
  type: String!
}

"""
The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
"""
type WindowsOptions {
  """
  GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
  """
  gmsaCredentialSpec: String

  """GMSACredentialSpecName is the name of the GMSA credential spec to use."""
  gmsaCredentialSpecName: String

  """
  HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
  """
  hostProcess: Boolean

  """
  The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
  """
  runAsUserName: String
}

"""
StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
"""
type StartupProbe {
  """Exec specifies the action to take."""
  exec: Exec

  """
  Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  """
  failureThreshold: Int

  """GRPC specifies an action involving a GRPC port."""
  grpc: Grpc

  """HTTPGet specifies the http request to perform."""
  httpGet: HttpGet

  """
  Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  initialDelaySeconds: Int

  """
  How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  """
  periodSeconds: Int

  """
  Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
  """
  successThreshold: Int

  """TCPSocket specifies an action involving a TCP port."""
  tcpSocket: TcpSocket2

  """
  Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
  """
  terminationGracePeriodSeconds: BigInt

  """
  Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  timeoutSeconds: Int
}

type VolumeDevicesListItem {
  """
  devicePath is the path inside of the container that the device will be mapped to.
  """
  devicePath: String!

  """name must match the name of a persistentVolumeClaim in the pod"""
  name: String!
}

type VolumeMountsListItem {
  """
  Path within the container at which the volume should be mounted.  Must not contain ':'.
  """
  mountPath: String!

  """
  mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
  """
  mountPropagation: String

  """This must match the Name of a Volume."""
  name: String!

  """
  Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
  """
  readOnly: Boolean

  """
  Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
  """
  subPath: String

  """
  Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
  """
  subPathExpr: String
}

"""
Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
"""
type DnsConfig {
  """
  A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
  """
  nameservers: [String]

  """
  A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
  """
  options: [OptionsListItem]

  """
  A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
  """
  searches: [String]
}

type OptionsListItem {
  """Required."""
  name: String
  value: String
}

type EphemeralContainersListItem {
  """
  Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
  """
  args: [String]

  """
  Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
  """
  command: [String]

  """
  List of environment variables to set in the container. Cannot be updated.
  """
  env: [EnvListItem]

  """
  List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
  """
  envFrom: [EnvFromListItem]

  """
  Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
  """
  image: String

  """
  Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
  """
  imagePullPolicy: String

  """Lifecycle is not allowed for ephemeral containers."""
  lifecycle: Lifecycle2

  """Probes are not allowed for ephemeral containers."""
  livenessProbe: LivenessProbe2

  """
  Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
  """
  name: String!

  """Ports are not allowed for ephemeral containers."""
  ports: [Ports3ListItem]

  """Probes are not allowed for ephemeral containers."""
  readinessProbe: ReadinessProbe2

  """Resources resize policy for the container."""
  resizePolicy: [ResizePolicyListItem]

  """
  Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
  """
  resources: Resources4

  """
  Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
  """
  securityContext: SecurityContext2

  """Probes are not allowed for ephemeral containers."""
  startupProbe: StartupProbe2

  """
  Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
  """
  stdin: Boolean

  """
  Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
  """
  stdinOnce: Boolean

  """
  If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
  
  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
  """
  targetContainerName: String

  """
  Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
  """
  terminationMessagePath: String

  """
  Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
  """
  terminationMessagePolicy: String

  """
  Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
  """
  tty: Boolean

  """
  volumeDevices is the list of block devices to be used by the container.
  """
  volumeDevices: [VolumeDevicesListItem]

  """
  Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
  """
  volumeMounts: [VolumeMounts2ListItem]

  """
  Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
  """
  workingDir: String
}

"""Lifecycle is not allowed for ephemeral containers."""
type Lifecycle2 {
  """
  PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
  """
  postStart: PostStart

  """
  PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
  """
  preStop: PreStop
}

"""Probes are not allowed for ephemeral containers."""
type LivenessProbe2 {
  """Exec specifies the action to take."""
  exec: Exec

  """
  Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  """
  failureThreshold: Int

  """GRPC specifies an action involving a GRPC port."""
  grpc: Grpc

  """HTTPGet specifies the http request to perform."""
  httpGet: HttpGet

  """
  Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  initialDelaySeconds: Int

  """
  How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  """
  periodSeconds: Int

  """
  Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
  """
  successThreshold: Int

  """TCPSocket specifies an action involving a TCP port."""
  tcpSocket: TcpSocket2

  """
  Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
  """
  terminationGracePeriodSeconds: BigInt

  """
  Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  timeoutSeconds: Int
}

type Ports3ListItem {
  """
  Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
  """
  containerPort: Int!

  """What host IP to bind the external port to."""
  hostIP: String

  """
  Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
  """
  hostPort: Int

  """
  If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
  """
  name: String

  """Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP"."""
  protocol: String
}

"""Probes are not allowed for ephemeral containers."""
type ReadinessProbe2 {
  """Exec specifies the action to take."""
  exec: Exec

  """
  Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  """
  failureThreshold: Int

  """GRPC specifies an action involving a GRPC port."""
  grpc: Grpc

  """HTTPGet specifies the http request to perform."""
  httpGet: HttpGet

  """
  Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  initialDelaySeconds: Int

  """
  How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  """
  periodSeconds: Int

  """
  Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
  """
  successThreshold: Int

  """TCPSocket specifies an action involving a TCP port."""
  tcpSocket: TcpSocket2

  """
  Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
  """
  terminationGracePeriodSeconds: BigInt

  """
  Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  timeoutSeconds: Int
}

"""
Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
"""
type Resources4 {
  """
  Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
  
  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
  
  This field is immutable. It can only be set for containers.
  """
  claims: [ClaimsListItem]

  """
  Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  limits: JSON

  """
  Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  requests: JSON
}

"""
Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
"""
type SecurityContext2 {
  """
  AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
  """
  allowPrivilegeEscalation: Boolean

  """
  The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
  """
  capabilities: Capabilities

  """
  Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
  """
  privileged: Boolean

  """
  procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
  """
  procMount: String

  """
  Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
  """
  readOnlyRootFilesystem: Boolean

  """
  The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
  """
  runAsGroup: BigInt

  """
  Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
  """
  runAsNonRoot: Boolean

  """
  The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
  """
  runAsUser: BigInt

  """
  The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
  """
  seLinuxOptions: SeLinuxOptions

  """
  The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
  """
  seccompProfile: SeccompProfile

  """
  The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
  """
  windowsOptions: WindowsOptions
}

"""Probes are not allowed for ephemeral containers."""
type StartupProbe2 {
  """Exec specifies the action to take."""
  exec: Exec

  """
  Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  """
  failureThreshold: Int

  """GRPC specifies an action involving a GRPC port."""
  grpc: Grpc

  """HTTPGet specifies the http request to perform."""
  httpGet: HttpGet

  """
  Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  initialDelaySeconds: Int

  """
  How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  """
  periodSeconds: Int

  """
  Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
  """
  successThreshold: Int

  """TCPSocket specifies an action involving a TCP port."""
  tcpSocket: TcpSocket2

  """
  Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
  """
  terminationGracePeriodSeconds: BigInt

  """
  Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  timeoutSeconds: Int
}

type VolumeMounts2ListItem {
  """
  Path within the container at which the volume should be mounted.  Must not contain ':'.
  """
  mountPath: String!

  """
  mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
  """
  mountPropagation: String

  """This must match the Name of a Volume."""
  name: String!

  """
  Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
  """
  readOnly: Boolean

  """
  Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
  """
  subPath: String

  """
  Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
  """
  subPathExpr: String
}

type HostAliasesListItem {
  """Hostnames for the above IP address."""
  hostnames: [String]

  """IP address of the host file entry."""
  ip: String
}

type ImagePullSecretsListItem {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

type InitContainersListItem {
  """
  Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
  """
  args: [String]

  """
  Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
  """
  command: [String]

  """
  List of environment variables to set in the container. Cannot be updated.
  """
  env: [EnvListItem]

  """
  List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
  """
  envFrom: [EnvFromListItem]

  """
  Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
  """
  image: String

  """
  Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
  """
  imagePullPolicy: String

  """
  Actions that the management system should take in response to container lifecycle events. Cannot be updated.
  """
  lifecycle: Lifecycle

  """
  Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  livenessProbe: LivenessProbe

  """
  Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
  """
  name: String!

  """
  List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
  """
  ports: [Ports2ListItem]

  """
  Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  readinessProbe: ReadinessProbe

  """Resources resize policy for the container."""
  resizePolicy: [ResizePolicyListItem]

  """
  Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  resources: Resources3

  """
  SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  """
  securityContext: SecurityContext

  """
  StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  startupProbe: StartupProbe

  """
  Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
  """
  stdin: Boolean

  """
  Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
  """
  stdinOnce: Boolean

  """
  Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
  """
  terminationMessagePath: String

  """
  Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
  """
  terminationMessagePolicy: String

  """
  Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
  """
  tty: Boolean

  """
  volumeDevices is the list of block devices to be used by the container.
  """
  volumeDevices: [VolumeDevicesListItem]

  """
  Pod volumes to mount into the container's filesystem. Cannot be updated.
  """
  volumeMounts: [VolumeMountsListItem]

  """
  Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
  """
  workingDir: String
}

"""
Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.

If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions

If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
"""
type Os {
  """
  Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
  """
  name: String!
}

type ReadinessGatesListItem {
  """
  ConditionType refers to a condition in the pod's condition list with matching type.
  """
  conditionType: String!
}

type ResourceClaimsListItem {
  """
  Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
  """
  name: String!

  """Source describes where to find the ResourceClaim."""
  source: Source2
}

"""Source describes where to find the ResourceClaim."""
type Source2 {
  """
  ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
  """
  resourceClaimName: String

  """
  ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
  
  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
  
  An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
  
  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
  """
  resourceClaimTemplateName: String
}

type SchedulingGatesListItem {
  """
  Name of the scheduling gate. Each scheduling gate must have a unique name field.
  """
  name: String!
}

"""
SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
"""
type SecurityContext3 {
  """
  A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
  
  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
  
  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
  """
  fsGroup: BigInt

  """
  fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
  """
  fsGroupChangePolicy: String

  """
  The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
  """
  runAsGroup: BigInt

  """
  Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
  """
  runAsNonRoot: Boolean

  """
  The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
  """
  runAsUser: BigInt

  """
  The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
  """
  seLinuxOptions: SeLinuxOptions2

  """
  The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
  """
  seccompProfile: SeccompProfile2

  """
  A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
  """
  supplementalGroups: [BigInt]

  """
  Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
  """
  sysctls: [SysctlsListItem]

  """
  The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
  """
  windowsOptions: WindowsOptions2
}

"""
The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
"""
type SeLinuxOptions2 {
  """Level is SELinux level label that applies to the container."""
  level: String

  """Role is a SELinux role label that applies to the container."""
  role: String

  """Type is a SELinux type label that applies to the container."""
  type: String

  """User is a SELinux user label that applies to the container."""
  user: String
}

"""
The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
"""
type SeccompProfile2 {
  """
  localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
  """
  localhostProfile: String

  """
  type indicates which kind of seccomp profile will be applied. Valid options are:
  
  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
  """
  type: String!
}

type SysctlsListItem {
  """Name of a property to set"""
  name: String!

  """Value of a property to set"""
  value: String!
}

"""
The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
"""
type WindowsOptions2 {
  """
  GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
  """
  gmsaCredentialSpec: String

  """GMSACredentialSpecName is the name of the GMSA credential spec to use."""
  gmsaCredentialSpecName: String

  """
  HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
  """
  hostProcess: Boolean

  """
  The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
  """
  runAsUserName: String
}

type TolerationsListItem {
  """
  Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
  """
  effect: String

  """
  Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
  """
  key: String

  """
  Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
  """
  operator: String

  """
  TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
  """
  tolerationSeconds: BigInt

  """
  Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
  """
  value: String
}

type TopologySpreadConstraintsListItem {
  """
  LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
  """
  labelSelector: LabelSelector2

  """
  MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
  
  This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
  """
  matchLabelKeys: [String]

  """
  MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
  """
  maxSkew: Int!

  """
  MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
  
  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
  
  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
  """
  minDomains: Int

  """
  NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
  
  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
  """
  nodeAffinityPolicy: String

  """
  NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
  
  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
  """
  nodeTaintsPolicy: String

  """
  TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
  """
  topologyKey: String!

  """
  WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
    but giving higher precedence to topologies that would help reduce the
    skew.
  A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
  """
  whenUnsatisfiable: String!
}

"""
LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
"""
type LabelSelector2 {
  """
  matchExpressions is a list of label selector requirements. The requirements are ANDed.
  """
  matchExpressions: [MatchExpressionsListItem]

  """
  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
  """
  matchLabels: JSON
}

type VolumesListItem {
  """
  awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
  """
  awsElasticBlockStore: AwsElasticBlockStore

  """
  azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
  """
  azureDisk: AzureDisk

  """
  azureFile represents an Azure File Service mount on the host and bind mount to the pod.
  """
  azureFile: AzureFile

  """
  cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
  """
  cephfs: Cephfs

  """
  cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  cinder: Cinder

  """configMap represents a configMap that should populate this volume"""
  configMap: ConfigMap2

  """
  csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
  """
  csi: Csi

  """
  downwardAPI represents downward API about the pod that should populate this volume
  """
  downwardAPI: DownwardAPI

  """
  emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
  """
  emptyDir: EmptyDir

  """
  ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
  
  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
     tracking are needed,
  c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
     a PersistentVolumeClaim (see EphemeralVolumeSource for more
     information on the connection between this volume type
     and PersistentVolumeClaim).
  
  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
  
  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
  
  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
  """
  ephemeral: Ephemeral

  """
  fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
  """
  fc: Fc

  """
  flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
  """
  flexVolume: FlexVolume

  """
  flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
  """
  flocker: Flocker

  """
  gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  gcePersistentDisk: GcePersistentDisk

  """
  gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
  """
  gitRepo: GitRepo

  """
  glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
  """
  glusterfs: Glusterfs

  """
  hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  """
  hostPath: HostPath

  """
  iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
  """
  iscsi: Iscsi

  """
  name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String!

  """
  nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  nfs: Nfs

  """
  persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
  """
  persistentVolumeClaim: PersistentVolumeClaim2

  """
  photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
  """
  photonPersistentDisk: PhotonPersistentDisk

  """
  portworxVolume represents a portworx volume attached and mounted on kubelets host machine
  """
  portworxVolume: PortworxVolume

  """
  projected items for all in one resources secrets, configmaps, and downward API
  """
  projected: Projected

  """
  quobyte represents a Quobyte mount on the host that shares a pod's lifetime
  """
  quobyte: Quobyte

  """
  rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
  """
  rbd: Rbd

  """
  scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
  """
  scaleIO: ScaleIO

  """
  secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
  """
  secret: Secret2

  """
  storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
  """
  storageos: Storageos

  """
  vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
  """
  vsphereVolume: VsphereVolume
}

"""
awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
"""
type AwsElasticBlockStore {
  """
  fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
  """
  fsType: String

  """
  partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
  """
  partition: Int

  """
  readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
  """
  readOnly: Boolean

  """
  volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
  """
  volumeID: String!
}

"""
azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
"""
type AzureDisk {
  """cachingMode is the Host Caching mode: None, Read Only, Read Write."""
  cachingMode: String

  """diskName is the Name of the data disk in the blob storage"""
  diskName: String!

  """diskURI is the URI of data disk in the blob storage"""
  diskURI: String!

  """
  fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String

  """
  kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
  """
  kind: String

  """
  readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean
}

"""
azureFile represents an Azure File Service mount on the host and bind mount to the pod.
"""
type AzureFile {
  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """
  secretName is the  name of secret that contains Azure Storage Account Name and Key
  """
  secretName: String!

  """shareName is the azure share Name"""
  shareName: String!
}

"""
cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
"""
type Cephfs {
  """
  monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  monitors: [String]!

  """
  path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
  """
  path: String

  """
  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  readOnly: Boolean

  """
  secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  secretFile: String

  """
  secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  secretRef: SecretRef2

  """
  user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  user: String
}

"""
secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
"""
type SecretRef2 {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

"""
cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
"""
type Cinder {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  fsType: String

  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  readOnly: Boolean

  """
  secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
  """
  secretRef: SecretRef3

  """
  volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  volumeID: String!
}

"""
secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
"""
type SecretRef3 {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

"""configMap represents a configMap that should populate this volume"""
type ConfigMap2 {
  """
  defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  defaultMode: Int

  """
  items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
  """
  items: [Items9ListItem]

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """optional specify whether the ConfigMap or its keys must be defined"""
  optional: Boolean
}

type Items9ListItem {
  """key is the key to project."""
  key: String!

  """
  mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  mode: Int

  """
  path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
  """
  path: String!
}

"""
csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
"""
type Csi {
  """
  driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
  """
  driver: String!

  """
  fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
  """
  fsType: String

  """
  nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
  """
  nodePublishSecretRef: NodePublishSecretRef

  """
  readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
  """
  readOnly: Boolean

  """
  volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
  """
  volumeAttributes: JSON
}

"""
nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
"""
type NodePublishSecretRef {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

"""
downwardAPI represents downward API about the pod that should populate this volume
"""
type DownwardAPI {
  """
  Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  defaultMode: Int

  """Items is a list of downward API volume file"""
  items: [Items10ListItem]
}

type Items10ListItem {
  """
  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
  """
  fieldRef: FieldRef2

  """
  Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  mode: Int

  """
  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
  """
  path: String!

  """
  Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
  """
  resourceFieldRef: ResourceFieldRef2
}

"""
Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
"""
type FieldRef2 {
  """
  Version of the schema the FieldPath is written in terms of, defaults to "v1".
  """
  apiVersion: String

  """Path of the field to select in the specified API version."""
  fieldPath: String!
}

"""
Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
"""
type ResourceFieldRef2 {
  """Container name: required for volumes, optional for env vars"""
  containerName: String

  """
  Specifies the output format of the exposed resources, defaults to "1"
  """
  divisor: JSON

  """Required: resource to select"""
  resource: String!
}

"""
emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
"""
type EmptyDir {
  """
  medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
  """
  medium: String

  """
  sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
  """
  sizeLimit: JSON
}

"""
ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.

Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
   tracking are needed,
c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
   a PersistentVolumeClaim (see EphemeralVolumeSource for more
   information on the connection between this volume type
   and PersistentVolumeClaim).

Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.

Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.

A pod can use both types of ephemeral volumes and persistent volumes at the same time.
"""
type Ephemeral {
  """
  Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
  
  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
  
  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
  
  Required, must not be nil.
  """
  volumeClaimTemplate: VolumeClaimTemplate
}

"""
Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).

An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.

This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.

Required, must not be nil.
"""
type VolumeClaimTemplate {
  """
  May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
  """
  metadata: Metadata4

  """
  The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
  """
  spec: Spec5!
}

"""
May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
"""
type Metadata4 {
  """
  Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
  """
  annotations: JSON

  """
  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
  
  Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  creationTimestamp: JSON

  """
  Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  """
  deletionGracePeriodSeconds: BigInt

  """
  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
  
  Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  deletionTimestamp: JSON

  """
  Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
  """
  finalizers: [String]

  """
  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
  
  If this field is specified and the generated name exists, the server will return a 409.
  
  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
  """
  generateName: String

  """
  A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  """
  generation: BigInt

  """
  Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
  """
  labels: JSON

  """
  ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
  """
  managedFields: [ManagedFieldsListItem]

  """
  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
  """
  name: String

  """
  Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
  
  Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
  """
  namespace: String

  """
  List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  """
  ownerReferences: [OwnerReferencesListItem]

  """
  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
  
  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
  """
  selfLink: String

  """
  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
  
  Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
  """
  uid: String
}

"""
The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
"""
type Spec5 {
  """
  accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
  """
  accessModes: [String]

  """
  dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
  """
  dataSource: DataSource

  """
  dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef
    allows any non-core object, as well as PersistentVolumeClaim objects.
  * While dataSource ignores disallowed values (dropping them), dataSourceRef
    preserves all values, and generates an error if a disallowed value is
    specified.
  * While dataSource only allows local objects, dataSourceRef allows objects
    in any namespaces.
  (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
  """
  dataSourceRef: DataSourceRef

  """
  resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
  """
  resources: Resources2

  """selector is a label query over volumes to consider for binding."""
  selector: Selector

  """
  storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
  """
  storageClassName: String

  """
  volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
  """
  volumeMode: String

  """
  volumeName is the binding reference to the PersistentVolume backing this claim.
  """
  volumeName: String
}

"""
fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
"""
type Fc {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String

  """lun is Optional: FC target lun number"""
  lun: Int

  """
  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """targetWWNs is Optional: FC target worldwide names (WWNs)"""
  targetWWNs: [String]

  """
  wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
  """
  wwids: [String]
}

"""
flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
"""
type FlexVolume {
  """driver is the name of the driver to use for this volume."""
  driver: String!

  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
  """
  fsType: String

  """options is Optional: this field holds extra command options if any."""
  options: JSON

  """
  readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """
  secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
  """
  secretRef: SecretRef4
}

"""
secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
"""
type SecretRef4 {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

"""
flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
"""
type Flocker {
  """
  datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
  """
  datasetName: String

  """
  datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
  """
  datasetUUID: String
}

"""
gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
"""
type GcePersistentDisk {
  """
  fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  fsType: String

  """
  partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  partition: Int

  """
  pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  pdName: String!

  """
  readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  readOnly: Boolean
}

"""
gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
"""
type GitRepo {
  """
  directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
  """
  directory: String

  """repository is the URL"""
  repository: String!

  """revision is the commit hash for the specified revision."""
  revision: String
}

"""
glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
"""
type Glusterfs {
  """
  endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  endpoints: String!

  """
  path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  path: String!

  """
  readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  readOnly: Boolean
}

"""
hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
"""
type HostPath {
  """
  path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  """
  path: String!

  """
  type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  """
  type: String
}

"""
iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
"""
type Iscsi {
  """
  chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
  """
  chapAuthDiscovery: Boolean

  """
  chapAuthSession defines whether support iSCSI Session CHAP authentication
  """
  chapAuthSession: Boolean

  """
  fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
  """
  fsType: String

  """
  initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
  """
  initiatorName: String

  """iqn is the target iSCSI Qualified Name."""
  iqn: String!

  """
  iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
  """
  iscsiInterface: String

  """lun represents iSCSI Target Lun number."""
  lun: Int!

  """
  portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
  """
  portals: [String]

  """
  readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
  """
  readOnly: Boolean

  """
  secretRef is the CHAP Secret for iSCSI target and initiator authentication
  """
  secretRef: SecretRef5

  """
  targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
  """
  targetPortal: String!
}

"""
secretRef is the CHAP Secret for iSCSI target and initiator authentication
"""
type SecretRef5 {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

"""
nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
"""
type Nfs {
  """
  path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  path: String!

  """
  readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  readOnly: Boolean

  """
  server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  server: String!
}

"""
persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
"""
type PersistentVolumeClaim2 {
  """
  claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
  """
  claimName: String!

  """
  readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
  """
  readOnly: Boolean
}

"""
photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
"""
type PhotonPersistentDisk {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String

  """pdID is the ID that identifies Photon Controller persistent disk"""
  pdID: String!
}

"""
portworxVolume represents a portworx volume attached and mounted on kubelets host machine
"""
type PortworxVolume {
  """
  fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String

  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """volumeID uniquely identifies a Portworx volume"""
  volumeID: String!
}

"""
projected items for all in one resources secrets, configmaps, and downward API
"""
type Projected {
  """
  defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  defaultMode: Int

  """sources is the list of volume projections"""
  sources: [SourcesListItem]
}

type SourcesListItem {
  """configMap information about the configMap data to project"""
  configMap: ConfigMap3

  """downwardAPI information about the downwardAPI data to project"""
  downwardAPI: DownwardAPI2

  """secret information about the secret data to project"""
  secret: Secret

  """
  serviceAccountToken is information about the serviceAccountToken data to project
  """
  serviceAccountToken: ServiceAccountToken
}

"""configMap information about the configMap data to project"""
type ConfigMap3 {
  """
  items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
  """
  items: [Items9ListItem]

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """optional specify whether the ConfigMap or its keys must be defined"""
  optional: Boolean
}

"""downwardAPI information about the downwardAPI data to project"""
type DownwardAPI2 {
  """Items is a list of DownwardAPIVolume file"""
  items: [Items11ListItem]
}

type Items11ListItem {
  """
  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
  """
  fieldRef: FieldRef2

  """
  Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  mode: Int

  """
  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
  """
  path: String!

  """
  Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
  """
  resourceFieldRef: ResourceFieldRef2
}

"""secret information about the secret data to project"""
type Secret {
  """
  items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
  """
  items: [Items12ListItem]

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """optional field specify whether the Secret or its key must be defined"""
  optional: Boolean
}

type Items12ListItem {
  """key is the key to project."""
  key: String!

  """
  mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  mode: Int

  """
  path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
  """
  path: String!
}

"""
serviceAccountToken is information about the serviceAccountToken data to project
"""
type ServiceAccountToken {
  """
  audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
  """
  audience: String

  """
  expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
  """
  expirationSeconds: BigInt

  """
  path is the path relative to the mount point of the file to project the token into.
  """
  path: String!
}

"""
quobyte represents a Quobyte mount on the host that shares a pod's lifetime
"""
type Quobyte {
  """group to map volume access to Default is no group"""
  group: String

  """
  readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
  """
  readOnly: Boolean

  """
  registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
  """
  registry: String!

  """
  tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
  """
  tenant: String

  """user to map volume access to Defaults to serivceaccount user"""
  user: String

  """
  volume is a string that references an already created Quobyte volume by name.
  """
  volume: String!
}

"""
rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
"""
type Rbd {
  """
  fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
  """
  fsType: String

  """
  image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  image: String!

  """
  keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  keyring: String

  """
  monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  monitors: [String]!

  """
  pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  pool: String

  """
  readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  readOnly: Boolean

  """
  secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  secretRef: SecretRef6

  """
  user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  user: String
}

"""
secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
"""
type SecretRef6 {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

"""
scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
"""
type ScaleIO {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
  """
  fsType: String

  """gateway is the host address of the ScaleIO API Gateway."""
  gateway: String!

  """
  protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
  """
  protectionDomain: String

  """
  readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """
  secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
  """
  secretRef: SecretRef7!

  """
  sslEnabled Flag enable/disable SSL communication with Gateway, default false
  """
  sslEnabled: Boolean

  """
  storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
  """
  storageMode: String

  """
  storagePool is the ScaleIO Storage Pool associated with the protection domain.
  """
  storagePool: String

  """system is the name of the storage system as configured in ScaleIO."""
  system: String!

  """
  volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
  """
  volumeName: String
}

"""
secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
"""
type SecretRef7 {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

"""
secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
"""
type Secret2 {
  """
  defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  defaultMode: Int

  """
  items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
  """
  items: [Items13ListItem]

  """optional field specify whether the Secret or its keys must be defined"""
  optional: Boolean

  """
  secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
  """
  secretName: String
}

type Items13ListItem {
  """key is the key to project."""
  key: String!

  """
  mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  mode: Int

  """
  path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
  """
  path: String!
}

"""
storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
"""
type Storageos {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String

  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """
  secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
  """
  secretRef: SecretRef8

  """
  volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
  """
  volumeName: String

  """
  volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
  """
  volumeNamespace: String
}

"""
secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
"""
type SecretRef8 {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

"""
vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
"""
type VsphereVolume {
  """
  fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String

  """
  storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
  """
  storagePolicyID: String

  """
  storagePolicyName is the storage Policy Based Management (SPBM) profile name.
  """
  storagePolicyName: String

  """volumePath is the path that identifies vSphere volume vmdk"""
  volumePath: String!
}

"""
Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
type Status3 {
  """
  Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
  """
  conditions: [Conditions4ListItem]

  """
  The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
  """
  containerStatuses: [ContainerStatusesListItem]

  """Status for any ephemeral containers that have run in this pod."""
  ephemeralContainerStatuses: [EphemeralContainerStatusesListItem]

  """
  IP address of the host to which the pod is assigned. Empty if not yet scheduled.
  """
  hostIP: String

  """
  The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
  """
  initContainerStatuses: [InitContainerStatusesListItem]

  """
  A human readable message indicating details about why the pod is in this condition.
  """
  message: String

  """
  nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
  """
  nominatedNodeName: String

  """
  The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
  
  Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
  
  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
  """
  phase: String

  """
  IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
  """
  podIP: String

  """
  podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
  """
  podIPs: [PodIPsListItem]

  """
  The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes
  """
  qosClass: String

  """
  A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
  """
  reason: String

  """
  Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to "Proposed"
  """
  resize: String

  """
  RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
  """
  startTime: JSON
}

type Conditions4ListItem {
  """Last time we probed the condition."""
  lastProbeTime: JSON

  """Last time the condition transitioned from one status to another."""
  lastTransitionTime: JSON

  """Human-readable message indicating details about last transition."""
  message: String

  """
  Unique, one-word, CamelCase reason for the condition's last transition.
  """
  reason: String

  """
  Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
  """
  status: String!

  """
  Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
  """
  type: String!
}

type ContainerStatusesListItem {
  """
  AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.
  """
  allocatedResources: JSON

  """
  ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example "containerd").
  """
  containerID: String

  """
  Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.
  """
  image: String!

  """
  ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.
  """
  imageID: String!

  """
  LastTerminationState holds the last termination state of the container to help debug container crashes and restarts. This field is not populated if the container is still running and RestartCount is 0.
  """
  lastState: LastState

  """
  Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.
  """
  name: String!

  """
  Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).
  
  The value is typically used to determine whether a container is ready to accept traffic.
  """
  ready: Boolean!

  """
  Resources represents the compute resource requests and limits that have been successfully enacted on the running container after it has been started or has been successfully resized.
  """
  resources: Resources5

  """
  RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.
  """
  restartCount: Int!

  """
  Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.
  """
  started: Boolean

  """State holds details about the container's current condition."""
  state: State
}

"""
LastTerminationState holds the last termination state of the container to help debug container crashes and restarts. This field is not populated if the container is still running and RestartCount is 0.
"""
type LastState {
  """Details about a running container"""
  running: Running

  """Details about a terminated container"""
  terminated: Terminated

  """Details about a waiting container"""
  waiting: Waiting
}

"""Details about a running container"""
type Running {
  """Time at which the container was last (re-)started"""
  startedAt: JSON
}

"""Details about a terminated container"""
type Terminated {
  """Container's ID in the format '<type>://<container_id>'"""
  containerID: String

  """Exit status from the last termination of the container"""
  exitCode: Int!

  """Time at which the container last terminated"""
  finishedAt: JSON

  """Message regarding the last termination of the container"""
  message: String

  """(brief) reason from the last termination of the container"""
  reason: String

  """Signal from the last termination of the container"""
  signal: Int

  """Time at which previous execution of the container started"""
  startedAt: JSON
}

"""Details about a waiting container"""
type Waiting {
  """Message regarding why the container is not yet running."""
  message: String

  """(brief) reason the container is not yet running."""
  reason: String
}

"""
Resources represents the compute resource requests and limits that have been successfully enacted on the running container after it has been started or has been successfully resized.
"""
type Resources5 {
  """
  Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
  
  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
  
  This field is immutable. It can only be set for containers.
  """
  claims: [ClaimsListItem]

  """
  Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  limits: JSON

  """
  Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  requests: JSON
}

"""State holds details about the container's current condition."""
type State {
  """Details about a running container"""
  running: Running

  """Details about a terminated container"""
  terminated: Terminated

  """Details about a waiting container"""
  waiting: Waiting
}

type EphemeralContainerStatusesListItem {
  """
  AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.
  """
  allocatedResources: JSON

  """
  ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example "containerd").
  """
  containerID: String

  """
  Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.
  """
  image: String!

  """
  ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.
  """
  imageID: String!

  """
  LastTerminationState holds the last termination state of the container to help debug container crashes and restarts. This field is not populated if the container is still running and RestartCount is 0.
  """
  lastState: LastState

  """
  Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.
  """
  name: String!

  """
  Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).
  
  The value is typically used to determine whether a container is ready to accept traffic.
  """
  ready: Boolean!

  """
  Resources represents the compute resource requests and limits that have been successfully enacted on the running container after it has been started or has been successfully resized.
  """
  resources: Resources5

  """
  RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.
  """
  restartCount: Int!

  """
  Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.
  """
  started: Boolean

  """State holds details about the container's current condition."""
  state: State
}

type InitContainerStatusesListItem {
  """
  AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.
  """
  allocatedResources: JSON

  """
  ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example "containerd").
  """
  containerID: String

  """
  Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.
  """
  image: String!

  """
  ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.
  """
  imageID: String!

  """
  LastTerminationState holds the last termination state of the container to help debug container crashes and restarts. This field is not populated if the container is still running and RestartCount is 0.
  """
  lastState: LastState

  """
  Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.
  """
  name: String!

  """
  Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).
  
  The value is typically used to determine whether a container is ready to accept traffic.
  """
  ready: Boolean!

  """
  Resources represents the compute resource requests and limits that have been successfully enacted on the running container after it has been started or has been successfully resized.
  """
  resources: Resources5

  """
  RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.
  """
  restartCount: Int!

  """
  Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.
  """
  started: Boolean

  """State holds details about the container's current condition."""
  state: State
}

type PodIPsListItem {
  """ip is an IP address (IPv4 or IPv6) assigned to the pod"""
  ip: String
}

"""PodTemplateList is a list of PodTemplates."""
type PodTemplateList {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """List of pod templates"""
  items: [Items14ListItem]!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  metadata: Metadata2
}

type Items14ListItem {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  template: Template
}

"""
Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
type Template {
  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec4
}

"""ReplicationControllerList is a collection of replication controllers."""
type ReplicationControllerList {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
  """
  items: [Items15ListItem]!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  metadata: Metadata2
}

type Items15ListItem {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata6

  """
  Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec6

  """
  Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: Status4
}

"""
If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
"""
type Metadata6 {
  """
  Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
  """
  annotations: JSON

  """
  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
  
  Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  creationTimestamp: JSON

  """
  Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  """
  deletionGracePeriodSeconds: BigInt

  """
  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
  
  Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  deletionTimestamp: JSON

  """
  Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
  """
  finalizers: [String]

  """
  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
  
  If this field is specified and the generated name exists, the server will return a 409.
  
  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
  """
  generateName: String

  """
  A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  """
  generation: BigInt

  """
  Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
  """
  labels: JSON

  """
  ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
  """
  managedFields: [ManagedFieldsListItem]

  """
  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
  """
  name: String

  """
  Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
  
  Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
  """
  namespace: String

  """
  List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  """
  ownerReferences: [OwnerReferencesListItem]

  """
  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
  
  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
  """
  selfLink: String

  """
  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
  
  Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
  """
  uid: String
}

"""
Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
type Spec6 {
  """
  Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
  """
  minReadySeconds: Int

  """
  Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
  """
  replicas: Int

  """
  Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
  """
  selector: JSON

  """
  Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. The only allowed template.spec.restartPolicy value is "Always". More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
  """
  template: Template2
}

"""
Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. The only allowed template.spec.restartPolicy value is "Always". More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
"""
type Template2 {
  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec4
}

"""
Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
type Status4 {
  """
  The number of available replicas (ready for at least minReadySeconds) for this replication controller.
  """
  availableReplicas: Int

  """
  Represents the latest available observations of a replication controller's current state.
  """
  conditions: [Conditions5ListItem]

  """
  The number of pods that have labels matching the labels of the pod template of the replication controller.
  """
  fullyLabeledReplicas: Int

  """
  ObservedGeneration reflects the generation of the most recently observed replication controller.
  """
  observedGeneration: BigInt

  """The number of ready replicas for this replication controller."""
  readyReplicas: Int

  """
  Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
  """
  replicas: Int!
}

type Conditions5ListItem {
  """The last time the condition transitioned from one status to another."""
  lastTransitionTime: JSON

  """A human readable message indicating details about the transition."""
  message: String

  """The reason for the condition's last transition."""
  reason: String

  """Status of the condition, one of True, False, Unknown."""
  status: String!

  """Type of replication controller condition."""
  type: String!
}

"""ResourceQuotaList is a list of ResourceQuota items."""
type ResourceQuotaList {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
  """
  items: [Items16ListItem]!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  metadata: Metadata2
}

type Items16ListItem {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec8

  """
  Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: Status6
}

"""
Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
type Spec8 {
  """
  hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
  """
  hard: JSON

  """
  scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
  """
  scopeSelector: ScopeSelector

  """
  A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
  """
  scopes: [String]
}

"""
scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
"""
type ScopeSelector {
  """A list of scope selector requirements by scope of the resources."""
  matchExpressions: [MatchExpressions3ListItem]
}

type MatchExpressions3ListItem {
  """
  Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
  """
  operator: String!

  """The name of the scope that the selector applies to."""
  scopeName: String!

  """
  An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
  """
  values: [String]
}

"""
Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
type Status6 {
  """
  Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
  """
  hard: JSON

  """
  Used is the current observed total usage of the resource in the namespace.
  """
  used: JSON
}

"""SecretList is a list of Secret."""
type SecretList {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret
  """
  items: [Items17ListItem]!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  metadata: Metadata2
}

type Items17ListItem {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
  """
  data: JSON

  """
  Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
  """
  immutable: Boolean

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
  """
  stringData: JSON

  """
  Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
  """
  type: String
}

"""ServiceAccountList is a list of ServiceAccount objects"""
type ServiceAccountList {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  """
  items: [Items18ListItem]!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  metadata: Metadata2
}

type Items18ListItem {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
  """
  automountServiceAccountToken: Boolean

  """
  ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  """
  imagePullSecrets: [ImagePullSecrets2ListItem]

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret
  """
  secrets: [SecretsListItem]
}

type ImagePullSecrets2ListItem {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

type SecretsListItem {
  """API version of the referent."""
  apiVersion: String

  """
  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  """
  fieldPath: String

  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """
  Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  """
  namespace: String

  """
  Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  """
  uid: String
}

"""ServiceList holds a list of services."""
type ServiceList {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """List of services"""
  items: [Items19ListItem]!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  metadata: Metadata2
}

type Items19ListItem {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec10

  """
  Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: Status8
}

"""
Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
type Spec10 {
  """
  allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.
  """
  allocateLoadBalancerNodePorts: Boolean

  """
  clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  """
  clusterIP: String

  """
  ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
  
  This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  """
  clusterIPs: [String]

  """
  externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
  """
  externalIPs: [String]

  """
  externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
  """
  externalName: String

  """
  externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.
  """
  externalTrafficPolicy: String

  """
  healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.
  """
  healthCheckNodePort: Int

  """
  InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).
  """
  internalTrafficPolicy: String

  """
  IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.
  
  This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
  """
  ipFamilies: [String]

  """
  IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
  """
  ipFamilyPolicy: String

  """
  loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
  """
  loadBalancerClass: String

  """
  Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations, and it cannot support dual-stack. As of Kubernetes v1.24, users are encouraged to use implementation-specific annotations when available. This field may be removed in a future API version.
  """
  loadBalancerIP: String

  """
  If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
  """
  loadBalancerSourceRanges: [String]

  """
  The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  """
  ports: [Ports4ListItem]

  """
  publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
  """
  publishNotReadyAddresses: Boolean

  """
  Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
  """
  selector: JSON

  """
  Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  """
  sessionAffinity: String

  """sessionAffinityConfig contains the configurations of session affinity."""
  sessionAffinityConfig: SessionAffinityConfig

  """
  type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  """
  type: String
}

type Ports4ListItem {
  """
  The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
  """
  appProtocol: String

  """
  The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
  """
  name: String

  """
  The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  """
  nodePort: Int

  """The port that will be exposed by this service."""
  port: Int!

  """
  The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
  """
  protocol: String

  """
  Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
  """
  targetPort: JSON
}

"""sessionAffinityConfig contains the configurations of session affinity."""
type SessionAffinityConfig {
  """
  clientIP contains the configurations of Client IP based session affinity.
  """
  clientIP: ClientIP
}

"""
clientIP contains the configurations of Client IP based session affinity.
"""
type ClientIP {
  """
  timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
  """
  timeoutSeconds: Int
}

"""
Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
type Status8 {
  """Current service state"""
  conditions: [Conditions6ListItem]

  """
  LoadBalancer contains the current status of the load-balancer, if one is present.
  """
  loadBalancer: LoadBalancer
}

type Conditions6ListItem {
  """
  lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
  """
  lastTransitionTime: JSON!

  """
  message is a human readable message indicating details about the transition. This may be an empty string.
  """
  message: String!

  """
  observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
  """
  observedGeneration: BigInt

  """
  reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
  """
  reason: String!

  """status of the condition, one of True, False, Unknown."""
  status: String!

  """type of condition in CamelCase or in foo.example.com/CamelCase."""
  type: String!
}

"""
LoadBalancer contains the current status of the load-balancer, if one is present.
"""
type LoadBalancer {
  """
  Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
  """
  ingress: [IngressListItem]
}

type IngressListItem {
  """
  Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
  """
  hostname: String

  """
  IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
  """
  ip: String

  """
  Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
  """
  ports: [Ports5ListItem]
}

type Ports5ListItem {
  """
  Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
    CamelCase names
  - cloud provider specific error values must have names that comply with the
    format foo.example.com/CamelCase.
  """
  error: String

  """
  Port is the port number of the service port of which status is recorded here
  """
  port: Int!

  """
  Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
  """
  protocol: String!
}

"""
Namespace provides a scope for Names. Use of multiple namespaces is optional.
"""
type Namespace {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec2

  """
  Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: Status
}

"""
Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
type Spec2 {
  """
  Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
  """
  finalizers: [String]
}

"""
Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
type Status {
  """
  Represents the latest available observations of a namespace's current state.
  """
  conditions: [Conditions2ListItem]

  """
  Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
  """
  phase: String
}

type Conditions2ListItem {
  lastTransitionTime: JSON
  message: String
  reason: String

  """Status of the condition, one of True, False, Unknown."""
  status: String!

  """Type of namespace controller condition."""
  type: String!
}

"""NamespaceList is a list of Namespaces."""
type NamespaceList {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  """
  items: [Items6ListItem]!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  metadata: Metadata2
}

type Items6ListItem {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec2

  """
  Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: Status
}

"""
Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
"""
type Node {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec11

  """
  Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: Status9
}

"""
Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
type Spec11 {
  """
  Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.
  """
  configSource: ConfigSource

  """
  Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
  """
  externalID: String

  """PodCIDR represents the pod IP range assigned to the node."""
  podCIDR: String

  """
  podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
  """
  podCIDRs: [String]

  """
  ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
  """
  providerID: String

  """If specified, the node's taints."""
  taints: [TaintsListItem]

  """
  Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
  """
  unschedulable: Boolean
}

"""
Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.
"""
type ConfigSource {
  """ConfigMap is a reference to a Node's ConfigMap"""
  configMap: ConfigMap4
}

"""ConfigMap is a reference to a Node's ConfigMap"""
type ConfigMap4 {
  """
  KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
  """
  kubeletConfigKey: String!

  """
  Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
  """
  name: String!

  """
  Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
  """
  namespace: String!

  """
  ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
  """
  resourceVersion: String

  """
  UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
  """
  uid: String
}

type TaintsListItem {
  """
  Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
  """
  effect: String!

  """Required. The taint key to be applied to a node."""
  key: String!

  """
  TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
  """
  timeAdded: JSON

  """The taint value corresponding to the taint key."""
  value: String
}

"""
Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
type Status9 {
  """
  List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).
  """
  addresses: [Addresses2ListItem]

  """
  Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
  """
  allocatable: JSON

  """
  Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
  """
  capacity: JSON

  """
  Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
  """
  conditions: [Conditions7ListItem]

  """
  Status of the config assigned to the node via the dynamic Kubelet config feature.
  """
  config: Config

  """Endpoints of daemons running on the Node."""
  daemonEndpoints: DaemonEndpoints

  """List of container images on this node"""
  images: [ImagesListItem]

  """
  Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
  """
  nodeInfo: NodeInfo

  """
  NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
  """
  phase: String

  """List of volumes that are attached to the node."""
  volumesAttached: [VolumesAttachedListItem]

  """List of attachable volumes in use (mounted) by the node."""
  volumesInUse: [String]
}

type Addresses2ListItem {
  """The node address."""
  address: String!

  """Node address type, one of Hostname, ExternalIP or InternalIP."""
  type: String!
}

type Conditions7ListItem {
  """Last time we got an update on a given condition."""
  lastHeartbeatTime: JSON

  """Last time the condition transit from one status to another."""
  lastTransitionTime: JSON

  """Human readable message indicating details about last transition."""
  message: String

  """(brief) reason for the condition's last transition."""
  reason: String

  """Status of the condition, one of True, False, Unknown."""
  status: String!

  """Type of node condition."""
  type: String!
}

"""
Status of the config assigned to the node via the dynamic Kubelet config feature.
"""
type Config {
  """
  Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
  """
  active: Active

  """
  Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
  """
  assigned: Assigned

  """
  Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
  """
  error: String

  """
  LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
  """
  lastKnownGood: LastKnownGood
}

"""
Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
"""
type Active {
  """ConfigMap is a reference to a Node's ConfigMap"""
  configMap: ConfigMap4
}

"""
Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
"""
type Assigned {
  """ConfigMap is a reference to a Node's ConfigMap"""
  configMap: ConfigMap4
}

"""
LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
"""
type LastKnownGood {
  """ConfigMap is a reference to a Node's ConfigMap"""
  configMap: ConfigMap4
}

"""Endpoints of daemons running on the Node."""
type DaemonEndpoints {
  """Endpoint on which Kubelet is listening."""
  kubeletEndpoint: KubeletEndpoint
}

"""Endpoint on which Kubelet is listening."""
type KubeletEndpoint {
  """Port number of the given endpoint."""
  port: Int!
}

type ImagesListItem {
  """
  Names by which this image is known. e.g. ["kubernetes.example/hyperkube:v1.0.7", "cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7"]
  """
  names: [String]

  """The size of the image in bytes."""
  sizeBytes: BigInt
}

"""
Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
"""
type NodeInfo {
  """The Architecture reported by the node"""
  architecture: String!

  """Boot ID reported by the node."""
  bootID: String!

  """
  ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
  """
  containerRuntimeVersion: String!

  """
  Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
  """
  kernelVersion: String!

  """KubeProxy Version reported by the node."""
  kubeProxyVersion: String!

  """Kubelet Version reported by the node."""
  kubeletVersion: String!

  """
  MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
  """
  machineID: String!

  """The Operating System reported by the node"""
  operatingSystem: String!

  """
  OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
  """
  osImage: String!

  """
  SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
  """
  systemUUID: String!
}

type VolumesAttachedListItem {
  """
  DevicePath represents the device path where the volume should be available
  """
  devicePath: String!

  """Name of the attached volume"""
  name: String!
}

"""
NodeList is the whole list of all Nodes which have been registered with master.
"""
type NodeList {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """List of nodes"""
  items: [Items20ListItem]!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  metadata: Metadata2
}

type Items20ListItem {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec11

  """
  Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: Status9
}

"""
PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
"""
type PersistentVolume {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
  """
  spec: Spec12

  """
  status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
  """
  status: Status10
}

"""
spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
"""
type Spec12 {
  """
  accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
  """
  accessModes: [String]

  """
  awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
  """
  awsElasticBlockStore: AwsElasticBlockStore

  """
  azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
  """
  azureDisk: AzureDisk

  """
  azureFile represents an Azure File Service mount on the host and bind mount to the pod.
  """
  azureFile: AzureFile2

  """
  capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
  """
  capacity: JSON

  """
  cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
  """
  cephfs: Cephfs2

  """
  cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  cinder: Cinder2

  """
  claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
  """
  claimRef: ClaimRef

  """
  csi represents storage that is handled by an external CSI driver (Beta feature).
  """
  csi: Csi2

  """
  fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
  """
  fc: Fc

  """
  flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
  """
  flexVolume: FlexVolume2

  """
  flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
  """
  flocker: Flocker2

  """
  gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  gcePersistentDisk: GcePersistentDisk2

  """
  glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
  """
  glusterfs: Glusterfs2

  """
  hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  """
  hostPath: HostPath2

  """
  iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
  """
  iscsi: Iscsi2

  """local represents directly-attached storage with node affinity"""
  local: Local

  """
  mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
  """
  mountOptions: [String]

  """
  nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  nfs: Nfs2

  """
  nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
  """
  nodeAffinity: NodeAffinity2

  """
  persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
  """
  persistentVolumeReclaimPolicy: String

  """
  photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
  """
  photonPersistentDisk: PhotonPersistentDisk

  """
  portworxVolume represents a portworx volume attached and mounted on kubelets host machine
  """
  portworxVolume: PortworxVolume

  """
  quobyte represents a Quobyte mount on the host that shares a pod's lifetime
  """
  quobyte: Quobyte

  """
  rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
  """
  rbd: Rbd2

  """
  scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
  """
  scaleIO: ScaleIO2

  """
  storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
  """
  storageClassName: String

  """
  storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
  """
  storageos: Storageos2

  """
  volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
  """
  volumeMode: String

  """
  vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
  """
  vsphereVolume: VsphereVolume
}

"""
azureFile represents an Azure File Service mount on the host and bind mount to the pod.
"""
type AzureFile2 {
  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """
  secretName is the name of secret that contains Azure Storage Account Name and Key
  """
  secretName: String!

  """
  secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
  """
  secretNamespace: String

  """shareName is the azure Share Name"""
  shareName: String!
}

"""
cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
"""
type Cephfs2 {
  """
  monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  monitors: [String]!

  """
  path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
  """
  path: String

  """
  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  readOnly: Boolean

  """
  secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  secretFile: String

  """
  secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  secretRef: SecretRef9

  """
  user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  user: String
}

"""
secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
"""
type SecretRef9 {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
"""
type Cinder2 {
  """
  fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  fsType: String

  """
  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  readOnly: Boolean

  """
  secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.
  """
  secretRef: SecretRef10

  """
  volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  volumeID: String!
}

"""
secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.
"""
type SecretRef10 {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
"""
type ClaimRef {
  """API version of the referent."""
  apiVersion: String

  """
  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  """
  fieldPath: String

  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """
  Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  """
  namespace: String

  """
  Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  """
  uid: String
}

"""
csi represents storage that is handled by an external CSI driver (Beta feature).
"""
type Csi2 {
  """
  controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
  """
  controllerExpandSecretRef: ControllerExpandSecretRef

  """
  controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
  """
  controllerPublishSecretRef: ControllerPublishSecretRef

  """driver is the name of the driver to use for this volume. Required."""
  driver: String!

  """
  fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
  """
  fsType: String

  """
  nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This is a beta field which is enabled default by CSINodeExpandSecret feature gate. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.
  """
  nodeExpandSecretRef: NodeExpandSecretRef

  """
  nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
  """
  nodePublishSecretRef: NodePublishSecretRef2

  """
  nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
  """
  nodeStageSecretRef: NodeStageSecretRef

  """
  readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
  """
  readOnly: Boolean

  """volumeAttributes of the volume to publish."""
  volumeAttributes: JSON

  """
  volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
  """
  volumeHandle: String!
}

"""
controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
"""
type ControllerExpandSecretRef {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
"""
type ControllerPublishSecretRef {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This is a beta field which is enabled default by CSINodeExpandSecret feature gate. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.
"""
type NodeExpandSecretRef {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
"""
type NodePublishSecretRef2 {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
"""
type NodeStageSecretRef {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
"""
type FlexVolume2 {
  """driver is the name of the driver to use for this volume."""
  driver: String!

  """
  fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
  """
  fsType: String

  """options is Optional: this field holds extra command options if any."""
  options: JSON

  """
  readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """
  secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
  """
  secretRef: SecretRef11
}

"""
secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
"""
type SecretRef11 {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
"""
type Flocker2 {
  """
  datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
  """
  datasetName: String

  """
  datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
  """
  datasetUUID: String
}

"""
gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
"""
type GcePersistentDisk2 {
  """
  fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  fsType: String

  """
  partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  partition: Int

  """
  pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  pdName: String!

  """
  readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  readOnly: Boolean
}

"""
glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
"""
type Glusterfs2 {
  """
  endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  endpoints: String!

  """
  endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  endpointsNamespace: String

  """
  path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  path: String!

  """
  readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  readOnly: Boolean
}

"""
hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
"""
type HostPath2 {
  """
  path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  """
  path: String!

  """
  type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  """
  type: String
}

"""
iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
"""
type Iscsi2 {
  """
  chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
  """
  chapAuthDiscovery: Boolean

  """
  chapAuthSession defines whether support iSCSI Session CHAP authentication
  """
  chapAuthSession: Boolean

  """
  fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
  """
  fsType: String

  """
  initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
  """
  initiatorName: String

  """iqn is Target iSCSI Qualified Name."""
  iqn: String!

  """
  iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
  """
  iscsiInterface: String

  """lun is iSCSI Target Lun number."""
  lun: Int!

  """
  portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
  """
  portals: [String]

  """
  readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
  """
  readOnly: Boolean

  """
  secretRef is the CHAP Secret for iSCSI target and initiator authentication
  """
  secretRef: SecretRef12

  """
  targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
  """
  targetPortal: String!
}

"""
secretRef is the CHAP Secret for iSCSI target and initiator authentication
"""
type SecretRef12 {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""local represents directly-attached storage with node affinity"""
type Local {
  """
  fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
  """
  fsType: String

  """
  path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
  """
  path: String!
}

"""
nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
"""
type Nfs2 {
  """
  path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  path: String!

  """
  readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  readOnly: Boolean

  """
  server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  server: String!
}

"""
nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
"""
type NodeAffinity2 {
  """required specifies hard node constraints that must be met."""
  required: Required
}

"""required specifies hard node constraints that must be met."""
type Required {
  """Required. A list of node selector terms. The terms are ORed."""
  nodeSelectorTerms: [NodeSelectorTermsListItem]!
}

"""
rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
"""
type Rbd2 {
  """
  fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
  """
  fsType: String

  """
  image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  image: String!

  """
  keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  keyring: String

  """
  monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  monitors: [String]!

  """
  pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  pool: String

  """
  readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  readOnly: Boolean

  """
  secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  secretRef: SecretRef13

  """
  user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  user: String
}

"""
secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
"""
type SecretRef13 {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
"""
type ScaleIO2 {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
  """
  fsType: String

  """gateway is the host address of the ScaleIO API Gateway."""
  gateway: String!

  """
  protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
  """
  protectionDomain: String

  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """
  secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
  """
  secretRef: SecretRef14!

  """
  sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
  """
  sslEnabled: Boolean

  """
  storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
  """
  storageMode: String

  """
  storagePool is the ScaleIO Storage Pool associated with the protection domain.
  """
  storagePool: String

  """system is the name of the storage system as configured in ScaleIO."""
  system: String!

  """
  volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
  """
  volumeName: String
}

"""
secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
"""
type SecretRef14 {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
"""
type Storageos2 {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String

  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """
  secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
  """
  secretRef: SecretRef15

  """
  volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
  """
  volumeName: String

  """
  volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
  """
  volumeNamespace: String
}

"""
secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
"""
type SecretRef15 {
  """API version of the referent."""
  apiVersion: String

  """
  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  """
  fieldPath: String

  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """
  Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  """
  namespace: String

  """
  Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  """
  uid: String
}

"""
status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
"""
type Status10 {
  """
  message is a human-readable message indicating details about why the volume is in this state.
  """
  message: String

  """
  phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
  """
  phase: String

  """
  reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
  """
  reason: String
}

"""
PersistentVolumeClaim is a user's request for and claim to a persistent volume
"""
type PersistentVolumeClaim {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
  """
  spec: Spec3

  """
  status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
  """
  status: Status2
}

"""PersistentVolumeList is a list of PersistentVolume items."""
type PersistentVolumeList {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  items is a list of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
  """
  items: [Items21ListItem]!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  metadata: Metadata2
}

type Items21ListItem {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
  """
  spec: Spec12

  """
  status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
  """
  status: Status10
}

"""
Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
"""
type Pod {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec4

  """
  Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: Status3
}

"""
PodTemplate describes a template for creating copies of a predefined pod.
"""
type PodTemplate {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  template: Template
}

"""
ReplicationController represents the configuration of a replication controller.
"""
type ReplicationController {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata6

  """
  Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec6

  """
  Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: Status4
}

"""ResourceQuota sets aggregate quota restrictions enforced per namespace"""
type ResourceQuota {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec8

  """
  Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: Status6
}

"""
Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
"""
type Service {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec10

  """
  Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: Status8
}

"""
ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
"""
type ServiceAccount {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
  """
  automountServiceAccountToken: Boolean

  """
  ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  """
  imagePullSecrets: [ImagePullSecrets2ListItem]

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """
  Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret
  """
  secrets: [SecretsListItem]
}

type Mutation {
  """
  connect DELETE requests to proxy of Pod
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/pods/{name}/proxy
  """
  connectCoreV1DeleteNamespacedPodProxy(
    """name of the PodProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """Path is the URL path to use for the current proxy request to pod."""
    path: String
  ): String

  """
  connect DELETE requests to proxy of Pod
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
  """
  connectCoreV1DeleteNamespacedPodProxyWithPath(
    """name of the PodProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """Path is the URL path to use for the current proxy request to pod."""
    path: String
  ): String

  """
  connect DELETE requests to proxy of Service
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/services/{name}/proxy
  """
  connectCoreV1DeleteNamespacedServiceProxy(
    """name of the ServiceProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    """
    path: String
  ): String

  """
  connect DELETE requests to proxy of Service
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
  """
  connectCoreV1DeleteNamespacedServiceProxyWithPath(
    """name of the ServiceProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    """
    path: String
  ): String

  """
  connect DELETE requests to proxy of Node
  
  Equivalent to DELETE /api/v1/nodes/{name}/proxy
  """
  connectCoreV1DeleteNodeProxy(
    """name of the NodeProxyOptions"""
    name: String!

    """Path is the URL path to use for the current proxy request to node."""
    path: String
  ): String

  """
  connect DELETE requests to proxy of Node
  
  Equivalent to DELETE /api/v1/nodes/{name}/proxy/{path}
  """
  connectCoreV1DeleteNodeProxyWithPath(
    """name of the NodeProxyOptions"""
    name: String!

    """Path is the URL path to use for the current proxy request to node."""
    path: String
  ): String

  """
  connect HEAD requests to proxy of Pod
  
  Equivalent to HEAD /api/v1/namespaces/{namespace}/pods/{name}/proxy
  """
  connectCoreV1HeadNamespacedPodProxy(
    """name of the PodProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """Path is the URL path to use for the current proxy request to pod."""
    path: String
  ): String

  """
  connect HEAD requests to proxy of Pod
  
  Equivalent to HEAD /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
  """
  connectCoreV1HeadNamespacedPodProxyWithPath(
    """name of the PodProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """Path is the URL path to use for the current proxy request to pod."""
    path: String
  ): String

  """
  connect HEAD requests to proxy of Service
  
  Equivalent to HEAD /api/v1/namespaces/{namespace}/services/{name}/proxy
  """
  connectCoreV1HeadNamespacedServiceProxy(
    """name of the ServiceProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    """
    path: String
  ): String

  """
  connect HEAD requests to proxy of Service
  
  Equivalent to HEAD /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
  """
  connectCoreV1HeadNamespacedServiceProxyWithPath(
    """name of the ServiceProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    """
    path: String
  ): String

  """
  connect HEAD requests to proxy of Node
  
  Equivalent to HEAD /api/v1/nodes/{name}/proxy
  """
  connectCoreV1HeadNodeProxy(
    """name of the NodeProxyOptions"""
    name: String!

    """Path is the URL path to use for the current proxy request to node."""
    path: String
  ): String

  """
  connect HEAD requests to proxy of Node
  
  Equivalent to HEAD /api/v1/nodes/{name}/proxy/{path}
  """
  connectCoreV1HeadNodeProxyWithPath(
    """name of the NodeProxyOptions"""
    name: String!

    """Path is the URL path to use for the current proxy request to node."""
    path: String
  ): String

  """
  connect OPTIONS requests to proxy of Pod
  
  Equivalent to OPTIONS /api/v1/namespaces/{namespace}/pods/{name}/proxy
  """
  connectCoreV1OptionsNamespacedPodProxy(
    """name of the PodProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """Path is the URL path to use for the current proxy request to pod."""
    path: String
  ): String

  """
  connect OPTIONS requests to proxy of Pod
  
  Equivalent to OPTIONS /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
  """
  connectCoreV1OptionsNamespacedPodProxyWithPath(
    """name of the PodProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """Path is the URL path to use for the current proxy request to pod."""
    path: String
  ): String

  """
  connect OPTIONS requests to proxy of Service
  
  Equivalent to OPTIONS /api/v1/namespaces/{namespace}/services/{name}/proxy
  """
  connectCoreV1OptionsNamespacedServiceProxy(
    """name of the ServiceProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    """
    path: String
  ): String

  """
  connect OPTIONS requests to proxy of Service
  
  Equivalent to OPTIONS /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
  """
  connectCoreV1OptionsNamespacedServiceProxyWithPath(
    """name of the ServiceProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    """
    path: String
  ): String

  """
  connect OPTIONS requests to proxy of Node
  
  Equivalent to OPTIONS /api/v1/nodes/{name}/proxy
  """
  connectCoreV1OptionsNodeProxy(
    """name of the NodeProxyOptions"""
    name: String!

    """Path is the URL path to use for the current proxy request to node."""
    path: String
  ): String

  """
  connect OPTIONS requests to proxy of Node
  
  Equivalent to OPTIONS /api/v1/nodes/{name}/proxy/{path}
  """
  connectCoreV1OptionsNodeProxyWithPath(
    """name of the NodeProxyOptions"""
    name: String!

    """Path is the URL path to use for the current proxy request to node."""
    path: String
  ): String

  """
  connect PATCH requests to proxy of Pod
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/pods/{name}/proxy
  """
  connectCoreV1PatchNamespacedPodProxy(
    """name of the PodProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """Path is the URL path to use for the current proxy request to pod."""
    path: String
  ): String

  """
  connect PATCH requests to proxy of Pod
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
  """
  connectCoreV1PatchNamespacedPodProxyWithPath(
    """name of the PodProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """Path is the URL path to use for the current proxy request to pod."""
    path: String
  ): String

  """
  connect PATCH requests to proxy of Service
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/services/{name}/proxy
  """
  connectCoreV1PatchNamespacedServiceProxy(
    """name of the ServiceProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    """
    path: String
  ): String

  """
  connect PATCH requests to proxy of Service
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
  """
  connectCoreV1PatchNamespacedServiceProxyWithPath(
    """name of the ServiceProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    """
    path: String
  ): String

  """
  connect PATCH requests to proxy of Node
  
  Equivalent to PATCH /api/v1/nodes/{name}/proxy
  """
  connectCoreV1PatchNodeProxy(
    """name of the NodeProxyOptions"""
    name: String!

    """Path is the URL path to use for the current proxy request to node."""
    path: String
  ): String

  """
  connect PATCH requests to proxy of Node
  
  Equivalent to PATCH /api/v1/nodes/{name}/proxy/{path}
  """
  connectCoreV1PatchNodeProxyWithPath(
    """name of the NodeProxyOptions"""
    name: String!

    """Path is the URL path to use for the current proxy request to node."""
    path: String
  ): String

  """
  connect POST requests to attach of Pod
  
  Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/attach
  """
  connectCoreV1PostNamespacedPodAttach(
    """
    The container in which to execute the command. Defaults to only container if there is only one container in the pod.
    """
    container: String

    """name of the PodAttachOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
    """
    stderr: Boolean

    """
    Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
    """
    stdin: Boolean

    """
    Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
    """
    stdout: Boolean

    """
    TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
    """
    tty: Boolean
  ): String

  """
  connect POST requests to exec of Pod
  
  Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/exec
  """
  connectCoreV1PostNamespacedPodExec(
    """
    Command is the remote command to execute. argv array. Not executed within a shell.
    """
    command: String

    """
    Container in which to execute the command. Defaults to only container if there is only one container in the pod.
    """
    container: String

    """name of the PodExecOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """Redirect the standard error stream of the pod for this call."""
    stderr: Boolean

    """
    Redirect the standard input stream of the pod for this call. Defaults to false.
    """
    stdin: Boolean

    """Redirect the standard output stream of the pod for this call."""
    stdout: Boolean

    """
    TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
    """
    tty: Boolean
  ): String

  """
  connect POST requests to portforward of Pod
  
  Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/portforward
  """
  connectCoreV1PostNamespacedPodPortforward(
    """name of the PodPortForwardOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """List of ports to forward Required when using WebSockets"""
    ports: Int
  ): String

  """
  connect POST requests to proxy of Pod
  
  Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/proxy
  """
  connectCoreV1PostNamespacedPodProxy(
    """name of the PodProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """Path is the URL path to use for the current proxy request to pod."""
    path: String
  ): String

  """
  connect POST requests to proxy of Pod
  
  Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
  """
  connectCoreV1PostNamespacedPodProxyWithPath(
    """name of the PodProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """Path is the URL path to use for the current proxy request to pod."""
    path: String
  ): String

  """
  connect POST requests to proxy of Service
  
  Equivalent to POST /api/v1/namespaces/{namespace}/services/{name}/proxy
  """
  connectCoreV1PostNamespacedServiceProxy(
    """name of the ServiceProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    """
    path: String
  ): String

  """
  connect POST requests to proxy of Service
  
  Equivalent to POST /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
  """
  connectCoreV1PostNamespacedServiceProxyWithPath(
    """name of the ServiceProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    """
    path: String
  ): String

  """
  connect POST requests to proxy of Node
  
  Equivalent to POST /api/v1/nodes/{name}/proxy
  """
  connectCoreV1PostNodeProxy(
    """name of the NodeProxyOptions"""
    name: String!

    """Path is the URL path to use for the current proxy request to node."""
    path: String
  ): String

  """
  connect POST requests to proxy of Node
  
  Equivalent to POST /api/v1/nodes/{name}/proxy/{path}
  """
  connectCoreV1PostNodeProxyWithPath(
    """name of the NodeProxyOptions"""
    name: String!

    """Path is the URL path to use for the current proxy request to node."""
    path: String
  ): String

  """
  connect PUT requests to proxy of Pod
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/pods/{name}/proxy
  """
  connectCoreV1PutNamespacedPodProxy(
    """name of the PodProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """Path is the URL path to use for the current proxy request to pod."""
    path: String
  ): String

  """
  connect PUT requests to proxy of Pod
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
  """
  connectCoreV1PutNamespacedPodProxyWithPath(
    """name of the PodProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """Path is the URL path to use for the current proxy request to pod."""
    path: String
  ): String

  """
  connect PUT requests to proxy of Service
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/services/{name}/proxy
  """
  connectCoreV1PutNamespacedServiceProxy(
    """name of the ServiceProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    """
    path: String
  ): String

  """
  connect PUT requests to proxy of Service
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
  """
  connectCoreV1PutNamespacedServiceProxyWithPath(
    """name of the ServiceProxyOptions"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    """
    path: String
  ): String

  """
  connect PUT requests to proxy of Node
  
  Equivalent to PUT /api/v1/nodes/{name}/proxy
  """
  connectCoreV1PutNodeProxy(
    """name of the NodeProxyOptions"""
    name: String!

    """Path is the URL path to use for the current proxy request to node."""
    path: String
  ): String

  """
  connect PUT requests to proxy of Node
  
  Equivalent to PUT /api/v1/nodes/{name}/proxy/{path}
  """
  connectCoreV1PutNodeProxyWithPath(
    """name of the NodeProxyOptions"""
    name: String!

    """Path is the URL path to use for the current proxy request to node."""
    path: String
  ): String

  """
  create a Namespace
  
  Equivalent to POST /api/v1/namespaces
  """
  createCoreV1Namespace(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Namespace provides a scope for Names. Use of multiple namespaces is optional.
    """
    namespaceInput: NamespaceInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Namespace

  """
  create a Binding
  
  Equivalent to POST /api/v1/namespaces/{namespace}/bindings
  """
  createCoreV1NamespacedBinding(
    """
    Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
    """
    bindingInput: BindingInput

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Binding

  """
  create a ConfigMap
  
  Equivalent to POST /api/v1/namespaces/{namespace}/configmaps
  """
  createCoreV1NamespacedConfigMap(
    """ConfigMap holds configuration data for pods to consume."""
    configMapInput: ConfigMapInput

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ConfigMap

  """
  create Endpoints
  
  Equivalent to POST /api/v1/namespaces/{namespace}/endpoints
  """
  createCoreV1NamespacedEndpoints(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    Endpoints is a collection of endpoints that implement the actual service. Example:
    
    	 Name: "mysvc",
    	 Subsets: [
    	   {
    	     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
    	     Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
    	   },
    	   {
    	     Addresses: [{"ip": "10.10.3.3"}],
    	     Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
    	   },
    	]
    """
    endpointsInput: EndpointsInput

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Endpoints

  """
  create an Event
  
  Equivalent to POST /api/v1/namespaces/{namespace}/events
  """
  createCoreV1NamespacedEvent(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
    """
    eventInput: EventInput

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Event

  """
  create a LimitRange
  
  Equivalent to POST /api/v1/namespaces/{namespace}/limitranges
  """
  createCoreV1NamespacedLimitRange(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    LimitRange sets resource usage limits for each kind of resource in a Namespace.
    """
    limitRangeInput: LimitRangeInput

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): LimitRange

  """
  create a PersistentVolumeClaim
  
  Equivalent to POST /api/v1/namespaces/{namespace}/persistentvolumeclaims
  """
  createCoreV1NamespacedPersistentVolumeClaim(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    PersistentVolumeClaim is a user's request for and claim to a persistent volume
    """
    persistentVolumeClaimInput: PersistentVolumeClaimInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PersistentVolumeClaim

  """
  create a Pod
  
  Equivalent to POST /api/v1/namespaces/{namespace}/pods
  """
  createCoreV1NamespacedPod(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
    """
    podInput: PodInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Pod

  """
  create binding of a Pod
  
  Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/binding
  """
  createCoreV1NamespacedPodBinding(
    """
    Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
    """
    bindingInput: BindingInput

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the Binding"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Binding

  """
  create eviction of a Pod
  
  Equivalent to POST /api/v1/namespaces/{namespace}/pods/{name}/eviction
  """
  createCoreV1NamespacedPodEviction(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
    """
    ioK8sApiPolicyV1EvictionInput: IoK8sApiPolicyV1EvictionInput

    """name of the Eviction"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): IoK8sApiPolicyV1Eviction

  """
  create a PodTemplate
  
  Equivalent to POST /api/v1/namespaces/{namespace}/podtemplates
  """
  createCoreV1NamespacedPodTemplate(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    PodTemplate describes a template for creating copies of a predefined pod.
    """
    podTemplateInput: PodTemplateInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PodTemplate

  """
  create a ReplicationController
  
  Equivalent to POST /api/v1/namespaces/{namespace}/replicationcontrollers
  """
  createCoreV1NamespacedReplicationController(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    ReplicationController represents the configuration of a replication controller.
    """
    replicationControllerInput: ReplicationControllerInput
  ): ReplicationController

  """
  create a ResourceQuota
  
  Equivalent to POST /api/v1/namespaces/{namespace}/resourcequotas
  """
  createCoreV1NamespacedResourceQuota(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """ResourceQuota sets aggregate quota restrictions enforced per namespace"""
    resourceQuotaInput: ResourceQuotaInput
  ): ResourceQuota

  """
  create a Secret
  
  Equivalent to POST /api/v1/namespaces/{namespace}/secrets
  """
  createCoreV1NamespacedSecret(
    """
    Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
    """
    apiV1NamespaceSecretsInput: ApiV1NamespaceSecretsInput

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ApiV1NamespaceSecrets

  """
  create a Service
  
  Equivalent to POST /api/v1/namespaces/{namespace}/services
  """
  createCoreV1NamespacedService(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
    """
    serviceInput: ServiceInput
  ): Service

  """
  create a ServiceAccount
  
  Equivalent to POST /api/v1/namespaces/{namespace}/serviceaccounts
  """
  createCoreV1NamespacedServiceAccount(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
    """
    serviceAccountInput: ServiceAccountInput
  ): ServiceAccount

  """
  create token of a ServiceAccount
  
  Equivalent to POST /api/v1/namespaces/{namespace}/serviceaccounts/{name}/token
  """
  createCoreV1NamespacedServiceAccountToken(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """TokenRequest requests a token for a given service account."""
    ioK8sApiAuthenticationV1TokenRequestInput: IoK8sApiAuthenticationV1TokenRequestInput

    """name of the TokenRequest"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): IoK8sApiAuthenticationV1TokenRequest

  """
  create a Node
  
  Equivalent to POST /api/v1/nodes
  """
  createCoreV1Node(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
    """
    nodeInput: NodeInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Node

  """
  create a PersistentVolume
  
  Equivalent to POST /api/v1/persistentvolumes
  """
  createCoreV1PersistentVolume(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
    """
    persistentVolumeInput: PersistentVolumeInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PersistentVolume

  """
  delete collection of ConfigMap
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/configmaps
  """
  deleteCoreV1CollectionNamespacedConfigMap(
    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete collection of Endpoints
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/endpoints
  """
  deleteCoreV1CollectionNamespacedEndpoints(
    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete collection of Event
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/events
  """
  deleteCoreV1CollectionNamespacedEvent(
    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete collection of LimitRange
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/limitranges
  """
  deleteCoreV1CollectionNamespacedLimitRange(
    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete collection of PersistentVolumeClaim
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/persistentvolumeclaims
  """
  deleteCoreV1CollectionNamespacedPersistentVolumeClaim(
    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete collection of Pod
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/pods
  """
  deleteCoreV1CollectionNamespacedPod(
    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete collection of PodTemplate
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/podtemplates
  """
  deleteCoreV1CollectionNamespacedPodTemplate(
    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete collection of ReplicationController
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/replicationcontrollers
  """
  deleteCoreV1CollectionNamespacedReplicationController(
    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete collection of ResourceQuota
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/resourcequotas
  """
  deleteCoreV1CollectionNamespacedResourceQuota(
    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete collection of Secret
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/secrets
  """
  deleteCoreV1CollectionNamespacedSecret(
    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete collection of Service
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/services
  """
  deleteCoreV1CollectionNamespacedService(
    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete collection of ServiceAccount
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/serviceaccounts
  """
  deleteCoreV1CollectionNamespacedServiceAccount(
    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete collection of Node
  
  Equivalent to DELETE /api/v1/nodes
  """
  deleteCoreV1CollectionNode(
    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete collection of PersistentVolume
  
  Equivalent to DELETE /api/v1/persistentvolumes
  """
  deleteCoreV1CollectionPersistentVolume(
    """
    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
    
    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    """
    continue: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    A selector to restrict the list of returned objects by their fields. Defaults to everything.
    """
    fieldSelector: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """
    A selector to restrict the list of returned objects by their labels. Defaults to everything.
    """
    labelSelector: String

    """
    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    
    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    """
    limit: Int

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String

    """
    resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersion: String

    """
    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
    
    Defaults to unset
    """
    resourceVersionMatch: String

    """
    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
    
    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
      is interpreted as "data at least as new as the provided `resourceVersion`"
      and the bookmark event is send when the state is synced
      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
      If `resourceVersion` is unset, this is interpreted as "consistent read" and the
      bookmark event is send when the state is synced at least to the moment
      when request started being processed.
    - `resourceVersionMatch` set to any other value or unset
      Invalid error is returned.
    
    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
    """
    sendInitialEvents: Boolean

    """
    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    """
    timeoutSeconds: Int
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete a Namespace
  
  Equivalent to DELETE /api/v1/namespaces/{name}
  """
  deleteCoreV1Namespace(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """name of the Namespace"""
    name: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete a ConfigMap
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/configmaps/{name}
  """
  deleteCoreV1NamespacedConfigMap(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """name of the ConfigMap"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete Endpoints
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/endpoints/{name}
  """
  deleteCoreV1NamespacedEndpoints(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """name of the Endpoints"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete an Event
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/events/{name}
  """
  deleteCoreV1NamespacedEvent(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """name of the Event"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete a LimitRange
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/limitranges/{name}
  """
  deleteCoreV1NamespacedLimitRange(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """name of the LimitRange"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete a PersistentVolumeClaim
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}
  """
  deleteCoreV1NamespacedPersistentVolumeClaim(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """name of the PersistentVolumeClaim"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String
  ): PersistentVolumeClaim

  """
  delete a Pod
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/pods/{name}
  """
  deleteCoreV1NamespacedPod(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """name of the Pod"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String
  ): Pod

  """
  delete a PodTemplate
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/podtemplates/{name}
  """
  deleteCoreV1NamespacedPodTemplate(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """name of the PodTemplate"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String
  ): PodTemplate

  """
  delete a ReplicationController
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/replicationcontrollers/{name}
  """
  deleteCoreV1NamespacedReplicationController(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """name of the ReplicationController"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete a ResourceQuota
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/resourcequotas/{name}
  """
  deleteCoreV1NamespacedResourceQuota(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """name of the ResourceQuota"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String
  ): ResourceQuota

  """
  delete a Secret
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/secrets/{name}
  """
  deleteCoreV1NamespacedSecret(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """name of the Secret"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete a Service
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/services/{name}
  """
  deleteCoreV1NamespacedService(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """name of the Service"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String
  ): Service

  """
  delete a ServiceAccount
  
  Equivalent to DELETE /api/v1/namespaces/{namespace}/serviceaccounts/{name}
  """
  deleteCoreV1NamespacedServiceAccount(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """name of the ServiceAccount"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String
  ): ServiceAccount

  """
  delete a Node
  
  Equivalent to DELETE /api/v1/nodes/{name}
  """
  deleteCoreV1Node(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """name of the Node"""
    name: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String
  ): IoK8sApimachineryPkgApisMetaV1Status

  """
  delete a PersistentVolume
  
  Equivalent to DELETE /api/v1/persistentvolumes/{name}
  """
  deleteCoreV1PersistentVolume(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    gracePeriodSeconds: Int

    """DeleteOptions may be provided when deleting an API object."""
    ioK8sApimachineryPkgApisMetaV1DeleteOptionsInput: IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput

    """name of the PersistentVolume"""
    name: String!

    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    orphanDependents: Boolean

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """
    propagationPolicy: String
  ): PersistentVolume

  """
  partially update the specified Namespace
  
  Equivalent to PATCH /api/v1/namespaces/{name}
  """
  patchCoreV1Namespace(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the Namespace"""
    name: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Namespace

  """
  partially update status of the specified Namespace
  
  Equivalent to PATCH /api/v1/namespaces/{name}/status
  """
  patchCoreV1NamespaceStatus(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the Namespace"""
    name: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Namespace

  """
  partially update the specified ConfigMap
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/configmaps/{name}
  """
  patchCoreV1NamespacedConfigMap(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the ConfigMap"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ConfigMap

  """
  partially update the specified Endpoints
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/endpoints/{name}
  """
  patchCoreV1NamespacedEndpoints(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the Endpoints"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Endpoints

  """
  partially update the specified Event
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/events/{name}
  """
  patchCoreV1NamespacedEvent(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the Event"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Event

  """
  partially update the specified LimitRange
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/limitranges/{name}
  """
  patchCoreV1NamespacedLimitRange(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the LimitRange"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): LimitRange

  """
  partially update the specified PersistentVolumeClaim
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}
  """
  patchCoreV1NamespacedPersistentVolumeClaim(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the PersistentVolumeClaim"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PersistentVolumeClaim

  """
  partially update status of the specified PersistentVolumeClaim
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status
  """
  patchCoreV1NamespacedPersistentVolumeClaimStatus(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the PersistentVolumeClaim"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PersistentVolumeClaim

  """
  partially update the specified Pod
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/pods/{name}
  """
  patchCoreV1NamespacedPod(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the Pod"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Pod

  """
  partially update ephemeralcontainers of the specified Pod
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers
  """
  patchCoreV1NamespacedPodEphemeralcontainers(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the Pod"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Pod

  """
  partially update status of the specified Pod
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/pods/{name}/status
  """
  patchCoreV1NamespacedPodStatus(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the Pod"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Pod

  """
  partially update the specified PodTemplate
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/podtemplates/{name}
  """
  patchCoreV1NamespacedPodTemplate(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the PodTemplate"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PodTemplate

  """
  partially update the specified ReplicationController
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/replicationcontrollers/{name}
  """
  patchCoreV1NamespacedReplicationController(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the ReplicationController"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ReplicationController

  """
  partially update scale of the specified ReplicationController
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale
  """
  patchCoreV1NamespacedReplicationControllerScale(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the Scale"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): IoK8sApiAutoscalingV1Scale

  """
  partially update status of the specified ReplicationController
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status
  """
  patchCoreV1NamespacedReplicationControllerStatus(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the ReplicationController"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ReplicationController

  """
  partially update the specified ResourceQuota
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/resourcequotas/{name}
  """
  patchCoreV1NamespacedResourceQuota(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the ResourceQuota"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ResourceQuota

  """
  partially update status of the specified ResourceQuota
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/resourcequotas/{name}/status
  """
  patchCoreV1NamespacedResourceQuotaStatus(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the ResourceQuota"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ResourceQuota

  """
  partially update the specified Secret
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/secrets/{name}
  """
  patchCoreV1NamespacedSecret(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the Secret"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ApiV1NamespaceSecrets

  """
  partially update the specified Service
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/services/{name}
  """
  patchCoreV1NamespacedService(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the Service"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Service

  """
  partially update the specified ServiceAccount
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/serviceaccounts/{name}
  """
  patchCoreV1NamespacedServiceAccount(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the ServiceAccount"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ServiceAccount

  """
  partially update status of the specified Service
  
  Equivalent to PATCH /api/v1/namespaces/{namespace}/services/{name}/status
  """
  patchCoreV1NamespacedServiceStatus(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the Service"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Service

  """
  partially update the specified Node
  
  Equivalent to PATCH /api/v1/nodes/{name}
  """
  patchCoreV1Node(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the Node"""
    name: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Node

  """
  partially update status of the specified Node
  
  Equivalent to PATCH /api/v1/nodes/{name}/status
  """
  patchCoreV1NodeStatus(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the Node"""
    name: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Node

  """
  partially update the specified PersistentVolume
  
  Equivalent to PATCH /api/v1/persistentvolumes/{name}
  """
  patchCoreV1PersistentVolume(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the PersistentVolume"""
    name: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PersistentVolume

  """
  partially update status of the specified PersistentVolume
  
  Equivalent to PATCH /api/v1/persistentvolumes/{name}/status
  """
  patchCoreV1PersistentVolumeStatus(
    """
    String represents payload of content type 'application/apply-patch+yaml'
    """
    applicationApplyPatchYamlInput: String

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
    """
    force: Boolean

    """name of the PersistentVolume"""
    name: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PersistentVolume

  """
  replace the specified Namespace
  
  Equivalent to PUT /api/v1/namespaces/{name}
  """
  replaceCoreV1Namespace(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the Namespace"""
    name: String!

    """
    Namespace provides a scope for Names. Use of multiple namespaces is optional.
    """
    namespaceInput: NamespaceInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Namespace

  """
  replace finalize of the specified Namespace
  
  Equivalent to PUT /api/v1/namespaces/{name}/finalize
  """
  replaceCoreV1NamespaceFinalize(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the Namespace"""
    name: String!

    """
    Namespace provides a scope for Names. Use of multiple namespaces is optional.
    """
    namespaceInput: NamespaceInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Namespace

  """
  replace status of the specified Namespace
  
  Equivalent to PUT /api/v1/namespaces/{name}/status
  """
  replaceCoreV1NamespaceStatus(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the Namespace"""
    name: String!

    """
    Namespace provides a scope for Names. Use of multiple namespaces is optional.
    """
    namespaceInput: NamespaceInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Namespace

  """
  replace the specified ConfigMap
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/configmaps/{name}
  """
  replaceCoreV1NamespacedConfigMap(
    """ConfigMap holds configuration data for pods to consume."""
    configMapInput: ConfigMapInput

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the ConfigMap"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ConfigMap

  """
  replace the specified Endpoints
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/endpoints/{name}
  """
  replaceCoreV1NamespacedEndpoints(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    Endpoints is a collection of endpoints that implement the actual service. Example:
    
    	 Name: "mysvc",
    	 Subsets: [
    	   {
    	     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
    	     Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
    	   },
    	   {
    	     Addresses: [{"ip": "10.10.3.3"}],
    	     Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
    	   },
    	]
    """
    endpointsInput: EndpointsInput

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the Endpoints"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Endpoints

  """
  replace the specified Event
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/events/{name}
  """
  replaceCoreV1NamespacedEvent(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
    """
    eventInput: EventInput

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the Event"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Event

  """
  replace the specified LimitRange
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/limitranges/{name}
  """
  replaceCoreV1NamespacedLimitRange(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """
    LimitRange sets resource usage limits for each kind of resource in a Namespace.
    """
    limitRangeInput: LimitRangeInput

    """name of the LimitRange"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): LimitRange

  """
  replace the specified PersistentVolumeClaim
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}
  """
  replaceCoreV1NamespacedPersistentVolumeClaim(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the PersistentVolumeClaim"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    PersistentVolumeClaim is a user's request for and claim to a persistent volume
    """
    persistentVolumeClaimInput: PersistentVolumeClaimInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PersistentVolumeClaim

  """
  replace status of the specified PersistentVolumeClaim
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status
  """
  replaceCoreV1NamespacedPersistentVolumeClaimStatus(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the PersistentVolumeClaim"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    PersistentVolumeClaim is a user's request for and claim to a persistent volume
    """
    persistentVolumeClaimInput: PersistentVolumeClaimInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PersistentVolumeClaim

  """
  replace the specified Pod
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/pods/{name}
  """
  replaceCoreV1NamespacedPod(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the Pod"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
    """
    podInput: PodInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Pod

  """
  replace ephemeralcontainers of the specified Pod
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers
  """
  replaceCoreV1NamespacedPodEphemeralcontainers(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the Pod"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
    """
    podInput: PodInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Pod

  """
  replace status of the specified Pod
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/pods/{name}/status
  """
  replaceCoreV1NamespacedPodStatus(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the Pod"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
    """
    podInput: PodInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Pod

  """
  replace the specified PodTemplate
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/podtemplates/{name}
  """
  replaceCoreV1NamespacedPodTemplate(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the PodTemplate"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """
    PodTemplate describes a template for creating copies of a predefined pod.
    """
    podTemplateInput: PodTemplateInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PodTemplate

  """
  replace the specified ReplicationController
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/replicationcontrollers/{name}
  """
  replaceCoreV1NamespacedReplicationController(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the ReplicationController"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    ReplicationController represents the configuration of a replication controller.
    """
    replicationControllerInput: ReplicationControllerInput
  ): ReplicationController

  """
  replace scale of the specified ReplicationController
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale
  """
  replaceCoreV1NamespacedReplicationControllerScale(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """Scale represents a scaling request for a resource."""
    ioK8sApiAutoscalingV1ScaleInput: IoK8sApiAutoscalingV1ScaleInput

    """name of the Scale"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): IoK8sApiAutoscalingV1Scale

  """
  replace status of the specified ReplicationController
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status
  """
  replaceCoreV1NamespacedReplicationControllerStatus(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the ReplicationController"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    ReplicationController represents the configuration of a replication controller.
    """
    replicationControllerInput: ReplicationControllerInput
  ): ReplicationController

  """
  replace the specified ResourceQuota
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/resourcequotas/{name}
  """
  replaceCoreV1NamespacedResourceQuota(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the ResourceQuota"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """ResourceQuota sets aggregate quota restrictions enforced per namespace"""
    resourceQuotaInput: ResourceQuotaInput
  ): ResourceQuota

  """
  replace status of the specified ResourceQuota
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/resourcequotas/{name}/status
  """
  replaceCoreV1NamespacedResourceQuotaStatus(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the ResourceQuota"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """ResourceQuota sets aggregate quota restrictions enforced per namespace"""
    resourceQuotaInput: ResourceQuotaInput
  ): ResourceQuota

  """
  replace the specified Secret
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/secrets/{name}
  """
  replaceCoreV1NamespacedSecret(
    """
    Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
    """
    apiV1NamespaceSecretsInput: ApiV1NamespaceSecretsInput

    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the Secret"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): ApiV1NamespaceSecrets

  """
  replace the specified Service
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/services/{name}
  """
  replaceCoreV1NamespacedService(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the Service"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
    """
    serviceInput: ServiceInput
  ): Service

  """
  replace the specified ServiceAccount
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/serviceaccounts/{name}
  """
  replaceCoreV1NamespacedServiceAccount(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the ServiceAccount"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
    """
    serviceAccountInput: ServiceAccountInput
  ): ServiceAccount

  """
  replace status of the specified Service
  
  Equivalent to PUT /api/v1/namespaces/{namespace}/services/{name}/status
  """
  replaceCoreV1NamespacedServiceStatus(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the Service"""
    name: String!

    """object name and auth scope, such as for teams and projects"""
    namespace: String!

    """If 'true', then the output is pretty printed."""
    pretty: String

    """
    Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
    """
    serviceInput: ServiceInput
  ): Service

  """
  replace the specified Node
  
  Equivalent to PUT /api/v1/nodes/{name}
  """
  replaceCoreV1Node(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the Node"""
    name: String!

    """
    Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
    """
    nodeInput: NodeInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Node

  """
  replace status of the specified Node
  
  Equivalent to PUT /api/v1/nodes/{name}/status
  """
  replaceCoreV1NodeStatus(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the Node"""
    name: String!

    """
    Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
    """
    nodeInput: NodeInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): Node

  """
  replace the specified PersistentVolume
  
  Equivalent to PUT /api/v1/persistentvolumes/{name}
  """
  replaceCoreV1PersistentVolume(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the PersistentVolume"""
    name: String!

    """
    PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
    """
    persistentVolumeInput: PersistentVolumeInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PersistentVolume

  """
  replace status of the specified PersistentVolume
  
  Equivalent to PUT /api/v1/persistentvolumes/{name}/status
  """
  replaceCoreV1PersistentVolumeStatus(
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    dryRun: String

    """
    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    """
    fieldManager: String

    """
    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
    """
    fieldValidation: String

    """name of the PersistentVolume"""
    name: String!

    """
    PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
    """
    persistentVolumeInput: PersistentVolumeInput

    """If 'true', then the output is pretty printed."""
    pretty: String
  ): PersistentVolume
}

"""
Namespace provides a scope for Names. Use of multiple namespaces is optional.
"""
input NamespaceInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput

  """
  Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec2Input

  """
  Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: StatusInput
}

"""
Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
"""
input MetadataInput {
  """
  Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
  """
  annotations: JSON

  """
  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
  
  Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  creationTimestamp: JSON

  """
  Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  """
  deletionGracePeriodSeconds: BigInt

  """
  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
  
  Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  deletionTimestamp: JSON

  """
  Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
  """
  finalizers: [String]

  """
  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
  
  If this field is specified and the generated name exists, the server will return a 409.
  
  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
  """
  generateName: String

  """
  A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  """
  generation: BigInt

  """
  Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
  """
  labels: JSON

  """
  ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
  """
  managedFields: [ManagedFieldsListItemInput]

  """
  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
  """
  name: String

  """
  Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
  
  Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
  """
  namespace: String

  """
  List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  """
  ownerReferences: [OwnerReferencesListItemInput]

  """
  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
  
  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
  """
  selfLink: String

  """
  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
  
  Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
  """
  uid: String
}

input ManagedFieldsListItemInput {
  """
  APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
  """
  apiVersion: String

  """
  FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
  """
  fieldsType: String

  """
  FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
  """
  fieldsV1: JSON

  """Manager is an identifier of the workflow managing these fields."""
  manager: String

  """
  Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
  """
  operation: String

  """
  Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
  """
  subresource: String

  """
  Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
  """
  time: JSON
}

input OwnerReferencesListItemInput {
  """API version of the referent."""
  apiVersion: String!

  """
  If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
  """
  blockOwnerDeletion: Boolean

  """If true, this reference points to the managing controller."""
  controller: Boolean

  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String!

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
  """
  name: String!

  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
  """
  uid: String!
}

"""
Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
input Spec2Input {
  """
  Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
  """
  finalizers: [String]
}

"""
Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
input StatusInput {
  """
  Represents the latest available observations of a namespace's current state.
  """
  conditions: [Conditions2ListItemInput]

  """
  Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
  """
  phase: String
}

input Conditions2ListItemInput {
  lastTransitionTime: JSON
  message: String
  reason: String

  """Status of the condition, one of True, False, Unknown."""
  status: String!

  """Type of namespace controller condition."""
  type: String!
}

"""
Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
"""
type Binding {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """The target object that you want to bind to the standard object."""
  target: Target!
}

"""The target object that you want to bind to the standard object."""
type Target {
  """API version of the referent."""
  apiVersion: String

  """
  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  """
  fieldPath: String

  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """
  Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  """
  namespace: String

  """
  Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  """
  uid: String
}

"""
Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
"""
input BindingInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput

  """The target object that you want to bind to the standard object."""
  target: TargetInput!
}

"""The target object that you want to bind to the standard object."""
input TargetInput {
  """API version of the referent."""
  apiVersion: String

  """
  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  """
  fieldPath: String

  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """
  Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  """
  namespace: String

  """
  Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  """
  uid: String
}

"""ConfigMap holds configuration data for pods to consume."""
input ConfigMapInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
  """
  binaryData: JSON

  """
  Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
  """
  data: JSON

  """
  Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
  """
  immutable: Boolean

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput
}

"""
Endpoints is a collection of endpoints that implement the actual service. Example:

	 Name: "mysvc",
	 Subsets: [
	   {
	     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
	     Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
	   },
	   {
	     Addresses: [{"ip": "10.10.3.3"}],
	     Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
	   },
	]
"""
input EndpointsInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput

  """
  The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
  """
  subsets: [SubsetsListItemInput]
}

input SubsetsListItemInput {
  """
  IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
  """
  addresses: [AddressesListItemInput]

  """
  IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
  """
  notReadyAddresses: [NotReadyAddressesListItemInput]

  """Port numbers available on the related IP addresses."""
  ports: [PortsListItemInput]
}

input AddressesListItemInput {
  """The Hostname of this endpoint"""
  hostname: String

  """
  The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or ff02::/16).
  """
  ip: String!

  """
  Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
  """
  nodeName: String

  """Reference to object providing the endpoint."""
  targetRef: TargetRefInput
}

"""Reference to object providing the endpoint."""
input TargetRefInput {
  """API version of the referent."""
  apiVersion: String

  """
  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  """
  fieldPath: String

  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """
  Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  """
  namespace: String

  """
  Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  """
  uid: String
}

input NotReadyAddressesListItemInput {
  """The Hostname of this endpoint"""
  hostname: String

  """
  The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or ff02::/16).
  """
  ip: String!

  """
  Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
  """
  nodeName: String

  """Reference to object providing the endpoint."""
  targetRef: TargetRefInput
}

input PortsListItemInput {
  """
  The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
  
  * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
  
  * Kubernetes-defined prefixed names:
    * 'kubernetes.io/h2c' - HTTP/2 over cleartext as described in https://www.rfc-editor.org/rfc/rfc7540
  
  * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
  """
  appProtocol: String

  """
  The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
  """
  name: String

  """The port number of the endpoint."""
  port: Int!

  """
  The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
  """
  protocol: String
}

"""
Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
"""
input EventInput {
  """What action was taken/failed regarding to the Regarding object."""
  action: String

  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """The number of times this event has occurred."""
  count: Int

  """Time when this Event was first observed."""
  eventTime: JSON

  """
  The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
  """
  firstTimestamp: JSON

  """The object that this event is about."""
  involvedObject: InvolvedObjectInput!

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  The time at which the most recent occurrence of this event was recorded.
  """
  lastTimestamp: JSON

  """A human-readable description of the status of this operation."""
  message: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput!

  """
  This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
  """
  reason: String

  """Optional secondary object for more complex actions."""
  related: RelatedInput

  """
  Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
  """
  reportingComponent: String

  """ID of the controller instance, e.g. `kubelet-xyzf`."""
  reportingInstance: String

  """
  Data about the Event series this event represents or nil if it's a singleton Event.
  """
  series: SeriesInput

  """
  The component reporting this event. Should be a short machine understandable string.
  """
  source: SourceInput

  """
  Type of this event (Normal, Warning), new types could be added in the future
  """
  type: String
}

"""The object that this event is about."""
input InvolvedObjectInput {
  """API version of the referent."""
  apiVersion: String

  """
  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  """
  fieldPath: String

  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """
  Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  """
  namespace: String

  """
  Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  """
  uid: String
}

"""Optional secondary object for more complex actions."""
input RelatedInput {
  """API version of the referent."""
  apiVersion: String

  """
  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  """
  fieldPath: String

  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """
  Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  """
  namespace: String

  """
  Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  """
  uid: String
}

"""
Data about the Event series this event represents or nil if it's a singleton Event.
"""
input SeriesInput {
  """Number of occurrences in this series up to the last heartbeat time"""
  count: Int

  """Time of the last occurrence observed"""
  lastObservedTime: JSON
}

"""
The component reporting this event. Should be a short machine understandable string.
"""
input SourceInput {
  """Component from which the event is generated."""
  component: String

  """Node name on which the event is generated."""
  host: String
}

"""
LimitRange sets resource usage limits for each kind of resource in a Namespace.
"""
input LimitRangeInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput

  """
  Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: SpecInput
}

"""
Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
input SpecInput {
  """Limits is the list of LimitRangeItem objects that are enforced."""
  limits: [LimitsListItemInput]!
}

input LimitsListItemInput {
  """
  Default resource requirement limit value by resource name if resource limit is omitted.
  """
  default: JSON

  """
  DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
  """
  defaultRequest: JSON

  """Max usage constraints on this kind by resource name."""
  max: JSON

  """
  MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
  """
  maxLimitRequestRatio: JSON

  """Min usage constraints on this kind by resource name."""
  min: JSON

  """Type of resource that this limit applies to."""
  type: String!
}

"""
PersistentVolumeClaim is a user's request for and claim to a persistent volume
"""
input PersistentVolumeClaimInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput

  """
  spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
  """
  spec: Spec3Input

  """
  status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
  """
  status: Status2Input
}

"""
spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
"""
input Spec3Input {
  """
  accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
  """
  accessModes: [String]

  """
  dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
  """
  dataSource: DataSourceInput

  """
  dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef
    allows any non-core object, as well as PersistentVolumeClaim objects.
  * While dataSource ignores disallowed values (dropping them), dataSourceRef
    preserves all values, and generates an error if a disallowed value is
    specified.
  * While dataSource only allows local objects, dataSourceRef allows objects
    in any namespaces.
  (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
  """
  dataSourceRef: DataSourceRefInput

  """
  resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
  """
  resources: Resources2Input

  """selector is a label query over volumes to consider for binding."""
  selector: SelectorInput

  """
  storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
  """
  storageClassName: String

  """
  volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
  """
  volumeMode: String

  """
  volumeName is the binding reference to the PersistentVolume backing this claim.
  """
  volumeName: String
}

"""
dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
"""
input DataSourceInput {
  """
  APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
  """
  apiGroup: String

  """Kind is the type of resource being referenced"""
  kind: String!

  """Name is the name of resource being referenced"""
  name: String!
}

"""
dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef
  allows any non-core object, as well as PersistentVolumeClaim objects.
* While dataSource ignores disallowed values (dropping them), dataSourceRef
  preserves all values, and generates an error if a disallowed value is
  specified.
* While dataSource only allows local objects, dataSourceRef allows objects
  in any namespaces.
(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
"""
input DataSourceRefInput {
  """
  APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
  """
  apiGroup: String

  """Kind is the type of resource being referenced"""
  kind: String!

  """Name is the name of resource being referenced"""
  name: String!

  """
  Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
  """
  namespace: String
}

"""
resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
"""
input Resources2Input {
  """
  Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
  
  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
  
  This field is immutable. It can only be set for containers.
  """
  claims: [ClaimsListItemInput]

  """
  Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  limits: JSON

  """
  Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  requests: JSON
}

input ClaimsListItemInput {
  """
  Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
  """
  name: String!
}

"""selector is a label query over volumes to consider for binding."""
input SelectorInput {
  """
  matchExpressions is a list of label selector requirements. The requirements are ANDed.
  """
  matchExpressions: [MatchExpressionsListItemInput]

  """
  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
  """
  matchLabels: JSON
}

input MatchExpressionsListItemInput {
  """key is the label key that the selector applies to."""
  key: String!

  """
  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
  """
  operator: String!

  """
  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
  """
  values: [String]
}

"""
status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
"""
input Status2Input {
  """
  accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
  """
  accessModes: [String]

  """
  allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
  """
  allocatedResources: JSON

  """capacity represents the actual resources of the underlying volume."""
  capacity: JSON

  """
  conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
  """
  conditions: [Conditions3ListItemInput]

  """phase represents the current phase of PersistentVolumeClaim."""
  phase: String

  """
  resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
  """
  resizeStatus: String
}

input Conditions3ListItemInput {
  """lastProbeTime is the time we probed the condition."""
  lastProbeTime: JSON

  """
  lastTransitionTime is the time the condition transitioned from one status to another.
  """
  lastTransitionTime: JSON

  """
  message is the human-readable message indicating details about last transition.
  """
  message: String

  """
  reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
  """
  reason: String
  status: String!
  type: String!
}

"""
Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
"""
input PodInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput

  """
  Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec4Input

  """
  Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: Status3Input
}

"""
Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
input Spec4Input {
  """
  Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
  """
  activeDeadlineSeconds: BigInt

  """If specified, the pod's scheduling constraints"""
  affinity: AffinityInput

  """
  AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
  """
  automountServiceAccountToken: Boolean

  """
  List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
  """
  containers: [ContainersListItemInput]!

  """
  Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
  """
  dnsConfig: DnsConfigInput

  """
  Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
  """
  dnsPolicy: String

  """
  EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
  """
  enableServiceLinks: Boolean

  """
  List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
  """
  ephemeralContainers: [EphemeralContainersListItemInput]

  """
  HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
  """
  hostAliases: [HostAliasesListItemInput]

  """Use the host's ipc namespace. Optional: Default to false."""
  hostIPC: Boolean

  """
  Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
  """
  hostNetwork: Boolean

  """Use the host's pid namespace. Optional: Default to false."""
  hostPID: Boolean

  """
  Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
  """
  hostUsers: Boolean

  """
  Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
  """
  hostname: String

  """
  ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
  """
  imagePullSecrets: [ImagePullSecretsListItemInput]

  """
  List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  """
  initContainers: [InitContainersListItemInput]

  """
  NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
  """
  nodeName: String

  """
  NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  """
  nodeSelector: JSON

  """
  Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
  
  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
  
  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
  """
  os: OsInput

  """
  Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
  """
  overhead: JSON

  """
  PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
  """
  preemptionPolicy: String

  """
  The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
  """
  priority: Int

  """
  If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
  """
  priorityClassName: String

  """
  If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
  """
  readinessGates: [ReadinessGatesListItemInput]

  """
  ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
  
  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
  
  This field is immutable.
  """
  resourceClaims: [ResourceClaimsListItemInput]

  """
  Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
  """
  restartPolicy: String

  """
  RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
  """
  runtimeClassName: String

  """
  If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
  """
  schedulerName: String

  """
  SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.
  
  SchedulingGates can only be set at pod creation time, and be removed only afterwards.
  
  This is a beta feature enabled by the PodSchedulingReadiness feature gate.
  """
  schedulingGates: [SchedulingGatesListItemInput]

  """
  SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
  """
  securityContext: SecurityContext3Input

  """
  DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
  """
  serviceAccount: String

  """
  ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  """
  serviceAccountName: String

  """
  If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
  """
  setHostnameAsFQDN: Boolean

  """
  Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
  """
  shareProcessNamespace: Boolean

  """
  If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
  """
  subdomain: String

  """
  Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
  """
  terminationGracePeriodSeconds: BigInt

  """If specified, the pod's tolerations."""
  tolerations: [TolerationsListItemInput]

  """
  TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
  """
  topologySpreadConstraints: [TopologySpreadConstraintsListItemInput]

  """
  List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
  """
  volumes: [VolumesListItemInput]
}

"""If specified, the pod's scheduling constraints"""
input AffinityInput {
  """Describes node affinity scheduling rules for the pod."""
  nodeAffinity: NodeAffinityInput

  """
  Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
  """
  podAffinity: PodAffinityInput

  """
  Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
  """
  podAntiAffinity: PodAntiAffinityInput
}

"""Describes node affinity scheduling rules for the pod."""
input NodeAffinityInput {
  """
  The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
  """
  preferredDuringSchedulingIgnoredDuringExecution: [PreferredDuringSchedulingIgnoredDuringExecutionListItemInput]

  """
  If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
  """
  requiredDuringSchedulingIgnoredDuringExecution: RequiredDuringSchedulingIgnoredDuringExecutionInput
}

input PreferredDuringSchedulingIgnoredDuringExecutionListItemInput {
  """A node selector term, associated with the corresponding weight."""
  preference: PreferenceInput!

  """
  Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
  """
  weight: Int!
}

"""A node selector term, associated with the corresponding weight."""
input PreferenceInput {
  """A list of node selector requirements by node's labels."""
  matchExpressions: [MatchExpressions2ListItemInput]

  """A list of node selector requirements by node's fields."""
  matchFields: [MatchFieldsListItemInput]
}

input MatchExpressions2ListItemInput {
  """The label key that the selector applies to."""
  key: String!

  """
  Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
  """
  operator: String!

  """
  An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
  """
  values: [String]
}

input MatchFieldsListItemInput {
  """The label key that the selector applies to."""
  key: String!

  """
  Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
  """
  operator: String!

  """
  An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
  """
  values: [String]
}

"""
If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
"""
input RequiredDuringSchedulingIgnoredDuringExecutionInput {
  """Required. A list of node selector terms. The terms are ORed."""
  nodeSelectorTerms: [NodeSelectorTermsListItemInput]!
}

input NodeSelectorTermsListItemInput {
  """A list of node selector requirements by node's labels."""
  matchExpressions: [MatchExpressions2ListItemInput]

  """A list of node selector requirements by node's fields."""
  matchFields: [MatchFieldsListItemInput]
}

"""
Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
"""
input PodAffinityInput {
  """
  The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
  """
  preferredDuringSchedulingIgnoredDuringExecution: [PreferredDuringSchedulingIgnoredDuringExecution2ListItemInput]

  """
  If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
  """
  requiredDuringSchedulingIgnoredDuringExecution: [RequiredDuringSchedulingIgnoredDuringExecution2ListItemInput]
}

input PreferredDuringSchedulingIgnoredDuringExecution2ListItemInput {
  """
  Required. A pod affinity term, associated with the corresponding weight.
  """
  podAffinityTerm: PodAffinityTermInput!

  """
  weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
  """
  weight: Int!
}

"""
Required. A pod affinity term, associated with the corresponding weight.
"""
input PodAffinityTermInput {
  """A label query over a set of resources, in this case pods."""
  labelSelector: LabelSelectorInput

  """
  A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
  """
  namespaceSelector: NamespaceSelectorInput

  """
  namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
  """
  namespaces: [String]

  """
  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
  """
  topologyKey: String!
}

"""A label query over a set of resources, in this case pods."""
input LabelSelectorInput {
  """
  matchExpressions is a list of label selector requirements. The requirements are ANDed.
  """
  matchExpressions: [MatchExpressionsListItemInput]

  """
  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
  """
  matchLabels: JSON
}

"""
A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
"""
input NamespaceSelectorInput {
  """
  matchExpressions is a list of label selector requirements. The requirements are ANDed.
  """
  matchExpressions: [MatchExpressionsListItemInput]

  """
  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
  """
  matchLabels: JSON
}

input RequiredDuringSchedulingIgnoredDuringExecution2ListItemInput {
  """A label query over a set of resources, in this case pods."""
  labelSelector: LabelSelectorInput

  """
  A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
  """
  namespaceSelector: NamespaceSelectorInput

  """
  namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
  """
  namespaces: [String]

  """
  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
  """
  topologyKey: String!
}

"""
Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
"""
input PodAntiAffinityInput {
  """
  The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
  """
  preferredDuringSchedulingIgnoredDuringExecution: [PreferredDuringSchedulingIgnoredDuringExecution3ListItemInput]

  """
  If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
  """
  requiredDuringSchedulingIgnoredDuringExecution: [RequiredDuringSchedulingIgnoredDuringExecution3ListItemInput]
}

input PreferredDuringSchedulingIgnoredDuringExecution3ListItemInput {
  """
  Required. A pod affinity term, associated with the corresponding weight.
  """
  podAffinityTerm: PodAffinityTermInput!

  """
  weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
  """
  weight: Int!
}

input RequiredDuringSchedulingIgnoredDuringExecution3ListItemInput {
  """A label query over a set of resources, in this case pods."""
  labelSelector: LabelSelectorInput

  """
  A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
  """
  namespaceSelector: NamespaceSelectorInput

  """
  namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
  """
  namespaces: [String]

  """
  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
  """
  topologyKey: String!
}

input ContainersListItemInput {
  """
  Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
  """
  args: [String]

  """
  Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
  """
  command: [String]

  """
  List of environment variables to set in the container. Cannot be updated.
  """
  env: [EnvListItemInput]

  """
  List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
  """
  envFrom: [EnvFromListItemInput]

  """
  Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
  """
  image: String

  """
  Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
  """
  imagePullPolicy: String

  """
  Actions that the management system should take in response to container lifecycle events. Cannot be updated.
  """
  lifecycle: LifecycleInput

  """
  Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  livenessProbe: LivenessProbeInput

  """
  Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
  """
  name: String!

  """
  List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
  """
  ports: [Ports2ListItemInput]

  """
  Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  readinessProbe: ReadinessProbeInput

  """Resources resize policy for the container."""
  resizePolicy: [ResizePolicyListItemInput]

  """
  Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  resources: Resources3Input

  """
  SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  """
  securityContext: SecurityContextInput

  """
  StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  startupProbe: StartupProbeInput

  """
  Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
  """
  stdin: Boolean

  """
  Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
  """
  stdinOnce: Boolean

  """
  Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
  """
  terminationMessagePath: String

  """
  Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
  """
  terminationMessagePolicy: String

  """
  Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
  """
  tty: Boolean

  """
  volumeDevices is the list of block devices to be used by the container.
  """
  volumeDevices: [VolumeDevicesListItemInput]

  """
  Pod volumes to mount into the container's filesystem. Cannot be updated.
  """
  volumeMounts: [VolumeMountsListItemInput]

  """
  Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
  """
  workingDir: String
}

input EnvListItemInput {
  """Name of the environment variable. Must be a C_IDENTIFIER."""
  name: String!

  """
  Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
  """
  value: String

  """
  Source for the environment variable's value. Cannot be used if value is not empty.
  """
  valueFrom: ValueFromInput
}

"""
Source for the environment variable's value. Cannot be used if value is not empty.
"""
input ValueFromInput {
  """Selects a key of a ConfigMap."""
  configMapKeyRef: ConfigMapKeyRefInput

  """
  Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
  """
  fieldRef: FieldRefInput

  """
  Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
  """
  resourceFieldRef: ResourceFieldRefInput

  """Selects a key of a secret in the pod's namespace"""
  secretKeyRef: SecretKeyRefInput
}

"""Selects a key of a ConfigMap."""
input ConfigMapKeyRefInput {
  """The key to select."""
  key: String!

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """Specify whether the ConfigMap or its key must be defined"""
  optional: Boolean
}

"""
Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
"""
input FieldRefInput {
  """
  Version of the schema the FieldPath is written in terms of, defaults to "v1".
  """
  apiVersion: String

  """Path of the field to select in the specified API version."""
  fieldPath: String!
}

"""
Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
"""
input ResourceFieldRefInput {
  """Container name: required for volumes, optional for env vars"""
  containerName: String

  """
  Specifies the output format of the exposed resources, defaults to "1"
  """
  divisor: JSON

  """Required: resource to select"""
  resource: String!
}

"""Selects a key of a secret in the pod's namespace"""
input SecretKeyRefInput {
  """The key of the secret to select from.  Must be a valid secret key."""
  key: String!

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """Specify whether the Secret or its key must be defined"""
  optional: Boolean
}

input EnvFromListItemInput {
  """The ConfigMap to select from"""
  configMapRef: ConfigMapRefInput

  """
  An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
  """
  prefix: String

  """The Secret to select from"""
  secretRef: SecretRefInput
}

"""The ConfigMap to select from"""
input ConfigMapRefInput {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """Specify whether the ConfigMap must be defined"""
  optional: Boolean
}

"""The Secret to select from"""
input SecretRefInput {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """Specify whether the Secret must be defined"""
  optional: Boolean
}

"""
Actions that the management system should take in response to container lifecycle events. Cannot be updated.
"""
input LifecycleInput {
  """
  PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
  """
  postStart: PostStartInput

  """
  PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
  """
  preStop: PreStopInput
}

"""
PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
"""
input PostStartInput {
  """Exec specifies the action to take."""
  exec: ExecInput

  """HTTPGet specifies the http request to perform."""
  httpGet: HttpGetInput

  """
  Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
  """
  tcpSocket: TcpSocketInput
}

"""Exec specifies the action to take."""
input ExecInput {
  """
  Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
  """
  command: [String]
}

"""HTTPGet specifies the http request to perform."""
input HttpGetInput {
  """
  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
  """
  host: String

  """Custom headers to set in the request. HTTP allows repeated headers."""
  httpHeaders: [HttpHeadersListItemInput]

  """Path to access on the HTTP server."""
  path: String

  """
  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
  """
  port: JSON!

  """Scheme to use for connecting to the host. Defaults to HTTP."""
  scheme: String
}

input HttpHeadersListItemInput {
  """The header field name"""
  name: String!

  """The header field value"""
  value: String!
}

"""
Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
"""
input TcpSocketInput {
  """Optional: Host name to connect to, defaults to the pod IP."""
  host: String

  """
  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
  """
  port: JSON!
}

"""
PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
"""
input PreStopInput {
  """Exec specifies the action to take."""
  exec: ExecInput

  """HTTPGet specifies the http request to perform."""
  httpGet: HttpGetInput

  """
  Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
  """
  tcpSocket: TcpSocketInput
}

"""
Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
"""
input LivenessProbeInput {
  """Exec specifies the action to take."""
  exec: ExecInput

  """
  Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  """
  failureThreshold: Int

  """GRPC specifies an action involving a GRPC port."""
  grpc: GrpcInput

  """HTTPGet specifies the http request to perform."""
  httpGet: HttpGetInput

  """
  Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  initialDelaySeconds: Int

  """
  How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  """
  periodSeconds: Int

  """
  Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
  """
  successThreshold: Int

  """TCPSocket specifies an action involving a TCP port."""
  tcpSocket: TcpSocket2Input

  """
  Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
  """
  terminationGracePeriodSeconds: BigInt

  """
  Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  timeoutSeconds: Int
}

"""GRPC specifies an action involving a GRPC port."""
input GrpcInput {
  """
  Port number of the gRPC service. Number must be in the range 1 to 65535.
  """
  port: Int!

  """
  Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
  
  If this is not specified, the default behavior is defined by gRPC.
  """
  service: String
}

"""TCPSocket specifies an action involving a TCP port."""
input TcpSocket2Input {
  """Optional: Host name to connect to, defaults to the pod IP."""
  host: String

  """
  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
  """
  port: JSON!
}

input Ports2ListItemInput {
  """
  Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
  """
  containerPort: Int!

  """What host IP to bind the external port to."""
  hostIP: String

  """
  Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
  """
  hostPort: Int

  """
  If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
  """
  name: String

  """Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP"."""
  protocol: String
}

"""
Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
"""
input ReadinessProbeInput {
  """Exec specifies the action to take."""
  exec: ExecInput

  """
  Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  """
  failureThreshold: Int

  """GRPC specifies an action involving a GRPC port."""
  grpc: GrpcInput

  """HTTPGet specifies the http request to perform."""
  httpGet: HttpGetInput

  """
  Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  initialDelaySeconds: Int

  """
  How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  """
  periodSeconds: Int

  """
  Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
  """
  successThreshold: Int

  """TCPSocket specifies an action involving a TCP port."""
  tcpSocket: TcpSocket2Input

  """
  Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
  """
  terminationGracePeriodSeconds: BigInt

  """
  Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  timeoutSeconds: Int
}

input ResizePolicyListItemInput {
  """
  Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
  """
  resourceName: String!

  """
  Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
  """
  restartPolicy: String!
}

"""
Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
"""
input Resources3Input {
  """
  Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
  
  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
  
  This field is immutable. It can only be set for containers.
  """
  claims: [ClaimsListItemInput]

  """
  Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  limits: JSON

  """
  Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  requests: JSON
}

"""
SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
"""
input SecurityContextInput {
  """
  AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
  """
  allowPrivilegeEscalation: Boolean

  """
  The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
  """
  capabilities: CapabilitiesInput

  """
  Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
  """
  privileged: Boolean

  """
  procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
  """
  procMount: String

  """
  Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
  """
  readOnlyRootFilesystem: Boolean

  """
  The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
  """
  runAsGroup: BigInt

  """
  Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
  """
  runAsNonRoot: Boolean

  """
  The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
  """
  runAsUser: BigInt

  """
  The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
  """
  seLinuxOptions: SeLinuxOptionsInput

  """
  The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
  """
  seccompProfile: SeccompProfileInput

  """
  The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
  """
  windowsOptions: WindowsOptionsInput
}

"""
The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
"""
input CapabilitiesInput {
  """Added capabilities"""
  add: [String]

  """Removed capabilities"""
  drop: [String]
}

"""
The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
"""
input SeLinuxOptionsInput {
  """Level is SELinux level label that applies to the container."""
  level: String

  """Role is a SELinux role label that applies to the container."""
  role: String

  """Type is a SELinux type label that applies to the container."""
  type: String

  """User is a SELinux user label that applies to the container."""
  user: String
}

"""
The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
"""
input SeccompProfileInput {
  """
  localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
  """
  localhostProfile: String

  """
  type indicates which kind of seccomp profile will be applied. Valid options are:
  
  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
  """
  type: String!
}

"""
The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
"""
input WindowsOptionsInput {
  """
  GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
  """
  gmsaCredentialSpec: String

  """GMSACredentialSpecName is the name of the GMSA credential spec to use."""
  gmsaCredentialSpecName: String

  """
  HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
  """
  hostProcess: Boolean

  """
  The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
  """
  runAsUserName: String
}

"""
StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
"""
input StartupProbeInput {
  """Exec specifies the action to take."""
  exec: ExecInput

  """
  Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  """
  failureThreshold: Int

  """GRPC specifies an action involving a GRPC port."""
  grpc: GrpcInput

  """HTTPGet specifies the http request to perform."""
  httpGet: HttpGetInput

  """
  Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  initialDelaySeconds: Int

  """
  How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  """
  periodSeconds: Int

  """
  Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
  """
  successThreshold: Int

  """TCPSocket specifies an action involving a TCP port."""
  tcpSocket: TcpSocket2Input

  """
  Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
  """
  terminationGracePeriodSeconds: BigInt

  """
  Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  timeoutSeconds: Int
}

input VolumeDevicesListItemInput {
  """
  devicePath is the path inside of the container that the device will be mapped to.
  """
  devicePath: String!

  """name must match the name of a persistentVolumeClaim in the pod"""
  name: String!
}

input VolumeMountsListItemInput {
  """
  Path within the container at which the volume should be mounted.  Must not contain ':'.
  """
  mountPath: String!

  """
  mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
  """
  mountPropagation: String

  """This must match the Name of a Volume."""
  name: String!

  """
  Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
  """
  readOnly: Boolean

  """
  Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
  """
  subPath: String

  """
  Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
  """
  subPathExpr: String
}

"""
Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
"""
input DnsConfigInput {
  """
  A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
  """
  nameservers: [String]

  """
  A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
  """
  options: [OptionsListItemInput]

  """
  A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
  """
  searches: [String]
}

input OptionsListItemInput {
  """Required."""
  name: String
  value: String
}

input EphemeralContainersListItemInput {
  """
  Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
  """
  args: [String]

  """
  Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
  """
  command: [String]

  """
  List of environment variables to set in the container. Cannot be updated.
  """
  env: [EnvListItemInput]

  """
  List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
  """
  envFrom: [EnvFromListItemInput]

  """
  Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
  """
  image: String

  """
  Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
  """
  imagePullPolicy: String

  """Lifecycle is not allowed for ephemeral containers."""
  lifecycle: Lifecycle2Input

  """Probes are not allowed for ephemeral containers."""
  livenessProbe: LivenessProbe2Input

  """
  Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
  """
  name: String!

  """Ports are not allowed for ephemeral containers."""
  ports: [Ports3ListItemInput]

  """Probes are not allowed for ephemeral containers."""
  readinessProbe: ReadinessProbe2Input

  """Resources resize policy for the container."""
  resizePolicy: [ResizePolicyListItemInput]

  """
  Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
  """
  resources: Resources4Input

  """
  Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
  """
  securityContext: SecurityContext2Input

  """Probes are not allowed for ephemeral containers."""
  startupProbe: StartupProbe2Input

  """
  Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
  """
  stdin: Boolean

  """
  Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
  """
  stdinOnce: Boolean

  """
  If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
  
  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
  """
  targetContainerName: String

  """
  Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
  """
  terminationMessagePath: String

  """
  Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
  """
  terminationMessagePolicy: String

  """
  Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
  """
  tty: Boolean

  """
  volumeDevices is the list of block devices to be used by the container.
  """
  volumeDevices: [VolumeDevicesListItemInput]

  """
  Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
  """
  volumeMounts: [VolumeMounts2ListItemInput]

  """
  Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
  """
  workingDir: String
}

"""Lifecycle is not allowed for ephemeral containers."""
input Lifecycle2Input {
  """
  PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
  """
  postStart: PostStartInput

  """
  PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
  """
  preStop: PreStopInput
}

"""Probes are not allowed for ephemeral containers."""
input LivenessProbe2Input {
  """Exec specifies the action to take."""
  exec: ExecInput

  """
  Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  """
  failureThreshold: Int

  """GRPC specifies an action involving a GRPC port."""
  grpc: GrpcInput

  """HTTPGet specifies the http request to perform."""
  httpGet: HttpGetInput

  """
  Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  initialDelaySeconds: Int

  """
  How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  """
  periodSeconds: Int

  """
  Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
  """
  successThreshold: Int

  """TCPSocket specifies an action involving a TCP port."""
  tcpSocket: TcpSocket2Input

  """
  Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
  """
  terminationGracePeriodSeconds: BigInt

  """
  Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  timeoutSeconds: Int
}

input Ports3ListItemInput {
  """
  Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
  """
  containerPort: Int!

  """What host IP to bind the external port to."""
  hostIP: String

  """
  Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
  """
  hostPort: Int

  """
  If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
  """
  name: String

  """Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP"."""
  protocol: String
}

"""Probes are not allowed for ephemeral containers."""
input ReadinessProbe2Input {
  """Exec specifies the action to take."""
  exec: ExecInput

  """
  Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  """
  failureThreshold: Int

  """GRPC specifies an action involving a GRPC port."""
  grpc: GrpcInput

  """HTTPGet specifies the http request to perform."""
  httpGet: HttpGetInput

  """
  Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  initialDelaySeconds: Int

  """
  How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  """
  periodSeconds: Int

  """
  Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
  """
  successThreshold: Int

  """TCPSocket specifies an action involving a TCP port."""
  tcpSocket: TcpSocket2Input

  """
  Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
  """
  terminationGracePeriodSeconds: BigInt

  """
  Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  timeoutSeconds: Int
}

"""
Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
"""
input Resources4Input {
  """
  Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
  
  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
  
  This field is immutable. It can only be set for containers.
  """
  claims: [ClaimsListItemInput]

  """
  Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  limits: JSON

  """
  Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  requests: JSON
}

"""
Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
"""
input SecurityContext2Input {
  """
  AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
  """
  allowPrivilegeEscalation: Boolean

  """
  The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
  """
  capabilities: CapabilitiesInput

  """
  Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
  """
  privileged: Boolean

  """
  procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
  """
  procMount: String

  """
  Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
  """
  readOnlyRootFilesystem: Boolean

  """
  The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
  """
  runAsGroup: BigInt

  """
  Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
  """
  runAsNonRoot: Boolean

  """
  The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
  """
  runAsUser: BigInt

  """
  The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
  """
  seLinuxOptions: SeLinuxOptionsInput

  """
  The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
  """
  seccompProfile: SeccompProfileInput

  """
  The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
  """
  windowsOptions: WindowsOptionsInput
}

"""Probes are not allowed for ephemeral containers."""
input StartupProbe2Input {
  """Exec specifies the action to take."""
  exec: ExecInput

  """
  Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  """
  failureThreshold: Int

  """GRPC specifies an action involving a GRPC port."""
  grpc: GrpcInput

  """HTTPGet specifies the http request to perform."""
  httpGet: HttpGetInput

  """
  Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  initialDelaySeconds: Int

  """
  How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  """
  periodSeconds: Int

  """
  Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
  """
  successThreshold: Int

  """TCPSocket specifies an action involving a TCP port."""
  tcpSocket: TcpSocket2Input

  """
  Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
  """
  terminationGracePeriodSeconds: BigInt

  """
  Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  timeoutSeconds: Int
}

input VolumeMounts2ListItemInput {
  """
  Path within the container at which the volume should be mounted.  Must not contain ':'.
  """
  mountPath: String!

  """
  mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
  """
  mountPropagation: String

  """This must match the Name of a Volume."""
  name: String!

  """
  Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
  """
  readOnly: Boolean

  """
  Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
  """
  subPath: String

  """
  Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
  """
  subPathExpr: String
}

input HostAliasesListItemInput {
  """Hostnames for the above IP address."""
  hostnames: [String]

  """IP address of the host file entry."""
  ip: String
}

input ImagePullSecretsListItemInput {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

input InitContainersListItemInput {
  """
  Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
  """
  args: [String]

  """
  Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
  """
  command: [String]

  """
  List of environment variables to set in the container. Cannot be updated.
  """
  env: [EnvListItemInput]

  """
  List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
  """
  envFrom: [EnvFromListItemInput]

  """
  Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
  """
  image: String

  """
  Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
  """
  imagePullPolicy: String

  """
  Actions that the management system should take in response to container lifecycle events. Cannot be updated.
  """
  lifecycle: LifecycleInput

  """
  Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  livenessProbe: LivenessProbeInput

  """
  Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
  """
  name: String!

  """
  List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
  """
  ports: [Ports2ListItemInput]

  """
  Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  readinessProbe: ReadinessProbeInput

  """Resources resize policy for the container."""
  resizePolicy: [ResizePolicyListItemInput]

  """
  Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  resources: Resources3Input

  """
  SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  """
  securityContext: SecurityContextInput

  """
  StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  """
  startupProbe: StartupProbeInput

  """
  Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
  """
  stdin: Boolean

  """
  Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
  """
  stdinOnce: Boolean

  """
  Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
  """
  terminationMessagePath: String

  """
  Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
  """
  terminationMessagePolicy: String

  """
  Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
  """
  tty: Boolean

  """
  volumeDevices is the list of block devices to be used by the container.
  """
  volumeDevices: [VolumeDevicesListItemInput]

  """
  Pod volumes to mount into the container's filesystem. Cannot be updated.
  """
  volumeMounts: [VolumeMountsListItemInput]

  """
  Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
  """
  workingDir: String
}

"""
Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.

If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions

If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
"""
input OsInput {
  """
  Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
  """
  name: String!
}

input ReadinessGatesListItemInput {
  """
  ConditionType refers to a condition in the pod's condition list with matching type.
  """
  conditionType: String!
}

input ResourceClaimsListItemInput {
  """
  Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
  """
  name: String!

  """Source describes where to find the ResourceClaim."""
  source: Source2Input
}

"""Source describes where to find the ResourceClaim."""
input Source2Input {
  """
  ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
  """
  resourceClaimName: String

  """
  ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
  
  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
  
  An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
  
  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
  """
  resourceClaimTemplateName: String
}

input SchedulingGatesListItemInput {
  """
  Name of the scheduling gate. Each scheduling gate must have a unique name field.
  """
  name: String!
}

"""
SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
"""
input SecurityContext3Input {
  """
  A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
  
  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
  
  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
  """
  fsGroup: BigInt

  """
  fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
  """
  fsGroupChangePolicy: String

  """
  The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
  """
  runAsGroup: BigInt

  """
  Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
  """
  runAsNonRoot: Boolean

  """
  The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
  """
  runAsUser: BigInt

  """
  The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
  """
  seLinuxOptions: SeLinuxOptions2Input

  """
  The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
  """
  seccompProfile: SeccompProfile2Input

  """
  A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
  """
  supplementalGroups: [BigInt]

  """
  Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
  """
  sysctls: [SysctlsListItemInput]

  """
  The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
  """
  windowsOptions: WindowsOptions2Input
}

"""
The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
"""
input SeLinuxOptions2Input {
  """Level is SELinux level label that applies to the container."""
  level: String

  """Role is a SELinux role label that applies to the container."""
  role: String

  """Type is a SELinux type label that applies to the container."""
  type: String

  """User is a SELinux user label that applies to the container."""
  user: String
}

"""
The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
"""
input SeccompProfile2Input {
  """
  localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
  """
  localhostProfile: String

  """
  type indicates which kind of seccomp profile will be applied. Valid options are:
  
  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
  """
  type: String!
}

input SysctlsListItemInput {
  """Name of a property to set"""
  name: String!

  """Value of a property to set"""
  value: String!
}

"""
The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
"""
input WindowsOptions2Input {
  """
  GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
  """
  gmsaCredentialSpec: String

  """GMSACredentialSpecName is the name of the GMSA credential spec to use."""
  gmsaCredentialSpecName: String

  """
  HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
  """
  hostProcess: Boolean

  """
  The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
  """
  runAsUserName: String
}

input TolerationsListItemInput {
  """
  Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
  """
  effect: String

  """
  Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
  """
  key: String

  """
  Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
  """
  operator: String

  """
  TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
  """
  tolerationSeconds: BigInt

  """
  Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
  """
  value: String
}

input TopologySpreadConstraintsListItemInput {
  """
  LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
  """
  labelSelector: LabelSelector2Input

  """
  MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
  
  This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
  """
  matchLabelKeys: [String]

  """
  MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
  """
  maxSkew: Int!

  """
  MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
  
  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
  
  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
  """
  minDomains: Int

  """
  NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
  
  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
  """
  nodeAffinityPolicy: String

  """
  NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
  
  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
  """
  nodeTaintsPolicy: String

  """
  TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
  """
  topologyKey: String!

  """
  WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
    but giving higher precedence to topologies that would help reduce the
    skew.
  A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
  """
  whenUnsatisfiable: String!
}

"""
LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
"""
input LabelSelector2Input {
  """
  matchExpressions is a list of label selector requirements. The requirements are ANDed.
  """
  matchExpressions: [MatchExpressionsListItemInput]

  """
  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
  """
  matchLabels: JSON
}

input VolumesListItemInput {
  """
  awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
  """
  awsElasticBlockStore: AwsElasticBlockStoreInput

  """
  azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
  """
  azureDisk: AzureDiskInput

  """
  azureFile represents an Azure File Service mount on the host and bind mount to the pod.
  """
  azureFile: AzureFileInput

  """
  cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
  """
  cephfs: CephfsInput

  """
  cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  cinder: CinderInput

  """configMap represents a configMap that should populate this volume"""
  configMap: ConfigMap2Input

  """
  csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
  """
  csi: CsiInput

  """
  downwardAPI represents downward API about the pod that should populate this volume
  """
  downwardAPI: DownwardAPIInput

  """
  emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
  """
  emptyDir: EmptyDirInput

  """
  ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
  
  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
     tracking are needed,
  c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
     a PersistentVolumeClaim (see EphemeralVolumeSource for more
     information on the connection between this volume type
     and PersistentVolumeClaim).
  
  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
  
  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
  
  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
  """
  ephemeral: EphemeralInput

  """
  fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
  """
  fc: FcInput

  """
  flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
  """
  flexVolume: FlexVolumeInput

  """
  flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
  """
  flocker: FlockerInput

  """
  gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  gcePersistentDisk: GcePersistentDiskInput

  """
  gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
  """
  gitRepo: GitRepoInput

  """
  glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
  """
  glusterfs: GlusterfsInput

  """
  hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  """
  hostPath: HostPathInput

  """
  iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
  """
  iscsi: IscsiInput

  """
  name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String!

  """
  nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  nfs: NfsInput

  """
  persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
  """
  persistentVolumeClaim: PersistentVolumeClaim2Input

  """
  photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
  """
  photonPersistentDisk: PhotonPersistentDiskInput

  """
  portworxVolume represents a portworx volume attached and mounted on kubelets host machine
  """
  portworxVolume: PortworxVolumeInput

  """
  projected items for all in one resources secrets, configmaps, and downward API
  """
  projected: ProjectedInput

  """
  quobyte represents a Quobyte mount on the host that shares a pod's lifetime
  """
  quobyte: QuobyteInput

  """
  rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
  """
  rbd: RbdInput

  """
  scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
  """
  scaleIO: ScaleIOInput

  """
  secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
  """
  secret: Secret2Input

  """
  storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
  """
  storageos: StorageosInput

  """
  vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
  """
  vsphereVolume: VsphereVolumeInput
}

"""
awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
"""
input AwsElasticBlockStoreInput {
  """
  fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
  """
  fsType: String

  """
  partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
  """
  partition: Int

  """
  readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
  """
  readOnly: Boolean

  """
  volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
  """
  volumeID: String!
}

"""
azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
"""
input AzureDiskInput {
  """cachingMode is the Host Caching mode: None, Read Only, Read Write."""
  cachingMode: String

  """diskName is the Name of the data disk in the blob storage"""
  diskName: String!

  """diskURI is the URI of data disk in the blob storage"""
  diskURI: String!

  """
  fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String

  """
  kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
  """
  kind: String

  """
  readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean
}

"""
azureFile represents an Azure File Service mount on the host and bind mount to the pod.
"""
input AzureFileInput {
  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """
  secretName is the  name of secret that contains Azure Storage Account Name and Key
  """
  secretName: String!

  """shareName is the azure share Name"""
  shareName: String!
}

"""
cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
"""
input CephfsInput {
  """
  monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  monitors: [String]!

  """
  path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
  """
  path: String

  """
  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  readOnly: Boolean

  """
  secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  secretFile: String

  """
  secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  secretRef: SecretRef2Input

  """
  user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  user: String
}

"""
secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
"""
input SecretRef2Input {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

"""
cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
"""
input CinderInput {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  fsType: String

  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  readOnly: Boolean

  """
  secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
  """
  secretRef: SecretRef3Input

  """
  volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  volumeID: String!
}

"""
secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
"""
input SecretRef3Input {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

"""configMap represents a configMap that should populate this volume"""
input ConfigMap2Input {
  """
  defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  defaultMode: Int

  """
  items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
  """
  items: [Items9ListItemInput]

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """optional specify whether the ConfigMap or its keys must be defined"""
  optional: Boolean
}

input Items9ListItemInput {
  """key is the key to project."""
  key: String!

  """
  mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  mode: Int

  """
  path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
  """
  path: String!
}

"""
csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
"""
input CsiInput {
  """
  driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
  """
  driver: String!

  """
  fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
  """
  fsType: String

  """
  nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
  """
  nodePublishSecretRef: NodePublishSecretRefInput

  """
  readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
  """
  readOnly: Boolean

  """
  volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
  """
  volumeAttributes: JSON
}

"""
nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
"""
input NodePublishSecretRefInput {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

"""
downwardAPI represents downward API about the pod that should populate this volume
"""
input DownwardAPIInput {
  """
  Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  defaultMode: Int

  """Items is a list of downward API volume file"""
  items: [Items10ListItemInput]
}

input Items10ListItemInput {
  """
  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
  """
  fieldRef: FieldRef2Input

  """
  Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  mode: Int

  """
  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
  """
  path: String!

  """
  Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
  """
  resourceFieldRef: ResourceFieldRef2Input
}

"""
Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
"""
input FieldRef2Input {
  """
  Version of the schema the FieldPath is written in terms of, defaults to "v1".
  """
  apiVersion: String

  """Path of the field to select in the specified API version."""
  fieldPath: String!
}

"""
Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
"""
input ResourceFieldRef2Input {
  """Container name: required for volumes, optional for env vars"""
  containerName: String

  """
  Specifies the output format of the exposed resources, defaults to "1"
  """
  divisor: JSON

  """Required: resource to select"""
  resource: String!
}

"""
emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
"""
input EmptyDirInput {
  """
  medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
  """
  medium: String

  """
  sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
  """
  sizeLimit: JSON
}

"""
ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.

Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
   tracking are needed,
c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
   a PersistentVolumeClaim (see EphemeralVolumeSource for more
   information on the connection between this volume type
   and PersistentVolumeClaim).

Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.

Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.

A pod can use both types of ephemeral volumes and persistent volumes at the same time.
"""
input EphemeralInput {
  """
  Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
  
  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
  
  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
  
  Required, must not be nil.
  """
  volumeClaimTemplate: VolumeClaimTemplateInput
}

"""
Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).

An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.

This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.

Required, must not be nil.
"""
input VolumeClaimTemplateInput {
  """
  May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
  """
  metadata: Metadata4Input

  """
  The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
  """
  spec: Spec5Input!
}

"""
May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
"""
input Metadata4Input {
  """
  Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
  """
  annotations: JSON

  """
  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
  
  Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  creationTimestamp: JSON

  """
  Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  """
  deletionGracePeriodSeconds: BigInt

  """
  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
  
  Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  deletionTimestamp: JSON

  """
  Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
  """
  finalizers: [String]

  """
  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
  
  If this field is specified and the generated name exists, the server will return a 409.
  
  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
  """
  generateName: String

  """
  A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  """
  generation: BigInt

  """
  Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
  """
  labels: JSON

  """
  ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
  """
  managedFields: [ManagedFieldsListItemInput]

  """
  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
  """
  name: String

  """
  Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
  
  Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
  """
  namespace: String

  """
  List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  """
  ownerReferences: [OwnerReferencesListItemInput]

  """
  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
  
  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
  """
  selfLink: String

  """
  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
  
  Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
  """
  uid: String
}

"""
The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
"""
input Spec5Input {
  """
  accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
  """
  accessModes: [String]

  """
  dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
  """
  dataSource: DataSourceInput

  """
  dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef
    allows any non-core object, as well as PersistentVolumeClaim objects.
  * While dataSource ignores disallowed values (dropping them), dataSourceRef
    preserves all values, and generates an error if a disallowed value is
    specified.
  * While dataSource only allows local objects, dataSourceRef allows objects
    in any namespaces.
  (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
  """
  dataSourceRef: DataSourceRefInput

  """
  resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
  """
  resources: Resources2Input

  """selector is a label query over volumes to consider for binding."""
  selector: SelectorInput

  """
  storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
  """
  storageClassName: String

  """
  volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
  """
  volumeMode: String

  """
  volumeName is the binding reference to the PersistentVolume backing this claim.
  """
  volumeName: String
}

"""
fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
"""
input FcInput {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String

  """lun is Optional: FC target lun number"""
  lun: Int

  """
  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """targetWWNs is Optional: FC target worldwide names (WWNs)"""
  targetWWNs: [String]

  """
  wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
  """
  wwids: [String]
}

"""
flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
"""
input FlexVolumeInput {
  """driver is the name of the driver to use for this volume."""
  driver: String!

  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
  """
  fsType: String

  """options is Optional: this field holds extra command options if any."""
  options: JSON

  """
  readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """
  secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
  """
  secretRef: SecretRef4Input
}

"""
secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
"""
input SecretRef4Input {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

"""
flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
"""
input FlockerInput {
  """
  datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
  """
  datasetName: String

  """
  datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
  """
  datasetUUID: String
}

"""
gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
"""
input GcePersistentDiskInput {
  """
  fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  fsType: String

  """
  partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  partition: Int

  """
  pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  pdName: String!

  """
  readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  readOnly: Boolean
}

"""
gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
"""
input GitRepoInput {
  """
  directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
  """
  directory: String

  """repository is the URL"""
  repository: String!

  """revision is the commit hash for the specified revision."""
  revision: String
}

"""
glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
"""
input GlusterfsInput {
  """
  endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  endpoints: String!

  """
  path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  path: String!

  """
  readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  readOnly: Boolean
}

"""
hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
"""
input HostPathInput {
  """
  path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  """
  path: String!

  """
  type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  """
  type: String
}

"""
iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
"""
input IscsiInput {
  """
  chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
  """
  chapAuthDiscovery: Boolean

  """
  chapAuthSession defines whether support iSCSI Session CHAP authentication
  """
  chapAuthSession: Boolean

  """
  fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
  """
  fsType: String

  """
  initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
  """
  initiatorName: String

  """iqn is the target iSCSI Qualified Name."""
  iqn: String!

  """
  iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
  """
  iscsiInterface: String

  """lun represents iSCSI Target Lun number."""
  lun: Int!

  """
  portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
  """
  portals: [String]

  """
  readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
  """
  readOnly: Boolean

  """
  secretRef is the CHAP Secret for iSCSI target and initiator authentication
  """
  secretRef: SecretRef5Input

  """
  targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
  """
  targetPortal: String!
}

"""
secretRef is the CHAP Secret for iSCSI target and initiator authentication
"""
input SecretRef5Input {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

"""
nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
"""
input NfsInput {
  """
  path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  path: String!

  """
  readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  readOnly: Boolean

  """
  server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  server: String!
}

"""
persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
"""
input PersistentVolumeClaim2Input {
  """
  claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
  """
  claimName: String!

  """
  readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
  """
  readOnly: Boolean
}

"""
photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
"""
input PhotonPersistentDiskInput {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String

  """pdID is the ID that identifies Photon Controller persistent disk"""
  pdID: String!
}

"""
portworxVolume represents a portworx volume attached and mounted on kubelets host machine
"""
input PortworxVolumeInput {
  """
  fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String

  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """volumeID uniquely identifies a Portworx volume"""
  volumeID: String!
}

"""
projected items for all in one resources secrets, configmaps, and downward API
"""
input ProjectedInput {
  """
  defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  defaultMode: Int

  """sources is the list of volume projections"""
  sources: [SourcesListItemInput]
}

input SourcesListItemInput {
  """configMap information about the configMap data to project"""
  configMap: ConfigMap3Input

  """downwardAPI information about the downwardAPI data to project"""
  downwardAPI: DownwardAPI2Input

  """secret information about the secret data to project"""
  secret: SecretInput

  """
  serviceAccountToken is information about the serviceAccountToken data to project
  """
  serviceAccountToken: ServiceAccountTokenInput
}

"""configMap information about the configMap data to project"""
input ConfigMap3Input {
  """
  items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
  """
  items: [Items9ListItemInput]

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """optional specify whether the ConfigMap or its keys must be defined"""
  optional: Boolean
}

"""downwardAPI information about the downwardAPI data to project"""
input DownwardAPI2Input {
  """Items is a list of DownwardAPIVolume file"""
  items: [Items11ListItemInput]
}

input Items11ListItemInput {
  """
  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
  """
  fieldRef: FieldRef2Input

  """
  Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  mode: Int

  """
  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
  """
  path: String!

  """
  Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
  """
  resourceFieldRef: ResourceFieldRef2Input
}

"""secret information about the secret data to project"""
input SecretInput {
  """
  items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
  """
  items: [Items12ListItemInput]

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """optional field specify whether the Secret or its key must be defined"""
  optional: Boolean
}

input Items12ListItemInput {
  """key is the key to project."""
  key: String!

  """
  mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  mode: Int

  """
  path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
  """
  path: String!
}

"""
serviceAccountToken is information about the serviceAccountToken data to project
"""
input ServiceAccountTokenInput {
  """
  audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
  """
  audience: String

  """
  expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
  """
  expirationSeconds: BigInt

  """
  path is the path relative to the mount point of the file to project the token into.
  """
  path: String!
}

"""
quobyte represents a Quobyte mount on the host that shares a pod's lifetime
"""
input QuobyteInput {
  """group to map volume access to Default is no group"""
  group: String

  """
  readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
  """
  readOnly: Boolean

  """
  registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
  """
  registry: String!

  """
  tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
  """
  tenant: String

  """user to map volume access to Defaults to serivceaccount user"""
  user: String

  """
  volume is a string that references an already created Quobyte volume by name.
  """
  volume: String!
}

"""
rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
"""
input RbdInput {
  """
  fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
  """
  fsType: String

  """
  image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  image: String!

  """
  keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  keyring: String

  """
  monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  monitors: [String]!

  """
  pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  pool: String

  """
  readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  readOnly: Boolean

  """
  secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  secretRef: SecretRef6Input

  """
  user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  user: String
}

"""
secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
"""
input SecretRef6Input {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

"""
scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
"""
input ScaleIOInput {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
  """
  fsType: String

  """gateway is the host address of the ScaleIO API Gateway."""
  gateway: String!

  """
  protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
  """
  protectionDomain: String

  """
  readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """
  secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
  """
  secretRef: SecretRef7Input!

  """
  sslEnabled Flag enable/disable SSL communication with Gateway, default false
  """
  sslEnabled: Boolean

  """
  storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
  """
  storageMode: String

  """
  storagePool is the ScaleIO Storage Pool associated with the protection domain.
  """
  storagePool: String

  """system is the name of the storage system as configured in ScaleIO."""
  system: String!

  """
  volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
  """
  volumeName: String
}

"""
secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
"""
input SecretRef7Input {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

"""
secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
"""
input Secret2Input {
  """
  defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  defaultMode: Int

  """
  items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
  """
  items: [Items13ListItemInput]

  """optional field specify whether the Secret or its keys must be defined"""
  optional: Boolean

  """
  secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
  """
  secretName: String
}

input Items13ListItemInput {
  """key is the key to project."""
  key: String!

  """
  mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  """
  mode: Int

  """
  path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
  """
  path: String!
}

"""
storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
"""
input StorageosInput {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String

  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """
  secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
  """
  secretRef: SecretRef8Input

  """
  volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
  """
  volumeName: String

  """
  volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
  """
  volumeNamespace: String
}

"""
secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
"""
input SecretRef8Input {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

"""
vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
"""
input VsphereVolumeInput {
  """
  fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String

  """
  storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
  """
  storagePolicyID: String

  """
  storagePolicyName is the storage Policy Based Management (SPBM) profile name.
  """
  storagePolicyName: String

  """volumePath is the path that identifies vSphere volume vmdk"""
  volumePath: String!
}

"""
Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
input Status3Input {
  """
  Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
  """
  conditions: [Conditions4ListItemInput]

  """
  The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
  """
  containerStatuses: [ContainerStatusesListItemInput]

  """Status for any ephemeral containers that have run in this pod."""
  ephemeralContainerStatuses: [EphemeralContainerStatusesListItemInput]

  """
  IP address of the host to which the pod is assigned. Empty if not yet scheduled.
  """
  hostIP: String

  """
  The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
  """
  initContainerStatuses: [InitContainerStatusesListItemInput]

  """
  A human readable message indicating details about why the pod is in this condition.
  """
  message: String

  """
  nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
  """
  nominatedNodeName: String

  """
  The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
  
  Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
  
  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
  """
  phase: String

  """
  IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
  """
  podIP: String

  """
  podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
  """
  podIPs: [PodIPsListItemInput]

  """
  The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes
  """
  qosClass: String

  """
  A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
  """
  reason: String

  """
  Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to "Proposed"
  """
  resize: String

  """
  RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
  """
  startTime: JSON
}

input Conditions4ListItemInput {
  """Last time we probed the condition."""
  lastProbeTime: JSON

  """Last time the condition transitioned from one status to another."""
  lastTransitionTime: JSON

  """Human-readable message indicating details about last transition."""
  message: String

  """
  Unique, one-word, CamelCase reason for the condition's last transition.
  """
  reason: String

  """
  Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
  """
  status: String!

  """
  Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
  """
  type: String!
}

input ContainerStatusesListItemInput {
  """
  AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.
  """
  allocatedResources: JSON

  """
  ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example "containerd").
  """
  containerID: String

  """
  Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.
  """
  image: String!

  """
  ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.
  """
  imageID: String!

  """
  LastTerminationState holds the last termination state of the container to help debug container crashes and restarts. This field is not populated if the container is still running and RestartCount is 0.
  """
  lastState: LastStateInput

  """
  Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.
  """
  name: String!

  """
  Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).
  
  The value is typically used to determine whether a container is ready to accept traffic.
  """
  ready: Boolean!

  """
  Resources represents the compute resource requests and limits that have been successfully enacted on the running container after it has been started or has been successfully resized.
  """
  resources: Resources5Input

  """
  RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.
  """
  restartCount: Int!

  """
  Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.
  """
  started: Boolean

  """State holds details about the container's current condition."""
  state: StateInput
}

"""
LastTerminationState holds the last termination state of the container to help debug container crashes and restarts. This field is not populated if the container is still running and RestartCount is 0.
"""
input LastStateInput {
  """Details about a running container"""
  running: RunningInput

  """Details about a terminated container"""
  terminated: TerminatedInput

  """Details about a waiting container"""
  waiting: WaitingInput
}

"""Details about a running container"""
input RunningInput {
  """Time at which the container was last (re-)started"""
  startedAt: JSON
}

"""Details about a terminated container"""
input TerminatedInput {
  """Container's ID in the format '<type>://<container_id>'"""
  containerID: String

  """Exit status from the last termination of the container"""
  exitCode: Int!

  """Time at which the container last terminated"""
  finishedAt: JSON

  """Message regarding the last termination of the container"""
  message: String

  """(brief) reason from the last termination of the container"""
  reason: String

  """Signal from the last termination of the container"""
  signal: Int

  """Time at which previous execution of the container started"""
  startedAt: JSON
}

"""Details about a waiting container"""
input WaitingInput {
  """Message regarding why the container is not yet running."""
  message: String

  """(brief) reason the container is not yet running."""
  reason: String
}

"""
Resources represents the compute resource requests and limits that have been successfully enacted on the running container after it has been started or has been successfully resized.
"""
input Resources5Input {
  """
  Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
  
  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
  
  This field is immutable. It can only be set for containers.
  """
  claims: [ClaimsListItemInput]

  """
  Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  limits: JSON

  """
  Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  """
  requests: JSON
}

"""State holds details about the container's current condition."""
input StateInput {
  """Details about a running container"""
  running: RunningInput

  """Details about a terminated container"""
  terminated: TerminatedInput

  """Details about a waiting container"""
  waiting: WaitingInput
}

input EphemeralContainerStatusesListItemInput {
  """
  AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.
  """
  allocatedResources: JSON

  """
  ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example "containerd").
  """
  containerID: String

  """
  Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.
  """
  image: String!

  """
  ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.
  """
  imageID: String!

  """
  LastTerminationState holds the last termination state of the container to help debug container crashes and restarts. This field is not populated if the container is still running and RestartCount is 0.
  """
  lastState: LastStateInput

  """
  Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.
  """
  name: String!

  """
  Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).
  
  The value is typically used to determine whether a container is ready to accept traffic.
  """
  ready: Boolean!

  """
  Resources represents the compute resource requests and limits that have been successfully enacted on the running container after it has been started or has been successfully resized.
  """
  resources: Resources5Input

  """
  RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.
  """
  restartCount: Int!

  """
  Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.
  """
  started: Boolean

  """State holds details about the container's current condition."""
  state: StateInput
}

input InitContainerStatusesListItemInput {
  """
  AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.
  """
  allocatedResources: JSON

  """
  ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example "containerd").
  """
  containerID: String

  """
  Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.
  """
  image: String!

  """
  ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.
  """
  imageID: String!

  """
  LastTerminationState holds the last termination state of the container to help debug container crashes and restarts. This field is not populated if the container is still running and RestartCount is 0.
  """
  lastState: LastStateInput

  """
  Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.
  """
  name: String!

  """
  Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).
  
  The value is typically used to determine whether a container is ready to accept traffic.
  """
  ready: Boolean!

  """
  Resources represents the compute resource requests and limits that have been successfully enacted on the running container after it has been started or has been successfully resized.
  """
  resources: Resources5Input

  """
  RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.
  """
  restartCount: Int!

  """
  Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.
  """
  started: Boolean

  """State holds details about the container's current condition."""
  state: StateInput
}

input PodIPsListItemInput {
  """ip is an IP address (IPv4 or IPv6) assigned to the pod"""
  ip: String
}

"""
Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
"""
type IoK8sApiPolicyV1Eviction {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """DeleteOptions may be provided"""
  deleteOptions: DeleteOptions

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """ObjectMeta describes the pod that is being evicted."""
  metadata: Metadata5
}

"""DeleteOptions may be provided"""
type DeleteOptions {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  """
  dryRun: [String]

  """
  The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  """
  gracePeriodSeconds: BigInt

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
  """
  orphanDependents: Boolean

  """
  Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
  """
  preconditions: Preconditions

  """
  Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
  """
  propagationPolicy: String
}

"""
Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
"""
type Preconditions {
  """Specifies the target ResourceVersion"""
  resourceVersion: String

  """Specifies the target UID."""
  uid: String
}

"""ObjectMeta describes the pod that is being evicted."""
type Metadata5 {
  """
  Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
  """
  annotations: JSON

  """
  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
  
  Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  creationTimestamp: JSON

  """
  Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  """
  deletionGracePeriodSeconds: BigInt

  """
  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
  
  Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  deletionTimestamp: JSON

  """
  Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
  """
  finalizers: [String]

  """
  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
  
  If this field is specified and the generated name exists, the server will return a 409.
  
  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
  """
  generateName: String

  """
  A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  """
  generation: BigInt

  """
  Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
  """
  labels: JSON

  """
  ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
  """
  managedFields: [ManagedFieldsListItem]

  """
  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
  """
  name: String

  """
  Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
  
  Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
  """
  namespace: String

  """
  List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  """
  ownerReferences: [OwnerReferencesListItem]

  """
  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
  
  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
  """
  selfLink: String

  """
  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
  
  Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
  """
  uid: String
}

"""
Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
"""
input IoK8sApiPolicyV1EvictionInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """DeleteOptions may be provided"""
  deleteOptions: DeleteOptionsInput

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """ObjectMeta describes the pod that is being evicted."""
  metadata: Metadata5Input
}

"""DeleteOptions may be provided"""
input DeleteOptionsInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  """
  dryRun: [String]

  """
  The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  """
  gracePeriodSeconds: BigInt

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
  """
  orphanDependents: Boolean

  """
  Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
  """
  preconditions: PreconditionsInput

  """
  Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
  """
  propagationPolicy: String
}

"""
Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
"""
input PreconditionsInput {
  """Specifies the target ResourceVersion"""
  resourceVersion: String

  """Specifies the target UID."""
  uid: String
}

"""ObjectMeta describes the pod that is being evicted."""
input Metadata5Input {
  """
  Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
  """
  annotations: JSON

  """
  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
  
  Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  creationTimestamp: JSON

  """
  Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  """
  deletionGracePeriodSeconds: BigInt

  """
  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
  
  Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  deletionTimestamp: JSON

  """
  Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
  """
  finalizers: [String]

  """
  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
  
  If this field is specified and the generated name exists, the server will return a 409.
  
  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
  """
  generateName: String

  """
  A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  """
  generation: BigInt

  """
  Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
  """
  labels: JSON

  """
  ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
  """
  managedFields: [ManagedFieldsListItemInput]

  """
  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
  """
  name: String

  """
  Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
  
  Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
  """
  namespace: String

  """
  List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  """
  ownerReferences: [OwnerReferencesListItemInput]

  """
  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
  
  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
  """
  selfLink: String

  """
  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
  
  Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
  """
  uid: String
}

"""
PodTemplate describes a template for creating copies of a predefined pod.
"""
input PodTemplateInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput

  """
  Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  template: TemplateInput
}

"""
Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
input TemplateInput {
  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput

  """
  Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec4Input
}

"""
ReplicationController represents the configuration of a replication controller.
"""
input ReplicationControllerInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata6Input

  """
  Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec6Input

  """
  Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: Status4Input
}

"""
If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
"""
input Metadata6Input {
  """
  Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
  """
  annotations: JSON

  """
  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
  
  Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  creationTimestamp: JSON

  """
  Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  """
  deletionGracePeriodSeconds: BigInt

  """
  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
  
  Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  deletionTimestamp: JSON

  """
  Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
  """
  finalizers: [String]

  """
  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
  
  If this field is specified and the generated name exists, the server will return a 409.
  
  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
  """
  generateName: String

  """
  A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  """
  generation: BigInt

  """
  Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
  """
  labels: JSON

  """
  ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
  """
  managedFields: [ManagedFieldsListItemInput]

  """
  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
  """
  name: String

  """
  Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
  
  Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
  """
  namespace: String

  """
  List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  """
  ownerReferences: [OwnerReferencesListItemInput]

  """
  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
  
  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
  """
  selfLink: String

  """
  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
  
  Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
  """
  uid: String
}

"""
Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
input Spec6Input {
  """
  Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
  """
  minReadySeconds: Int

  """
  Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
  """
  replicas: Int

  """
  Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
  """
  selector: JSON

  """
  Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. The only allowed template.spec.restartPolicy value is "Always". More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
  """
  template: Template2Input
}

"""
Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. The only allowed template.spec.restartPolicy value is "Always". More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
"""
input Template2Input {
  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput

  """
  Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec4Input
}

"""
Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
input Status4Input {
  """
  The number of available replicas (ready for at least minReadySeconds) for this replication controller.
  """
  availableReplicas: Int

  """
  Represents the latest available observations of a replication controller's current state.
  """
  conditions: [Conditions5ListItemInput]

  """
  The number of pods that have labels matching the labels of the pod template of the replication controller.
  """
  fullyLabeledReplicas: Int

  """
  ObservedGeneration reflects the generation of the most recently observed replication controller.
  """
  observedGeneration: BigInt

  """The number of ready replicas for this replication controller."""
  readyReplicas: Int

  """
  Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
  """
  replicas: Int!
}

input Conditions5ListItemInput {
  """The last time the condition transitioned from one status to another."""
  lastTransitionTime: JSON

  """A human readable message indicating details about the transition."""
  message: String

  """The reason for the condition's last transition."""
  reason: String

  """Status of the condition, one of True, False, Unknown."""
  status: String!

  """Type of replication controller condition."""
  type: String!
}

"""ResourceQuota sets aggregate quota restrictions enforced per namespace"""
input ResourceQuotaInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput

  """
  Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec8Input

  """
  Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: Status6Input
}

"""
Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
input Spec8Input {
  """
  hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
  """
  hard: JSON

  """
  scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
  """
  scopeSelector: ScopeSelectorInput

  """
  A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
  """
  scopes: [String]
}

"""
scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
"""
input ScopeSelectorInput {
  """A list of scope selector requirements by scope of the resources."""
  matchExpressions: [MatchExpressions3ListItemInput]
}

input MatchExpressions3ListItemInput {
  """
  Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
  """
  operator: String!

  """The name of the scope that the selector applies to."""
  scopeName: String!

  """
  An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
  """
  values: [String]
}

"""
Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
input Status6Input {
  """
  Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
  """
  hard: JSON

  """
  Used is the current observed total usage of the resource in the namespace.
  """
  used: JSON
}

"""
Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
"""
input ApiV1NamespaceSecretsInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
  """
  data: JSON

  """
  Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
  """
  immutable: Boolean

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput

  """
  stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
  """
  stringData: JSON

  """
  Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
  """
  type: String
}

"""
Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
"""
input ServiceInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput

  """
  Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec10Input

  """
  Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: Status8Input
}

"""
Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
input Spec10Input {
  """
  allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.
  """
  allocateLoadBalancerNodePorts: Boolean

  """
  clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  """
  clusterIP: String

  """
  ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
  
  This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  """
  clusterIPs: [String]

  """
  externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
  """
  externalIPs: [String]

  """
  externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
  """
  externalName: String

  """
  externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.
  """
  externalTrafficPolicy: String

  """
  healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.
  """
  healthCheckNodePort: Int

  """
  InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).
  """
  internalTrafficPolicy: String

  """
  IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.
  
  This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
  """
  ipFamilies: [String]

  """
  IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
  """
  ipFamilyPolicy: String

  """
  loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
  """
  loadBalancerClass: String

  """
  Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations, and it cannot support dual-stack. As of Kubernetes v1.24, users are encouraged to use implementation-specific annotations when available. This field may be removed in a future API version.
  """
  loadBalancerIP: String

  """
  If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
  """
  loadBalancerSourceRanges: [String]

  """
  The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  """
  ports: [Ports4ListItemInput]

  """
  publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
  """
  publishNotReadyAddresses: Boolean

  """
  Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
  """
  selector: JSON

  """
  Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  """
  sessionAffinity: String

  """sessionAffinityConfig contains the configurations of session affinity."""
  sessionAffinityConfig: SessionAffinityConfigInput

  """
  type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  """
  type: String
}

input Ports4ListItemInput {
  """
  The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
  """
  appProtocol: String

  """
  The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
  """
  name: String

  """
  The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  """
  nodePort: Int

  """The port that will be exposed by this service."""
  port: Int!

  """
  The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
  """
  protocol: String

  """
  Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
  """
  targetPort: JSON
}

"""sessionAffinityConfig contains the configurations of session affinity."""
input SessionAffinityConfigInput {
  """
  clientIP contains the configurations of Client IP based session affinity.
  """
  clientIP: ClientIPInput
}

"""
clientIP contains the configurations of Client IP based session affinity.
"""
input ClientIPInput {
  """
  timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
  """
  timeoutSeconds: Int
}

"""
Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
input Status8Input {
  """Current service state"""
  conditions: [Conditions6ListItemInput]

  """
  LoadBalancer contains the current status of the load-balancer, if one is present.
  """
  loadBalancer: LoadBalancerInput
}

input Conditions6ListItemInput {
  """
  lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
  """
  lastTransitionTime: JSON!

  """
  message is a human readable message indicating details about the transition. This may be an empty string.
  """
  message: String!

  """
  observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
  """
  observedGeneration: BigInt

  """
  reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
  """
  reason: String!

  """status of the condition, one of True, False, Unknown."""
  status: String!

  """type of condition in CamelCase or in foo.example.com/CamelCase."""
  type: String!
}

"""
LoadBalancer contains the current status of the load-balancer, if one is present.
"""
input LoadBalancerInput {
  """
  Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
  """
  ingress: [IngressListItemInput]
}

input IngressListItemInput {
  """
  Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
  """
  hostname: String

  """
  IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
  """
  ip: String

  """
  Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
  """
  ports: [Ports5ListItemInput]
}

input Ports5ListItemInput {
  """
  Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
    CamelCase names
  - cloud provider specific error values must have names that comply with the
    format foo.example.com/CamelCase.
  """
  error: String

  """
  Port is the port number of the service port of which status is recorded here
  """
  port: Int!

  """
  Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
  """
  protocol: String!
}

"""
ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
"""
input ServiceAccountInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
  """
  automountServiceAccountToken: Boolean

  """
  ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  """
  imagePullSecrets: [ImagePullSecrets2ListItemInput]

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput

  """
  Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret
  """
  secrets: [SecretsListItemInput]
}

input ImagePullSecrets2ListItemInput {
  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String
}

input SecretsListItemInput {
  """API version of the referent."""
  apiVersion: String

  """
  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  """
  fieldPath: String

  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """
  Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  """
  namespace: String

  """
  Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  """
  uid: String
}

"""TokenRequest requests a token for a given service account."""
type IoK8sApiAuthenticationV1TokenRequest {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: Metadata

  """Spec holds information about the request being evaluated"""
  spec: Spec9!

  """
  Status is filled in by the server and indicates whether the token can be authenticated.
  """
  status: Status7
}

"""Spec holds information about the request being evaluated"""
type Spec9 {
  """
  Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
  """
  audiences: [String]!

  """
  BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
  """
  boundObjectRef: BoundObjectRef

  """
  ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
  """
  expirationSeconds: BigInt
}

"""
BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
"""
type BoundObjectRef {
  """API version of the referent."""
  apiVersion: String

  """Kind of the referent. Valid kinds are 'Pod' and 'Secret'."""
  kind: String

  """Name of the referent."""
  name: String

  """UID of the referent."""
  uid: String
}

"""
Status is filled in by the server and indicates whether the token can be authenticated.
"""
type Status7 {
  """ExpirationTimestamp is the time of expiration of the returned token."""
  expirationTimestamp: JSON!

  """Token is the opaque bearer token."""
  token: String!
}

"""TokenRequest requests a token for a given service account."""
input IoK8sApiAuthenticationV1TokenRequestInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput

  """Spec holds information about the request being evaluated"""
  spec: Spec9Input!

  """
  Status is filled in by the server and indicates whether the token can be authenticated.
  """
  status: Status7Input
}

"""Spec holds information about the request being evaluated"""
input Spec9Input {
  """
  Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
  """
  audiences: [String]!

  """
  BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
  """
  boundObjectRef: BoundObjectRefInput

  """
  ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
  """
  expirationSeconds: BigInt
}

"""
BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
"""
input BoundObjectRefInput {
  """API version of the referent."""
  apiVersion: String

  """Kind of the referent. Valid kinds are 'Pod' and 'Secret'."""
  kind: String

  """Name of the referent."""
  name: String

  """UID of the referent."""
  uid: String
}

"""
Status is filled in by the server and indicates whether the token can be authenticated.
"""
input Status7Input {
  """ExpirationTimestamp is the time of expiration of the returned token."""
  expirationTimestamp: JSON!

  """Token is the opaque bearer token."""
  token: String!
}

"""
Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
"""
input NodeInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput

  """
  Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  spec: Spec11Input

  """
  Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: Status9Input
}

"""
Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
input Spec11Input {
  """
  Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.
  """
  configSource: ConfigSourceInput

  """
  Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
  """
  externalID: String

  """PodCIDR represents the pod IP range assigned to the node."""
  podCIDR: String

  """
  podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
  """
  podCIDRs: [String]

  """
  ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
  """
  providerID: String

  """If specified, the node's taints."""
  taints: [TaintsListItemInput]

  """
  Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
  """
  unschedulable: Boolean
}

"""
Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.
"""
input ConfigSourceInput {
  """ConfigMap is a reference to a Node's ConfigMap"""
  configMap: ConfigMap4Input
}

"""ConfigMap is a reference to a Node's ConfigMap"""
input ConfigMap4Input {
  """
  KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
  """
  kubeletConfigKey: String!

  """
  Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
  """
  name: String!

  """
  Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
  """
  namespace: String!

  """
  ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
  """
  resourceVersion: String

  """
  UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
  """
  uid: String
}

input TaintsListItemInput {
  """
  Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
  """
  effect: String!

  """Required. The taint key to be applied to a node."""
  key: String!

  """
  TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
  """
  timeAdded: JSON

  """The taint value corresponding to the taint key."""
  value: String
}

"""
Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
"""
input Status9Input {
  """
  List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).
  """
  addresses: [Addresses2ListItemInput]

  """
  Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
  """
  allocatable: JSON

  """
  Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
  """
  capacity: JSON

  """
  Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
  """
  conditions: [Conditions7ListItemInput]

  """
  Status of the config assigned to the node via the dynamic Kubelet config feature.
  """
  config: ConfigInput

  """Endpoints of daemons running on the Node."""
  daemonEndpoints: DaemonEndpointsInput

  """List of container images on this node"""
  images: [ImagesListItemInput]

  """
  Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
  """
  nodeInfo: NodeInfoInput

  """
  NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
  """
  phase: String

  """List of volumes that are attached to the node."""
  volumesAttached: [VolumesAttachedListItemInput]

  """List of attachable volumes in use (mounted) by the node."""
  volumesInUse: [String]
}

input Addresses2ListItemInput {
  """The node address."""
  address: String!

  """Node address type, one of Hostname, ExternalIP or InternalIP."""
  type: String!
}

input Conditions7ListItemInput {
  """Last time we got an update on a given condition."""
  lastHeartbeatTime: JSON

  """Last time the condition transit from one status to another."""
  lastTransitionTime: JSON

  """Human readable message indicating details about last transition."""
  message: String

  """(brief) reason for the condition's last transition."""
  reason: String

  """Status of the condition, one of True, False, Unknown."""
  status: String!

  """Type of node condition."""
  type: String!
}

"""
Status of the config assigned to the node via the dynamic Kubelet config feature.
"""
input ConfigInput {
  """
  Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
  """
  active: ActiveInput

  """
  Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
  """
  assigned: AssignedInput

  """
  Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
  """
  error: String

  """
  LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
  """
  lastKnownGood: LastKnownGoodInput
}

"""
Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
"""
input ActiveInput {
  """ConfigMap is a reference to a Node's ConfigMap"""
  configMap: ConfigMap4Input
}

"""
Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
"""
input AssignedInput {
  """ConfigMap is a reference to a Node's ConfigMap"""
  configMap: ConfigMap4Input
}

"""
LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
"""
input LastKnownGoodInput {
  """ConfigMap is a reference to a Node's ConfigMap"""
  configMap: ConfigMap4Input
}

"""Endpoints of daemons running on the Node."""
input DaemonEndpointsInput {
  """Endpoint on which Kubelet is listening."""
  kubeletEndpoint: KubeletEndpointInput
}

"""Endpoint on which Kubelet is listening."""
input KubeletEndpointInput {
  """Port number of the given endpoint."""
  port: Int!
}

input ImagesListItemInput {
  """
  Names by which this image is known. e.g. ["kubernetes.example/hyperkube:v1.0.7", "cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7"]
  """
  names: [String]

  """The size of the image in bytes."""
  sizeBytes: BigInt
}

"""
Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
"""
input NodeInfoInput {
  """The Architecture reported by the node"""
  architecture: String!

  """Boot ID reported by the node."""
  bootID: String!

  """
  ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
  """
  containerRuntimeVersion: String!

  """
  Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
  """
  kernelVersion: String!

  """KubeProxy Version reported by the node."""
  kubeProxyVersion: String!

  """Kubelet Version reported by the node."""
  kubeletVersion: String!

  """
  MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
  """
  machineID: String!

  """The Operating System reported by the node"""
  operatingSystem: String!

  """
  OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
  """
  osImage: String!

  """
  SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
  """
  systemUUID: String!
}

input VolumesAttachedListItemInput {
  """
  DevicePath represents the device path where the volume should be available
  """
  devicePath: String!

  """Name of the attached volume"""
  name: String!
}

"""
PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
"""
input PersistentVolumeInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  metadata: MetadataInput

  """
  spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
  """
  spec: Spec12Input

  """
  status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
  """
  status: Status10Input
}

"""
spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
"""
input Spec12Input {
  """
  accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
  """
  accessModes: [String]

  """
  awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
  """
  awsElasticBlockStore: AwsElasticBlockStoreInput

  """
  azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
  """
  azureDisk: AzureDiskInput

  """
  azureFile represents an Azure File Service mount on the host and bind mount to the pod.
  """
  azureFile: AzureFile2Input

  """
  capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
  """
  capacity: JSON

  """
  cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
  """
  cephfs: Cephfs2Input

  """
  cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  cinder: Cinder2Input

  """
  claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
  """
  claimRef: ClaimRefInput

  """
  csi represents storage that is handled by an external CSI driver (Beta feature).
  """
  csi: Csi2Input

  """
  fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
  """
  fc: FcInput

  """
  flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
  """
  flexVolume: FlexVolume2Input

  """
  flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
  """
  flocker: Flocker2Input

  """
  gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  gcePersistentDisk: GcePersistentDisk2Input

  """
  glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
  """
  glusterfs: Glusterfs2Input

  """
  hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  """
  hostPath: HostPath2Input

  """
  iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
  """
  iscsi: Iscsi2Input

  """local represents directly-attached storage with node affinity"""
  local: LocalInput

  """
  mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
  """
  mountOptions: [String]

  """
  nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  nfs: Nfs2Input

  """
  nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
  """
  nodeAffinity: NodeAffinity2Input

  """
  persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
  """
  persistentVolumeReclaimPolicy: String

  """
  photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
  """
  photonPersistentDisk: PhotonPersistentDiskInput

  """
  portworxVolume represents a portworx volume attached and mounted on kubelets host machine
  """
  portworxVolume: PortworxVolumeInput

  """
  quobyte represents a Quobyte mount on the host that shares a pod's lifetime
  """
  quobyte: QuobyteInput

  """
  rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
  """
  rbd: Rbd2Input

  """
  scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
  """
  scaleIO: ScaleIO2Input

  """
  storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
  """
  storageClassName: String

  """
  storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
  """
  storageos: Storageos2Input

  """
  volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
  """
  volumeMode: String

  """
  vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
  """
  vsphereVolume: VsphereVolumeInput
}

"""
azureFile represents an Azure File Service mount on the host and bind mount to the pod.
"""
input AzureFile2Input {
  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """
  secretName is the name of secret that contains Azure Storage Account Name and Key
  """
  secretName: String!

  """
  secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
  """
  secretNamespace: String

  """shareName is the azure Share Name"""
  shareName: String!
}

"""
cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
"""
input Cephfs2Input {
  """
  monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  monitors: [String]!

  """
  path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
  """
  path: String

  """
  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  readOnly: Boolean

  """
  secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  secretFile: String

  """
  secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  secretRef: SecretRef9Input

  """
  user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  """
  user: String
}

"""
secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
"""
input SecretRef9Input {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
"""
input Cinder2Input {
  """
  fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  fsType: String

  """
  readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  readOnly: Boolean

  """
  secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.
  """
  secretRef: SecretRef10Input

  """
  volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  """
  volumeID: String!
}

"""
secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.
"""
input SecretRef10Input {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
"""
input ClaimRefInput {
  """API version of the referent."""
  apiVersion: String

  """
  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  """
  fieldPath: String

  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """
  Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  """
  namespace: String

  """
  Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  """
  uid: String
}

"""
csi represents storage that is handled by an external CSI driver (Beta feature).
"""
input Csi2Input {
  """
  controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
  """
  controllerExpandSecretRef: ControllerExpandSecretRefInput

  """
  controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
  """
  controllerPublishSecretRef: ControllerPublishSecretRefInput

  """driver is the name of the driver to use for this volume. Required."""
  driver: String!

  """
  fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
  """
  fsType: String

  """
  nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This is a beta field which is enabled default by CSINodeExpandSecret feature gate. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.
  """
  nodeExpandSecretRef: NodeExpandSecretRefInput

  """
  nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
  """
  nodePublishSecretRef: NodePublishSecretRef2Input

  """
  nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
  """
  nodeStageSecretRef: NodeStageSecretRefInput

  """
  readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
  """
  readOnly: Boolean

  """volumeAttributes of the volume to publish."""
  volumeAttributes: JSON

  """
  volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
  """
  volumeHandle: String!
}

"""
controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
"""
input ControllerExpandSecretRefInput {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
"""
input ControllerPublishSecretRefInput {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This is a beta field which is enabled default by CSINodeExpandSecret feature gate. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.
"""
input NodeExpandSecretRefInput {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
"""
input NodePublishSecretRef2Input {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
"""
input NodeStageSecretRefInput {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
"""
input FlexVolume2Input {
  """driver is the name of the driver to use for this volume."""
  driver: String!

  """
  fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
  """
  fsType: String

  """options is Optional: this field holds extra command options if any."""
  options: JSON

  """
  readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """
  secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
  """
  secretRef: SecretRef11Input
}

"""
secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
"""
input SecretRef11Input {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
"""
input Flocker2Input {
  """
  datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
  """
  datasetName: String

  """
  datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
  """
  datasetUUID: String
}

"""
gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
"""
input GcePersistentDisk2Input {
  """
  fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  fsType: String

  """
  partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  partition: Int

  """
  pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  pdName: String!

  """
  readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  """
  readOnly: Boolean
}

"""
glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
"""
input Glusterfs2Input {
  """
  endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  endpoints: String!

  """
  endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  endpointsNamespace: String

  """
  path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  path: String!

  """
  readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  """
  readOnly: Boolean
}

"""
hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
"""
input HostPath2Input {
  """
  path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  """
  path: String!

  """
  type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  """
  type: String
}

"""
iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
"""
input Iscsi2Input {
  """
  chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
  """
  chapAuthDiscovery: Boolean

  """
  chapAuthSession defines whether support iSCSI Session CHAP authentication
  """
  chapAuthSession: Boolean

  """
  fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
  """
  fsType: String

  """
  initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
  """
  initiatorName: String

  """iqn is Target iSCSI Qualified Name."""
  iqn: String!

  """
  iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
  """
  iscsiInterface: String

  """lun is iSCSI Target Lun number."""
  lun: Int!

  """
  portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
  """
  portals: [String]

  """
  readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
  """
  readOnly: Boolean

  """
  secretRef is the CHAP Secret for iSCSI target and initiator authentication
  """
  secretRef: SecretRef12Input

  """
  targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
  """
  targetPortal: String!
}

"""
secretRef is the CHAP Secret for iSCSI target and initiator authentication
"""
input SecretRef12Input {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""local represents directly-attached storage with node affinity"""
input LocalInput {
  """
  fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
  """
  fsType: String

  """
  path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
  """
  path: String!
}

"""
nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
"""
input Nfs2Input {
  """
  path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  path: String!

  """
  readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  readOnly: Boolean

  """
  server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  """
  server: String!
}

"""
nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
"""
input NodeAffinity2Input {
  """required specifies hard node constraints that must be met."""
  required: RequiredInput
}

"""required specifies hard node constraints that must be met."""
input RequiredInput {
  """Required. A list of node selector terms. The terms are ORed."""
  nodeSelectorTerms: [NodeSelectorTermsListItemInput]!
}

"""
rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
"""
input Rbd2Input {
  """
  fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
  """
  fsType: String

  """
  image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  image: String!

  """
  keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  keyring: String

  """
  monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  monitors: [String]!

  """
  pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  pool: String

  """
  readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  readOnly: Boolean

  """
  secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  secretRef: SecretRef13Input

  """
  user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  """
  user: String
}

"""
secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
"""
input SecretRef13Input {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
"""
input ScaleIO2Input {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
  """
  fsType: String

  """gateway is the host address of the ScaleIO API Gateway."""
  gateway: String!

  """
  protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
  """
  protectionDomain: String

  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """
  secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
  """
  secretRef: SecretRef14Input!

  """
  sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
  """
  sslEnabled: Boolean

  """
  storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
  """
  storageMode: String

  """
  storagePool is the ScaleIO Storage Pool associated with the protection domain.
  """
  storagePool: String

  """system is the name of the storage system as configured in ScaleIO."""
  system: String!

  """
  volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
  """
  volumeName: String
}

"""
secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
"""
input SecretRef14Input {
  """name is unique within a namespace to reference a secret resource."""
  name: String

  """
  namespace defines the space within which the secret name must be unique.
  """
  namespace: String
}

"""
storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
"""
input Storageos2Input {
  """
  fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  """
  fsType: String

  """
  readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  """
  readOnly: Boolean

  """
  secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
  """
  secretRef: SecretRef15Input

  """
  volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
  """
  volumeName: String

  """
  volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
  """
  volumeNamespace: String
}

"""
secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
"""
input SecretRef15Input {
  """API version of the referent."""
  apiVersion: String

  """
  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  """
  fieldPath: String

  """
  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  """
  name: String

  """
  Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  """
  namespace: String

  """
  Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  """
  uid: String
}

"""
status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
"""
input Status10Input {
  """
  message is a human-readable message indicating details about why the volume is in this state.
  """
  message: String

  """
  phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
  """
  phase: String

  """
  reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
  """
  reason: String
}

"""Status is a return value for calls that don't return other objects."""
type IoK8sApimachineryPkgApisMetaV1Status {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """Suggested HTTP return code for this status, 0 if not set."""
  code: Int

  """
  Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
  """
  details: Details

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """A human-readable description of the status of this operation."""
  message: String

  """
  Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  metadata: Metadata2

  """
  A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
  """
  reason: String

  """
  Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """
  status: String
}

"""
Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
"""
type Details {
  """
  The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
  """
  causes: [CausesListItem]

  """
  The group attribute of the resource associated with the status StatusReason.
  """
  group: String

  """
  The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
  """
  name: String

  """
  If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
  """
  retryAfterSeconds: Int

  """
  UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
  """
  uid: String
}

type CausesListItem {
  """
  The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
  
  Examples:
    "name" - the field "name" on the current resource
    "items[0].name" - the field "name" on the first array entry in "items"
  """
  field: String

  """
  A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
  """
  message: String

  """
  A machine-readable description of the cause of the error. If this value is empty there is no information available.
  """
  reason: String
}

"""DeleteOptions may be provided when deleting an API object."""
input IoK8sApimachineryPkgApisMetaV1DeleteOptionsInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  """
  dryRun: [String]

  """
  The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  """
  gracePeriodSeconds: BigInt

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
  """
  orphanDependents: Boolean

  """
  Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
  """
  preconditions: PreconditionsInput

  """
  Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
  """
  propagationPolicy: String
}

"""Scale represents a scaling request for a resource."""
input IoK8sApiAutoscalingV1ScaleInput {
  """
  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  """
  apiVersion: String

  """
  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  """
  kind: String

  """
  Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
  """
  metadata: Metadata7Input

  """
  spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
  """
  spec: Spec7Input

  """
  status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
  """
  status: Status5Input
}

"""
Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
"""
input Metadata7Input {
  """
  Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
  """
  annotations: JSON

  """
  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
  
  Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  creationTimestamp: JSON

  """
  Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  """
  deletionGracePeriodSeconds: BigInt

  """
  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
  
  Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  """
  deletionTimestamp: JSON

  """
  Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
  """
  finalizers: [String]

  """
  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
  
  If this field is specified and the generated name exists, the server will return a 409.
  
  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
  """
  generateName: String

  """
  A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  """
  generation: BigInt

  """
  Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
  """
  labels: JSON

  """
  ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
  """
  managedFields: [ManagedFieldsListItemInput]

  """
  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
  """
  name: String

  """
  Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
  
  Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
  """
  namespace: String

  """
  List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  """
  ownerReferences: [OwnerReferencesListItemInput]

  """
  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
  
  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  """
  resourceVersion: String

  """
  Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
  """
  selfLink: String

  """
  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
  
  Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
  """
  uid: String
}

"""
spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
"""
input Spec7Input {
  """replicas is the desired number of instances for the scaled object."""
  replicas: Int
}

"""
status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
"""
input Status5Input {
  """
  replicas is the actual number of observed instances of the scaled object.
  """
  replicas: Int!

  """
  selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  """
  selector: String
}