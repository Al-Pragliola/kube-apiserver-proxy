// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kube/client.go

// Package kube is a generated GoMock package.
package kube

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	rest "k8s.io/client-go/rest"
)

// MockRESTClientFactory is a mock of RESTClientFactory interface.
type MockRESTClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRESTClientFactoryMockRecorder
}

// MockRESTClientFactoryMockRecorder is the mock recorder for MockRESTClientFactory.
type MockRESTClientFactoryMockRecorder struct {
	mock *MockRESTClientFactory
}

// NewMockRESTClientFactory creates a new mock instance.
func NewMockRESTClientFactory(ctrl *gomock.Controller) *MockRESTClientFactory {
	mock := &MockRESTClientFactory{ctrl: ctrl}
	mock.recorder = &MockRESTClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRESTClientFactory) EXPECT() *MockRESTClientFactoryMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockRESTClientFactory) Client(group, version string) (*rest.RESTClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client", group, version)
	ret0, _ := ret[0].(*rest.RESTClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Client indicates an expected call of Client.
func (mr *MockRESTClientFactoryMockRecorder) Client(group, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockRESTClientFactory)(nil).Client), group, version)
}

// Request mocks base method.
func (m *MockRESTClientFactory) Request(r http.Request) (*rest.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", r)
	ret0, _ := ret[0].(*rest.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockRESTClientFactoryMockRecorder) Request(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockRESTClientFactory)(nil).Request), r)
}
