# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - internal/graph/*.graphqls

# Where should the generated server code go?
exec:
  layout: follow-schema
  dir: internal/graph/generated
  package: generated

# Uncomment to enable federation
# federation:
#   filename: internal/graph/federation.go
#   package: graph

# Where should any generated models go?
model:
  filename: internal/graph/model/models_gen.go
  package: model

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: internal/graph
  package: graph

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
omit_slice_element_pointers: true

# Optional: turn off to make struct-type struct fields not use pointers
# e.g. type Thing struct { FieldA OtherThing } instead of { FieldA *OtherThing }
struct_fields_always_pointers: false

# Optional: turn off to make resolvers return values instead of pointers for structs
# resolvers_always_return_pointers: true

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "k8s.io/api/core/v1"

  - "k8s.io/api/admission/v1"
  - "k8s.io/api/admission/v1beta1"

  - "k8s.io/api/admissionregistration/v1"
  - "k8s.io/api/admissionregistration/v1beta1"

  - "k8s.io/api/apps/v1"
  - "k8s.io/api/apps/v1beta1"
  - "k8s.io/api/apps/v1beta2"

  - "k8s.io/api/auditregistration/v1alpha1"

  - "k8s.io/api/authentication/v1"
  - "k8s.io/api/authentication/v1beta1"

  - "k8s.io/api/authorization/v1"
  - "k8s.io/api/authorization/v1beta1"

  - "k8s.io/api/autoscaling/v1"
  - "k8s.io/api/autoscaling/v2beta1"
  - "k8s.io/api/autoscaling/v2beta2"

  - "k8s.io/api/batch/v1"
  - "k8s.io/api/batch/v1beta1"
  - "k8s.io/api/batch/v2alpha1"

  - "k8s.io/api/certificates/v1beta1"

  - "k8s.io/api/coordination/v1"
  - "k8s.io/api/coordination/v1beta1"

  - "k8s.io/api/core/v1"

  - "k8s.io/api/discovery/v1alpha1"
  - "k8s.io/api/discovery/v1beta1"

  - "k8s.io/api/events/v1beta1"

  - "k8s.io/api/extensions/v1beta1"

  - "k8s.io/api/flowcontrol/v1alpha1"

  - "k8s.io/api/imagepolicy/v1alpha1"

  - "k8s.io/api/networking/v1"
  - "k8s.io/api/networking/v1beta1"

  - "k8s.io/api/node/v1alpha1"
  - "k8s.io/api/node/v1beta1"

  - "k8s.io/api/policy/v1beta1"

  - "k8s.io/api/rbac/v1"
  - "k8s.io/api/rbac/v1alpha1"
  - "k8s.io/api/rbac/v1beta1"

  - "k8s.io/api/scheduling/v1"
  - "k8s.io/api/scheduling/v1alpha1"
  - "k8s.io/api/scheduling/v1beta1"

  - "k8s.io/api/settings/v1alpha1"

  - "k8s.io/api/storage/v1"
  - "k8s.io/api/storage/v1alpha1"
  - "k8s.io/api/storage/v1beta1"

  - "k8s.io/apimachinery/pkg/apis/meta/v1"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
